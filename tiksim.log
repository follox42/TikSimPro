2025-05-12 22:18:40,862 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:18:40,871 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:18:40,871 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:18:40,872 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:18:40,873 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:18:46,648 - TikSimPro - INFO - Analyse des tendances en cours...
2025-05-12 22:18:46,649 - TikSimPro - INFO - Récupération des hashtags tendance...
2025-05-12 22:19:01,796 - TikSimPro - INFO - Récupéré 15 hashtags tendance
2025-05-12 22:19:01,798 - TikSimPro - INFO - Récupération des musiques populaires...
2025-05-12 22:19:12,769 - TikSimPro - INFO - Récupéré 0 musiques populaires
2025-05-12 22:19:12,783 - TikSimPro - INFO - Analyse des tendances terminée
2025-05-12 22:19:12,785 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:19:12,785 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:19:12,786 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:19:12,786 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:19:12,920 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:19:12,920 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: 'dict' object has no attribute 'body'
2025-05-12 22:21:45,640 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:21:45,647 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:21:45,648 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:21:45,648 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:21:45,648 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:21:56,618 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:21:56,618 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:21:56,619 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:21:56,619 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:21:56,777 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:21:56,778 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: 'dict' object has no attribute 'body'
2025-05-12 22:22:14,523 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:22:14,527 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:22:14,527 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:22:14,527 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:22:14,527 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:22:15,499 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:22:15,500 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:22:15,500 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:22:15,501 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:22:15,685 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:22:15,687 - TikSimPro - INFO - Physique initialisée
2025-05-12 22:22:15,687 - TikSimPro - INFO - Génération des sons...
2025-05-12 22:22:18,682 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-12 22:22:18,682 - TikSimPro - INFO - Génération de 1800 frames...
2025-05-12 22:22:22,062 - TikSimPro - INFO - Progression: 60/1800 frames (3.3%, ETA: 98.0s)
2025-05-12 22:22:25,499 - TikSimPro - INFO - Progression: 120/1800 frames (6.7%, ETA: 95.4s)
2025-05-12 22:22:51,454 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:22:51,460 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:22:51,460 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:22:51,460 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:22:51,460 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:22:54,503 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:22:54,504 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:22:54,505 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:22:54,505 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:22:54,664 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:22:54,667 - TikSimPro - INFO - Physique initialisée
2025-05-12 22:22:54,668 - TikSimPro - INFO - Génération des sons...
2025-05-12 22:22:54,669 - TikSimPro - INFO - Sons générés: 0 notes
2025-05-12 22:22:54,669 - TikSimPro - INFO - Génération de 1800 frames...
2025-05-12 22:22:57,784 - TikSimPro - INFO - Progression: 60/1800 frames (3.3%, ETA: 90.3s)
2025-05-12 22:24:00,773 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:24:00,780 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:24:00,781 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:24:00,782 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:24:00,782 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:24:02,480 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:24:02,480 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:24:02,481 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:24:02,481 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:24:02,626 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:24:02,627 - TikSimPro - INFO - Physique initialisée
2025-05-12 22:24:02,627 - TikSimPro - INFO - Génération des sons...
2025-05-12 22:24:02,629 - TikSimPro - INFO - Sons générés: 0 notes
2025-05-12 22:24:02,629 - TikSimPro - INFO - Génération de 1800 frames...
2025-05-12 22:24:06,617 - TikSimPro - INFO - Progression: 60/1800 frames (3.3%, ETA: 115.7s)
2025-05-12 22:24:10,605 - TikSimPro - INFO - Progression: 120/1800 frames (6.7%, ETA: 111.7s)
2025-05-12 22:24:13,642 - TikSimPro - INFO - Progression: 180/1800 frames (10.0%, ETA: 99.1s)
2025-05-12 22:24:17,223 - TikSimPro - INFO - Progression: 240/1800 frames (13.3%, ETA: 94.9s)
2025-05-12 22:24:28,764 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:24:28,769 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:24:28,769 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:24:28,769 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:24:28,769 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:24:30,605 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:24:30,605 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:24:30,605 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:24:30,607 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:24:30,755 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:24:30,759 - TikSimPro - INFO - Physique initialisée
2025-05-12 22:24:30,759 - TikSimPro - INFO - Génération des sons...
2025-05-12 22:24:30,760 - TikSimPro - INFO - Sons générés: 0 notes
2025-05-12 22:24:30,760 - TikSimPro - INFO - Génération de 1800 frames...
2025-05-12 22:24:34,250 - TikSimPro - INFO - Progression: 60/1800 frames (3.3%, ETA: 101.2s)
2025-05-12 22:25:54,523 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:25:54,531 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:25:54,531 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:25:54,533 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:25:54,533 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:25:55,790 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:25:55,791 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:25:55,792 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:25:55,793 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:25:55,933 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:25:55,934 - TikSimPro - INFO - Physique initialisée
2025-05-12 22:25:55,935 - TikSimPro - INFO - Génération des sons...
2025-05-12 22:25:55,936 - TikSimPro - INFO - Sons générés: 0 notes
2025-05-12 22:25:55,936 - TikSimPro - INFO - Génération de 1800 frames...
2025-05-12 22:25:59,164 - TikSimPro - INFO - Progression: 60/1800 frames (3.3%, ETA: 93.6s)
2025-05-12 22:26:09,961 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:26:09,967 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:26:09,967 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:26:09,967 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:26:09,967 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:26:11,753 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:26:11,754 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:26:11,755 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:26:11,755 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:26:11,954 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:26:11,957 - TikSimPro - INFO - Physique initialisée
2025-05-12 22:26:11,958 - TikSimPro - INFO - Génération des sons...
2025-05-12 22:26:11,959 - TikSimPro - INFO - Sons générés: 0 notes
2025-05-12 22:26:11,959 - TikSimPro - INFO - Génération de 1800 frames...
2025-05-12 22:26:15,292 - TikSimPro - INFO - Progression: 60/1800 frames (3.3%, ETA: 96.6s)
2025-05-12 22:26:18,597 - TikSimPro - INFO - Progression: 120/1800 frames (6.7%, ETA: 92.9s)
2025-05-12 22:26:21,923 - TikSimPro - INFO - Progression: 180/1800 frames (10.0%, ETA: 89.7s)
2025-05-12 22:26:25,787 - TikSimPro - INFO - Progression: 240/1800 frames (13.3%, ETA: 89.9s)
2025-05-12 22:26:30,859 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:26:30,863 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:26:30,863 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:26:30,863 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:26:30,863 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:26:41,176 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:26:41,178 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:26:41,178 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:26:41,179 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:26:41,348 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:26:41,349 - TikSimPro - INFO - Physique initialisée
2025-05-12 22:26:41,349 - TikSimPro - INFO - Génération des sons...
2025-05-12 22:26:41,350 - TikSimPro - INFO - Sons générés: 0 notes
2025-05-12 22:26:41,350 - TikSimPro - INFO - Génération de 1800 frames...
2025-05-12 22:26:44,354 - TikSimPro - INFO - Progression: 60/1800 frames (3.3%, ETA: 87.1s)
2025-05-12 22:26:47,812 - TikSimPro - INFO - Progression: 120/1800 frames (6.7%, ETA: 90.4s)
2025-05-12 22:26:50,846 - TikSimPro - INFO - Progression: 180/1800 frames (10.0%, ETA: 85.5s)
2025-05-12 22:26:54,247 - TikSimPro - INFO - Progression: 240/1800 frames (13.3%, ETA: 83.8s)
2025-05-12 22:26:57,684 - TikSimPro - INFO - Progression: 300/1800 frames (16.7%, ETA: 81.7s)
2025-05-12 22:27:01,353 - TikSimPro - INFO - Progression: 360/1800 frames (20.0%, ETA: 80.0s)
2025-05-12 22:27:04,889 - TikSimPro - INFO - Progression: 420/1800 frames (23.3%, ETA: 77.3s)
2025-05-12 22:27:07,968 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:27:07,973 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:27:07,973 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:27:07,973 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:27:07,973 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:27:19,180 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:27:19,180 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:27:19,181 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:27:19,181 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:27:19,322 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:27:19,324 - TikSimPro - INFO - Physique initialisée
2025-05-12 22:27:19,324 - TikSimPro - INFO - Génération des sons...
2025-05-12 22:27:19,325 - TikSimPro - INFO - Sons générés: 0 notes
2025-05-12 22:27:19,325 - TikSimPro - INFO - Génération de 1800 frames...
2025-05-12 22:27:22,385 - TikSimPro - INFO - Progression: 60/1800 frames (3.3%, ETA: 88.7s)
2025-05-12 22:27:25,389 - TikSimPro - INFO - Progression: 120/1800 frames (6.7%, ETA: 84.9s)
2025-05-12 22:27:28,514 - TikSimPro - INFO - Progression: 180/1800 frames (10.0%, ETA: 82.7s)
2025-05-12 22:27:32,087 - TikSimPro - INFO - Progression: 240/1800 frames (13.3%, ETA: 83.0s)
2025-05-12 22:27:35,871 - TikSimPro - INFO - Progression: 300/1800 frames (16.7%, ETA: 82.7s)
2025-05-12 22:28:07,436 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:28:07,440 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:28:07,440 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:28:07,441 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:28:07,441 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:36:21,074 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:36:21,081 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:36:21,082 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:36:21,082 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:36:21,082 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:36:22,018 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:36:22,018 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:36:22,019 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:36:22,020 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:36:22,180 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:36:22,181 - TikSimPro - INFO - Physique initialisée
2025-05-12 22:36:22,182 - TikSimPro - INFO - Génération des sons...
2025-05-12 22:36:22,182 - TikSimPro - INFO - Sons générés: 0 notes
2025-05-12 22:36:22,183 - TikSimPro - INFO - Génération de 1800 frames...
2025-05-12 22:36:25,300 - TikSimPro - INFO - Progression: 60/1800 frames (3.3%, ETA: 90.4s)
2025-05-12 22:36:29,082 - TikSimPro - INFO - Progression: 120/1800 frames (6.7%, ETA: 96.6s)
2025-05-12 22:36:32,294 - TikSimPro - INFO - Progression: 180/1800 frames (10.0%, ETA: 91.0s)
2025-05-12 22:36:35,471 - TikSimPro - INFO - Progression: 240/1800 frames (13.3%, ETA: 86.4s)
2025-05-12 22:36:38,795 - TikSimPro - INFO - Progression: 300/1800 frames (16.7%, ETA: 83.1s)
2025-05-12 22:36:42,825 - TikSimPro - INFO - Progression: 360/1800 frames (20.0%, ETA: 82.6s)
2025-05-12 22:36:46,453 - TikSimPro - INFO - Progression: 420/1800 frames (23.3%, ETA: 79.7s)
2025-05-12 22:36:50,128 - TikSimPro - INFO - Progression: 480/1800 frames (26.7%, ETA: 76.8s)
2025-05-12 22:36:53,845 - TikSimPro - INFO - Progression: 540/1800 frames (30.0%, ETA: 73.9s)
2025-05-12 22:36:57,313 - TikSimPro - INFO - Progression: 600/1800 frames (33.3%, ETA: 70.3s)
2025-05-12 22:37:00,843 - TikSimPro - INFO - Progression: 660/1800 frames (36.7%, ETA: 66.8s)
2025-05-12 22:37:04,095 - TikSimPro - INFO - Progression: 720/1800 frames (40.0%, ETA: 62.9s)
2025-05-12 22:37:07,271 - TikSimPro - INFO - Progression: 780/1800 frames (43.3%, ETA: 59.0s)
2025-05-12 22:37:10,536 - TikSimPro - INFO - Progression: 840/1800 frames (46.7%, ETA: 55.3s)
2025-05-12 22:37:14,002 - TikSimPro - INFO - Progression: 900/1800 frames (50.0%, ETA: 51.8s)
2025-05-12 22:37:17,257 - TikSimPro - INFO - Progression: 960/1800 frames (53.3%, ETA: 48.2s)
2025-05-12 22:37:20,574 - TikSimPro - INFO - Progression: 1020/1800 frames (56.7%, ETA: 44.7s)
2025-05-12 22:37:23,873 - TikSimPro - INFO - Progression: 1080/1800 frames (60.0%, ETA: 41.1s)
2025-05-12 22:37:27,324 - TikSimPro - INFO - Progression: 1140/1800 frames (63.3%, ETA: 37.7s)
2025-05-12 22:37:30,966 - TikSimPro - INFO - Progression: 1200/1800 frames (66.7%, ETA: 34.4s)
2025-05-12 22:37:34,211 - TikSimPro - INFO - Progression: 1260/1800 frames (70.0%, ETA: 30.9s)
2025-05-12 22:37:37,883 - TikSimPro - INFO - Progression: 1320/1800 frames (73.3%, ETA: 27.5s)
2025-05-12 22:37:41,743 - TikSimPro - INFO - Progression: 1380/1800 frames (76.7%, ETA: 24.2s)
2025-05-12 22:37:45,697 - TikSimPro - INFO - Progression: 1440/1800 frames (80.0%, ETA: 20.9s)
2025-05-12 22:37:49,545 - TikSimPro - INFO - Progression: 1500/1800 frames (83.3%, ETA: 17.5s)
2025-05-12 22:37:53,497 - TikSimPro - INFO - Progression: 1560/1800 frames (86.7%, ETA: 14.0s)
2025-05-12 22:37:57,458 - TikSimPro - INFO - Progression: 1620/1800 frames (90.0%, ETA: 10.6s)
2025-05-12 22:38:01,673 - TikSimPro - INFO - Progression: 1680/1800 frames (93.3%, ETA: 7.1s)
2025-05-12 22:38:06,088 - TikSimPro - INFO - Progression: 1740/1800 frames (96.7%, ETA: 3.6s)
2025-05-12 22:38:10,025 - TikSimPro - INFO - Progression: 1799/1800 frames (99.9%, ETA: 0.1s)
2025-05-12 22:38:10,108 - TikSimPro - INFO - Progression: 1800/1800 frames (100.0%, ETA: 0.0s)
2025-05-12 22:38:10,144 - TikSimPro - INFO - Simulation terminée
2025-05-12 22:38:10,144 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-12 22:38:10,145 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: got an unexpected keyword argument 'fps'
2025-05-12 22:38:10,153 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo (méthode alternative): [WinError 2] Le fichier spécifié est introuvable
2025-05-12 22:38:10,154 - TikSimPro - ERROR - Échec de la génération de la vidéo
2025-05-12 22:39:39,412 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:39:39,416 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:39:39,417 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:39:39,417 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:39:39,417 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:40:18,178 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:40:18,182 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:40:18,183 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:40:18,184 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:40:18,184 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:40:19,033 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:40:19,033 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:40:19,034 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:40:19,034 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:40:19,200 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:40:19,202 - TikSimPro - INFO - Physique initialisée
2025-05-12 22:40:19,203 - TikSimPro - INFO - Génération des sons...
2025-05-12 22:40:19,204 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-12 22:40:19,205 - TikSimPro - INFO - Génération de 1800 frames...
2025-05-12 22:40:22,891 - TikSimPro - INFO - Progression: 60/1800 frames (3.3%, ETA: 106.9s)
2025-05-12 22:40:26,314 - TikSimPro - INFO - Progression: 120/1800 frames (6.7%, ETA: 99.5s)
2025-05-12 22:40:29,440 - TikSimPro - INFO - Progression: 180/1800 frames (10.0%, ETA: 92.1s)
2025-05-12 22:40:32,726 - TikSimPro - INFO - Progression: 240/1800 frames (13.3%, ETA: 87.9s)
2025-05-12 22:40:35,859 - TikSimPro - INFO - Progression: 300/1800 frames (16.7%, ETA: 83.3s)
2025-05-12 22:40:39,526 - TikSimPro - INFO - Progression: 360/1800 frames (20.0%, ETA: 81.3s)
2025-05-12 22:40:42,872 - TikSimPro - INFO - Progression: 420/1800 frames (23.3%, ETA: 77.8s)
2025-05-12 22:40:46,037 - TikSimPro - INFO - Progression: 480/1800 frames (26.7%, ETA: 73.8s)
2025-05-12 22:40:49,824 - TikSimPro - INFO - Progression: 540/1800 frames (30.0%, ETA: 71.4s)
2025-05-12 22:40:53,538 - TikSimPro - INFO - Progression: 600/1800 frames (33.3%, ETA: 68.7s)
2025-05-12 22:40:57,266 - TikSimPro - INFO - Progression: 660/1800 frames (36.7%, ETA: 65.7s)
2025-05-12 22:41:00,761 - TikSimPro - INFO - Progression: 720/1800 frames (40.0%, ETA: 62.3s)
2025-05-12 22:41:04,107 - TikSimPro - INFO - Progression: 780/1800 frames (43.3%, ETA: 58.7s)
2025-05-12 22:41:07,789 - TikSimPro - INFO - Progression: 840/1800 frames (46.7%, ETA: 55.5s)
2025-05-12 22:41:11,432 - TikSimPro - INFO - Progression: 900/1800 frames (50.0%, ETA: 52.2s)
2025-05-12 22:41:15,199 - TikSimPro - INFO - Progression: 960/1800 frames (53.3%, ETA: 49.0s)
2025-05-12 22:41:18,588 - TikSimPro - INFO - Progression: 1020/1800 frames (56.7%, ETA: 45.4s)
2025-05-12 22:41:22,156 - TikSimPro - INFO - Progression: 1080/1800 frames (60.0%, ETA: 42.0s)
2025-05-12 22:41:25,864 - TikSimPro - INFO - Progression: 1140/1800 frames (63.3%, ETA: 38.6s)
2025-05-12 22:41:29,876 - TikSimPro - INFO - Progression: 1200/1800 frames (66.7%, ETA: 35.3s)
2025-05-12 22:41:33,526 - TikSimPro - INFO - Progression: 1260/1800 frames (70.0%, ETA: 31.9s)
2025-05-12 22:41:36,665 - TikSimPro - INFO - Progression: 1320/1800 frames (73.3%, ETA: 28.2s)
2025-05-12 22:41:40,134 - TikSimPro - INFO - Progression: 1380/1800 frames (76.7%, ETA: 24.6s)
2025-05-12 22:41:44,210 - TikSimPro - INFO - Progression: 1440/1800 frames (80.0%, ETA: 21.3s)
2025-05-12 22:41:48,068 - TikSimPro - INFO - Progression: 1500/1800 frames (83.3%, ETA: 17.8s)
2025-05-12 22:41:51,746 - TikSimPro - INFO - Progression: 1560/1800 frames (86.7%, ETA: 14.2s)
2025-05-12 22:41:55,401 - TikSimPro - INFO - Progression: 1620/1800 frames (90.0%, ETA: 10.7s)
2025-05-12 22:41:58,824 - TikSimPro - INFO - Progression: 1680/1800 frames (93.3%, ETA: 7.1s)
2025-05-12 22:42:02,164 - TikSimPro - INFO - Progression: 1740/1800 frames (96.7%, ETA: 3.6s)
2025-05-12 22:42:05,720 - TikSimPro - INFO - Progression: 1799/1800 frames (99.9%, ETA: 0.1s)
2025-05-12 22:42:05,783 - TikSimPro - INFO - Progression: 1800/1800 frames (100.0%, ETA: 0.0s)
2025-05-12 22:42:05,817 - TikSimPro - INFO - Simulation terminée
2025-05-12 22:42:05,817 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-12 22:42:05,818 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: name 'ImageSequenceClip' is not defined
2025-05-12 22:42:05,828 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo (méthode alternative): [WinError 2] Le fichier spécifié est introuvable
2025-05-12 22:42:05,828 - TikSimPro - ERROR - Échec de la génération de la vidéo
2025-05-12 22:48:29,035 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:48:29,044 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:48:29,044 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:48:29,045 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:48:29,045 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:48:39,823 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:48:39,824 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:48:39,824 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:48:39,825 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:48:40,089 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:48:40,091 - TikSimPro - INFO - Physique initialisée
2025-05-12 22:48:40,091 - TikSimPro - INFO - Génération des sons...
2025-05-12 22:48:40,093 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-12 22:48:40,094 - TikSimPro - INFO - Génération de 1800 frames...
2025-05-12 22:48:46,250 - TikSimPro - INFO - Progression: 60/1800 frames (3.3%, ETA: 178.5s)
2025-05-12 22:48:51,653 - TikSimPro - INFO - Progression: 120/1800 frames (6.7%, ETA: 161.8s)
2025-05-12 22:48:57,097 - TikSimPro - INFO - Progression: 180/1800 frames (10.0%, ETA: 153.0s)
2025-05-12 22:49:02,585 - TikSimPro - INFO - Progression: 240/1800 frames (13.3%, ETA: 146.2s)
2025-05-12 22:49:07,908 - TikSimPro - INFO - Progression: 300/1800 frames (16.7%, ETA: 139.1s)
2025-05-12 22:49:13,408 - TikSimPro - INFO - Progression: 360/1800 frames (20.0%, ETA: 133.3s)
2025-05-12 22:49:18,664 - TikSimPro - INFO - Progression: 420/1800 frames (23.3%, ETA: 126.7s)
2025-05-12 22:49:23,980 - TikSimPro - INFO - Progression: 480/1800 frames (26.7%, ETA: 120.7s)
2025-05-12 22:49:29,264 - TikSimPro - INFO - Progression: 540/1800 frames (30.0%, ETA: 114.7s)
2025-05-12 22:49:34,456 - TikSimPro - INFO - Progression: 600/1800 frames (33.3%, ETA: 108.7s)
2025-05-12 22:49:39,828 - TikSimPro - INFO - Progression: 660/1800 frames (36.7%, ETA: 103.2s)
2025-05-12 22:49:45,288 - TikSimPro - INFO - Progression: 720/1800 frames (40.0%, ETA: 97.8s)
2025-05-12 22:49:50,680 - TikSimPro - INFO - Progression: 780/1800 frames (43.3%, ETA: 92.3s)
2025-05-12 22:49:56,599 - TikSimPro - INFO - Progression: 840/1800 frames (46.7%, ETA: 87.4s)
2025-05-12 22:50:02,650 - TikSimPro - INFO - Progression: 900/1800 frames (50.0%, ETA: 82.6s)
2025-05-12 22:50:08,451 - TikSimPro - INFO - Progression: 960/1800 frames (53.3%, ETA: 77.3s)
2025-05-12 22:50:13,986 - TikSimPro - INFO - Progression: 1020/1800 frames (56.7%, ETA: 71.8s)
2025-05-12 22:50:20,006 - TikSimPro - INFO - Progression: 1080/1800 frames (60.0%, ETA: 66.6s)
2025-05-12 22:50:25,705 - TikSimPro - INFO - Progression: 1140/1800 frames (63.3%, ETA: 61.1s)
2025-05-12 22:50:31,753 - TikSimPro - INFO - Progression: 1200/1800 frames (66.7%, ETA: 55.8s)
2025-05-12 22:50:38,076 - TikSimPro - INFO - Progression: 1260/1800 frames (70.0%, ETA: 50.6s)
2025-05-12 22:50:43,819 - TikSimPro - INFO - Progression: 1320/1800 frames (73.3%, ETA: 45.0s)
2025-05-12 22:50:49,628 - TikSimPro - INFO - Progression: 1380/1800 frames (76.7%, ETA: 39.4s)
2025-05-12 22:50:55,774 - TikSimPro - INFO - Progression: 1440/1800 frames (80.0%, ETA: 33.9s)
2025-05-12 22:51:02,016 - TikSimPro - INFO - Progression: 1500/1800 frames (83.3%, ETA: 28.4s)
2025-05-12 22:51:07,993 - TikSimPro - INFO - Progression: 1560/1800 frames (86.7%, ETA: 22.8s)
2025-05-12 22:51:13,759 - TikSimPro - INFO - Progression: 1620/1800 frames (90.0%, ETA: 17.1s)
2025-05-12 22:51:19,653 - TikSimPro - INFO - Progression: 1680/1800 frames (93.3%, ETA: 11.4s)
2025-05-12 22:51:25,314 - TikSimPro - INFO - Progression: 1740/1800 frames (96.7%, ETA: 5.7s)
2025-05-12 22:51:31,153 - TikSimPro - INFO - Progression: 1799/1800 frames (99.9%, ETA: 0.1s)
2025-05-12 22:51:31,253 - TikSimPro - INFO - Progression: 1800/1800 frames (100.0%, ETA: 0.0s)
2025-05-12 22:51:31,288 - TikSimPro - INFO - Simulation terminée
2025-05-12 22:51:31,288 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-12 22:51:31,289 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-12 22:51:31,315 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo (méthode alternative): [WinError 2] Le fichier spécifié est introuvable
2025-05-12 22:51:31,316 - TikSimPro - ERROR - Échec de la génération de la vidéo
2025-05-12 22:52:51,762 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 22:52:51,771 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 22:52:51,771 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 22:52:51,771 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 22:52:51,772 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 22:52:54,708 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 22:52:54,709 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 22:52:54,709 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 22:52:54,710 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 22:52:54,908 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 22:52:54,910 - TikSimPro - INFO - Physique initialisée
2025-05-12 22:52:54,912 - TikSimPro - INFO - Génération des sons...
2025-05-12 22:52:54,913 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-12 22:52:54,914 - TikSimPro - INFO - Génération de 1800 frames...
2025-05-12 22:53:00,641 - TikSimPro - INFO - Progression: 60/1800 frames (3.3%, ETA: 166.0s)
2025-05-12 22:53:06,567 - TikSimPro - INFO - Progression: 120/1800 frames (6.7%, ETA: 163.1s)
2025-05-12 22:53:12,179 - TikSimPro - INFO - Progression: 180/1800 frames (10.0%, ETA: 155.4s)
2025-05-12 22:53:17,789 - TikSimPro - INFO - Progression: 240/1800 frames (13.3%, ETA: 148.7s)
2025-05-12 22:53:23,318 - TikSimPro - INFO - Progression: 300/1800 frames (16.7%, ETA: 142.0s)
2025-05-12 22:53:28,786 - TikSimPro - INFO - Progression: 360/1800 frames (20.0%, ETA: 135.5s)
2025-05-12 22:53:34,606 - TikSimPro - INFO - Progression: 420/1800 frames (23.3%, ETA: 130.4s)
2025-05-12 22:53:40,437 - TikSimPro - INFO - Progression: 480/1800 frames (26.7%, ETA: 125.2s)
2025-05-12 22:53:46,235 - TikSimPro - INFO - Progression: 540/1800 frames (30.0%, ETA: 119.7s)
2025-05-12 22:53:51,817 - TikSimPro - INFO - Progression: 600/1800 frames (33.3%, ETA: 113.8s)
2025-05-12 22:53:57,755 - TikSimPro - INFO - Progression: 660/1800 frames (36.7%, ETA: 108.5s)
2025-05-12 22:54:03,564 - TikSimPro - INFO - Progression: 720/1800 frames (40.0%, ETA: 103.0s)
2025-05-12 22:54:09,210 - TikSimPro - INFO - Progression: 780/1800 frames (43.3%, ETA: 97.2s)
2025-05-12 22:54:14,942 - TikSimPro - INFO - Progression: 840/1800 frames (46.7%, ETA: 91.5s)
2025-05-12 22:54:20,711 - TikSimPro - INFO - Progression: 900/1800 frames (50.0%, ETA: 85.8s)
2025-05-12 22:54:26,200 - TikSimPro - INFO - Progression: 960/1800 frames (53.3%, ETA: 79.9s)
2025-05-12 22:54:31,684 - TikSimPro - INFO - Progression: 1020/1800 frames (56.7%, ETA: 74.0s)
2025-05-12 22:54:37,269 - TikSimPro - INFO - Progression: 1080/1800 frames (60.0%, ETA: 68.2s)
2025-05-12 22:54:42,840 - TikSimPro - INFO - Progression: 1140/1800 frames (63.3%, ETA: 62.5s)
2025-05-12 22:54:48,428 - TikSimPro - INFO - Progression: 1200/1800 frames (66.7%, ETA: 56.8s)
2025-05-12 22:54:54,078 - TikSimPro - INFO - Progression: 1260/1800 frames (70.0%, ETA: 51.1s)
2025-05-12 22:54:59,599 - TikSimPro - INFO - Progression: 1320/1800 frames (73.3%, ETA: 45.3s)
2025-05-12 22:55:05,192 - TikSimPro - INFO - Progression: 1380/1800 frames (76.7%, ETA: 39.6s)
2025-05-12 22:55:10,820 - TikSimPro - INFO - Progression: 1440/1800 frames (80.0%, ETA: 34.0s)
2025-05-12 22:55:16,382 - TikSimPro - INFO - Progression: 1500/1800 frames (83.3%, ETA: 28.3s)
2025-05-12 22:55:22,020 - TikSimPro - INFO - Progression: 1560/1800 frames (86.7%, ETA: 22.6s)
2025-05-12 22:55:27,657 - TikSimPro - INFO - Progression: 1620/1800 frames (90.0%, ETA: 17.0s)
2025-05-12 22:55:33,324 - TikSimPro - INFO - Progression: 1680/1800 frames (93.3%, ETA: 11.3s)
2025-05-12 22:55:38,962 - TikSimPro - INFO - Progression: 1740/1800 frames (96.7%, ETA: 5.7s)
2025-05-12 22:55:44,492 - TikSimPro - INFO - Progression: 1799/1800 frames (99.9%, ETA: 0.1s)
2025-05-12 22:55:44,599 - TikSimPro - INFO - Progression: 1800/1800 frames (100.0%, ETA: 0.0s)
2025-05-12 22:55:44,639 - TikSimPro - INFO - Simulation terminée
2025-05-12 22:55:44,640 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-12 22:55:44,642 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-12 22:56:12,441 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747083174.mp4
2025-05-12 22:56:12,787 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: multiple values for argument 'font'
2025-05-12 22:56:13,013 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: multiple values for argument 'font'
2025-05-12 22:56:13,023 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747083174_enhanced.mp4
2025-05-12 22:56:13,024 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747083174_enhanced.mp4
2025-05-12 23:04:25,764 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:04:25,773 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:04:25,774 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:04:25,774 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:04:25,774 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:04:33,942 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:04:33,943 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:04:33,944 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 23:04:33,952 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: list index out of range
2025-05-12 23:04:54,947 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:04:54,957 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:04:54,957 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:04:54,957 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:04:54,959 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:04:57,475 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:04:57,475 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:04:57,476 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 23:04:57,509 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: No module named 'youtubesearchpython'
2025-05-12 23:05:56,447 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:05:56,455 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:05:56,456 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:05:56,456 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:05:56,456 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:05:58,093 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:05:58,094 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:05:58,095 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 23:05:58,885 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: list index out of range
2025-05-12 23:07:11,186 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:07:11,195 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:07:11,195 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:07:11,197 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:07:11,198 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:07:12,754 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:07:12,755 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:07:12,755 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 23:07:13,040 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: list index out of range
2025-05-12 23:08:30,387 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:08:30,396 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:08:30,396 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:08:30,396 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:08:30,397 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:08:32,662 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:08:32,662 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:08:32,663 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 23:08:32,947 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: list index out of range
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1878, in generate_video
    popular_song = trend_analysis["popular_music"][0]  # Exemple : "STAY - Justin Bieber"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^
IndexError: list index out of range
2025-05-12 23:09:50,397 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:09:50,409 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:09:50,409 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:09:50,410 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:09:50,410 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:10:17,892 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:10:17,892 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:10:17,893 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 23:10:18,205 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: list index out of range
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1878, in generate_video
    popular_song = trend_analysis["popular_music"][0]  # Exemple : "STAY - Justin Bieber"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^
IndexError: list index out of range
2025-05-12 23:10:21,334 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:10:21,341 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:10:21,341 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:10:21,341 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:10:21,342 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:10:22,675 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:10:22,676 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:10:22,676 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 23:10:22,985 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: list index out of range
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1878, in generate_video
    popular_song = trend_analysis["popular_music"][0]  # Exemple : "STAY - Justin Bieber"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^
IndexError: list index out of range
2025-05-12 23:11:24,098 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:11:24,112 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:11:24,112 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:11:24,113 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:11:24,113 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:11:25,051 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:11:25,051 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:11:25,052 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 23:11:25,055 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: list index out of range
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1851, in generate_video
    popular_song = trend_analysis["popular_music"][0]  # Exemple : "STAY - Justin Bieber"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^
IndexError: list index out of range
2025-05-12 23:11:51,933 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:11:51,940 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:11:51,941 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:11:51,942 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:11:51,942 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:11:52,316 - TikSimPro - INFO - Analyse des tendances en cours...
2025-05-12 23:11:52,317 - TikSimPro - INFO - Récupération des hashtags tendance...
2025-05-12 23:11:52,319 - selenium.webdriver.common.selenium_manager - DEBUG - Selenium Manager binary found at: C:\Users\nolan\miniforge3\Lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe
2025-05-12 23:11:52,320 - selenium.webdriver.common.selenium_manager - DEBUG - Executing process: C:\Users\nolan\miniforge3\Lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe --browser chrome --debug --language-binding python --output json
2025-05-12 23:11:53,076 - selenium.webdriver.common.selenium_manager - DEBUG - chromedriver not found in PATH
2025-05-12 23:11:53,076 - selenium.webdriver.common.selenium_manager - DEBUG - chrome detected at C:\Program Files\Google\Chrome\Application\chrome.exe
2025-05-12 23:11:53,077 - selenium.webdriver.common.selenium_manager - DEBUG - Running command: wmic datafile where name='C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' get Version /value
2025-05-12 23:11:53,077 - selenium.webdriver.common.selenium_manager - DEBUG - Output: "\r\r\n\r\r\nVersion=136.0.7103.48\r\r\n\r\r\n\r\r\n\r"
2025-05-12 23:11:53,077 - selenium.webdriver.common.selenium_manager - DEBUG - Detected browser: chrome 136.0.7103.48
2025-05-12 23:11:53,077 - selenium.webdriver.common.selenium_manager - DEBUG - Required driver: chromedriver 136.0.7103.92
2025-05-12 23:11:53,079 - selenium.webdriver.common.selenium_manager - DEBUG - chromedriver 136.0.7103.92 already in the cache
2025-05-12 23:11:53,079 - selenium.webdriver.common.selenium_manager - DEBUG - Driver path: C:\Users\nolan\.cache\selenium\chromedriver\win64\136.0.7103.92\chromedriver.exe
2025-05-12 23:11:53,080 - selenium.webdriver.common.selenium_manager - DEBUG - Browser path: C:\Program Files\Google\Chrome\Application\chrome.exe
2025-05-12 23:11:53,097 - selenium.webdriver.common.service - DEBUG - Started executable: `C:\Users\nolan\.cache\selenium\chromedriver\win64\136.0.7103.92\chromedriver.exe` in a child process with pid: 47652 using 0 to output -3
2025-05-12 23:11:53,621 - selenium.webdriver.remote.remote_connection - DEBUG - POST http://localhost:54810/session {'capabilities': {'firstMatch': [{}], 'alwaysMatch': {'browserName': 'chrome', 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, 'browserVersion': None, 'goog:chromeOptions': {'extensions': [], 'binary': 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe', 'args': ['--headless', '--no-sandbox', '--disable-dev-shm-usage', '--disable-notifications']}}}}
2025-05-12 23:11:53,622 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:54810
2025-05-12 23:11:54,264 - urllib3.connectionpool - DEBUG - http://localhost:54810 "POST /session HTTP/1.1" 200 0
2025-05-12 23:11:54,264 - selenium.webdriver.remote.remote_connection - DEBUG - Remote response: status=200 | data={"value":{"capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"136.0.7103.48","chrome":{"chromedriverVersion":"136.0.7103.92 (cb81a4cc5087a8303a6c8827ee2b80b71d26e334-refs/branch-heads/7103@{#1840})","userDataDir":"C:\\Users\\nolan\\AppData\\Local\\Temp\\scoped_dir47652_1060366228"},"fedcm:accounts":true,"goog:chromeOptions":{"debuggerAddress":"localhost:54815"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:extension:minPinLength":true,"webauthn:extension:prf":true,"webauthn:virtualAuthenticators":true},"sessionId":"3bac593c907bd8ac4792188093b2c28d"}} | headers=HTTPHeaderDict({'Content-Length': '882', 'Content-Type': 'application/json; charset=utf-8', 'cache-control': 'no-cache'})
2025-05-12 23:11:54,265 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:11:54,266 - selenium.webdriver.remote.remote_connection - DEBUG - POST http://localhost:54810/session/3bac593c907bd8ac4792188093b2c28d/url {'url': 'https://www.tiktok.com/discover'}
2025-05-12 23:11:57,208 - urllib3.connectionpool - DEBUG - http://localhost:54810 "POST /session/3bac593c907bd8ac4792188093b2c28d/url HTTP/1.1" 200 0
2025-05-12 23:11:57,208 - selenium.webdriver.remote.remote_connection - DEBUG - Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'Content-Length': '14', 'Content-Type': 'application/json; charset=utf-8', 'cache-control': 'no-cache'})
2025-05-12 23:11:57,209 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:12:02,212 - selenium.webdriver.remote.remote_connection - DEBUG - GET http://localhost:54810/session/3bac593c907bd8ac4792188093b2c28d/source {}
2025-05-12 23:12:02,270 - urllib3.connectionpool - DEBUG - http://localhost:54810 "GET /session/3bac593c907bd8ac4792188093b2c28d/source HTTP/1.1" 200 0
2025-05-12 23:12:02,717 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:12:02,825 - selenium.webdriver.remote.remote_connection - DEBUG - DELETE http://localhost:54810/session/3bac593c907bd8ac4792188093b2c28d {}
2025-05-12 23:12:02,940 - urllib3.connectionpool - DEBUG - http://localhost:54810 "DELETE /session/3bac593c907bd8ac4792188093b2c28d HTTP/1.1" 200 0
2025-05-12 23:12:02,941 - selenium.webdriver.remote.remote_connection - DEBUG - Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'Content-Length': '14', 'Content-Type': 'application/json; charset=utf-8', 'cache-control': 'no-cache'})
2025-05-12 23:12:02,941 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:12:05,329 - TikSimPro - INFO - Récupéré 15 hashtags tendance
2025-05-12 23:12:05,331 - TikSimPro - INFO - Recherche des musiques TikTok tendance via YouTube...
2025-05-12 23:12:05,331 - TikSimPro - ERROR - Erreur récupération musique: post() got an unexpected keyword argument 'proxies'
2025-05-12 23:12:05,333 - TikSimPro - INFO - Analyse des tendances terminée
2025-05-12 23:12:05,335 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:12:05,335 - TikSimPro - INFO - Palette de couleurs définie: ['#FFD6E0', '#FFEFCF', '#C1EFFF', '#B5EAEA']
2025-05-12 23:12:05,336 - TikSimPro - INFO - Fréquence des beats définie: 2.0s
2025-05-12 23:12:05,340 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: post() got an unexpected keyword argument 'proxies'
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1854, in generate_video
    audio_file = audio_manager.search_and_download_song(popular_song)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\Desktop\tiktok_test\TikTokAudioManager.py", line 14, in search_and_download_song
    search = VideosSearch(query, limit=1)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\search.py", line 148, in __init__
    self.sync_create()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\search.py", line 29, in sync_create
    self._makeRequest()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\search.py", line 51, in _makeRequest
    request = self.syncPostRequest()
              ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\requests.py", line 20, in syncPostRequest
    return httpx.post(
           ^^^^^^^^^^^
TypeError: post() got an unexpected keyword argument 'proxies'
2025-05-12 23:12:33,265 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:12:33,273 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:12:33,274 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:12:33,274 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:12:33,275 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:12:34,963 - TikSimPro - INFO - Analyse des tendances en cours...
2025-05-12 23:12:34,964 - TikSimPro - INFO - Récupération des hashtags tendance...
2025-05-12 23:12:34,966 - selenium.webdriver.common.selenium_manager - DEBUG - Selenium Manager binary found at: C:\Users\nolan\miniforge3\Lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe
2025-05-12 23:12:34,966 - selenium.webdriver.common.selenium_manager - DEBUG - Executing process: C:\Users\nolan\miniforge3\Lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe --browser chrome --debug --language-binding python --output json
2025-05-12 23:12:35,312 - selenium.webdriver.common.selenium_manager - DEBUG - chromedriver not found in PATH
2025-05-12 23:12:35,313 - selenium.webdriver.common.selenium_manager - DEBUG - chrome detected at C:\Program Files\Google\Chrome\Application\chrome.exe
2025-05-12 23:12:35,313 - selenium.webdriver.common.selenium_manager - DEBUG - Running command: wmic datafile where name='C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' get Version /value
2025-05-12 23:12:35,315 - selenium.webdriver.common.selenium_manager - DEBUG - Output: "\r\r\n\r\r\nVersion=136.0.7103.48\r\r\n\r\r\n\r\r\n\r"
2025-05-12 23:12:35,315 - selenium.webdriver.common.selenium_manager - DEBUG - Detected browser: chrome 136.0.7103.48
2025-05-12 23:12:35,315 - selenium.webdriver.common.selenium_manager - DEBUG - Required driver: chromedriver 136.0.7103.92
2025-05-12 23:12:35,316 - selenium.webdriver.common.selenium_manager - DEBUG - chromedriver 136.0.7103.92 already in the cache
2025-05-12 23:12:35,316 - selenium.webdriver.common.selenium_manager - DEBUG - Driver path: C:\Users\nolan\.cache\selenium\chromedriver\win64\136.0.7103.92\chromedriver.exe
2025-05-12 23:12:35,317 - selenium.webdriver.common.selenium_manager - DEBUG - Browser path: C:\Program Files\Google\Chrome\Application\chrome.exe
2025-05-12 23:12:35,323 - selenium.webdriver.common.service - DEBUG - Started executable: `C:\Users\nolan\.cache\selenium\chromedriver\win64\136.0.7103.92\chromedriver.exe` in a child process with pid: 47472 using 0 to output -3
2025-05-12 23:12:35,833 - selenium.webdriver.remote.remote_connection - DEBUG - POST http://localhost:55027/session {'capabilities': {'firstMatch': [{}], 'alwaysMatch': {'browserName': 'chrome', 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, 'browserVersion': None, 'goog:chromeOptions': {'extensions': [], 'binary': 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe', 'args': ['--headless', '--no-sandbox', '--disable-dev-shm-usage', '--disable-notifications']}}}}
2025-05-12 23:12:35,835 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:55027
2025-05-12 23:12:36,501 - urllib3.connectionpool - DEBUG - http://localhost:55027 "POST /session HTTP/1.1" 200 0
2025-05-12 23:12:36,501 - selenium.webdriver.remote.remote_connection - DEBUG - Remote response: status=200 | data={"value":{"capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"136.0.7103.48","chrome":{"chromedriverVersion":"136.0.7103.92 (cb81a4cc5087a8303a6c8827ee2b80b71d26e334-refs/branch-heads/7103@{#1840})","userDataDir":"C:\\Users\\nolan\\AppData\\Local\\Temp\\scoped_dir47472_1575355794"},"fedcm:accounts":true,"goog:chromeOptions":{"debuggerAddress":"localhost:55030"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:extension:minPinLength":true,"webauthn:extension:prf":true,"webauthn:virtualAuthenticators":true},"sessionId":"29ada351549133e0b8dcddc4203e1ef2"}} | headers=HTTPHeaderDict({'Content-Length': '882', 'Content-Type': 'application/json; charset=utf-8', 'cache-control': 'no-cache'})
2025-05-12 23:12:36,502 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:12:36,503 - selenium.webdriver.remote.remote_connection - DEBUG - POST http://localhost:55027/session/29ada351549133e0b8dcddc4203e1ef2/url {'url': 'https://www.tiktok.com/discover'}
2025-05-12 23:12:39,626 - urllib3.connectionpool - DEBUG - http://localhost:55027 "POST /session/29ada351549133e0b8dcddc4203e1ef2/url HTTP/1.1" 200 0
2025-05-12 23:12:39,627 - selenium.webdriver.remote.remote_connection - DEBUG - Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'Content-Length': '14', 'Content-Type': 'application/json; charset=utf-8', 'cache-control': 'no-cache'})
2025-05-12 23:12:39,627 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:12:44,631 - selenium.webdriver.remote.remote_connection - DEBUG - GET http://localhost:55027/session/29ada351549133e0b8dcddc4203e1ef2/source {}
2025-05-12 23:12:44,755 - urllib3.connectionpool - DEBUG - http://localhost:55027 "GET /session/29ada351549133e0b8dcddc4203e1ef2/source HTTP/1.1" 200 0
2025-05-12 23:12:45,065 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:12:45,182 - selenium.webdriver.remote.remote_connection - DEBUG - DELETE http://localhost:55027/session/29ada351549133e0b8dcddc4203e1ef2 {}
2025-05-12 23:12:45,309 - urllib3.connectionpool - DEBUG - http://localhost:55027 "DELETE /session/29ada351549133e0b8dcddc4203e1ef2 HTTP/1.1" 200 0
2025-05-12 23:12:45,309 - selenium.webdriver.remote.remote_connection - DEBUG - Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'Content-Length': '14', 'Content-Type': 'application/json; charset=utf-8', 'cache-control': 'no-cache'})
2025-05-12 23:12:45,309 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:12:47,685 - TikSimPro - INFO - Récupéré 15 hashtags tendance
2025-05-12 23:12:47,685 - TikSimPro - INFO - Récupération des musiques populaires...
2025-05-12 23:12:47,686 - selenium.webdriver.common.selenium_manager - DEBUG - Selenium Manager binary found at: C:\Users\nolan\miniforge3\Lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe
2025-05-12 23:12:47,687 - selenium.webdriver.common.selenium_manager - DEBUG - Executing process: C:\Users\nolan\miniforge3\Lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe --browser chrome --browser-path C:\Program Files\Google\Chrome\Application\chrome.exe --debug --language-binding python --output json
2025-05-12 23:12:48,037 - selenium.webdriver.common.selenium_manager - DEBUG - chromedriver not found in PATH
2025-05-12 23:12:48,037 - selenium.webdriver.common.selenium_manager - DEBUG - Running command: wmic datafile where name='C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' get Version /value
2025-05-12 23:12:48,039 - selenium.webdriver.common.selenium_manager - DEBUG - Output: "\r\r\n\r\r\nVersion=136.0.7103.48\r\r\n\r\r\n\r\r\n\r"
2025-05-12 23:12:48,039 - selenium.webdriver.common.selenium_manager - DEBUG - Detected browser: chrome 136.0.7103.48
2025-05-12 23:12:48,039 - selenium.webdriver.common.selenium_manager - DEBUG - Required driver: chromedriver 136.0.7103.92
2025-05-12 23:12:48,040 - selenium.webdriver.common.selenium_manager - DEBUG - chromedriver 136.0.7103.92 already in the cache
2025-05-12 23:12:48,040 - selenium.webdriver.common.selenium_manager - DEBUG - Driver path: C:\Users\nolan\.cache\selenium\chromedriver\win64\136.0.7103.92\chromedriver.exe
2025-05-12 23:12:48,041 - selenium.webdriver.common.selenium_manager - DEBUG - Browser path: C:\Program Files\Google\Chrome\Application\chrome.exe
2025-05-12 23:12:48,047 - selenium.webdriver.common.service - DEBUG - Started executable: `C:\Users\nolan\.cache\selenium\chromedriver\win64\136.0.7103.92\chromedriver.exe` in a child process with pid: 25984 using 0 to output -3
2025-05-12 23:12:48,561 - selenium.webdriver.remote.remote_connection - DEBUG - POST http://localhost:55112/session {'capabilities': {'firstMatch': [{}], 'alwaysMatch': {'browserName': 'chrome', 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, 'browserVersion': None, 'goog:chromeOptions': {'extensions': [], 'binary': 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe', 'args': ['--headless', '--no-sandbox', '--disable-dev-shm-usage', '--disable-notifications']}}}}
2025-05-12 23:12:48,562 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:55112
2025-05-12 23:12:49,198 - urllib3.connectionpool - DEBUG - http://localhost:55112 "POST /session HTTP/1.1" 200 0
2025-05-12 23:12:49,199 - selenium.webdriver.remote.remote_connection - DEBUG - Remote response: status=200 | data={"value":{"capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"136.0.7103.48","chrome":{"chromedriverVersion":"136.0.7103.92 (cb81a4cc5087a8303a6c8827ee2b80b71d26e334-refs/branch-heads/7103@{#1840})","userDataDir":"C:\\Users\\nolan\\AppData\\Local\\Temp\\scoped_dir25984_1881219894"},"fedcm:accounts":true,"goog:chromeOptions":{"debuggerAddress":"localhost:55117"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:extension:minPinLength":true,"webauthn:extension:prf":true,"webauthn:virtualAuthenticators":true},"sessionId":"1e7bc9089c66c843c0df104d6b804ce7"}} | headers=HTTPHeaderDict({'Content-Length': '882', 'Content-Type': 'application/json; charset=utf-8', 'cache-control': 'no-cache'})
2025-05-12 23:12:49,200 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:12:49,200 - selenium.webdriver.remote.remote_connection - DEBUG - POST http://localhost:55112/session/1e7bc9089c66c843c0df104d6b804ce7/url {'url': 'https://www.tiktok.com/music'}
2025-05-12 23:12:51,722 - urllib3.connectionpool - DEBUG - http://localhost:55112 "POST /session/1e7bc9089c66c843c0df104d6b804ce7/url HTTP/1.1" 200 0
2025-05-12 23:12:51,722 - selenium.webdriver.remote.remote_connection - DEBUG - Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'Content-Length': '14', 'Content-Type': 'application/json; charset=utf-8', 'cache-control': 'no-cache'})
2025-05-12 23:12:51,723 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:12:56,724 - selenium.webdriver.remote.remote_connection - DEBUG - GET http://localhost:55112/session/1e7bc9089c66c843c0df104d6b804ce7/source {}
2025-05-12 23:12:56,763 - urllib3.connectionpool - DEBUG - http://localhost:55112 "GET /session/1e7bc9089c66c843c0df104d6b804ce7/source HTTP/1.1" 200 0
2025-05-12 23:12:56,939 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:12:56,994 - selenium.webdriver.remote.remote_connection - DEBUG - DELETE http://localhost:55112/session/1e7bc9089c66c843c0df104d6b804ce7 {}
2025-05-12 23:12:57,111 - urllib3.connectionpool - DEBUG - http://localhost:55112 "DELETE /session/1e7bc9089c66c843c0df104d6b804ce7 HTTP/1.1" 200 0
2025-05-12 23:12:57,112 - selenium.webdriver.remote.remote_connection - DEBUG - Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'Content-Length': '14', 'Content-Type': 'application/json; charset=utf-8', 'cache-control': 'no-cache'})
2025-05-12 23:12:57,112 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:12:59,289 - TikSimPro - INFO - Récupéré 0 musiques populaires
2025-05-12 23:12:59,305 - TikSimPro - INFO - Analyse des tendances terminée
2025-05-12 23:12:59,307 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:12:59,307 - TikSimPro - INFO - Palette de couleurs définie: ['#FFF719', '#0CFFE1', '#FF36AB', '#09FFA2']
2025-05-12 23:12:59,309 - TikSimPro - INFO - Fréquence des beats définie: 1.5s
2025-05-12 23:12:59,611 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: list index out of range
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1878, in generate_video
    popular_song = trend_analysis["popular_music"][0]  # Exemple : "STAY - Justin Bieber"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^
IndexError: list index out of range
2025-05-12 23:14:11,244 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:14:11,255 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:14:11,255 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:14:11,255 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:14:11,256 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:14:13,483 - TikSimPro - INFO - Analyse des tendances en cours...
2025-05-12 23:14:13,484 - TikSimPro - INFO - Récupération des hashtags tendance...
2025-05-12 23:14:13,486 - selenium.webdriver.common.selenium_manager - DEBUG - Selenium Manager binary found at: C:\Users\nolan\miniforge3\Lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe
2025-05-12 23:14:13,487 - selenium.webdriver.common.selenium_manager - DEBUG - Executing process: C:\Users\nolan\miniforge3\Lib\site-packages\selenium\webdriver\common\windows\selenium-manager.exe --browser chrome --debug --language-binding python --output json
2025-05-12 23:14:13,837 - selenium.webdriver.common.selenium_manager - DEBUG - chromedriver not found in PATH
2025-05-12 23:14:13,839 - selenium.webdriver.common.selenium_manager - DEBUG - chrome detected at C:\Program Files\Google\Chrome\Application\chrome.exe
2025-05-12 23:14:13,840 - selenium.webdriver.common.selenium_manager - DEBUG - Running command: wmic datafile where name='C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe' get Version /value
2025-05-12 23:14:13,840 - selenium.webdriver.common.selenium_manager - DEBUG - Output: "\r\r\n\r\r\nVersion=136.0.7103.48\r\r\n\r\r\n\r\r\n\r"
2025-05-12 23:14:13,841 - selenium.webdriver.common.selenium_manager - DEBUG - Detected browser: chrome 136.0.7103.48
2025-05-12 23:14:13,841 - selenium.webdriver.common.selenium_manager - DEBUG - Required driver: chromedriver 136.0.7103.92
2025-05-12 23:14:13,841 - selenium.webdriver.common.selenium_manager - DEBUG - chromedriver 136.0.7103.92 already in the cache
2025-05-12 23:14:13,842 - selenium.webdriver.common.selenium_manager - DEBUG - Driver path: C:\Users\nolan\.cache\selenium\chromedriver\win64\136.0.7103.92\chromedriver.exe
2025-05-12 23:14:13,842 - selenium.webdriver.common.selenium_manager - DEBUG - Browser path: C:\Program Files\Google\Chrome\Application\chrome.exe
2025-05-12 23:14:13,849 - selenium.webdriver.common.service - DEBUG - Started executable: `C:\Users\nolan\.cache\selenium\chromedriver\win64\136.0.7103.92\chromedriver.exe` in a child process with pid: 36136 using 0 to output -3
2025-05-12 23:14:14,385 - selenium.webdriver.remote.remote_connection - DEBUG - POST http://localhost:55410/session {'capabilities': {'firstMatch': [{}], 'alwaysMatch': {'browserName': 'chrome', 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>, 'browserVersion': None, 'goog:chromeOptions': {'extensions': [], 'binary': 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe', 'args': ['--headless', '--no-sandbox', '--disable-dev-shm-usage', '--disable-notifications']}}}}
2025-05-12 23:14:14,387 - urllib3.connectionpool - DEBUG - Starting new HTTP connection (1): localhost:55410
2025-05-12 23:14:15,028 - urllib3.connectionpool - DEBUG - http://localhost:55410 "POST /session HTTP/1.1" 200 0
2025-05-12 23:14:15,028 - selenium.webdriver.remote.remote_connection - DEBUG - Remote response: status=200 | data={"value":{"capabilities":{"acceptInsecureCerts":false,"browserName":"chrome","browserVersion":"136.0.7103.48","chrome":{"chromedriverVersion":"136.0.7103.92 (cb81a4cc5087a8303a6c8827ee2b80b71d26e334-refs/branch-heads/7103@{#1840})","userDataDir":"C:\\Users\\nolan\\AppData\\Local\\Temp\\scoped_dir36136_1858150451"},"fedcm:accounts":true,"goog:chromeOptions":{"debuggerAddress":"localhost:55413"},"networkConnectionEnabled":false,"pageLoadStrategy":"normal","platformName":"windows","proxy":{},"setWindowRect":true,"strictFileInteractability":false,"timeouts":{"implicit":0,"pageLoad":300000,"script":30000},"unhandledPromptBehavior":"dismiss and notify","webauthn:extension:credBlob":true,"webauthn:extension:largeBlob":true,"webauthn:extension:minPinLength":true,"webauthn:extension:prf":true,"webauthn:virtualAuthenticators":true},"sessionId":"7c8a802c36527794ba0bb5feeed77dce"}} | headers=HTTPHeaderDict({'Content-Length': '882', 'Content-Type': 'application/json; charset=utf-8', 'cache-control': 'no-cache'})
2025-05-12 23:14:15,029 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:14:15,029 - selenium.webdriver.remote.remote_connection - DEBUG - POST http://localhost:55410/session/7c8a802c36527794ba0bb5feeed77dce/url {'url': 'https://www.tiktok.com/discover'}
2025-05-12 23:14:18,156 - urllib3.connectionpool - DEBUG - http://localhost:55410 "POST /session/7c8a802c36527794ba0bb5feeed77dce/url HTTP/1.1" 200 0
2025-05-12 23:14:18,157 - selenium.webdriver.remote.remote_connection - DEBUG - Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'Content-Length': '14', 'Content-Type': 'application/json; charset=utf-8', 'cache-control': 'no-cache'})
2025-05-12 23:14:18,157 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:14:23,159 - selenium.webdriver.remote.remote_connection - DEBUG - GET http://localhost:55410/session/7c8a802c36527794ba0bb5feeed77dce/source {}
2025-05-12 23:14:23,239 - urllib3.connectionpool - DEBUG - http://localhost:55410 "GET /session/7c8a802c36527794ba0bb5feeed77dce/source HTTP/1.1" 200 0
2025-05-12 23:14:23,701 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:14:23,872 - selenium.webdriver.remote.remote_connection - DEBUG - DELETE http://localhost:55410/session/7c8a802c36527794ba0bb5feeed77dce {}
2025-05-12 23:14:23,939 - urllib3.connectionpool - DEBUG - http://localhost:55410 "DELETE /session/7c8a802c36527794ba0bb5feeed77dce HTTP/1.1" 200 0
2025-05-12 23:14:23,940 - selenium.webdriver.remote.remote_connection - DEBUG - Remote response: status=200 | data={"value":null} | headers=HTTPHeaderDict({'Content-Length': '14', 'Content-Type': 'application/json; charset=utf-8', 'cache-control': 'no-cache'})
2025-05-12 23:14:23,940 - selenium.webdriver.remote.remote_connection - DEBUG - Finished Request
2025-05-12 23:14:26,613 - TikSimPro - INFO - Récupéré 15 hashtags tendance
2025-05-12 23:14:26,614 - TikSimPro - INFO - Recherche des musiques TikTok tendance via YouTube...
2025-05-12 23:14:26,614 - TikSimPro - ERROR - Erreur récupération musique: post() got an unexpected keyword argument 'proxies'
2025-05-12 23:14:26,617 - TikSimPro - INFO - Analyse des tendances terminée
2025-05-12 23:14:26,619 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:14:26,620 - TikSimPro - INFO - Palette de couleurs définie: ['#FFD6E0', '#FFEFCF', '#C1EFFF', '#B5EAEA']
2025-05-12 23:14:26,621 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:14:26,625 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: post() got an unexpected keyword argument 'proxies'
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1854, in generate_video
    audio_file = audio_manager.search_and_download_song(popular_song)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\Desktop\tiktok_test\TikTokAudioManager.py", line 14, in search_and_download_song
    search = VideosSearch(query, limit=1)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\search.py", line 148, in __init__
    self.sync_create()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\search.py", line 29, in sync_create
    self._makeRequest()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\search.py", line 51, in _makeRequest
    request = self.syncPostRequest()
              ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\requests.py", line 20, in syncPostRequest
    return httpx.post(
           ^^^^^^^^^^^
TypeError: post() got an unexpected keyword argument 'proxies'
2025-05-12 23:15:12,267 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:15:12,276 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:15:12,277 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:15:12,277 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:15:12,278 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:15:14,062 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:15:14,062 - TikSimPro - INFO - Palette de couleurs définie: ['#FFD6E0', '#FFEFCF', '#C1EFFF', '#B5EAEA']
2025-05-12 23:15:14,063 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:15:14,065 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: 'VideosSearch' object has no attribute 'proxies'
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1854, in generate_video
    audio_file = audio_manager.search_and_download_song(popular_song)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\Desktop\tiktok_test\TikTokAudioManager.py", line 14, in search_and_download_song
    search = VideosSearch(query, limit=1)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\search.py", line 148, in __init__
    self.sync_create()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\search.py", line 29, in sync_create
    self._makeRequest()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\search.py", line 51, in _makeRequest
    request = self.syncPostRequest()
              ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\requests.py", line 22, in syncPostRequest
    client = httpx.Client(proxies=self.proxies) if self.proxies else httpx.Client()
                                                   ^^^^^^^^^^^^
AttributeError: 'VideosSearch' object has no attribute 'proxies'
2025-05-12 23:15:49,703 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:15:49,709 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:15:49,711 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:15:49,711 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:15:49,711 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:15:51,435 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:15:51,437 - TikSimPro - INFO - Palette de couleurs définie: ['#FFD6E0', '#FFEFCF', '#C1EFFF', '#B5EAEA']
2025-05-12 23:15:51,437 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:15:51,440 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: 'VideosSearch' object has no attribute 'proxies'
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1854, in generate_video
    audio_file = audio_manager.search_and_download_song(popular_song)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\Desktop\tiktok_test\TikTokAudioManager.py", line 14, in search_and_download_song
    search = VideosSearch(query, limit=1)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\search.py", line 148, in __init__
    self.sync_create()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\search.py", line 29, in sync_create
    self._makeRequest()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\search.py", line 51, in _makeRequest
    request = self.syncPostRequest()
              ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\requests.py", line 22, in syncPostRequest
    client = httpx.Client(proxies=self.proxy) if self.proxies else httpx.Client()
                                                 ^^^^^^^^^^^^
AttributeError: 'VideosSearch' object has no attribute 'proxies'
2025-05-12 23:15:59,516 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:15:59,525 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:15:59,525 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:15:59,525 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:15:59,526 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:16:04,610 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:16:04,618 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:16:04,619 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:16:04,619 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:16:04,620 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:16:04,622 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:16:04,623 - TikSimPro - INFO - Palette de couleurs définie: ['#FFD6E0', '#FFEFCF', '#C1EFFF', '#B5EAEA']
2025-05-12 23:16:04,623 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:16:05,436 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: 'VideosSearch' object has no attribute 'headers'
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1854, in generate_video
    audio_file = audio_manager.search_and_download_song(popular_song)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\Desktop\tiktok_test\TikTokAudioManager.py", line 14, in search_and_download_song
    search = VideosSearch(query, limit=1)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\search.py", line 148, in __init__
    self.sync_create()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\search.py", line 29, in sync_create
    self._makeRequest()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\search.py", line 51, in _makeRequest
    request = self.syncPostRequest()
              ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\youtubesearchpython\core\requests.py", line 23, in syncPostRequest
    response = client.post(self.url, headers=self.headers, json=self.data)
                                             ^^^^^^^^^^^^
AttributeError: 'VideosSearch' object has no attribute 'headers'
2025-05-12 23:16:24,543 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:16:24,550 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:16:24,551 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:16:24,551 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:16:24,551 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:16:25,541 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:16:25,542 - TikSimPro - INFO - Palette de couleurs définie: ['#FFD6E0', '#FFEFCF', '#C1EFFF', '#B5EAEA']
2025-05-12 23:16:25,543 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:16:26,279 - httpcore.connection - DEBUG - connect_tcp.started host='www.youtube.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 23:16:26,508 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002540DF79D90>
2025-05-12 23:16:26,509 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000002540E4D0250> server_hostname='www.youtube.com' timeout=5.0
2025-05-12 23:16:26,563 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000002540E323EC0>
2025-05-12 23:16:26,564 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 23:16:26,565 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 23:16:26,565 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 23:16:26,566 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 23:16:26,566 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 23:16:27,010 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=UTF-8'), (b'Vary', b'Origin'), (b'Vary', b'X-Origin'), (b'Vary', b'Referer'), (b'Content-Encoding', b'br'), (b'Date', b'Mon, 12 May 2025 21:16:26 GMT'), (b'Server', b'scaffolding on HTTPServer2'), (b'Content-Length', b'42304'), (b'X-XSS-Protection', b'0'), (b'X-Frame-Options', b'SAMEORIGIN'), (b'X-Content-Type-Options', b'nosniff'), (b'Alt-Svc', b'h3=":443"; ma=2592000,h3-29=":443"; ma=2592000')])
2025-05-12 23:16:27,012 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:16:27,013 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 23:16:27,035 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 23:16:27,036 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 23:16:27,036 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 23:16:27,038 - httpcore.connection - DEBUG - close.started
2025-05-12 23:16:27,038 - httpcore.connection - DEBUG - close.complete
2025-05-12 23:16:33,792 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [0;31mERROR:[0m Postprocessing: ffprobe and ffmpeg not found. Please install or provide the path using --ffmpeg-location
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3586, in process_info
    replace_info_dict(self.post_process(dl_filename, info_dict, files_to_move))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3770, in post_process
    info = self.run_all_pps('post_process', info, additional_pps=info.get('__postprocessors'))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3752, in run_all_pps
    info = self.run_pp(pp, info)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3730, in run_pp
    files_to_delete, infodict = pp.run(infodict)
                                ^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\postprocessor\common.py", line 23, in run
    ret = func(self, info, *args, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\postprocessor\common.py", line 128, in wrapper
    return func(self, info)
           ^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\postprocessor\ffmpeg.py", line 493, in run
    filecodec = self.get_audio_codec(path)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\postprocessor\ffmpeg.py", line 241, in get_audio_codec
    raise PostProcessingError('ffprobe and ffmpeg not found. Please install or provide the path using --ffmpeg-location')
yt_dlp.utils.PostProcessingError: ffprobe and ffmpeg not found. Please install or provide the path using --ffmpeg-location

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1854, in generate_video
    audio_file = audio_manager.search_and_download_song(popular_song)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\Desktop\tiktok_test\TikTokAudioManager.py", line 36, in search_and_download_song
    ydl.download([video_url])
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3634, in download
    self.__download_wrapper(self.extract_info)(
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3607, in wrapper
    res = func(*args, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 1642, in extract_info
    return self.__extract_info(url, self.get_info_extractor(key), download, extra_info, process)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 1653, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 1809, in __extract_info
    return self.process_ie_result(ie_result, download, extra_info)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 1868, in process_ie_result
    ie_result = self.process_video_result(ie_result, download=download)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3040, in process_video_result
    self.process_info(new_info)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 185, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3588, in process_info
    self.report_error(f'Postprocessing: {err}')
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 1111, in report_error
    self.trouble(f'{self._format_err("ERROR:", self.Styles.ERROR)} {message}', *args, **kwargs)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 1050, in trouble
    raise DownloadError(message, exc_info)
yt_dlp.utils.DownloadError: [0;31mERROR:[0m Postprocessing: ffprobe and ffmpeg not found. Please install or provide the path using --ffmpeg-location
2025-05-12 23:17:43,190 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:17:43,199 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:17:43,199 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:17:43,200 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:17:43,200 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:17:44,814 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:17:44,814 - TikSimPro - INFO - Palette de couleurs définie: ['#FFD6E0', '#FFEFCF', '#C1EFFF', '#B5EAEA']
2025-05-12 23:17:44,815 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:17:45,517 - httpcore.connection - DEBUG - connect_tcp.started host='www.youtube.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 23:17:45,567 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000017B653F5DC0>
2025-05-12 23:17:45,568 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x0000017B659502D0> server_hostname='www.youtube.com' timeout=5.0
2025-05-12 23:17:45,614 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000017B65916630>
2025-05-12 23:17:45,614 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 23:17:45,615 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 23:17:45,615 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 23:17:45,616 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 23:17:45,616 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 23:17:46,397 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=UTF-8'), (b'Vary', b'Origin'), (b'Vary', b'X-Origin'), (b'Vary', b'Referer'), (b'Content-Encoding', b'br'), (b'Date', b'Mon, 12 May 2025 21:17:45 GMT'), (b'Server', b'scaffolding on HTTPServer2'), (b'Content-Length', b'42385'), (b'X-XSS-Protection', b'0'), (b'X-Frame-Options', b'SAMEORIGIN'), (b'X-Content-Type-Options', b'nosniff'), (b'Alt-Svc', b'h3=":443"; ma=2592000,h3-29=":443"; ma=2592000')])
2025-05-12 23:17:46,399 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:17:46,400 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 23:17:46,447 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 23:17:46,448 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 23:17:46,448 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 23:17:46,450 - httpcore.connection - DEBUG - close.started
2025-05-12 23:17:46,452 - httpcore.connection - DEBUG - close.complete
2025-05-12 23:17:52,316 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [0;31mERROR:[0m Postprocessing: ffprobe and ffmpeg not found. Please install or provide the path using --ffmpeg-location
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3586, in process_info
    replace_info_dict(self.post_process(dl_filename, info_dict, files_to_move))
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3770, in post_process
    info = self.run_all_pps('post_process', info, additional_pps=info.get('__postprocessors'))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3752, in run_all_pps
    info = self.run_pp(pp, info)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3730, in run_pp
    files_to_delete, infodict = pp.run(infodict)
                                ^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\postprocessor\common.py", line 23, in run
    ret = func(self, info, *args, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\postprocessor\common.py", line 128, in wrapper
    return func(self, info)
           ^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\postprocessor\ffmpeg.py", line 493, in run
    filecodec = self.get_audio_codec(path)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\postprocessor\ffmpeg.py", line 241, in get_audio_codec
    raise PostProcessingError('ffprobe and ffmpeg not found. Please install or provide the path using --ffmpeg-location')
yt_dlp.utils.PostProcessingError: ffprobe and ffmpeg not found. Please install or provide the path using --ffmpeg-location

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1854, in generate_video
    audio_file = audio_manager.search_and_download_song(popular_song)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\Desktop\tiktok_test\TikTokAudioManager.py", line 36, in search_and_download_song
    ydl.download([video_url])
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3634, in download
    self.__download_wrapper(self.extract_info)(
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3607, in wrapper
    res = func(*args, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 1642, in extract_info
    return self.__extract_info(url, self.get_info_extractor(key), download, extra_info, process)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 1653, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 1809, in __extract_info
    return self.process_ie_result(ie_result, download, extra_info)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 1868, in process_ie_result
    ie_result = self.process_video_result(ie_result, download=download)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3040, in process_video_result
    self.process_info(new_info)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 185, in wrapper
    return func(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 3588, in process_info
    self.report_error(f'Postprocessing: {err}')
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 1111, in report_error
    self.trouble(f'{self._format_err("ERROR:", self.Styles.ERROR)} {message}', *args, **kwargs)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\yt_dlp\YoutubeDL.py", line 1050, in trouble
    raise DownloadError(message, exc_info)
yt_dlp.utils.DownloadError: [0;31mERROR:[0m Postprocessing: ffprobe and ffmpeg not found. Please install or provide the path using --ffmpeg-location
2025-05-12 23:18:36,549 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:18:36,557 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:18:36,558 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:18:36,558 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:18:36,558 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:18:38,483 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 30s
2025-05-12 23:18:38,483 - TikSimPro - INFO - Palette de couleurs définie: ['#FFD6E0', '#FFEFCF', '#C1EFFF', '#B5EAEA']
2025-05-12 23:18:38,484 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:18:39,219 - httpcore.connection - DEBUG - connect_tcp.started host='www.youtube.com' port=443 local_address=None timeout=5.0 socket_options=None
2025-05-12 23:18:39,256 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001E894962720>
2025-05-12 23:18:39,257 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x000001E8949702D0> server_hostname='www.youtube.com' timeout=5.0
2025-05-12 23:18:39,303 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x000001E894936630>
2025-05-12 23:18:39,304 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2025-05-12 23:18:39,304 - httpcore.http11 - DEBUG - send_request_headers.complete
2025-05-12 23:18:39,304 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2025-05-12 23:18:39,305 - httpcore.http11 - DEBUG - send_request_body.complete
2025-05-12 23:18:39,305 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2025-05-12 23:18:39,957 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=UTF-8'), (b'Vary', b'Origin'), (b'Vary', b'X-Origin'), (b'Vary', b'Referer'), (b'Content-Encoding', b'br'), (b'Date', b'Mon, 12 May 2025 21:18:39 GMT'), (b'Server', b'scaffolding on HTTPServer2'), (b'Content-Length', b'42143'), (b'X-XSS-Protection', b'0'), (b'X-Frame-Options', b'SAMEORIGIN'), (b'X-Content-Type-Options', b'nosniff'), (b'Alt-Svc', b'h3=":443"; ma=2592000,h3-29=":443"; ma=2592000')])
2025-05-12 23:18:39,959 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:18:39,961 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2025-05-12 23:18:40,004 - httpcore.http11 - DEBUG - receive_response_body.complete
2025-05-12 23:18:40,005 - httpcore.http11 - DEBUG - response_closed.started
2025-05-12 23:18:40,006 - httpcore.http11 - DEBUG - response_closed.complete
2025-05-12 23:18:40,007 - httpcore.connection - DEBUG - close.started
2025-05-12 23:18:40,009 - httpcore.connection - DEBUG - close.complete
2025-05-12 23:19:01,150 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1137)
           2	RESUME(arg=0, lineno=1137)
           4	LOAD_FAST(arg=0, lineno=1140)
           6	LOAD_CONST(arg=1, lineno=1140)
           8	BINARY_SUBSCR(arg=None, lineno=1140)
          12	STORE_FAST(arg=3, lineno=1140)
          14	LOAD_FAST(arg=1, lineno=1141)
          16	UNARY_NEGATIVE(arg=None, lineno=1141)
          18	LOAD_FAST(arg=3, lineno=1141)
          20	SWAP(arg=2, lineno=1141)
          22	COPY(arg=2, lineno=1141)
          24	COMPARE_OP(arg=26, lineno=1141)
          28	POP_JUMP_IF_FALSE(arg=5, lineno=1141)
          30	LOAD_FAST(arg=1, lineno=1141)
          32	COMPARE_OP(arg=26, lineno=1141)
          36	POP_JUMP_IF_FALSE(arg=5, lineno=1141)
          38	JUMP_FORWARD(arg=2, lineno=1141)
>         40	POP_TOP(arg=None, lineno=1141)
          42	JUMP_FORWARD(arg=2, lineno=1141)
>         44	LOAD_CONST(arg=1, lineno=1142)
          46	STORE_FAST(arg=3, lineno=1142)
>         48	LOAD_FAST(arg=0, lineno=1144)
          50	LOAD_CONST(arg=2, lineno=1144)
          52	BINARY_SUBSCR(arg=None, lineno=1144)
          56	STORE_FAST(arg=4, lineno=1144)
          58	LOAD_FAST(arg=1, lineno=1145)
          60	UNARY_NEGATIVE(arg=None, lineno=1145)
          62	LOAD_FAST(arg=4, lineno=1145)
          64	SWAP(arg=2, lineno=1145)
          66	COPY(arg=2, lineno=1145)
          68	COMPARE_OP(arg=26, lineno=1145)
          72	POP_JUMP_IF_FALSE(arg=5, lineno=1145)
          74	LOAD_FAST(arg=1, lineno=1145)
          76	COMPARE_OP(arg=26, lineno=1145)
          80	POP_JUMP_IF_FALSE(arg=5, lineno=1145)
          82	JUMP_FORWARD(arg=2, lineno=1145)
>         84	POP_TOP(arg=None, lineno=1145)
          86	JUMP_FORWARD(arg=2, lineno=1145)
>         88	LOAD_CONST(arg=1, lineno=1146)
          90	STORE_FAST(arg=4, lineno=1146)
>         92	LOAD_FAST(arg=2, lineno=1148)
          94	POP_JUMP_IF_FALSE(arg=43, lineno=1148)
          96	LOAD_GLOBAL(arg=1, lineno=1149)
         106	LOAD_ATTR(arg=2, lineno=1149)
         126	LOAD_FAST(arg=3, lineno=1149)
         128	CALL(arg=1, lineno=1149)
         136	LOAD_GLOBAL(arg=1, lineno=1149)
         146	LOAD_ATTR(arg=2, lineno=1149)
         166	LOAD_FAST(arg=4, lineno=1149)
         168	CALL(arg=1, lineno=1149)
         176	COMPARE_OP(arg=55, lineno=1149)
         180	RETURN_VALUE(arg=None, lineno=1149)
>        182	LOAD_GLOBAL(arg=1, lineno=1151)
         192	LOAD_ATTR(arg=4, lineno=1151)
         212	LOAD_FAST(arg=3, lineno=1151)
         214	CALL(arg=1, lineno=1151)
         222	LOAD_GLOBAL(arg=1, lineno=1151)
         232	LOAD_ATTR(arg=4, lineno=1151)
         252	LOAD_FAST(arg=4, lineno=1151)
         254	CALL(arg=1, lineno=1151)
         262	COMPARE_OP(arg=55, lineno=1151)
         266	RETURN_VALUE(arg=None, lineno=1151)
2025-05-12 23:19:01,151 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:01,152 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:01,152 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:01,153 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1137)
2025-05-12 23:19:01,153 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,154 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=1137)
2025-05-12 23:19:01,154 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,154 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1140)
2025-05-12 23:19:01,155 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,155 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=1140)
2025-05-12 23:19:01,155 - numba.core.byteflow - DEBUG - stack ['$x4.0']
2025-05-12 23:19:01,156 - numba.core.byteflow - DEBUG - dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=1140)
2025-05-12 23:19:01,156 - numba.core.byteflow - DEBUG - stack ['$x4.0', '$const6.1.1']
2025-05-12 23:19:01,156 - numba.core.byteflow - DEBUG - dispatch pc=12, inst=STORE_FAST(arg=3, lineno=1140)
2025-05-12 23:19:01,160 - numba.core.byteflow - DEBUG - stack ['$8binary_subscr.2']
2025-05-12 23:19:01,161 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1141)
2025-05-12 23:19:01,162 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,162 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=UNARY_NEGATIVE(arg=None, lineno=1141)
2025-05-12 23:19:01,163 - numba.core.byteflow - DEBUG - stack ['$threshold14.3']
2025-05-12 23:19:01,163 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=3, lineno=1141)
2025-05-12 23:19:01,164 - numba.core.byteflow - DEBUG - stack ['$16unary_negative.4']
2025-05-12 23:19:01,164 - numba.core.byteflow - DEBUG - dispatch pc=20, inst=SWAP(arg=2, lineno=1141)
2025-05-12 23:19:01,165 - numba.core.byteflow - DEBUG - stack ['$16unary_negative.4', '$x018.5']
2025-05-12 23:19:01,165 - numba.core.byteflow - DEBUG - dispatch pc=22, inst=COPY(arg=2, lineno=1141)
2025-05-12 23:19:01,166 - numba.core.byteflow - DEBUG - stack ['$x018.5', '$16unary_negative.4']
2025-05-12 23:19:01,166 - numba.core.byteflow - DEBUG - dispatch pc=24, inst=COMPARE_OP(arg=26, lineno=1141)
2025-05-12 23:19:01,166 - numba.core.byteflow - DEBUG - stack ['$x018.5', '$16unary_negative.4', '$x018.5']
2025-05-12 23:19:01,167 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=POP_JUMP_IF_FALSE(arg=5, lineno=1141)
2025-05-12 23:19:01,167 - numba.core.byteflow - DEBUG - stack ['$x018.5', '$24compare_op.6']
2025-05-12 23:19:01,167 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=30, stack=('$x018.5',), blockstack=(), npush=0), Edge(pc=40, stack=('$x018.5',), blockstack=(), npush=0)]
2025-05-12 23:19:01,169 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=1), State(pc_initial=40 nstack_initial=1)])
2025-05-12 23:19:01,169 - numba.core.byteflow - DEBUG - stack: ['$phi30.0']
2025-05-12 23:19:01,170 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=1)
2025-05-12 23:19:01,170 - numba.core.byteflow - DEBUG - dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=1141)
2025-05-12 23:19:01,171 - numba.core.byteflow - DEBUG - stack ['$phi30.0']
2025-05-12 23:19:01,171 - numba.core.byteflow - DEBUG - dispatch pc=32, inst=COMPARE_OP(arg=26, lineno=1141)
2025-05-12 23:19:01,172 - numba.core.byteflow - DEBUG - stack ['$phi30.0', '$threshold30.1']
2025-05-12 23:19:01,172 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=POP_JUMP_IF_FALSE(arg=5, lineno=1141)
2025-05-12 23:19:01,173 - numba.core.byteflow - DEBUG - stack ['$32compare_op.2']
2025-05-12 23:19:01,173 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:01,174 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=1), State(pc_initial=38 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
2025-05-12 23:19:01,174 - numba.core.byteflow - DEBUG - stack: ['$phi40.0']
2025-05-12 23:19:01,174 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=40 nstack_initial=1)
2025-05-12 23:19:01,175 - numba.core.byteflow - DEBUG - dispatch pc=40, inst=POP_TOP(arg=None, lineno=1141)
2025-05-12 23:19:01,175 - numba.core.byteflow - DEBUG - stack ['$phi40.0']
2025-05-12 23:19:01,176 - numba.core.byteflow - DEBUG - dispatch pc=42, inst=JUMP_FORWARD(arg=2, lineno=1141)
2025-05-12 23:19:01,177 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,177 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:01,177 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
2025-05-12 23:19:01,178 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:01,178 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=38 nstack_initial=0)
2025-05-12 23:19:01,178 - numba.core.byteflow - DEBUG - dispatch pc=38, inst=JUMP_FORWARD(arg=2, lineno=1141)
2025-05-12 23:19:01,179 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,179 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:01,180 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2025-05-12 23:19:01,180 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:01,181 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=48 nstack_initial=0)
2025-05-12 23:19:01,181 - numba.core.byteflow - DEBUG - dispatch pc=48, inst=LOAD_FAST(arg=0, lineno=1144)
2025-05-12 23:19:01,181 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,182 - numba.core.byteflow - DEBUG - dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=1144)
2025-05-12 23:19:01,182 - numba.core.byteflow - DEBUG - stack ['$x48.0']
2025-05-12 23:19:01,182 - numba.core.byteflow - DEBUG - dispatch pc=52, inst=BINARY_SUBSCR(arg=None, lineno=1144)
2025-05-12 23:19:01,183 - numba.core.byteflow - DEBUG - stack ['$x48.0', '$const50.1.2']
2025-05-12 23:19:01,183 - numba.core.byteflow - DEBUG - dispatch pc=56, inst=STORE_FAST(arg=4, lineno=1144)
2025-05-12 23:19:01,183 - numba.core.byteflow - DEBUG - stack ['$52binary_subscr.2']
2025-05-12 23:19:01,184 - numba.core.byteflow - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=1, lineno=1145)
2025-05-12 23:19:01,184 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,184 - numba.core.byteflow - DEBUG - dispatch pc=60, inst=UNARY_NEGATIVE(arg=None, lineno=1145)
2025-05-12 23:19:01,184 - numba.core.byteflow - DEBUG - stack ['$threshold58.3']
2025-05-12 23:19:01,185 - numba.core.byteflow - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=4, lineno=1145)
2025-05-12 23:19:01,185 - numba.core.byteflow - DEBUG - stack ['$60unary_negative.4']
2025-05-12 23:19:01,185 - numba.core.byteflow - DEBUG - dispatch pc=64, inst=SWAP(arg=2, lineno=1145)
2025-05-12 23:19:01,186 - numba.core.byteflow - DEBUG - stack ['$60unary_negative.4', '$x162.5']
2025-05-12 23:19:01,186 - numba.core.byteflow - DEBUG - dispatch pc=66, inst=COPY(arg=2, lineno=1145)
2025-05-12 23:19:01,186 - numba.core.byteflow - DEBUG - stack ['$x162.5', '$60unary_negative.4']
2025-05-12 23:19:01,188 - numba.core.byteflow - DEBUG - dispatch pc=68, inst=COMPARE_OP(arg=26, lineno=1145)
2025-05-12 23:19:01,188 - numba.core.byteflow - DEBUG - stack ['$x162.5', '$60unary_negative.4', '$x162.5']
2025-05-12 23:19:01,190 - numba.core.byteflow - DEBUG - dispatch pc=72, inst=POP_JUMP_IF_FALSE(arg=5, lineno=1145)
2025-05-12 23:19:01,191 - numba.core.byteflow - DEBUG - stack ['$x162.5', '$68compare_op.6']
2025-05-12 23:19:01,191 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=74, stack=('$x162.5',), blockstack=(), npush=0), Edge(pc=84, stack=('$x162.5',), blockstack=(), npush=0)]
2025-05-12 23:19:01,192 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=74 nstack_initial=1), State(pc_initial=84 nstack_initial=1)])
2025-05-12 23:19:01,192 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=74 nstack_initial=1), State(pc_initial=84 nstack_initial=1)])
2025-05-12 23:19:01,194 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:01,194 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=44 nstack_initial=0)
2025-05-12 23:19:01,195 - numba.core.byteflow - DEBUG - dispatch pc=44, inst=LOAD_CONST(arg=1, lineno=1142)
2025-05-12 23:19:01,195 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,196 - numba.core.byteflow - DEBUG - dispatch pc=46, inst=STORE_FAST(arg=3, lineno=1142)
2025-05-12 23:19:01,197 - numba.core.byteflow - DEBUG - stack ['$const44.0.1']
2025-05-12 23:19:01,197 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:01,199 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=1), State(pc_initial=84 nstack_initial=1), State(pc_initial=48 nstack_initial=0)])
2025-05-12 23:19:01,200 - numba.core.byteflow - DEBUG - stack: ['$phi74.0']
2025-05-12 23:19:01,201 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=1)
2025-05-12 23:19:01,201 - numba.core.byteflow - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=1145)
2025-05-12 23:19:01,202 - numba.core.byteflow - DEBUG - stack ['$phi74.0']
2025-05-12 23:19:01,202 - numba.core.byteflow - DEBUG - dispatch pc=76, inst=COMPARE_OP(arg=26, lineno=1145)
2025-05-12 23:19:01,203 - numba.core.byteflow - DEBUG - stack ['$phi74.0', '$threshold74.1']
2025-05-12 23:19:01,203 - numba.core.byteflow - DEBUG - dispatch pc=80, inst=POP_JUMP_IF_FALSE(arg=5, lineno=1145)
2025-05-12 23:19:01,204 - numba.core.byteflow - DEBUG - stack ['$76compare_op.2']
2025-05-12 23:19:01,205 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0), Edge(pc=92, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:01,205 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=84 nstack_initial=1), State(pc_initial=48 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
2025-05-12 23:19:01,206 - numba.core.byteflow - DEBUG - stack: ['$phi84.0']
2025-05-12 23:19:01,207 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=84 nstack_initial=1)
2025-05-12 23:19:01,207 - numba.core.byteflow - DEBUG - dispatch pc=84, inst=POP_TOP(arg=None, lineno=1145)
2025-05-12 23:19:01,207 - numba.core.byteflow - DEBUG - stack ['$phi84.0']
2025-05-12 23:19:01,208 - numba.core.byteflow - DEBUG - dispatch pc=86, inst=JUMP_FORWARD(arg=2, lineno=1145)
2025-05-12 23:19:01,210 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,211 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:01,211 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=82 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
2025-05-12 23:19:01,211 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=82 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
2025-05-12 23:19:01,213 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:01,214 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=82 nstack_initial=0)
2025-05-12 23:19:01,214 - numba.core.byteflow - DEBUG - dispatch pc=82, inst=JUMP_FORWARD(arg=2, lineno=1145)
2025-05-12 23:19:01,220 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,222 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=88, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:01,223 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
2025-05-12 23:19:01,224 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:01,225 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=92 nstack_initial=0)
2025-05-12 23:19:01,225 - numba.core.byteflow - DEBUG - dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=1148)
2025-05-12 23:19:01,226 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,226 - numba.core.byteflow - DEBUG - dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=43, lineno=1148)
2025-05-12 23:19:01,227 - numba.core.byteflow - DEBUG - stack ['$zero_pos92.0']
2025-05-12 23:19:01,228 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=182, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:01,228 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=182 nstack_initial=0)])
2025-05-12 23:19:01,230 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=182 nstack_initial=0)])
2025-05-12 23:19:01,230 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:01,231 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=88 nstack_initial=0)
2025-05-12 23:19:01,232 - numba.core.byteflow - DEBUG - dispatch pc=88, inst=LOAD_CONST(arg=1, lineno=1146)
2025-05-12 23:19:01,232 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,233 - numba.core.byteflow - DEBUG - dispatch pc=90, inst=STORE_FAST(arg=4, lineno=1146)
2025-05-12 23:19:01,234 - numba.core.byteflow - DEBUG - stack ['$const88.0.1']
2025-05-12 23:19:01,234 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:01,235 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=182 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
2025-05-12 23:19:01,235 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:01,236 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=96 nstack_initial=0)
2025-05-12 23:19:01,236 - numba.core.byteflow - DEBUG - dispatch pc=96, inst=LOAD_GLOBAL(arg=1, lineno=1149)
2025-05-12 23:19:01,237 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,237 - numba.core.byteflow - DEBUG - dispatch pc=106, inst=LOAD_ATTR(arg=2, lineno=1149)
2025-05-12 23:19:01,238 - numba.core.byteflow - DEBUG - stack ['$null$96.1', '$96load_global.0']
2025-05-12 23:19:01,238 - numba.core.byteflow - DEBUG - dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=1149)
2025-05-12 23:19:01,238 - numba.core.byteflow - DEBUG - stack ['$null$96.1', '$106load_attr.2']
2025-05-12 23:19:01,239 - numba.core.byteflow - DEBUG - dispatch pc=128, inst=CALL(arg=1, lineno=1149)
2025-05-12 23:19:01,244 - numba.core.byteflow - DEBUG - stack ['$null$96.1', '$106load_attr.2', '$x0126.3']
2025-05-12 23:19:01,246 - numba.core.byteflow - DEBUG - dispatch pc=136, inst=LOAD_GLOBAL(arg=1, lineno=1149)
2025-05-12 23:19:01,247 - numba.core.byteflow - DEBUG - stack ['$128call.4']
2025-05-12 23:19:01,247 - numba.core.byteflow - DEBUG - dispatch pc=146, inst=LOAD_ATTR(arg=2, lineno=1149)
2025-05-12 23:19:01,247 - numba.core.byteflow - DEBUG - stack ['$128call.4', '$null$136.6', '$136load_global.5']
2025-05-12 23:19:01,247 - numba.core.byteflow - DEBUG - dispatch pc=166, inst=LOAD_FAST(arg=4, lineno=1149)
2025-05-12 23:19:01,248 - numba.core.byteflow - DEBUG - stack ['$128call.4', '$null$136.6', '$146load_attr.7']
2025-05-12 23:19:01,249 - numba.core.byteflow - DEBUG - dispatch pc=168, inst=CALL(arg=1, lineno=1149)
2025-05-12 23:19:01,249 - numba.core.byteflow - DEBUG - stack ['$128call.4', '$null$136.6', '$146load_attr.7', '$x1166.8']
2025-05-12 23:19:01,250 - numba.core.byteflow - DEBUG - dispatch pc=176, inst=COMPARE_OP(arg=55, lineno=1149)
2025-05-12 23:19:01,250 - numba.core.byteflow - DEBUG - stack ['$128call.4', '$168call.9']
2025-05-12 23:19:01,250 - numba.core.byteflow - DEBUG - dispatch pc=180, inst=RETURN_VALUE(arg=None, lineno=1149)
2025-05-12 23:19:01,251 - numba.core.byteflow - DEBUG - stack ['$176compare_op.10']
2025-05-12 23:19:01,252 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:01,252 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
2025-05-12 23:19:01,253 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:01,254 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=182 nstack_initial=0)
2025-05-12 23:19:01,254 - numba.core.byteflow - DEBUG - dispatch pc=182, inst=LOAD_GLOBAL(arg=1, lineno=1151)
2025-05-12 23:19:01,255 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:01,256 - numba.core.byteflow - DEBUG - dispatch pc=192, inst=LOAD_ATTR(arg=4, lineno=1151)
2025-05-12 23:19:01,256 - numba.core.byteflow - DEBUG - stack ['$null$182.1', '$182load_global.0']
2025-05-12 23:19:01,257 - numba.core.byteflow - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=3, lineno=1151)
2025-05-12 23:19:01,257 - numba.core.byteflow - DEBUG - stack ['$null$182.1', '$192load_attr.2']
2025-05-12 23:19:01,258 - numba.core.byteflow - DEBUG - dispatch pc=214, inst=CALL(arg=1, lineno=1151)
2025-05-12 23:19:01,258 - numba.core.byteflow - DEBUG - stack ['$null$182.1', '$192load_attr.2', '$x0212.3']
2025-05-12 23:19:01,259 - numba.core.byteflow - DEBUG - dispatch pc=222, inst=LOAD_GLOBAL(arg=1, lineno=1151)
2025-05-12 23:19:01,259 - numba.core.byteflow - DEBUG - stack ['$214call.4']
2025-05-12 23:19:01,260 - numba.core.byteflow - DEBUG - dispatch pc=232, inst=LOAD_ATTR(arg=4, lineno=1151)
2025-05-12 23:19:01,260 - numba.core.byteflow - DEBUG - stack ['$214call.4', '$null$222.6', '$222load_global.5']
2025-05-12 23:19:01,261 - numba.core.byteflow - DEBUG - dispatch pc=252, inst=LOAD_FAST(arg=4, lineno=1151)
2025-05-12 23:19:01,261 - numba.core.byteflow - DEBUG - stack ['$214call.4', '$null$222.6', '$232load_attr.7']
2025-05-12 23:19:01,262 - numba.core.byteflow - DEBUG - dispatch pc=254, inst=CALL(arg=1, lineno=1151)
2025-05-12 23:19:01,263 - numba.core.byteflow - DEBUG - stack ['$214call.4', '$null$222.6', '$232load_attr.7', '$x1252.8']
2025-05-12 23:19:01,264 - numba.core.byteflow - DEBUG - dispatch pc=262, inst=COMPARE_OP(arg=55, lineno=1151)
2025-05-12 23:19:01,264 - numba.core.byteflow - DEBUG - stack ['$214call.4', '$254call.9']
2025-05-12 23:19:01,264 - numba.core.byteflow - DEBUG - dispatch pc=266, inst=RETURN_VALUE(arg=None, lineno=1151)
2025-05-12 23:19:01,265 - numba.core.byteflow - DEBUG - stack ['$262compare_op.10']
2025-05-12 23:19:01,265 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:01,266 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=92 nstack_initial=0)])
2025-05-12 23:19:01,266 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:01,267 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=1): {'$phi30.0'},
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=1): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=1): {'$phi74.0'},
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=1): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set()})
2025-05-12 23:19:01,269 - numba.core.byteflow - DEBUG - defmap: {'$phi30.0': State(pc_initial=0 nstack_initial=0),
 '$phi40.0': State(pc_initial=0 nstack_initial=0),
 '$phi74.0': State(pc_initial=48 nstack_initial=0),
 '$phi84.0': State(pc_initial=48 nstack_initial=0)}
2025-05-12 23:19:01,270 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$x018.5', State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$x018.5', State(pc_initial=0 nstack_initial=0))},
             '$phi74.0': {('$x162.5', State(pc_initial=48 nstack_initial=0))},
             '$phi84.0': {('$x162.5', State(pc_initial=48 nstack_initial=0))}})
2025-05-12 23:19:01,271 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi30.0': {('$x018.5', State(pc_initial=0 nstack_initial=0))},
             '$phi40.0': {('$x018.5', State(pc_initial=0 nstack_initial=0))},
             '$phi74.0': {('$x162.5', State(pc_initial=48 nstack_initial=0))},
             '$phi84.0': {('$x162.5', State(pc_initial=48 nstack_initial=0))}})
2025-05-12 23:19:01,272 - numba.core.byteflow - DEBUG - keep phismap: {'$phi30.0': {('$x018.5', State(pc_initial=0 nstack_initial=0))},
 '$phi74.0': {('$x162.5', State(pc_initial=48 nstack_initial=0))}}
2025-05-12 23:19:01,273 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi30.0': '$x018.5'},
             State(pc_initial=48 nstack_initial=0): {'$phi74.0': '$x162.5'}})
2025-05-12 23:19:01,274 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:01,275 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'res': '$const6.1.1'}), (8, {'index': '$const6.1.1', 'target': '$x4.0', 'res': '$8binary_subscr.2'}), (12, {'value': '$8binary_subscr.2'}), (14, {'res': '$threshold14.3'}), (16, {'value': '$threshold14.3', 'res': '$16unary_negative.4'}), (18, {'res': '$x018.5'}), (24, {'lhs': '$16unary_negative.4', 'rhs': '$x018.5', 'res': '$24compare_op.6'}), (28, {'pred': '$24compare_op.6'})), outgoing_phis={'$phi30.0': '$x018.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ('$x018.5',), 40: ('$x018.5',)})
2025-05-12 23:19:01,275 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=30 nstack_initial=1):
AdaptBlockInfo(insts=((30, {'res': '$threshold30.1'}), (32, {'lhs': '$phi30.0', 'rhs': '$threshold30.1', 'res': '$32compare_op.2'}), (36, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: (), 48: ()})
2025-05-12 23:19:01,276 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: ()})
2025-05-12 23:19:01,277 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=40 nstack_initial=1):
AdaptBlockInfo(insts=((42, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ()})
2025-05-12 23:19:01,277 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$const44.0.1'}), (46, {'value': '$const44.0.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ()})
2025-05-12 23:19:01,278 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$x48.0'}), (50, {'res': '$const50.1.2'}), (52, {'index': '$const50.1.2', 'target': '$x48.0', 'res': '$52binary_subscr.2'}), (56, {'value': '$52binary_subscr.2'}), (58, {'res': '$threshold58.3'}), (60, {'value': '$threshold58.3', 'res': '$60unary_negative.4'}), (62, {'res': '$x162.5'}), (68, {'lhs': '$60unary_negative.4', 'rhs': '$x162.5', 'res': '$68compare_op.6'}), (72, {'pred': '$68compare_op.6'})), outgoing_phis={'$phi74.0': '$x162.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={74: ('$x162.5',), 84: ('$x162.5',)})
2025-05-12 23:19:01,278 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=74 nstack_initial=1):
AdaptBlockInfo(insts=((74, {'res': '$threshold74.1'}), (76, {'lhs': '$phi74.0', 'rhs': '$threshold74.1', 'res': '$76compare_op.2'}), (80, {'pred': '$76compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: (), 92: ()})
2025-05-12 23:19:01,278 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=((82, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ()})
2025-05-12 23:19:01,279 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=84 nstack_initial=1):
AdaptBlockInfo(insts=((86, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: ()})
2025-05-12 23:19:01,279 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$const88.0.1'}), (90, {'value': '$const88.0.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: ()})
2025-05-12 23:19:01,280 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$zero_pos92.0'}), (94, {'pred': '$zero_pos92.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 182: ()})
2025-05-12 23:19:01,280 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'idx': 0, 'res': '$96load_global.0'}), (106, {'item': '$96load_global.0', 'res': '$106load_attr.2'}), (126, {'res': '$x0126.3'}), (128, {'func': '$106load_attr.2', 'args': ['$x0126.3'], 'kw_names': None, 'res': '$128call.4'}), (136, {'idx': 0, 'res': '$136load_global.5'}), (146, {'item': '$136load_global.5', 'res': '$146load_attr.7'}), (166, {'res': '$x1166.8'}), (168, {'func': '$146load_attr.7', 'args': ['$x1166.8'], 'kw_names': None, 'res': '$168call.9'}), (176, {'lhs': '$128call.4', 'rhs': '$168call.9', 'res': '$176compare_op.10'}), (180, {'retval': '$176compare_op.10', 'castval': '$180return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:01,281 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'idx': 0, 'res': '$182load_global.0'}), (192, {'item': '$182load_global.0', 'res': '$192load_attr.2'}), (212, {'res': '$x0212.3'}), (214, {'func': '$192load_attr.2', 'args': ['$x0212.3'], 'kw_names': None, 'res': '$214call.4'}), (222, {'idx': 0, 'res': '$222load_global.5'}), (232, {'item': '$222load_global.5', 'res': '$232load_attr.7'}), (252, {'res': '$x1252.8'}), (254, {'func': '$232load_attr.7', 'args': ['$x1252.8'], 'kw_names': None, 'res': '$254call.9'}), (262, {'lhs': '$214call.4', 'rhs': '$254call.9', 'res': '$262compare_op.10'}), (266, {'retval': '$262compare_op.10', 'castval': '$266return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:01,283 - numba.core.interpreter - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    $const6.1.1 = const(int, 0)              ['$const6.1.1']
    x0 = getitem(value=x, index=$const6.1.1, fn=<built-in function getitem>) ['$const6.1.1', 'x', 'x0']
    $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$16unary_negative.4', 'threshold']
    $24compare_op.6 = $16unary_negative.4 <= x0 ['$16unary_negative.4', '$24compare_op.6', 'x0']
    bool28 = global(bool: <class 'bool'>)    ['bool28']
    $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$24compare_op.6', '$28pred', 'bool28']
    $phi30.0 = x0                            ['$phi30.0', 'x0']
    branch $28pred, 30, 40                   ['$28pred']
label 30:
    $32compare_op.2 = $phi30.0 <= threshold  ['$32compare_op.2', '$phi30.0', 'threshold']
    bool36 = global(bool: <class 'bool'>)    ['bool36']
    $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None) ['$32compare_op.2', '$36pred', 'bool36']
    branch $36pred, 38, 48                   ['$36pred']
label 38:
    jump 44                                  []
label 40:
    jump 48                                  []
label 44:
    x0 = const(int, 0)                       ['x0']
    jump 48                                  []
label 48:
    $const50.1.2 = const(int, -1)            ['$const50.1.2']
    x1 = getitem(value=x, index=$const50.1.2, fn=<built-in function getitem>) ['$const50.1.2', 'x', 'x1']
    $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold) ['$60unary_negative.4', 'threshold']
    $68compare_op.6 = $60unary_negative.4 <= x1 ['$60unary_negative.4', '$68compare_op.6', 'x1']
    bool72 = global(bool: <class 'bool'>)    ['bool72']
    $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$68compare_op.6', '$72pred', 'bool72']
    $phi74.0 = x1                            ['$phi74.0', 'x1']
    branch $72pred, 74, 84                   ['$72pred']
label 74:
    $76compare_op.2 = $phi74.0 <= threshold  ['$76compare_op.2', '$phi74.0', 'threshold']
    bool80 = global(bool: <class 'bool'>)    ['bool80']
    $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None) ['$76compare_op.2', '$80pred', 'bool80']
    branch $80pred, 82, 92                   ['$80pred']
label 82:
    jump 88                                  []
label 84:
    jump 92                                  []
label 88:
    x1 = const(int, 0)                       ['x1']
    jump 92                                  []
label 92:
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None) ['$94pred', 'bool94', 'zero_pos']
    branch $94pred, 96, 182                  ['$94pred']
label 96:
    $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$96load_global.0']
    $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit) ['$106load_attr.2', '$96load_global.0']
    $128call.4 = call $106load_attr.2(x0, func=$106load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None) ['$106load_attr.2', '$128call.4', 'x0']
    $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$136load_global.5']
    $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit) ['$136load_global.5', '$146load_attr.7']
    $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$146load_attr.7', '$168call.9', 'x1']
    $176compare_op.10 = $128call.4 != $168call.9 ['$128call.4', '$168call.9', '$176compare_op.10']
    $180return_value.11 = cast(value=$176compare_op.10) ['$176compare_op.10', '$180return_value.11']
    return $180return_value.11               ['$180return_value.11']
label 182:
    $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$182load_global.0']
    $192load_attr.2 = getattr(value=$182load_global.0, attr=sign) ['$182load_global.0', '$192load_attr.2']
    $214call.4 = call $192load_attr.2(x0, func=$192load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None) ['$192load_attr.2', '$214call.4', 'x0']
    $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$222load_global.5']
    $232load_attr.7 = getattr(value=$222load_global.5, attr=sign) ['$222load_global.5', '$232load_attr.7']
    $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None) ['$232load_attr.7', '$254call.9', 'x1']
    $262compare_op.10 = $214call.4 != $254call.9 ['$214call.4', '$254call.9', '$262compare_op.10']
    $266return_value.11 = cast(value=$262compare_op.10) ['$262compare_op.10', '$266return_value.11']
    return $266return_value.11               ['$266return_value.11']

2025-05-12 23:19:03,461 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1154)
           2	RESUME(arg=0, lineno=1154)
           4	LOAD_GLOBAL(arg=1, lineno=1170)
          14	LOAD_FAST(arg=0, lineno=1170)
          16	LOAD_FAST(arg=1, lineno=1170)
          18	LOAD_FAST(arg=2, lineno=1170)
          20	CALL(arg=3, lineno=1170)
          28	LOAD_FAST(arg=3, lineno=1170)
          30	LOAD_CONST(arg=1, lineno=1170)
          32	LOAD_CONST(arg=1, lineno=1170)
          34	STORE_SLICE(arg=None, lineno=1170)
          36	RETURN_CONST(arg=1, lineno=1170)
2025-05-12 23:19:03,461 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:03,461 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:03,462 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:03,462 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1154)
2025-05-12 23:19:03,462 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:03,462 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=1154)
2025-05-12 23:19:03,462 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:03,463 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1170)
2025-05-12 23:19:03,463 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:03,463 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=1170)
2025-05-12 23:19:03,463 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:03,465 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=1170)
2025-05-12 23:19:03,465 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$x14.2']
2025-05-12 23:19:03,465 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=1170)
2025-05-12 23:19:03,465 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$x14.2', '$threshold16.3']
2025-05-12 23:19:03,465 - numba.core.byteflow - DEBUG - dispatch pc=20, inst=CALL(arg=3, lineno=1170)
2025-05-12 23:19:03,465 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$x14.2', '$threshold16.3', '$zero_pos18.4']
2025-05-12 23:19:03,465 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=LOAD_FAST(arg=3, lineno=1170)
2025-05-12 23:19:03,466 - numba.core.byteflow - DEBUG - stack ['$20call.5']
2025-05-12 23:19:03,466 - numba.core.byteflow - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1170)
2025-05-12 23:19:03,466 - numba.core.byteflow - DEBUG - stack ['$20call.5', '$y28.6']
2025-05-12 23:19:03,466 - numba.core.byteflow - DEBUG - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=1170)
2025-05-12 23:19:03,467 - numba.core.byteflow - DEBUG - stack ['$20call.5', '$y28.6', '$const30.7.1']
2025-05-12 23:19:03,467 - numba.core.byteflow - DEBUG - dispatch pc=34, inst=STORE_SLICE(arg=None, lineno=1170)
2025-05-12 23:19:03,467 - numba.core.byteflow - DEBUG - stack ['$20call.5', '$y28.6', '$const30.7.1', '$const32.8.1']
2025-05-12 23:19:03,468 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=RETURN_CONST(arg=1, lineno=1170)
2025-05-12 23:19:03,468 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:03,468 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:03,469 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:03,471 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:03,473 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:03,473 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:03,473 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:03,473 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:03,473 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:03,474 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:03,474 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$x14.2'}), (16, {'res': '$threshold16.3'}), (18, {'res': '$zero_pos18.4'}), (20, {'func': '$4load_global.0', 'args': ['$x14.2', '$threshold16.3', '$zero_pos18.4'], 'kw_names': None, 'res': '$20call.5'}), (28, {'res': '$y28.6'}), (30, {'res': '$const30.7.1'}), (32, {'res': '$const32.8.1'}), (34, {'start': '$const30.7.1', 'end': '$const32.8.1', 'container': '$y28.6', 'value': '$20call.5', 'res': '$34store_slice.10', 'slicevar': '$34store_slice.9'}), (36, {'retval': '$const36.11', 'castval': '$36return_const.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:03,475 - numba.core.interpreter - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    y = arg(3, name=y)                       ['y']
    $4load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x000001E8A6703A40>) ['$4load_global.0']
    $20call.5 = call $4load_global.0(x, threshold, zero_pos, func=$4load_global.0, args=[Var(x, audio.py:1154), Var(threshold, audio.py:1154), Var(zero_pos, audio.py:1154)], kws=(), vararg=None, varkwarg=None, target=None) ['$20call.5', '$4load_global.0', 'threshold', 'x', 'zero_pos']
    $const30.7.1 = const(NoneType, None)     ['$const30.7.1']
    $const32.8.1 = const(NoneType, None)     ['$const32.8.1']
    $34store_slice.9 = global(slice: <class 'slice'>) ['$34store_slice.9']
    $34store_slice.10 = call $34store_slice.9($const30.7.1, $const32.8.1, func=$34store_slice.9, args=(Var($const30.7.1, audio.py:1170), Var($const32.8.1, audio.py:1170)), kws=(), vararg=None, varkwarg=None, target=None) ['$34store_slice.10', '$34store_slice.9', '$const30.7.1', '$const32.8.1']
    y[$34store_slice.10] = $20call.5         ['$20call.5', '$34store_slice.10', 'y']
    $const36.11 = const(NoneType, None)      ['$const36.11']
    $36return_const.12 = cast(value=$const36.11) ['$36return_const.12', '$const36.11']
    return $36return_const.12                ['$36return_const.12']

2025-05-12 23:19:03,485 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:03,486 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8509E20>
2025-05-12 23:19:03,487 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:03,487 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:03,487 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:03,487 - numba.core.ssa - DEBUG - on stmt: y = arg(3, name=y)
2025-05-12 23:19:03,487 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x000001E8A6703A40>)
2025-05-12 23:19:03,488 - numba.core.ssa - DEBUG - on stmt: $20call.5 = call $4load_global.0(x, threshold, zero_pos, func=$4load_global.0, args=[Var(x, audio.py:1154), Var(threshold, audio.py:1154), Var(zero_pos, audio.py:1154)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,489 - numba.core.ssa - DEBUG - on stmt: $const30.7.1 = const(NoneType, None)
2025-05-12 23:19:03,489 - numba.core.ssa - DEBUG - on stmt: $const32.8.1 = const(NoneType, None)
2025-05-12 23:19:03,489 - numba.core.ssa - DEBUG - on stmt: $34store_slice.9 = global(slice: <class 'slice'>)
2025-05-12 23:19:03,491 - numba.core.ssa - DEBUG - on stmt: $34store_slice.10 = call $34store_slice.9($const30.7.1, $const32.8.1, func=$34store_slice.9, args=(Var($const30.7.1, audio.py:1170), Var($const32.8.1, audio.py:1170)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,491 - numba.core.ssa - DEBUG - on stmt: y[slice(None, None, None)] = $20call.5
2025-05-12 23:19:03,492 - numba.core.ssa - DEBUG - on stmt: $const36.11 = const(NoneType, None)
2025-05-12 23:19:03,492 - numba.core.ssa - DEBUG - on stmt: $36return_const.12 = cast(value=$const36.11)
2025-05-12 23:19:03,493 - numba.core.ssa - DEBUG - on stmt: return $36return_const.12
2025-05-12 23:19:03,493 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$20call.5': [(<numba.core.ir.Assign object at 0x000001E8A850BF20>,
                            0)],
             '$34store_slice.10': [(<numba.core.ir.Assign object at 0x000001E8A85244A0>,
                                    0)],
             '$34store_slice.9': [(<numba.core.ir.Assign object at 0x000001E8A8524380>,
                                   0)],
             '$36return_const.12': [(<numba.core.ir.Assign object at 0x000001E8A8524710>,
                                     0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A850BAA0>,
                                  0)],
             '$const30.7.1': [(<numba.core.ir.Assign object at 0x000001E8A8524140>,
                               0)],
             '$const32.8.1': [(<numba.core.ir.Assign object at 0x000001E8A8524260>,
                               0)],
             '$const36.11': [(<numba.core.ir.Assign object at 0x000001E8A85245F0>,
                              0)],
             'threshold': [(<numba.core.ir.Assign object at 0x000001E8A850B770>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x000001E8A850B680>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x000001E8A850B950>, 0)],
             'zero_pos': [(<numba.core.ir.Assign object at 0x000001E8A850B860>,
                           0)]})
2025-05-12 23:19:03,496 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8509E20>
2025-05-12 23:19:03,594 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          26	STORE_FAST(arg=3, lineno=2)
          28	LOAD_GLOBAL(arg=2, lineno=3)
          38	LOAD_ATTR(arg=5, lineno=3)
          58	LOAD_FAST(arg=3, lineno=3)
          60	LOAD_GLOBAL(arg=2, lineno=3)
          70	LOAD_ATTR(arg=6, lineno=3)
          90	KW_NAMES(arg=1, lineno=3)
          92	CALL(arg=2, lineno=3)
         100	STORE_FAST(arg=4, lineno=3)
         102	LOAD_CONST(arg=2, lineno=4)
         104	LOAD_FAST(arg=4, lineno=4)
         106	LOAD_CONST(arg=0, lineno=4)
         108	LOAD_CONST(arg=3, lineno=4)
         110	STORE_SLICE(arg=None, lineno=4)
         112	LOAD_CONST(arg=2, lineno=5)
         114	LOAD_FAST(arg=4, lineno=5)
         116	LOAD_CONST(arg=2, lineno=5)
         118	LOAD_CONST(arg=0, lineno=5)
         120	STORE_SLICE(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         132	LOAD_GLOBAL(arg=11, lineno=6)
         142	LOAD_CONST(arg=2, lineno=6)
         144	LOAD_CONST(arg=4, lineno=6)
         146	CALL(arg=2, lineno=6)
         154	UNARY_NEGATIVE(arg=None, lineno=6)
         156	LOAD_FAST(arg=3, lineno=6)
         158	LOAD_CONST(arg=2, lineno=6)
         160	BINARY_SUBSCR(arg=None, lineno=6)
         164	LOAD_GLOBAL(arg=13, lineno=6)
         174	LOAD_CONST(arg=2, lineno=6)
         176	LOAD_CONST(arg=2, lineno=6)
         178	CALL(arg=2, lineno=6)
         186	BINARY_OP(arg=10, lineno=6)
         190	CALL(arg=2, lineno=6)
         198	GET_ITER(arg=None, lineno=6)
>        200	FOR_ITER(arg=4, lineno=6)
         204	STORE_FAST(arg=5, lineno=6)
         206	LOAD_CONST(arg=2, lineno=7)
         208	STORE_FAST(arg=6, lineno=7)
         210	JUMP_BACKWARD(arg=6, lineno=7)
>        212	END_FOR(arg=None, lineno=6)
         214	LOAD_FAST(arg=4, lineno=8)
         216	RETURN_VALUE(arg=None, lineno=8)
2025-05-12 23:19:03,594 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:03,595 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:03,595 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:03,595 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-05-12 23:19:03,595 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:03,596 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2025-05-12 23:19:03,596 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:03,596 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2025-05-12 23:19:03,596 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:03,597 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2025-05-12 23:19:03,597 - numba.core.byteflow - DEBUG - stack ['$x4.0']
2025-05-12 23:19:03,597 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=STORE_FAST(arg=3, lineno=2)
2025-05-12 23:19:03,597 - numba.core.byteflow - DEBUG - stack ['$6load_attr.1']
2025-05-12 23:19:03,598 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=LOAD_GLOBAL(arg=2, lineno=3)
2025-05-12 23:19:03,598 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:03,598 - numba.core.byteflow - DEBUG - dispatch pc=38, inst=LOAD_ATTR(arg=5, lineno=3)
2025-05-12 23:19:03,598 - numba.core.byteflow - DEBUG - stack ['$28load_global.2']
2025-05-12 23:19:03,598 - numba.core.byteflow - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=3, lineno=3)
2025-05-12 23:19:03,598 - numba.core.byteflow - DEBUG - stack ['$null$38.4', '$38load_attr.3']
2025-05-12 23:19:03,599 - numba.core.byteflow - DEBUG - dispatch pc=60, inst=LOAD_GLOBAL(arg=2, lineno=3)
2025-05-12 23:19:03,599 - numba.core.byteflow - DEBUG - stack ['$null$38.4', '$38load_attr.3', '$full_shape058.5']
2025-05-12 23:19:03,599 - numba.core.byteflow - DEBUG - dispatch pc=70, inst=LOAD_ATTR(arg=6, lineno=3)
2025-05-12 23:19:03,599 - numba.core.byteflow - DEBUG - stack ['$null$38.4', '$38load_attr.3', '$full_shape058.5', '$60load_global.6']
2025-05-12 23:19:03,599 - numba.core.byteflow - DEBUG - dispatch pc=90, inst=KW_NAMES(arg=1, lineno=3)
2025-05-12 23:19:03,600 - numba.core.byteflow - DEBUG - stack ['$null$38.4', '$38load_attr.3', '$full_shape058.5', '$70load_attr.7']
2025-05-12 23:19:03,600 - numba.core.byteflow - DEBUG - dispatch pc=92, inst=CALL(arg=2, lineno=3)
2025-05-12 23:19:03,601 - numba.core.byteflow - DEBUG - stack ['$null$38.4', '$38load_attr.3', '$full_shape058.5', '$70load_attr.7']
2025-05-12 23:19:03,601 - numba.core.byteflow - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=4, lineno=3)
2025-05-12 23:19:03,601 - numba.core.byteflow - DEBUG - stack ['$92call.8']
2025-05-12 23:19:03,602 - numba.core.byteflow - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=2, lineno=4)
2025-05-12 23:19:03,602 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:03,602 - numba.core.byteflow - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=4)
2025-05-12 23:19:03,602 - numba.core.byteflow - DEBUG - stack ['$const102.9.2']
2025-05-12 23:19:03,602 - numba.core.byteflow - DEBUG - dispatch pc=106, inst=LOAD_CONST(arg=0, lineno=4)
2025-05-12 23:19:03,602 - numba.core.byteflow - DEBUG - stack ['$const102.9.2', '$out0104.10']
2025-05-12 23:19:03,603 - numba.core.byteflow - DEBUG - dispatch pc=108, inst=LOAD_CONST(arg=3, lineno=4)
2025-05-12 23:19:03,603 - numba.core.byteflow - DEBUG - stack ['$const102.9.2', '$out0104.10', '$const106.11.0']
2025-05-12 23:19:03,603 - numba.core.byteflow - DEBUG - dispatch pc=110, inst=STORE_SLICE(arg=None, lineno=4)
2025-05-12 23:19:03,604 - numba.core.byteflow - DEBUG - stack ['$const102.9.2', '$out0104.10', '$const106.11.0', '$const108.12.3']
2025-05-12 23:19:03,604 - numba.core.byteflow - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=5)
2025-05-12 23:19:03,605 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:03,606 - numba.core.byteflow - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=5)
2025-05-12 23:19:03,606 - numba.core.byteflow - DEBUG - stack ['$const112.15.2']
2025-05-12 23:19:03,606 - numba.core.byteflow - DEBUG - dispatch pc=116, inst=LOAD_CONST(arg=2, lineno=5)
2025-05-12 23:19:03,606 - numba.core.byteflow - DEBUG - stack ['$const112.15.2', '$out0114.16']
2025-05-12 23:19:03,607 - numba.core.byteflow - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=0, lineno=5)
2025-05-12 23:19:03,608 - numba.core.byteflow - DEBUG - stack ['$const112.15.2', '$out0114.16', '$const116.17.2']
2025-05-12 23:19:03,608 - numba.core.byteflow - DEBUG - dispatch pc=120, inst=STORE_SLICE(arg=None, lineno=5)
2025-05-12 23:19:03,609 - numba.core.byteflow - DEBUG - stack ['$const112.15.2', '$out0114.16', '$const116.17.2', '$const118.18.0']
2025-05-12 23:19:03,611 - numba.core.byteflow - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2025-05-12 23:19:03,611 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:03,612 - numba.core.byteflow - DEBUG - dispatch pc=132, inst=LOAD_GLOBAL(arg=11, lineno=6)
2025-05-12 23:19:03,612 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21']
2025-05-12 23:19:03,612 - numba.core.byteflow - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=2, lineno=6)
2025-05-12 23:19:03,613 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$null$132.24', '$132load_global.23']
2025-05-12 23:19:03,613 - numba.core.byteflow - DEBUG - dispatch pc=144, inst=LOAD_CONST(arg=4, lineno=6)
2025-05-12 23:19:03,614 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$null$132.24', '$132load_global.23', '$const142.25.2']
2025-05-12 23:19:03,618 - numba.core.byteflow - DEBUG - dispatch pc=146, inst=CALL(arg=2, lineno=6)
2025-05-12 23:19:03,618 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$null$132.24', '$132load_global.23', '$const142.25.2', '$const144.26.4']
2025-05-12 23:19:03,618 - numba.core.byteflow - DEBUG - dispatch pc=154, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-05-12 23:19:03,620 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$146call.27']
2025-05-12 23:19:03,620 - numba.core.byteflow - DEBUG - dispatch pc=156, inst=LOAD_FAST(arg=3, lineno=6)
2025-05-12 23:19:03,621 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28']
2025-05-12 23:19:03,621 - numba.core.byteflow - DEBUG - dispatch pc=158, inst=LOAD_CONST(arg=2, lineno=6)
2025-05-12 23:19:03,622 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$full_shape0156.29']
2025-05-12 23:19:03,623 - numba.core.byteflow - DEBUG - dispatch pc=160, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-05-12 23:19:03,623 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$full_shape0156.29', '$const158.30.2']
2025-05-12 23:19:03,623 - numba.core.byteflow - DEBUG - dispatch pc=164, inst=LOAD_GLOBAL(arg=13, lineno=6)
2025-05-12 23:19:03,624 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$160binary_subscr.31']
2025-05-12 23:19:03,624 - numba.core.byteflow - DEBUG - dispatch pc=174, inst=LOAD_CONST(arg=2, lineno=6)
2025-05-12 23:19:03,624 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$160binary_subscr.31', '$null$164.33', '$164load_global.32']
2025-05-12 23:19:03,624 - numba.core.byteflow - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=2, lineno=6)
2025-05-12 23:19:03,625 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$160binary_subscr.31', '$null$164.33', '$164load_global.32', '$const174.34.2']
2025-05-12 23:19:03,625 - numba.core.byteflow - DEBUG - dispatch pc=178, inst=CALL(arg=2, lineno=6)
2025-05-12 23:19:03,626 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$160binary_subscr.31', '$null$164.33', '$164load_global.32', '$const174.34.2', '$const176.35.2']
2025-05-12 23:19:03,626 - numba.core.byteflow - DEBUG - dispatch pc=186, inst=BINARY_OP(arg=10, lineno=6)
2025-05-12 23:19:03,626 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$160binary_subscr.31', '$178call.36']
2025-05-12 23:19:03,628 - numba.core.byteflow - DEBUG - dispatch pc=190, inst=CALL(arg=2, lineno=6)
2025-05-12 23:19:03,628 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$binop_sub186.37']
2025-05-12 23:19:03,629 - numba.core.byteflow - DEBUG - dispatch pc=198, inst=GET_ITER(arg=None, lineno=6)
2025-05-12 23:19:03,629 - numba.core.byteflow - DEBUG - stack ['$190call.38']
2025-05-12 23:19:03,630 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=200, stack=('$198get_iter.39',), blockstack=(), npush=0)]
2025-05-12 23:19:03,631 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=200 nstack_initial=1)])
2025-05-12 23:19:03,631 - numba.core.byteflow - DEBUG - stack: ['$phi200.0']
2025-05-12 23:19:03,632 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=200 nstack_initial=1)
2025-05-12 23:19:03,632 - numba.core.byteflow - DEBUG - dispatch pc=200, inst=FOR_ITER(arg=4, lineno=6)
2025-05-12 23:19:03,632 - numba.core.byteflow - DEBUG - stack ['$phi200.0']
2025-05-12 23:19:03,633 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=212, stack=('$phi200.0', '$200for_iter.2'), blockstack=(), npush=0), Edge(pc=204, stack=('$phi200.0', '$200for_iter.2'), blockstack=(), npush=0)]
2025-05-12 23:19:03,633 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=212 nstack_initial=2), State(pc_initial=204 nstack_initial=2)])
2025-05-12 23:19:03,634 - numba.core.byteflow - DEBUG - stack: ['$phi212.0', '$phi212.1']
2025-05-12 23:19:03,634 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=212 nstack_initial=2)
2025-05-12 23:19:03,635 - numba.core.byteflow - DEBUG - dispatch pc=212, inst=END_FOR(arg=None, lineno=6)
2025-05-12 23:19:03,635 - numba.core.byteflow - DEBUG - stack ['$phi212.0', '$phi212.1']
2025-05-12 23:19:03,636 - numba.core.byteflow - DEBUG - dispatch pc=214, inst=LOAD_FAST(arg=4, lineno=8)
2025-05-12 23:19:03,636 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:03,637 - numba.core.byteflow - DEBUG - dispatch pc=216, inst=RETURN_VALUE(arg=None, lineno=8)
2025-05-12 23:19:03,637 - numba.core.byteflow - DEBUG - stack ['$out0214.2']
2025-05-12 23:19:03,638 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:03,638 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=204 nstack_initial=2)])
2025-05-12 23:19:03,639 - numba.core.byteflow - DEBUG - stack: ['$phi204.0', '$phi204.1']
2025-05-12 23:19:03,640 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=204 nstack_initial=2)
2025-05-12 23:19:03,640 - numba.core.byteflow - DEBUG - dispatch pc=204, inst=STORE_FAST(arg=5, lineno=6)
2025-05-12 23:19:03,640 - numba.core.byteflow - DEBUG - stack ['$phi204.0', '$phi204.1']
2025-05-12 23:19:03,641 - numba.core.byteflow - DEBUG - dispatch pc=206, inst=LOAD_CONST(arg=2, lineno=7)
2025-05-12 23:19:03,641 - numba.core.byteflow - DEBUG - stack ['$phi204.0']
2025-05-12 23:19:03,642 - numba.core.byteflow - DEBUG - dispatch pc=208, inst=STORE_FAST(arg=6, lineno=7)
2025-05-12 23:19:03,642 - numba.core.byteflow - DEBUG - stack ['$phi204.0', '$const206.2.2']
2025-05-12 23:19:03,643 - numba.core.byteflow - DEBUG - dispatch pc=210, inst=JUMP_BACKWARD(arg=6, lineno=7)
2025-05-12 23:19:03,643 - numba.core.byteflow - DEBUG - stack ['$phi204.0']
2025-05-12 23:19:03,643 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=200, stack=('$phi204.0',), blockstack=(), npush=0)]
2025-05-12 23:19:03,644 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=200 nstack_initial=1)])
2025-05-12 23:19:03,645 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:03,645 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=200 nstack_initial=1): {'$phi200.0'},
             State(pc_initial=204 nstack_initial=2): {'$phi204.1'},
             State(pc_initial=212 nstack_initial=2): set()})
2025-05-12 23:19:03,646 - numba.core.byteflow - DEBUG - defmap: {'$phi200.0': State(pc_initial=0 nstack_initial=0),
 '$phi204.1': State(pc_initial=200 nstack_initial=1),
 '$phi212.1': State(pc_initial=200 nstack_initial=1)}
2025-05-12 23:19:03,647 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi200.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi204.0',
                            State(pc_initial=204 nstack_initial=2))},
             '$phi204.0': {('$phi200.0',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi204.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi212.0': {('$phi200.0',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi212.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))}})
2025-05-12 23:19:03,648 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi200.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi204.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi212.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi212.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))}})
2025-05-12 23:19:03,649 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi200.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi212.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi212.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))}})
2025-05-12 23:19:03,649 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi200.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi212.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi212.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))}})
2025-05-12 23:19:03,650 - numba.core.byteflow - DEBUG - keep phismap: {'$phi200.0': {('$198get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi204.1': {('$200for_iter.2', State(pc_initial=200 nstack_initial=1))}}
2025-05-12 23:19:03,651 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi200.0': '$198get_iter.39'},
             State(pc_initial=200 nstack_initial=1): {'$phi204.1': '$200for_iter.2'}})
2025-05-12 23:19:03,651 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:03,652 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (26, {'value': '$6load_attr.1'}), (28, {'idx': 1, 'res': '$28load_global.2'}), (38, {'item': '$28load_global.2', 'res': '$38load_attr.3'}), (58, {'res': '$full_shape058.5'}), (60, {'idx': 1, 'res': '$60load_global.6'}), (70, {'item': '$60load_global.6', 'res': '$70load_attr.7'}), (92, {'func': '$38load_attr.3', 'args': ['$full_shape058.5', '$70load_attr.7'], 'kw_names': 1, 'res': '$92call.8'}), (100, {'value': '$92call.8'}), (102, {'res': '$const102.9.2'}), (104, {'res': '$out0104.10'}), (106, {'res': '$const106.11.0'}), (108, {'res': '$const108.12.3'}), (110, {'start': '$const106.11.0', 'end': '$const108.12.3', 'container': '$out0104.10', 'value': '$const102.9.2', 'res': '$110store_slice.14', 'slicevar': '$110store_slice.13'}), (112, {'res': '$const112.15.2'}), (114, {'res': '$out0114.16'}), (116, {'res': '$const116.17.2'}), (118, {'res': '$const118.18.0'}), (120, {'start': '$const116.17.2', 'end': '$const118.18.0', 'container': '$out0114.16', 'value': '$const112.15.2', 'res': '$120store_slice.20', 'slicevar': '$120store_slice.19'}), (122, {'idx': 4, 'res': '$122load_global.21'}), (132, {'idx': 5, 'res': '$132load_global.23'}), (142, {'res': '$const142.25.2'}), (144, {'res': '$const144.26.4'}), (146, {'func': '$132load_global.23', 'args': ['$const142.25.2', '$const144.26.4'], 'kw_names': None, 'res': '$146call.27'}), (154, {'value': '$146call.27', 'res': '$154unary_negative.28'}), (156, {'res': '$full_shape0156.29'}), (158, {'res': '$const158.30.2'}), (160, {'index': '$const158.30.2', 'target': '$full_shape0156.29', 'res': '$160binary_subscr.31'}), (164, {'idx': 6, 'res': '$164load_global.32'}), (174, {'res': '$const174.34.2'}), (176, {'res': '$const176.35.2'}), (178, {'func': '$164load_global.32', 'args': ['$const174.34.2', '$const176.35.2'], 'kw_names': None, 'res': '$178call.36'}), (186, {'op': '-', 'lhs': '$160binary_subscr.31', 'rhs': '$178call.36', 'res': '$binop_sub186.37'}), (190, {'func': '$122load_global.21', 'args': ['$154unary_negative.28', '$binop_sub186.37'], 'kw_names': None, 'res': '$190call.38'}), (198, {'value': '$190call.38', 'res': '$198get_iter.39'})), outgoing_phis={'$phi200.0': '$198get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={200: ('$198get_iter.39',)})
2025-05-12 23:19:03,653 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=200 nstack_initial=1):
AdaptBlockInfo(insts=((200, {'iterator': '$phi200.0', 'pair': '$200for_iter.1', 'indval': '$200for_iter.2', 'pred': '$200for_iter.3'}),), outgoing_phis={'$phi204.1': '$200for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={212: ('$phi200.0', '$200for_iter.2'), 204: ('$phi200.0', '$200for_iter.2')})
2025-05-12 23:19:03,653 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=204 nstack_initial=2):
AdaptBlockInfo(insts=((204, {'value': '$phi204.1'}), (206, {'res': '$const206.2.2'}), (208, {'value': '$const206.2.2'}), (210, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={200: ('$phi204.0',)})
2025-05-12 23:19:03,654 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=212 nstack_initial=2):
AdaptBlockInfo(insts=((214, {'res': '$out0214.2'}), (216, {'retval': '$out0214.2', 'castval': '$216return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:03,657 - numba.core.interpreter - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $28load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$28load_global.2']
    $38load_attr.3 = getattr(value=$28load_global.2, attr=empty) ['$28load_global.2', '$38load_attr.3']
    $60load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$60load_global.6']
    $70load_attr.7 = getattr(value=$60load_global.6, attr=bool) ['$60load_global.6', '$70load_attr.7']
    out0 = call $38load_attr.3(full_shape0, func=$38load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$38load_attr.3', '$70load_attr.7', 'full_shape0', 'out0']
    $const102.9.2 = const(int, 0)            ['$const102.9.2']
    $const106.11.0 = const(NoneType, None)   ['$const106.11.0']
    $const108.12.3 = const(int, 1)           ['$const108.12.3']
    $110store_slice.13 = global(slice: <class 'slice'>) ['$110store_slice.13']
    $110store_slice.14 = call $110store_slice.13($const106.11.0, $const108.12.3, func=$110store_slice.13, args=(Var($const106.11.0, <string>:4), Var($const108.12.3, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$110store_slice.13', '$110store_slice.14', '$const106.11.0', '$const108.12.3']
    out0[$110store_slice.14] = $const102.9.2 ['$110store_slice.14', '$const102.9.2', 'out0']
    $const112.15.2 = const(int, 0)           ['$const112.15.2']
    $const116.17.2 = const(int, 0)           ['$const116.17.2']
    $const118.18.0 = const(NoneType, None)   ['$const118.18.0']
    $120store_slice.19 = global(slice: <class 'slice'>) ['$120store_slice.19']
    $120store_slice.20 = call $120store_slice.19($const116.17.2, $const118.18.0, func=$120store_slice.19, args=(Var($const116.17.2, <string>:5), Var($const118.18.0, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$120store_slice.19', '$120store_slice.20', '$const116.17.2', '$const118.18.0']
    out0[$120store_slice.20] = $const112.15.2 ['$120store_slice.20', '$const112.15.2', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $132load_global.23 = global(min: <built-in function min>) ['$132load_global.23']
    $const142.25.2 = const(int, 0)           ['$const142.25.2']
    $const144.26.4 = const(int, -1)          ['$const144.26.4']
    $146call.27 = call $132load_global.23($const142.25.2, $const144.26.4, func=$132load_global.23, args=[Var($const142.25.2, <string>:6), Var($const144.26.4, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$132load_global.23', '$146call.27', '$const142.25.2', '$const144.26.4']
    $154unary_negative.28 = unary(fn=<built-in function neg>, value=$146call.27) ['$146call.27', '$154unary_negative.28']
    $const158.30.2 = const(int, 0)           ['$const158.30.2']
    $160binary_subscr.31 = getitem(value=full_shape0, index=$const158.30.2, fn=<built-in function getitem>) ['$160binary_subscr.31', '$const158.30.2', 'full_shape0']
    $164load_global.32 = global(max: <built-in function max>) ['$164load_global.32']
    $const174.34.2 = const(int, 0)           ['$const174.34.2']
    $const176.35.2 = const(int, 0)           ['$const176.35.2']
    $178call.36 = call $164load_global.32($const174.34.2, $const176.35.2, func=$164load_global.32, args=[Var($const174.34.2, <string>:6), Var($const176.35.2, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$164load_global.32', '$178call.36', '$const174.34.2', '$const176.35.2']
    $binop_sub186.37 = $160binary_subscr.31 - $178call.36 ['$160binary_subscr.31', '$178call.36', '$binop_sub186.37']
    $190call.38 = call $122load_global.21($154unary_negative.28, $binop_sub186.37, func=$122load_global.21, args=[Var($154unary_negative.28, <string>:6), Var($binop_sub186.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$154unary_negative.28', '$190call.38', '$binop_sub186.37']
    $198get_iter.39 = getiter(value=$190call.38) ['$190call.38', '$198get_iter.39']
    $phi200.0 = $198get_iter.39              ['$198get_iter.39', '$phi200.0']
    jump 200                                 []
label 200:
    $200for_iter.1 = iternext(value=$phi200.0) ['$200for_iter.1', '$phi200.0']
    $200for_iter.2 = pair_first(value=$200for_iter.1) ['$200for_iter.1', '$200for_iter.2']
    $200for_iter.3 = pair_second(value=$200for_iter.1) ['$200for_iter.1', '$200for_iter.3']
    $phi204.1 = $200for_iter.2               ['$200for_iter.2', '$phi204.1']
    branch $200for_iter.3, 204, 212          ['$200for_iter.3']
label 204:
    index00 = $phi204.1                      ['$phi204.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 200                                 []
label 212:
    $216return_value.3 = cast(value=out0)    ['$216return_value.3', 'out0']
    return $216return_value.3                ['$216return_value.3']

2025-05-12 23:19:03,714 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:03,714 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,715 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:03,715 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:03,716 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:03,716 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:03,716 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,717 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:03,717 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,718 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:03,718 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,719 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:03,719 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:03,720 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:03,721 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:03,721 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,721 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:03,722 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:03,722 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:03,722 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:03,723 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:03,723 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,724 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:03,724 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:03,725 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:03,725 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:03,726 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:03,726 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,726 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:03,727 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:03,727 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:03,728 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:03,728 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:03,728 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:03,728 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,729 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:03,730 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,730 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:03,731 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:03,732 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:03,732 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 200
2025-05-12 23:19:03,733 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,733 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:03,733 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:03,733 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:03,734 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:03,736 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:03,736 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 204
2025-05-12 23:19:03,736 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,737 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:03,737 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:03,737 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 396
2025-05-12 23:19:03,738 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,739 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:03,739 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:03,740 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 212
2025-05-12 23:19:03,740 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,740 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:03,741 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:03,742 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:03,742 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:03,742 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:03,742 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,742 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,743 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:03,743 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:03,743 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 213
2025-05-12 23:19:03,744 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,744 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:03,745 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,746 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,746 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:03,747 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 243
2025-05-12 23:19:03,747 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,747 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:03,748 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 253
2025-05-12 23:19:03,748 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,748 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:03,748 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 251
2025-05-12 23:19:03,749 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,749 - numba.core.ssa - DEBUG - on stmt: x0 = const(int, 0)
2025-05-12 23:19:03,749 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:03,751 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 257
2025-05-12 23:19:03,752 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,752 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:03,753 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const50.1.2 + index00
2025-05-12 23:19:03,753 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:03,754 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:03,754 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:03,754 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,755 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,755 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:03,756 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:03,756 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 261
2025-05-12 23:19:03,756 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,757 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:03,757 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,758 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,758 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:03,758 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 287
2025-05-12 23:19:03,758 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,758 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:03,758 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 297
2025-05-12 23:19:03,759 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,759 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:03,760 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 295
2025-05-12 23:19:03,760 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,761 - numba.core.ssa - DEBUG - on stmt: x1 = const(int, 0)
2025-05-12 23:19:03,761 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:03,762 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 301
2025-05-12 23:19:03,762 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,762 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,763 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,763 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:03,763 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 305
2025-05-12 23:19:03,764 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,764 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,765 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:03,765 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0, func=$106load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,765 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,766 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:03,766 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,767 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:03,767 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:03,767 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:03,768 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:03,768 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 309
2025-05-12 23:19:03,768 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,769 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,769 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:03,769 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0, func=$192load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,769 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,771 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:03,771 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,772 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:03,772 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:03,772 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:03,773 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:03,773 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 395
2025-05-12 23:19:03,773 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,774 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:03,775 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$106load_attr.2': [(<numba.core.ir.Assign object at 0x000001E8A8628BF0>,
                                  305)],
             '$110store_slice.13.1': [(<numba.core.ir.Assign object at 0x000001E8A865A3C0>,
                                       0)],
             '$110store_slice.14.1': [(<numba.core.ir.Assign object at 0x000001E8A865A4E0>,
                                       0)],
             '$120store_slice.19.1': [(<numba.core.ir.Assign object at 0x000001E8A865AAB0>,
                                       0)],
             '$120store_slice.20.1': [(<numba.core.ir.Assign object at 0x000001E8A865ABD0>,
                                       0)],
             '$122load_global.21.1': [(<numba.core.ir.Assign object at 0x000001E8A865AD50>,
                                       0)],
             '$128call.4': [(<numba.core.ir.Assign object at 0x000001E8A862A7E0>,
                             305)],
             '$132load_global.23.1': [(<numba.core.ir.Assign object at 0x000001E8A865AEA0>,
                                       0)],
             '$136load_global.5': [(<numba.core.ir.Assign object at 0x000001E8A862A9C0>,
                                    305)],
             '$146call.27.1': [(<numba.core.ir.Assign object at 0x000001E8A865B290>,
                                0)],
             '$146load_attr.7': [(<numba.core.ir.Assign object at 0x000001E8A862DD60>,
                                  305)],
             '$154unary_negative.28.1': [(<numba.core.ir.Assign object at 0x000001E8A865B3B0>,
                                          0)],
             '$160binary_subscr.31.1': [(<numba.core.ir.Assign object at 0x000001E8A865B740>,
                                         0)],
             '$164load_global.32.1': [(<numba.core.ir.Assign object at 0x000001E8A865B860>,
                                       0)],
             '$168call.9': [(<numba.core.ir.Assign object at 0x000001E8A862F620>,
                             305)],
             '$16unary_negative.4': [(<numba.core.ir.Assign object at 0x000001E8A85CCDA0>,
                                      212)],
             '$176compare_op.10': [(<numba.core.ir.Assign object at 0x000001E8A862F800>,
                                    305)],
             '$178call.36.1': [(<numba.core.ir.Assign object at 0x000001E8A865BCB0>,
                                0)],
             '$180return_value.11': [(<numba.core.ir.Assign object at 0x000001E8A8631220>,
                                      305)],
             '$182load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A86377A0>,
                                    309)],
             '$190call.38.1': [(<numba.core.ir.Assign object at 0x000001E8A865BF80>,
                                0)],
             '$192load_attr.2': [(<numba.core.ir.Assign object at 0x000001E8A8639460>,
                                  309)],
             '$198get_iter.39.1': [(<numba.core.ir.Assign object at 0x000001E8A86640E0>,
                                    0)],
             '$200for_iter.1.1': [(<numba.core.ir.Assign object at 0x000001E8A8664140>,
                                   200)],
             '$200for_iter.2.1': [(<numba.core.ir.Assign object at 0x000001E8A8664260>,
                                   200)],
             '$200for_iter.3.1': [(<numba.core.ir.Assign object at 0x000001E8A8664380>,
                                   200)],
             '$214call.4': [(<numba.core.ir.Assign object at 0x000001E8A863B050>,
                             309)],
             '$216return_value.3.1': [(<numba.core.ir.Assign object at 0x000001E8A8664AD0>,
                                       396)],
             '$222load_global.5': [(<numba.core.ir.Assign object at 0x000001E8A863B230>,
                                    309)],
             '$232load_attr.7': [(<numba.core.ir.Assign object at 0x000001E8A863E5D0>,
                                  309)],
             '$24compare_op.6': [(<numba.core.ir.Assign object at 0x000001E8A85CCF80>,
                                  212)],
             '$254call.9': [(<numba.core.ir.Assign object at 0x000001E8A863FE90>,
                             309)],
             '$262compare_op.10': [(<numba.core.ir.Assign object at 0x000001E8A863FF20>,
                                    309)],
             '$266return_value.11': [(<numba.core.ir.Assign object at 0x000001E8A8645A90>,
                                      309)],
             '$28load_global.2.1': [(<numba.core.ir.Assign object at 0x000001E8A86596D0>,
                                     0)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000001E8A85D1D00>,
                          212)],
             '$32compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A85DDDC0>,
                                  213)],
             '$36pred': [(<numba.core.ir.Assign object at 0x000001E8A85DF980>,
                          213)],
             '$38load_attr.3.1': [(<numba.core.ir.Assign object at 0x000001E8A8659820>,
                                   0)],
             '$60load_global.6.1': [(<numba.core.ir.Assign object at 0x000001E8A8659A60>,
                                     0)],
             '$60unary_negative.4': [(<numba.core.ir.Assign object at 0x000001E8A85F65D0>,
                                      257)],
             '$68compare_op.6': [(<numba.core.ir.Assign object at 0x000001E8A85F67B0>,
                                  257)],
             '$70load_attr.7.1': [(<numba.core.ir.Assign object at 0x000001E8A8659BB0>,
                                   0)],
             '$72pred': [(<numba.core.ir.Assign object at 0x000001E8A85FB530>,
                          257)],
             '$76compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A8607500>,
                                  261)],
             '$80pred': [(<numba.core.ir.Assign object at 0x000001E8A86091F0>,
                          261)],
             '$94pred': [(<numba.core.ir.Assign object at 0x000001E8A8616330>,
                          301)],
             '$96load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8622F60>,
                                   305)],
             '$binop_sub186.37.1': [(<numba.core.ir.Assign object at 0x000001E8A865BE00>,
                                     0)],
             '$const102.9.2.1': [(<numba.core.ir.Assign object at 0x000001E8A8659F40>,
                                  0)],
             '$const106.11.0.1': [(<numba.core.ir.Assign object at 0x000001E8A865A150>,
                                   0)],
             '$const108.12.3.1': [(<numba.core.ir.Assign object at 0x000001E8A865A270>,
                                   0)],
             '$const112.15.2.1': [(<numba.core.ir.Assign object at 0x000001E8A865A630>,
                                   0)],
             '$const116.17.2.1': [(<numba.core.ir.Assign object at 0x000001E8A865A840>,
                                   0)],
             '$const118.18.0.1': [(<numba.core.ir.Assign object at 0x000001E8A865A960>,
                                   0)],
             '$const142.25.2.1': [(<numba.core.ir.Assign object at 0x000001E8A865AFC0>,
                                   0)],
             '$const144.26.4.1': [(<numba.core.ir.Assign object at 0x000001E8A865B0E0>,
                                   0)],
             '$const158.30.2.1': [(<numba.core.ir.Assign object at 0x000001E8A865B5C0>,
                                   0)],
             '$const174.34.2.1': [(<numba.core.ir.Assign object at 0x000001E8A865B9B0>,
                                   0)],
             '$const176.35.2.1': [(<numba.core.ir.Assign object at 0x000001E8A865BB00>,
                                   0)],
             '$const50.1.2': [(<numba.core.ir.Assign object at 0x000001E8A85F2F00>,
                               257)],
             '$const6.1.1': [(<numba.core.ir.Assign object at 0x000001E8A85C9B20>,
                              212)],
             '$phi200.0.1': [(<numba.core.ir.Assign object at 0x000001E8A8659580>,
                              0)],
             '$phi204.1.1': [(<numba.core.ir.Assign object at 0x000001E8A8664410>,
                              200)],
             '$phi30.0': [(<numba.core.ir.Assign object at 0x000001E8A85D35C0>,
                           212)],
             '$phi74.0': [(<numba.core.ir.Assign object at 0x000001E8A8600E30>,
                           257)],
             'bool28': [(<numba.core.ir.Assign object at 0x000001E8A85CE960>,
                         212)],
             'bool36': [(<numba.core.ir.Assign object at 0x000001E8A85DDEB0>,
                         213)],
             'bool72': [(<numba.core.ir.Assign object at 0x000001E8A85F81D0>,
                         257)],
             'bool80': [(<numba.core.ir.Assign object at 0x000001E8A8607560>,
                         261)],
             'bool94': [(<numba.core.ir.Assign object at 0x000001E8A86160F0>,
                         301)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x000001E8A8659490>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x000001E8A86645C0>,
                          204)],
             'out0': [(<numba.core.ir.Assign object at 0x000001E8A8659D60>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x000001E8A8658620>,
                                212),
                               (<numba.core.ir.Assign object at 0x000001E8A86587D0>,
                                257)],
             'threshold': [(<numba.core.ir.Assign object at 0x000001E8A8659160>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x000001E8A86590D0>, 0)],
             'x0': [(<numba.core.ir.Assign object at 0x000001E8A86586E0>, 212),
                    (<numba.core.ir.Assign object at 0x000001E8A85E7A70>, 251)],
             'x1': [(<numba.core.ir.Assign object at 0x000001E8A8658890>, 257),
                    (<numba.core.ir.Assign object at 0x000001E8A8612C30>, 295)],
             'zero_pos': [(<numba.core.ir.Assign object at 0x000001E8A8659220>,
                           0)]})
2025-05-12 23:19:03,781 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8658C50>
2025-05-12 23:19:03,782 - numba.core.ssa - DEBUG - Fix SSA violator on var stencil_index
2025-05-12 23:19:03,782 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:03,783 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,783 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:03,784 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:03,784 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:03,784 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:03,784 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,785 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:03,785 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,785 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:03,786 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,786 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:03,787 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:03,787 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:03,788 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:03,788 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,788 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:03,789 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:03,789 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:03,789 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:03,791 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:03,791 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,791 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:03,792 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:03,792 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:03,792 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:03,793 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:03,793 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,794 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:03,794 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:03,794 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:03,795 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:03,795 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:03,795 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:03,796 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,796 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:03,796 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,797 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:03,797 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:03,798 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:03,798 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 200
2025-05-12 23:19:03,798 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,798 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:03,799 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:03,799 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:03,799 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:03,800 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:03,800 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 204
2025-05-12 23:19:03,801 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,801 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:03,801 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:03,802 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 396
2025-05-12 23:19:03,802 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,802 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:03,803 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:03,803 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 212
2025-05-12 23:19:03,803 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,803 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:03,804 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:03,804 - numba.core.ssa - DEBUG - first assign: stencil_index
2025-05-12 23:19:03,805 - numba.core.ssa - DEBUG - replaced with: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:03,805 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:03,805 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:03,806 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:03,806 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,806 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,807 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:03,807 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:03,808 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 213
2025-05-12 23:19:03,808 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,808 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:03,809 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,809 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,809 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:03,810 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 243
2025-05-12 23:19:03,810 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,810 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:03,810 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 253
2025-05-12 23:19:03,810 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,811 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:03,811 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 251
2025-05-12 23:19:03,811 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,811 - numba.core.ssa - DEBUG - on stmt: x0 = const(int, 0)
2025-05-12 23:19:03,813 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:03,813 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 257
2025-05-12 23:19:03,814 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,814 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:03,814 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const50.1.2 + index00
2025-05-12 23:19:03,815 - numba.core.ssa - DEBUG - replaced with: stencil_index.1 = $const50.1.2 + index00
2025-05-12 23:19:03,816 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:03,816 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:03,816 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:03,816 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,817 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,817 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:03,817 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:03,817 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 261
2025-05-12 23:19:03,819 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,820 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:03,821 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,821 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,822 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:03,822 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 287
2025-05-12 23:19:03,823 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,823 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:03,823 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 297
2025-05-12 23:19:03,824 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,824 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:03,825 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 295
2025-05-12 23:19:03,825 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,825 - numba.core.ssa - DEBUG - on stmt: x1 = const(int, 0)
2025-05-12 23:19:03,825 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:03,825 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 301
2025-05-12 23:19:03,826 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,826 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,827 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,827 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:03,828 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 305
2025-05-12 23:19:03,828 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,828 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,830 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:03,830 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0, func=$106load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,830 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,830 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:03,831 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,831 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:03,831 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:03,832 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:03,832 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:03,832 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 309
2025-05-12 23:19:03,832 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,833 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,833 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:03,833 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0, func=$192load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,834 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,834 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:03,834 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,836 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:03,836 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:03,836 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:03,837 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:03,837 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 395
2025-05-12 23:19:03,837 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA060>
2025-05-12 23:19:03,838 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:03,838 - numba.core.ssa - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {212: [<numba.core.ir.Assign object at 0x000001E8A85CA6F0>],
             257: [<numba.core.ir.Assign object at 0x000001E8A85CA150>]})
2025-05-12 23:19:03,838 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:03,838 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,839 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:03,839 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:03,839 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:03,839 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:03,840 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,840 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:03,840 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,841 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:03,841 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,841 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:03,841 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:03,842 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:03,842 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:03,842 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,843 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:03,843 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:03,844 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:03,844 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:03,845 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:03,845 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,845 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:03,846 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:03,846 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:03,846 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:03,847 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:03,847 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,848 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:03,848 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:03,848 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:03,849 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:03,850 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:03,850 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:03,850 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,851 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:03,851 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,851 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:03,852 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:03,853 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:03,853 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 200
2025-05-12 23:19:03,853 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,853 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:03,854 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:03,854 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:03,855 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:03,855 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:03,855 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 204
2025-05-12 23:19:03,856 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,856 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:03,856 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:03,857 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 396
2025-05-12 23:19:03,857 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,857 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:03,857 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:03,858 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 212
2025-05-12 23:19:03,858 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,858 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:03,858 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:03,858 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:03,858 - numba.core.ssa - DEBUG - find_def var='stencil_index' stmt=x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:03,858 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:03,859 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:03,859 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,859 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,860 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:03,860 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:03,860 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 213
2025-05-12 23:19:03,861 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,861 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:03,861 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,862 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,862 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:03,863 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 243
2025-05-12 23:19:03,863 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,863 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:03,864 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 253
2025-05-12 23:19:03,864 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,864 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:03,864 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 251
2025-05-12 23:19:03,865 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,865 - numba.core.ssa - DEBUG - on stmt: x0 = const(int, 0)
2025-05-12 23:19:03,865 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:03,866 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 257
2025-05-12 23:19:03,866 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,866 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:03,866 - numba.core.ssa - DEBUG - on stmt: stencil_index.1 = $const50.1.2 + index00
2025-05-12 23:19:03,867 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:03,867 - numba.core.ssa - DEBUG - find_def var='stencil_index' stmt=x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:03,867 - numba.core.ssa - DEBUG - replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:03,867 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:03,868 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:03,869 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,870 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,871 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:03,871 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:03,872 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 261
2025-05-12 23:19:03,872 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,872 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:03,872 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,873 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,873 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:03,873 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 287
2025-05-12 23:19:03,873 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,873 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:03,874 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 297
2025-05-12 23:19:03,874 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,874 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:03,874 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 295
2025-05-12 23:19:03,875 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,875 - numba.core.ssa - DEBUG - on stmt: x1 = const(int, 0)
2025-05-12 23:19:03,875 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:03,875 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 301
2025-05-12 23:19:03,875 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,876 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,876 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,876 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:03,877 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 305
2025-05-12 23:19:03,877 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,878 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,878 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:03,878 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0, func=$106load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,879 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,879 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:03,880 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,880 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:03,880 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:03,881 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:03,881 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:03,881 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 309
2025-05-12 23:19:03,881 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,882 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,882 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:03,882 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0, func=$192load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,882 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,882 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:03,883 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,883 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:03,883 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:03,883 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:03,884 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:03,884 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 395
2025-05-12 23:19:03,884 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85CA060>
2025-05-12 23:19:03,885 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:03,885 - numba.core.ssa - DEBUG - Fix SSA violator on var x0
2025-05-12 23:19:03,885 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:03,886 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,886 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:03,886 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:03,886 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:03,888 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:03,888 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,888 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:03,888 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,889 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:03,889 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,889 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:03,889 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:03,890 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:03,890 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:03,890 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,890 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:03,891 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:03,891 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:03,891 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:03,891 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:03,891 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,892 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:03,892 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:03,892 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:03,892 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:03,892 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:03,892 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,893 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:03,893 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:03,894 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:03,895 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:03,895 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:03,895 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:03,895 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,895 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:03,896 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,896 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:03,897 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:03,897 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:03,897 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 200
2025-05-12 23:19:03,897 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,897 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:03,898 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:03,898 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:03,898 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:03,899 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:03,900 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 204
2025-05-12 23:19:03,900 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,900 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:03,900 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:03,901 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 396
2025-05-12 23:19:03,901 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,902 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:03,902 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:03,902 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 212
2025-05-12 23:19:03,902 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,903 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:03,903 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:03,904 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:03,904 - numba.core.ssa - DEBUG - first assign: x0
2025-05-12 23:19:03,904 - numba.core.ssa - DEBUG - replaced with: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:03,905 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:03,905 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:03,905 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,905 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,906 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:03,906 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:03,906 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 213
2025-05-12 23:19:03,906 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,907 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:03,907 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,907 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,907 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:03,907 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 243
2025-05-12 23:19:03,908 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,908 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:03,908 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 253
2025-05-12 23:19:03,908 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,908 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:03,908 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 251
2025-05-12 23:19:03,909 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,909 - numba.core.ssa - DEBUG - on stmt: x0 = const(int, 0)
2025-05-12 23:19:03,909 - numba.core.ssa - DEBUG - replaced with: x0.1 = const(int, 0)
2025-05-12 23:19:03,909 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:03,910 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 257
2025-05-12 23:19:03,910 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,910 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:03,910 - numba.core.ssa - DEBUG - on stmt: stencil_index.1 = $const50.1.2 + index00
2025-05-12 23:19:03,912 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:03,912 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:03,913 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:03,913 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,914 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,914 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:03,914 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:03,915 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 261
2025-05-12 23:19:03,915 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,915 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:03,915 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,915 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,916 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:03,916 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 287
2025-05-12 23:19:03,916 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,916 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:03,916 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 297
2025-05-12 23:19:03,917 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,917 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:03,917 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 295
2025-05-12 23:19:03,918 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,918 - numba.core.ssa - DEBUG - on stmt: x1 = const(int, 0)
2025-05-12 23:19:03,918 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:03,919 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 301
2025-05-12 23:19:03,919 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,919 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,921 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,921 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:03,922 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 305
2025-05-12 23:19:03,922 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,922 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,922 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:03,923 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0, func=$106load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,923 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,923 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:03,923 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,924 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:03,924 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:03,924 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:03,925 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:03,925 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 309
2025-05-12 23:19:03,925 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,925 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,925 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:03,925 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0, func=$192load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,926 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,926 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:03,926 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,927 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:03,927 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:03,927 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:03,928 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:03,928 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 395
2025-05-12 23:19:03,928 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA000>
2025-05-12 23:19:03,928 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:03,928 - numba.core.ssa - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {212: [<numba.core.ir.Assign object at 0x000001E8A85CA240>],
             251: [<numba.core.ir.Assign object at 0x000001E8A85C9370>]})
2025-05-12 23:19:03,929 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:03,929 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,929 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:03,930 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:03,930 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:03,931 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:03,931 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,931 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:03,932 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,932 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:03,932 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,932 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:03,933 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:03,933 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:03,933 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:03,933 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,934 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:03,934 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:03,934 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:03,935 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:03,935 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:03,935 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,936 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:03,936 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:03,936 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:03,936 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:03,937 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:03,937 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,938 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:03,938 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:03,938 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:03,939 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:03,939 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:03,939 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:03,939 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,940 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:03,940 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,941 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:03,941 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:03,941 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:03,942 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 200
2025-05-12 23:19:03,942 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,942 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:03,942 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:03,944 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:03,944 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:03,945 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:03,945 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 204
2025-05-12 23:19:03,946 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,947 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:03,947 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:03,947 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 396
2025-05-12 23:19:03,947 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,947 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:03,949 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:03,949 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 212
2025-05-12 23:19:03,949 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,949 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:03,950 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:03,950 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:03,950 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:03,951 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:03,951 - numba.core.ssa - DEBUG - find_def var='x0' stmt=$24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:03,952 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,952 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,953 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:03,953 - numba.core.ssa - DEBUG - find_def var='x0' stmt=$phi30.0 = x0
2025-05-12 23:19:03,954 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:03,955 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 213
2025-05-12 23:19:03,955 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,955 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:03,956 - numba.core.ssa - DEBUG - find_def var='x0' stmt=$32compare_op.2 = x0 <= threshold
2025-05-12 23:19:03,956 - numba.core.ssa - DEBUG - find_def_from_top label 213
2025-05-12 23:19:03,956 - numba.core.ssa - DEBUG - idom 212 from label 213
2025-05-12 23:19:03,957 - numba.core.ssa - DEBUG - find_def_from_bottom label 212
2025-05-12 23:19:03,957 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,957 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,957 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:03,958 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 243
2025-05-12 23:19:03,958 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,958 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:03,960 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 253
2025-05-12 23:19:03,960 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,960 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:03,960 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 251
2025-05-12 23:19:03,960 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,962 - numba.core.ssa - DEBUG - on stmt: x0.1 = const(int, 0)
2025-05-12 23:19:03,962 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:03,962 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 257
2025-05-12 23:19:03,963 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,963 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:03,964 - numba.core.ssa - DEBUG - on stmt: stencil_index.1 = $const50.1.2 + index00
2025-05-12 23:19:03,964 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:03,964 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:03,964 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:03,965 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,965 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,966 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:03,966 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:03,967 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 261
2025-05-12 23:19:03,967 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,967 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:03,967 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,967 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,969 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:03,969 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 287
2025-05-12 23:19:03,969 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,969 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:03,970 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 297
2025-05-12 23:19:03,970 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,970 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:03,970 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 295
2025-05-12 23:19:03,970 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,970 - numba.core.ssa - DEBUG - on stmt: x1 = const(int, 0)
2025-05-12 23:19:03,971 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:03,971 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 301
2025-05-12 23:19:03,971 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,971 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:03,973 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,973 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:03,973 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 305
2025-05-12 23:19:03,974 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,974 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,974 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:03,975 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0, func=$106load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,975 - numba.core.ssa - DEBUG - find_def var='x0' stmt=$128call.4 = call $106load_attr.2(x0, func=$106load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,976 - numba.core.ssa - DEBUG - find_def_from_top label 305
2025-05-12 23:19:03,977 - numba.core.ssa - DEBUG - idom 301 from label 305
2025-05-12 23:19:03,977 - numba.core.ssa - DEBUG - find_def_from_bottom label 301
2025-05-12 23:19:03,977 - numba.core.ssa - DEBUG - find_def_from_top label 301
2025-05-12 23:19:03,978 - numba.core.ssa - DEBUG - idom 257 from label 301
2025-05-12 23:19:03,978 - numba.core.ssa - DEBUG - find_def_from_bottom label 257
2025-05-12 23:19:03,978 - numba.core.ssa - DEBUG - find_def_from_top label 257
2025-05-12 23:19:03,978 - numba.core.ssa - DEBUG - insert phi node x0.2 = phi(incoming_values=[], incoming_blocks=[]) at 257
2025-05-12 23:19:03,978 - numba.core.ssa - DEBUG - find_def_from_bottom label 253
2025-05-12 23:19:03,978 - numba.core.ssa - DEBUG - find_def_from_top label 253
2025-05-12 23:19:03,979 - numba.core.ssa - DEBUG - idom 212 from label 253
2025-05-12 23:19:03,979 - numba.core.ssa - DEBUG - find_def_from_bottom label 212
2025-05-12 23:19:03,979 - numba.core.ssa - DEBUG - incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:03,980 - numba.core.ssa - DEBUG - find_def_from_bottom label 251
2025-05-12 23:19:03,980 - numba.core.ssa - DEBUG - incoming_def x0.1 = const(int, 0)
2025-05-12 23:19:03,981 - numba.core.ssa - DEBUG - find_def_from_bottom label 213
2025-05-12 23:19:03,982 - numba.core.ssa - DEBUG - find_def_from_top label 213
2025-05-12 23:19:03,982 - numba.core.ssa - DEBUG - idom 212 from label 213
2025-05-12 23:19:03,982 - numba.core.ssa - DEBUG - find_def_from_bottom label 212
2025-05-12 23:19:03,982 - numba.core.ssa - DEBUG - incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:03,983 - numba.core.ssa - DEBUG - replaced with: $128call.4 = call $106load_attr.2(x0.2, func=$106load_attr.2, args=[Var(x0.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,984 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,984 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:03,984 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,985 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:03,986 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:03,987 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:03,987 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:03,988 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 309
2025-05-12 23:19:03,988 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,989 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,989 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:03,989 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0, func=$192load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,989 - numba.core.ssa - DEBUG - find_def var='x0' stmt=$214call.4 = call $192load_attr.2(x0, func=$192load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,990 - numba.core.ssa - DEBUG - find_def_from_top label 309
2025-05-12 23:19:03,990 - numba.core.ssa - DEBUG - idom 301 from label 309
2025-05-12 23:19:03,991 - numba.core.ssa - DEBUG - find_def_from_bottom label 301
2025-05-12 23:19:03,991 - numba.core.ssa - DEBUG - find_def_from_top label 301
2025-05-12 23:19:03,991 - numba.core.ssa - DEBUG - idom 257 from label 301
2025-05-12 23:19:03,991 - numba.core.ssa - DEBUG - find_def_from_bottom label 257
2025-05-12 23:19:03,992 - numba.core.ssa - DEBUG - replaced with: $214call.4 = call $192load_attr.2(x0.2, func=$192load_attr.2, args=[Var(x0.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,992 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:03,993 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:03,993 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:03,994 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:03,994 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:03,995 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:03,995 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:03,996 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 395
2025-05-12 23:19:03,997 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C85C0>
2025-05-12 23:19:03,997 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:03,997 - numba.core.ssa - DEBUG - Fix SSA violator on var x1
2025-05-12 23:19:03,999 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:03,999 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,000 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:04,000 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:04,000 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:04,001 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:04,002 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:04,002 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:04,003 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:04,003 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:04,004 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,005 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:04,005 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:04,007 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:04,007 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:04,008 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,008 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:04,008 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:04,008 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:04,008 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:04,009 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:04,009 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,009 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:04,010 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:04,010 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:04,011 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:04,011 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:04,012 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,012 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:04,013 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:04,013 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:04,015 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:04,015 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:04,015 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:04,016 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,016 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:04,017 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,017 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:04,018 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:04,018 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:04,018 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 200
2025-05-12 23:19:04,019 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,019 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:04,019 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:04,019 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:04,020 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:04,020 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:04,020 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 204
2025-05-12 23:19:04,020 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,021 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:04,021 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:04,021 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 396
2025-05-12 23:19:04,022 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,022 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:04,024 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:04,024 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 212
2025-05-12 23:19:04,024 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,025 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:04,025 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:04,025 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:04,026 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:04,026 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:04,026 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:04,026 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,027 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:04,027 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:04,028 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 213
2025-05-12 23:19:04,029 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,029 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:04,029 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:04,029 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,031 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:04,032 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 243
2025-05-12 23:19:04,032 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,032 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:04,032 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 253
2025-05-12 23:19:04,033 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,033 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:04,033 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 251
2025-05-12 23:19:04,034 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,034 - numba.core.ssa - DEBUG - on stmt: x0.1 = const(int, 0)
2025-05-12 23:19:04,034 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:04,035 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 257
2025-05-12 23:19:04,035 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,035 - numba.core.ssa - DEBUG - on stmt: x0.2 = phi(incoming_values=[Var(x0, audio.py:1140), Var(x0.1, audio.py:1142), Var(x0, audio.py:1140)], incoming_blocks=[253, 251, 213])
2025-05-12 23:19:04,036 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:04,036 - numba.core.ssa - DEBUG - on stmt: stencil_index.1 = $const50.1.2 + index00
2025-05-12 23:19:04,036 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:04,037 - numba.core.ssa - DEBUG - first assign: x1
2025-05-12 23:19:04,037 - numba.core.ssa - DEBUG - replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:04,037 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:04,038 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:04,038 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:04,039 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,039 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:04,040 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:04,040 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 261
2025-05-12 23:19:04,040 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,040 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:04,042 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:04,042 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,042 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:04,042 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 287
2025-05-12 23:19:04,043 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,043 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:04,043 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 297
2025-05-12 23:19:04,043 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,044 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:04,044 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 295
2025-05-12 23:19:04,044 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,045 - numba.core.ssa - DEBUG - on stmt: x1 = const(int, 0)
2025-05-12 23:19:04,045 - numba.core.ssa - DEBUG - replaced with: x1.1 = const(int, 0)
2025-05-12 23:19:04,046 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:04,046 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 301
2025-05-12 23:19:04,046 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,046 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:04,047 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,047 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:04,047 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 305
2025-05-12 23:19:04,048 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,048 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:04,048 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:04,048 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0.2, func=$106load_attr.2, args=[Var(x0.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,048 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:04,049 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:04,049 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,049 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:04,050 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:04,050 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:04,051 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:04,051 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 309
2025-05-12 23:19:04,051 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,053 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:04,053 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:04,053 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0.2, func=$192load_attr.2, args=[Var(x0.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,054 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:04,054 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:04,055 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,055 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:04,055 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:04,056 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:04,056 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:04,056 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 395
2025-05-12 23:19:04,057 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A85CA270>
2025-05-12 23:19:04,057 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:04,057 - numba.core.ssa - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {257: [<numba.core.ir.Assign object at 0x000001E8A85C86B0>],
             295: [<numba.core.ir.Assign object at 0x000001E8A85C90D0>]})
2025-05-12 23:19:04,058 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:04,058 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,058 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:04,058 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:04,059 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:04,059 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:04,059 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:04,060 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:04,060 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:04,060 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:04,061 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,061 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:04,061 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:04,061 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:04,063 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:04,063 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,064 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:04,064 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:04,064 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:04,065 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:04,065 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:04,065 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,066 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:04,066 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:04,066 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:04,066 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:04,067 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:04,067 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,067 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:04,067 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:04,068 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:04,068 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:04,069 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:04,069 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:04,069 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,069 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:04,069 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,070 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:04,070 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:04,070 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:04,071 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 200
2025-05-12 23:19:04,071 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,071 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:04,071 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:04,071 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:04,073 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:04,073 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:04,073 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 204
2025-05-12 23:19:04,073 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,074 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:04,074 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:04,074 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 396
2025-05-12 23:19:04,074 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,075 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:04,075 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:04,075 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 212
2025-05-12 23:19:04,075 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,076 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:04,076 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:04,077 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:04,077 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:04,078 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:04,078 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:04,079 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,079 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:04,079 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:04,079 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 213
2025-05-12 23:19:04,080 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,080 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:04,081 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:04,081 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,081 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:04,081 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 243
2025-05-12 23:19:04,081 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,083 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:04,083 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 253
2025-05-12 23:19:04,083 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,084 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:04,084 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 251
2025-05-12 23:19:04,084 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,084 - numba.core.ssa - DEBUG - on stmt: x0.1 = const(int, 0)
2025-05-12 23:19:04,085 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:04,085 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 257
2025-05-12 23:19:04,086 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,086 - numba.core.ssa - DEBUG - on stmt: x0.2 = phi(incoming_values=[Var(x0, audio.py:1140), Var(x0.1, audio.py:1142), Var(x0, audio.py:1140)], incoming_blocks=[253, 251, 213])
2025-05-12 23:19:04,087 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:04,087 - numba.core.ssa - DEBUG - on stmt: stencil_index.1 = $const50.1.2 + index00
2025-05-12 23:19:04,088 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:04,088 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:04,089 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:04,089 - numba.core.ssa - DEBUG - find_def var='x1' stmt=$68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:04,089 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:04,090 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,090 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:04,090 - numba.core.ssa - DEBUG - find_def var='x1' stmt=$phi74.0 = x1
2025-05-12 23:19:04,090 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:04,091 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 261
2025-05-12 23:19:04,091 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,091 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:04,093 - numba.core.ssa - DEBUG - find_def var='x1' stmt=$76compare_op.2 = x1 <= threshold
2025-05-12 23:19:04,095 - numba.core.ssa - DEBUG - find_def_from_top label 261
2025-05-12 23:19:04,096 - numba.core.ssa - DEBUG - idom 257 from label 261
2025-05-12 23:19:04,096 - numba.core.ssa - DEBUG - find_def_from_bottom label 257
2025-05-12 23:19:04,096 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:04,096 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,097 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:04,097 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 287
2025-05-12 23:19:04,098 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,098 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:04,098 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 297
2025-05-12 23:19:04,099 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,099 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:04,099 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 295
2025-05-12 23:19:04,099 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,099 - numba.core.ssa - DEBUG - on stmt: x1.1 = const(int, 0)
2025-05-12 23:19:04,099 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:04,099 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 301
2025-05-12 23:19:04,101 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,101 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:04,101 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,101 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:04,101 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 305
2025-05-12 23:19:04,101 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,102 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:04,102 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:04,102 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0.2, func=$106load_attr.2, args=[Var(x0.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,102 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:04,103 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:04,103 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,105 - numba.core.ssa - DEBUG - find_def var='x1' stmt=$168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,105 - numba.core.ssa - DEBUG - find_def_from_top label 305
2025-05-12 23:19:04,106 - numba.core.ssa - DEBUG - idom 301 from label 305
2025-05-12 23:19:04,106 - numba.core.ssa - DEBUG - find_def_from_bottom label 301
2025-05-12 23:19:04,106 - numba.core.ssa - DEBUG - find_def_from_top label 301
2025-05-12 23:19:04,106 - numba.core.ssa - DEBUG - insert phi node x1.2 = phi(incoming_values=[], incoming_blocks=[]) at 301
2025-05-12 23:19:04,107 - numba.core.ssa - DEBUG - find_def_from_bottom label 297
2025-05-12 23:19:04,107 - numba.core.ssa - DEBUG - find_def_from_top label 297
2025-05-12 23:19:04,107 - numba.core.ssa - DEBUG - idom 257 from label 297
2025-05-12 23:19:04,107 - numba.core.ssa - DEBUG - find_def_from_bottom label 257
2025-05-12 23:19:04,108 - numba.core.ssa - DEBUG - incoming_def x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:04,108 - numba.core.ssa - DEBUG - find_def_from_bottom label 261
2025-05-12 23:19:04,108 - numba.core.ssa - DEBUG - find_def_from_top label 261
2025-05-12 23:19:04,108 - numba.core.ssa - DEBUG - idom 257 from label 261
2025-05-12 23:19:04,108 - numba.core.ssa - DEBUG - find_def_from_bottom label 257
2025-05-12 23:19:04,108 - numba.core.ssa - DEBUG - incoming_def x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:04,108 - numba.core.ssa - DEBUG - find_def_from_bottom label 295
2025-05-12 23:19:04,108 - numba.core.ssa - DEBUG - incoming_def x1.1 = const(int, 0)
2025-05-12 23:19:04,109 - numba.core.ssa - DEBUG - replaced with: $168call.9 = call $146load_attr.7(x1.2, func=$146load_attr.7, args=[Var(x1.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,109 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:04,109 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:04,109 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:04,110 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:04,111 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 309
2025-05-12 23:19:04,111 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,111 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:04,112 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:04,112 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0.2, func=$192load_attr.2, args=[Var(x0.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,113 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:04,113 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:04,114 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,115 - numba.core.ssa - DEBUG - find_def var='x1' stmt=$254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,115 - numba.core.ssa - DEBUG - find_def_from_top label 309
2025-05-12 23:19:04,115 - numba.core.ssa - DEBUG - idom 301 from label 309
2025-05-12 23:19:04,115 - numba.core.ssa - DEBUG - find_def_from_bottom label 301
2025-05-12 23:19:04,116 - numba.core.ssa - DEBUG - replaced with: $254call.9 = call $232load_attr.7(x1.2, func=$232load_attr.7, args=[Var(x1.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,116 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:04,116 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:04,116 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:04,117 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:04,117 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 395
2025-05-12 23:19:04,117 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A85C9C70>
2025-05-12 23:19:04,117 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:04,157 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4454)
           2	COPY_FREE_VARS(arg=1, lineno=4454)
           4	RESUME(arg=0, lineno=4454)
           6	LOAD_GLOBAL(arg=1, lineno=4455)
          16	LOAD_FAST(arg=0, lineno=4455)
          18	LOAD_FAST(arg=1, lineno=4455)
          20	LOAD_DEREF(arg=2, lineno=4455)
          22	CALL(arg=3, lineno=4455)
          30	RETURN_VALUE(arg=None, lineno=4455)
2025-05-12 23:19:04,158 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:04,158 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:04,158 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:04,159 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4454)
2025-05-12 23:19:04,159 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,159 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4454)
2025-05-12 23:19:04,161 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,161 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=RESUME(arg=0, lineno=4454)
2025-05-12 23:19:04,162 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,162 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4455)
2025-05-12 23:19:04,163 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,164 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=4455)
2025-05-12 23:19:04,164 - numba.core.byteflow - DEBUG - stack ['$null$6.1', '$6load_global.0']
2025-05-12 23:19:04,165 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=4455)
2025-05-12 23:19:04,166 - numba.core.byteflow - DEBUG - stack ['$null$6.1', '$6load_global.0', '$shape16.2']
2025-05-12 23:19:04,166 - numba.core.byteflow - DEBUG - dispatch pc=20, inst=LOAD_DEREF(arg=2, lineno=4455)
2025-05-12 23:19:04,166 - numba.core.byteflow - DEBUG - stack ['$null$6.1', '$6load_global.0', '$shape16.2', '$dtype18.3']
2025-05-12 23:19:04,167 - numba.core.byteflow - DEBUG - dispatch pc=22, inst=CALL(arg=3, lineno=4455)
2025-05-12 23:19:04,167 - numba.core.byteflow - DEBUG - stack ['$null$6.1', '$6load_global.0', '$shape16.2', '$dtype18.3', '$20load_deref.4']
2025-05-12 23:19:04,168 - numba.core.byteflow - DEBUG - dispatch pc=30, inst=RETURN_VALUE(arg=None, lineno=4455)
2025-05-12 23:19:04,168 - numba.core.byteflow - DEBUG - stack ['$22call.5']
2025-05-12 23:19:04,168 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:04,168 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:04,169 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:04,169 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:04,170 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:04,170 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:04,170 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:04,171 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:04,171 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:04,172 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (16, {'res': '$shape16.2'}), (18, {'res': '$dtype18.3'}), (20, {'res': '$20load_deref.4'}), (22, {'func': '$6load_global.0', 'args': ['$shape16.2', '$dtype18.3', '$20load_deref.4'], 'kw_names': None, 'res': '$22call.5'}), (30, {'retval': '$22call.5', 'castval': '$30return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:04,173 - numba.core.interpreter - DEBUG - label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $20load_deref.4 = freevar(retty: array(bool, 1d, C)) ['$20load_deref.4']
    $22call.5 = call $6load_global.0(shape, dtype, $20load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4454), Var(dtype, arrayobj.py:4454), Var($20load_deref.4, arrayobj.py:4455)], kws=(), vararg=None, varkwarg=None, target=None) ['$20load_deref.4', '$22call.5', '$6load_global.0', 'dtype', 'shape']
    $30return_value.6 = cast(value=$22call.5) ['$22call.5', '$30return_value.6']
    return $30return_value.6                 ['$30return_value.6']

2025-05-12 23:19:04,177 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:04,178 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85C3EC0>
2025-05-12 23:19:04,178 - numba.core.ssa - DEBUG - on stmt: shape = arg(0, name=shape)
2025-05-12 23:19:04,179 - numba.core.ssa - DEBUG - on stmt: dtype = arg(1, name=dtype)
2025-05-12 23:19:04,179 - numba.core.ssa - DEBUG - on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2025-05-12 23:19:04,180 - numba.core.ssa - DEBUG - on stmt: $20load_deref.4 = freevar(retty: array(bool, 1d, C))
2025-05-12 23:19:04,181 - numba.core.ssa - DEBUG - on stmt: $22call.5 = call $6load_global.0(shape, dtype, $20load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4454), Var(dtype, arrayobj.py:4454), Var($20load_deref.4, arrayobj.py:4455)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,181 - numba.core.ssa - DEBUG - on stmt: $30return_value.6 = cast(value=$22call.5)
2025-05-12 23:19:04,181 - numba.core.ssa - DEBUG - on stmt: return $30return_value.6
2025-05-12 23:19:04,182 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$20load_deref.4': [(<numba.core.ir.Assign object at 0x000001E8A85C37D0>,
                                  0)],
             '$22call.5': [(<numba.core.ir.Assign object at 0x000001E8A85C3BC0>,
                            0)],
             '$30return_value.6': [(<numba.core.ir.Assign object at 0x000001E8A85C3D10>,
                                    0)],
             '$6load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A85C3380>,
                                  0)],
             'dtype': [(<numba.core.ir.Assign object at 0x000001E8A85C30E0>,
                        0)],
             'shape': [(<numba.core.ir.Assign object at 0x000001E8A85C3110>,
                        0)]})
2025-05-12 23:19:04,183 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A85C3EC0>
2025-05-12 23:19:04,199 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4330)
           2	RESUME(arg=0, lineno=4330)
           4	LOAD_FAST(arg=0, lineno=4333)
           6	LOAD_ATTR(arg=1, lineno=4333)
          26	LOAD_FAST(arg=1, lineno=4333)
          28	LOAD_FAST(arg=2, lineno=4333)
          30	CALL(arg=2, lineno=4333)
          38	RETURN_VALUE(arg=None, lineno=4333)
2025-05-12 23:19:04,200 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:04,201 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:04,201 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:04,202 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4330)
2025-05-12 23:19:04,202 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,202 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=4330)
2025-05-12 23:19:04,203 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,203 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4333)
2025-05-12 23:19:04,204 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,204 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=4333)
2025-05-12 23:19:04,204 - numba.core.byteflow - DEBUG - stack ['$arrtype4.0']
2025-05-12 23:19:04,205 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=4333)
2025-05-12 23:19:04,205 - numba.core.byteflow - DEBUG - stack ['$null$6.2', '$6load_attr.1']
2025-05-12 23:19:04,205 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=LOAD_FAST(arg=2, lineno=4333)
2025-05-12 23:19:04,205 - numba.core.byteflow - DEBUG - stack ['$null$6.2', '$6load_attr.1', '$size26.3']
2025-05-12 23:19:04,206 - numba.core.byteflow - DEBUG - dispatch pc=30, inst=CALL(arg=2, lineno=4333)
2025-05-12 23:19:04,206 - numba.core.byteflow - DEBUG - stack ['$null$6.2', '$6load_attr.1', '$size26.3', '$align28.4']
2025-05-12 23:19:04,206 - numba.core.byteflow - DEBUG - dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4333)
2025-05-12 23:19:04,207 - numba.core.byteflow - DEBUG - stack ['$30call.5']
2025-05-12 23:19:04,207 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:04,207 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:04,207 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:04,208 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:04,208 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:04,208 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:04,208 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:04,209 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:04,209 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:04,209 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$arrtype4.0'}), (6, {'item': '$arrtype4.0', 'res': '$6load_attr.1'}), (26, {'res': '$size26.3'}), (28, {'res': '$align28.4'}), (30, {'func': '$6load_attr.1', 'args': ['$size26.3', '$align28.4'], 'kw_names': None, 'res': '$30call.5'}), (38, {'retval': '$30call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:04,210 - numba.core.interpreter - DEBUG - label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $6load_attr.1 = getattr(value=arrtype, attr=_allocate) ['$6load_attr.1', 'arrtype']
    $30call.5 = call $6load_attr.1(size, align, func=$6load_attr.1, args=[Var(size, arrayobj.py:4330), Var(align, arrayobj.py:4330)], kws=(), vararg=None, varkwarg=None, target=None) ['$30call.5', '$6load_attr.1', 'align', 'size']
    $38return_value.6 = cast(value=$30call.5) ['$30call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2025-05-12 23:19:04,226 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:04,227 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A86C6540>
2025-05-12 23:19:04,227 - numba.core.ssa - DEBUG - on stmt: arrtype = arg(0, name=arrtype)
2025-05-12 23:19:04,228 - numba.core.ssa - DEBUG - on stmt: size = arg(1, name=size)
2025-05-12 23:19:04,228 - numba.core.ssa - DEBUG - on stmt: align = arg(2, name=align)
2025-05-12 23:19:04,228 - numba.core.ssa - DEBUG - on stmt: $6load_attr.1 = getattr(value=arrtype, attr=_allocate)
2025-05-12 23:19:04,228 - numba.core.ssa - DEBUG - on stmt: $30call.5 = call $6load_attr.1(size, align, func=$6load_attr.1, args=[Var(size, arrayobj.py:4330), Var(align, arrayobj.py:4330)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,228 - numba.core.ssa - DEBUG - on stmt: $38return_value.6 = cast(value=$30call.5)
2025-05-12 23:19:04,229 - numba.core.ssa - DEBUG - on stmt: return $38return_value.6
2025-05-12 23:19:04,229 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$30call.5': [(<numba.core.ir.Assign object at 0x000001E8A86C5010>,
                            0)],
             '$38return_value.6': [(<numba.core.ir.Assign object at 0x000001E8A86C5130>,
                                    0)],
             '$6load_attr.1': [(<numba.core.ir.Assign object at 0x000001E8A86C4C80>,
                                0)],
             'align': [(<numba.core.ir.Assign object at 0x000001E8A86C4A10>,
                        0)],
             'arrtype': [(<numba.core.ir.Assign object at 0x000001E8A86C4830>,
                          0)],
             'size': [(<numba.core.ir.Assign object at 0x000001E8A86C4920>,
                       0)]})
2025-05-12 23:19:04,230 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A86C6540>
2025-05-12 23:19:04,234 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=4325)
           2	RESUME(arg=0, lineno=4325)
           4	LOAD_GLOBAL(arg=1, lineno=4326)
          14	LOAD_FAST(arg=1, lineno=4326)
          16	LOAD_FAST(arg=2, lineno=4326)
          18	CALL(arg=2, lineno=4326)
          26	RETURN_VALUE(arg=None, lineno=4326)
2025-05-12 23:19:04,235 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:04,235 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:04,236 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:04,236 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=4325)
2025-05-12 23:19:04,237 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,237 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=4325)
2025-05-12 23:19:04,237 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,237 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4326)
2025-05-12 23:19:04,237 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,238 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=4326)
2025-05-12 23:19:04,238 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:04,238 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=4326)
2025-05-12 23:19:04,238 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$allocsize14.2']
2025-05-12 23:19:04,238 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=CALL(arg=2, lineno=4326)
2025-05-12 23:19:04,239 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$allocsize14.2', '$align16.3']
2025-05-12 23:19:04,239 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=4326)
2025-05-12 23:19:04,239 - numba.core.byteflow - DEBUG - stack ['$18call.4']
2025-05-12 23:19:04,240 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:04,240 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:04,240 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:04,240 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:04,240 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:04,241 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:04,241 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:04,241 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:04,242 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:04,242 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$allocsize14.2'}), (16, {'res': '$align16.3'}), (18, {'func': '$4load_global.0', 'args': ['$allocsize14.2', '$align16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:04,243 - numba.core.interpreter - DEBUG - label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $4load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(allocsize, align, func=$4load_global.0, args=[Var(allocsize, arrayobj.py:4325), Var(align, arrayobj.py:4325)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'align', 'allocsize']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-05-12 23:19:04,245 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:04,246 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A86C7E90>
2025-05-12 23:19:04,246 - numba.core.ssa - DEBUG - on stmt: cls = arg(0, name=cls)
2025-05-12 23:19:04,246 - numba.core.ssa - DEBUG - on stmt: allocsize = arg(1, name=allocsize)
2025-05-12 23:19:04,246 - numba.core.ssa - DEBUG - on stmt: align = arg(2, name=align)
2025-05-12 23:19:04,247 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
2025-05-12 23:19:04,247 - numba.core.ssa - DEBUG - on stmt: $18call.4 = call $4load_global.0(allocsize, align, func=$4load_global.0, args=[Var(allocsize, arrayobj.py:4325), Var(align, arrayobj.py:4325)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,247 - numba.core.ssa - DEBUG - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-05-12 23:19:04,248 - numba.core.ssa - DEBUG - on stmt: return $26return_value.5
2025-05-12 23:19:04,248 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001E8A86C78C0>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A86C79E0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A86C7530>,
                                  0)],
             'align': [(<numba.core.ir.Assign object at 0x000001E8A86C73B0>,
                        0)],
             'allocsize': [(<numba.core.ir.Assign object at 0x000001E8A86C72C0>,
                            0)],
             'cls': [(<numba.core.ir.Assign object at 0x000001E8A86C71D0>, 0)]})
2025-05-12 23:19:04,248 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A86C7E90>
2025-05-12 23:19:04,395 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=200)
           2	COPY_FREE_VARS(arg=1, lineno=200)
           4	RESUME(arg=0, lineno=200)
           6	LOAD_FAST(arg=0, lineno=201)
           8	LOAD_DEREF(arg=2, lineno=201)
          10	BINARY_SUBSCR(arg=None, lineno=201)
          14	RETURN_VALUE(arg=None, lineno=201)
2025-05-12 23:19:04,396 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:04,396 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:04,396 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:04,397 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=200)
2025-05-12 23:19:04,397 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,397 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=200)
2025-05-12 23:19:04,398 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,398 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=RESUME(arg=0, lineno=200)
2025-05-12 23:19:04,398 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,399 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=201)
2025-05-12 23:19:04,399 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,399 - numba.core.byteflow - DEBUG - dispatch pc=8, inst=LOAD_DEREF(arg=2, lineno=201)
2025-05-12 23:19:04,399 - numba.core.byteflow - DEBUG - stack ['$tup6.0']
2025-05-12 23:19:04,401 - numba.core.byteflow - DEBUG - dispatch pc=10, inst=BINARY_SUBSCR(arg=None, lineno=201)
2025-05-12 23:19:04,401 - numba.core.byteflow - DEBUG - stack ['$tup6.0', '$8load_deref.1']
2025-05-12 23:19:04,401 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=RETURN_VALUE(arg=None, lineno=201)
2025-05-12 23:19:04,402 - numba.core.byteflow - DEBUG - stack ['$10binary_subscr.2']
2025-05-12 23:19:04,402 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:04,403 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:04,403 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:04,403 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:04,405 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:04,405 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:04,405 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:04,405 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:04,406 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:04,406 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$tup6.0'}), (8, {'res': '$8load_deref.1'}), (10, {'index': '$8load_deref.1', 'target': '$tup6.0', 'res': '$10binary_subscr.2'}), (14, {'retval': '$10binary_subscr.2', 'castval': '$14return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:04,408 - numba.core.interpreter - DEBUG - label 0:
    tup = arg(0, name=tup)                   ['tup']
    idx = arg(1, name=idx)                   ['idx']
    $8load_deref.1 = freevar(idx_val: 0)     ['$8load_deref.1']
    $10binary_subscr.2 = getitem(value=tup, index=$8load_deref.1, fn=<built-in function getitem>) ['$10binary_subscr.2', '$8load_deref.1', 'tup']
    $14return_value.3 = cast(value=$10binary_subscr.2) ['$10binary_subscr.2', '$14return_value.3']
    return $14return_value.3                 ['$14return_value.3']

2025-05-12 23:19:04,413 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:04,413 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8779C10>
2025-05-12 23:19:04,414 - numba.core.ssa - DEBUG - on stmt: tup = arg(0, name=tup)
2025-05-12 23:19:04,415 - numba.core.ssa - DEBUG - on stmt: idx = arg(1, name=idx)
2025-05-12 23:19:04,415 - numba.core.ssa - DEBUG - on stmt: $8load_deref.1 = freevar(idx_val: 0)
2025-05-12 23:19:04,415 - numba.core.ssa - DEBUG - on stmt: $10binary_subscr.2 = static_getitem(value=tup, index=0, index_var=$8load_deref.1, fn=<built-in function getitem>)
2025-05-12 23:19:04,416 - numba.core.ssa - DEBUG - on stmt: $14return_value.3 = cast(value=$10binary_subscr.2)
2025-05-12 23:19:04,416 - numba.core.ssa - DEBUG - on stmt: return $14return_value.3
2025-05-12 23:19:04,417 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$10binary_subscr.2': [(<numba.core.ir.Assign object at 0x000001E8A877A060>,
                                     0)],
             '$14return_value.3': [(<numba.core.ir.Assign object at 0x000001E8A877A8A0>,
                                    0)],
             '$8load_deref.1': [(<numba.core.ir.Assign object at 0x000001E8A877A570>,
                                 0)],
             'idx': [(<numba.core.ir.Assign object at 0x000001E8A877AA20>, 0)],
             'tup': [(<numba.core.ir.Assign object at 0x000001E8A8778290>, 0)]})
2025-05-12 23:19:04,417 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8779C10>
2025-05-12 23:19:04,778 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1650)
           2	RESUME(arg=0, lineno=1650)
           4	LOAD_GLOBAL(arg=1, lineno=1651)
          14	LOAD_FAST(arg=0, lineno=1651)
          16	CALL(arg=1, lineno=1651)
          24	LOAD_CONST(arg=1, lineno=1651)
          26	COMPARE_OP(arg=40, lineno=1651)
          30	POP_JUMP_IF_FALSE(arg=10, lineno=1651)
          32	LOAD_CONST(arg=2, lineno=1652)
          34	LOAD_FAST(arg=0, lineno=1652)
          36	LOAD_CONST(arg=3, lineno=1652)
          38	BINARY_SUBSCR(arg=None, lineno=1652)
          42	FORMAT_VALUE(arg=0, lineno=1652)
          44	LOAD_CONST(arg=4, lineno=1652)
          46	BUILD_STRING(arg=3, lineno=1652)
          48	STORE_FAST(arg=2, lineno=1652)
          50	JUMP_FORWARD(arg=44, lineno=1652)
>         52	LOAD_CONST(arg=2, lineno=1654)
          54	LOAD_CONST(arg=5, lineno=1654)
          56	LOAD_ATTR(arg=3, lineno=1654)
          76	LOAD_FAST(arg=0, lineno=1654)
          78	GET_ITER(arg=None, lineno=1654)
          80	LOAD_FAST_AND_CLEAR(arg=3, lineno=1654)
          82	SWAP(arg=2, lineno=1654)
          84	BUILD_LIST(arg=0, lineno=1654)
          86	SWAP(arg=2, lineno=1654)
>         88	FOR_ITER(arg=13, lineno=1654)
          92	STORE_FAST(arg=3, lineno=1654)
          94	LOAD_GLOBAL(arg=5, lineno=1654)
         104	LOAD_FAST(arg=3, lineno=1654)
         106	CALL(arg=1, lineno=1654)
         114	LIST_APPEND(arg=2, lineno=1654)
         116	JUMP_BACKWARD(arg=15, lineno=1654)
>        118	END_FOR(arg=None, lineno=1654)
         120	SWAP(arg=2, lineno=1654)
         122	STORE_FAST(arg=3, lineno=1654)
         124	CALL(arg=1, lineno=1654)
         132	FORMAT_VALUE(arg=0, lineno=1654)
         134	LOAD_CONST(arg=6, lineno=1654)
         136	BUILD_STRING(arg=3, lineno=1654)
         138	STORE_FAST(arg=2, lineno=1654)
>        140	LOAD_GLOBAL(arg=1, lineno=1655)
         150	LOAD_FAST(arg=1, lineno=1655)
         152	CALL(arg=1, lineno=1655)
         160	LOAD_CONST(arg=1, lineno=1655)
         162	COMPARE_OP(arg=40, lineno=1655)
         166	POP_JUMP_IF_FALSE(arg=10, lineno=1655)
         168	LOAD_CONST(arg=2, lineno=1656)
         170	LOAD_FAST(arg=1, lineno=1656)
         172	LOAD_CONST(arg=3, lineno=1656)
         174	BINARY_SUBSCR(arg=None, lineno=1656)
         178	FORMAT_VALUE(arg=0, lineno=1656)
         180	LOAD_CONST(arg=4, lineno=1656)
         182	BUILD_STRING(arg=3, lineno=1656)
         184	STORE_FAST(arg=4, lineno=1656)
         186	JUMP_FORWARD(arg=44, lineno=1656)
>        188	LOAD_CONST(arg=2, lineno=1658)
         190	LOAD_CONST(arg=5, lineno=1658)
         192	LOAD_ATTR(arg=3, lineno=1658)
         212	LOAD_FAST(arg=1, lineno=1658)
         214	GET_ITER(arg=None, lineno=1658)
         216	LOAD_FAST_AND_CLEAR(arg=3, lineno=1658)
         218	SWAP(arg=2, lineno=1658)
         220	BUILD_LIST(arg=0, lineno=1658)
         222	SWAP(arg=2, lineno=1658)
>        224	FOR_ITER(arg=13, lineno=1658)
         228	STORE_FAST(arg=3, lineno=1658)
         230	LOAD_GLOBAL(arg=5, lineno=1658)
         240	LOAD_FAST(arg=3, lineno=1658)
         242	CALL(arg=1, lineno=1658)
         250	LIST_APPEND(arg=2, lineno=1658)
         252	JUMP_BACKWARD(arg=15, lineno=1658)
>        254	END_FOR(arg=None, lineno=1658)
         256	SWAP(arg=2, lineno=1658)
         258	STORE_FAST(arg=3, lineno=1658)
         260	CALL(arg=1, lineno=1658)
         268	FORMAT_VALUE(arg=0, lineno=1658)
         270	LOAD_CONST(arg=6, lineno=1658)
         272	BUILD_STRING(arg=3, lineno=1658)
         274	STORE_FAST(arg=4, lineno=1658)
>        276	LOAD_CONST(arg=7, lineno=1659)
         278	LOAD_FAST(arg=2, lineno=1659)
         280	FORMAT_VALUE(arg=0, lineno=1659)
         282	LOAD_CONST(arg=8, lineno=1659)
         284	LOAD_FAST(arg=4, lineno=1660)
         286	FORMAT_VALUE(arg=0, lineno=1660)
         288	BUILD_STRING(arg=4, lineno=1659)
         290	STORE_FAST(arg=5, lineno=1659)
         292	LOAD_GLOBAL(arg=7, lineno=1661)
         302	LOAD_FAST(arg=5, lineno=1661)
         304	CALL(arg=1, lineno=1661)
         312	RAISE_VARARGS(arg=1, lineno=1661)
         314	SWAP(arg=2, lineno=1661)
         316	POP_TOP(arg=None, lineno=1661)
         318	SWAP(arg=2, lineno=1654)
         320	STORE_FAST(arg=3, lineno=1654)
         322	RERAISE(arg=0, lineno=1654)
         324	SWAP(arg=2, lineno=1654)
         326	POP_TOP(arg=None, lineno=1654)
         328	SWAP(arg=2, lineno=1658)
         330	STORE_FAST(arg=3, lineno=1658)
         332	RERAISE(arg=0, lineno=1658)
2025-05-12 23:19:04,780 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:04,780 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:04,781 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:04,781 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1650)
2025-05-12 23:19:04,781 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,782 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=1650)
2025-05-12 23:19:04,782 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,782 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1651)
2025-05-12 23:19:04,782 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,782 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=1651)
2025-05-12 23:19:04,782 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:04,783 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=CALL(arg=1, lineno=1651)
2025-05-12 23:19:04,783 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$src_shapes14.2']
2025-05-12 23:19:04,783 - numba.core.byteflow - DEBUG - dispatch pc=24, inst=LOAD_CONST(arg=1, lineno=1651)
2025-05-12 23:19:04,783 - numba.core.byteflow - DEBUG - stack ['$16call.3']
2025-05-12 23:19:04,784 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=COMPARE_OP(arg=40, lineno=1651)
2025-05-12 23:19:04,784 - numba.core.byteflow - DEBUG - stack ['$16call.3', '$const24.4.1']
2025-05-12 23:19:04,785 - numba.core.byteflow - DEBUG - dispatch pc=30, inst=POP_JUMP_IF_FALSE(arg=10, lineno=1651)
2025-05-12 23:19:04,785 - numba.core.byteflow - DEBUG - stack ['$26compare_op.5']
2025-05-12 23:19:04,785 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:04,787 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=52 nstack_initial=0)])
2025-05-12 23:19:04,787 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:04,788 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=32 nstack_initial=0)
2025-05-12 23:19:04,788 - numba.core.byteflow - DEBUG - dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=1652)
2025-05-12 23:19:04,788 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,789 - numba.core.byteflow - DEBUG - dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=1652)
2025-05-12 23:19:04,789 - numba.core.byteflow - DEBUG - stack ['$const32.0.2']
2025-05-12 23:19:04,789 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=1652)
2025-05-12 23:19:04,790 - numba.core.byteflow - DEBUG - stack ['$const32.0.2', '$src_shapes34.1']
2025-05-12 23:19:04,790 - numba.core.byteflow - DEBUG - dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=1652)
2025-05-12 23:19:04,791 - numba.core.byteflow - DEBUG - stack ['$const32.0.2', '$src_shapes34.1', '$const36.2.3']
2025-05-12 23:19:04,791 - numba.core.byteflow - DEBUG - dispatch pc=42, inst=FORMAT_VALUE(arg=0, lineno=1652)
2025-05-12 23:19:04,792 - numba.core.byteflow - DEBUG - stack ['$const32.0.2', '$38binary_subscr.3']
2025-05-12 23:19:04,792 - numba.core.byteflow - DEBUG - dispatch pc=44, inst=LOAD_CONST(arg=4, lineno=1652)
2025-05-12 23:19:04,792 - numba.core.byteflow - DEBUG - stack ['$const32.0.2', '$42format_value.5']
2025-05-12 23:19:04,792 - numba.core.byteflow - DEBUG - dispatch pc=46, inst=BUILD_STRING(arg=3, lineno=1652)
2025-05-12 23:19:04,792 - numba.core.byteflow - DEBUG - stack ['$const32.0.2', '$42format_value.5', '$const44.6.4']
2025-05-12 23:19:04,793 - numba.core.byteflow - DEBUG - dispatch pc=48, inst=STORE_FAST(arg=2, lineno=1652)
2025-05-12 23:19:04,793 - numba.core.byteflow - DEBUG - stack ['$46build_string.8']
2025-05-12 23:19:04,794 - numba.core.byteflow - DEBUG - dispatch pc=50, inst=JUMP_FORWARD(arg=44, lineno=1652)
2025-05-12 23:19:04,794 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,794 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=140, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:04,795 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=140 nstack_initial=0)])
2025-05-12 23:19:04,795 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:04,795 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=52 nstack_initial=0)
2025-05-12 23:19:04,797 - numba.core.byteflow - DEBUG - dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=1654)
2025-05-12 23:19:04,797 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,798 - numba.core.byteflow - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=5, lineno=1654)
2025-05-12 23:19:04,798 - numba.core.byteflow - DEBUG - stack ['$const52.0.2']
2025-05-12 23:19:04,799 - numba.core.byteflow - DEBUG - dispatch pc=56, inst=LOAD_ATTR(arg=3, lineno=1654)
2025-05-12 23:19:04,799 - numba.core.byteflow - DEBUG - stack ['$const52.0.2', '$const54.1.5']
2025-05-12 23:19:04,801 - numba.core.byteflow - DEBUG - dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=1654)
2025-05-12 23:19:04,801 - numba.core.byteflow - DEBUG - stack ['$const52.0.2', '$null$56.3', '$56load_attr.2']
2025-05-12 23:19:04,801 - numba.core.byteflow - DEBUG - dispatch pc=78, inst=GET_ITER(arg=None, lineno=1654)
2025-05-12 23:19:04,802 - numba.core.byteflow - DEBUG - stack ['$const52.0.2', '$null$56.3', '$56load_attr.2', '$src_shapes76.4']
2025-05-12 23:19:04,802 - numba.core.byteflow - DEBUG - dispatch pc=80, inst=LOAD_FAST_AND_CLEAR(arg=3, lineno=1654)
2025-05-12 23:19:04,803 - numba.core.byteflow - DEBUG - stack ['$const52.0.2', '$null$56.3', '$56load_attr.2', '$78get_iter.5']
2025-05-12 23:19:04,803 - numba.core.byteflow - DEBUG - dispatch pc=82, inst=SWAP(arg=2, lineno=1654)
2025-05-12 23:19:04,803 - numba.core.byteflow - DEBUG - stack ['$const52.0.2', '$null$56.3', '$56load_attr.2', '$78get_iter.5', '$x80.6']
2025-05-12 23:19:04,804 - numba.core.byteflow - DEBUG - dispatch pc=84, inst=BUILD_LIST(arg=0, lineno=1654)
2025-05-12 23:19:04,804 - numba.core.byteflow - DEBUG - stack ['$const52.0.2', '$null$56.3', '$56load_attr.2', '$x80.6', '$78get_iter.5']
2025-05-12 23:19:04,804 - numba.core.byteflow - DEBUG - dispatch pc=86, inst=SWAP(arg=2, lineno=1654)
2025-05-12 23:19:04,804 - numba.core.byteflow - DEBUG - stack ['$const52.0.2', '$null$56.3', '$56load_attr.2', '$x80.6', '$78get_iter.5', '$84build_list.7']
2025-05-12 23:19:04,805 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=88, stack=('$const52.0.2', '$null$56.3', '$56load_attr.2', '$x80.6', '$84build_list.7', '$78get_iter.5'), blockstack=(), npush=0)]
2025-05-12 23:19:04,805 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=140 nstack_initial=0), State(pc_initial=88 nstack_initial=6)])
2025-05-12 23:19:04,806 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:04,806 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=140 nstack_initial=0)
2025-05-12 23:19:04,806 - numba.core.byteflow - DEBUG - dispatch pc=140, inst=LOAD_GLOBAL(arg=1, lineno=1655)
2025-05-12 23:19:04,806 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,806 - numba.core.byteflow - DEBUG - dispatch pc=150, inst=LOAD_FAST(arg=1, lineno=1655)
2025-05-12 23:19:04,806 - numba.core.byteflow - DEBUG - stack ['$null$140.1', '$140load_global.0']
2025-05-12 23:19:04,807 - numba.core.byteflow - DEBUG - dispatch pc=152, inst=CALL(arg=1, lineno=1655)
2025-05-12 23:19:04,807 - numba.core.byteflow - DEBUG - stack ['$null$140.1', '$140load_global.0', '$index_shape150.2']
2025-05-12 23:19:04,807 - numba.core.byteflow - DEBUG - dispatch pc=160, inst=LOAD_CONST(arg=1, lineno=1655)
2025-05-12 23:19:04,807 - numba.core.byteflow - DEBUG - stack ['$152call.3']
2025-05-12 23:19:04,808 - numba.core.byteflow - DEBUG - dispatch pc=162, inst=COMPARE_OP(arg=40, lineno=1655)
2025-05-12 23:19:04,808 - numba.core.byteflow - DEBUG - stack ['$152call.3', '$const160.4.1']
2025-05-12 23:19:04,808 - numba.core.byteflow - DEBUG - dispatch pc=166, inst=POP_JUMP_IF_FALSE(arg=10, lineno=1655)
2025-05-12 23:19:04,808 - numba.core.byteflow - DEBUG - stack ['$162compare_op.5']
2025-05-12 23:19:04,808 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0), Edge(pc=188, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:04,808 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=88 nstack_initial=6), State(pc_initial=168 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
2025-05-12 23:19:04,809 - numba.core.byteflow - DEBUG - stack: ['$phi88.0', '$null$88.1', '$phi88.2', '$phi88.3', '$phi88.4', '$phi88.5']
2025-05-12 23:19:04,809 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=88 nstack_initial=6)
2025-05-12 23:19:04,809 - numba.core.byteflow - DEBUG - dispatch pc=88, inst=FOR_ITER(arg=13, lineno=1654)
2025-05-12 23:19:04,810 - numba.core.byteflow - DEBUG - stack ['$phi88.0', '$null$88.1', '$phi88.2', '$phi88.3', '$phi88.4', '$phi88.5']
2025-05-12 23:19:04,810 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=118, stack=('$phi88.0', '$null$88.1', '$phi88.2', '$phi88.3', '$phi88.4', '$phi88.5', '$88for_iter.7'), blockstack=(), npush=0), Edge(pc=92, stack=('$phi88.0', '$null$88.1', '$phi88.2', '$phi88.3', '$phi88.4', '$phi88.5', '$88for_iter.7'), blockstack=(), npush=0)]
2025-05-12 23:19:04,810 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=188 nstack_initial=0), State(pc_initial=118 nstack_initial=7), State(pc_initial=92 nstack_initial=7)])
2025-05-12 23:19:04,811 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:04,811 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=168 nstack_initial=0)
2025-05-12 23:19:04,811 - numba.core.byteflow - DEBUG - dispatch pc=168, inst=LOAD_CONST(arg=2, lineno=1656)
2025-05-12 23:19:04,811 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,812 - numba.core.byteflow - DEBUG - dispatch pc=170, inst=LOAD_FAST(arg=1, lineno=1656)
2025-05-12 23:19:04,814 - numba.core.byteflow - DEBUG - stack ['$const168.0.2']
2025-05-12 23:19:04,815 - numba.core.byteflow - DEBUG - dispatch pc=172, inst=LOAD_CONST(arg=3, lineno=1656)
2025-05-12 23:19:04,815 - numba.core.byteflow - DEBUG - stack ['$const168.0.2', '$index_shape170.1']
2025-05-12 23:19:04,815 - numba.core.byteflow - DEBUG - dispatch pc=174, inst=BINARY_SUBSCR(arg=None, lineno=1656)
2025-05-12 23:19:04,815 - numba.core.byteflow - DEBUG - stack ['$const168.0.2', '$index_shape170.1', '$const172.2.3']
2025-05-12 23:19:04,816 - numba.core.byteflow - DEBUG - dispatch pc=178, inst=FORMAT_VALUE(arg=0, lineno=1656)
2025-05-12 23:19:04,816 - numba.core.byteflow - DEBUG - stack ['$const168.0.2', '$174binary_subscr.3']
2025-05-12 23:19:04,817 - numba.core.byteflow - DEBUG - dispatch pc=180, inst=LOAD_CONST(arg=4, lineno=1656)
2025-05-12 23:19:04,817 - numba.core.byteflow - DEBUG - stack ['$const168.0.2', '$178format_value.5']
2025-05-12 23:19:04,817 - numba.core.byteflow - DEBUG - dispatch pc=182, inst=BUILD_STRING(arg=3, lineno=1656)
2025-05-12 23:19:04,817 - numba.core.byteflow - DEBUG - stack ['$const168.0.2', '$178format_value.5', '$const180.6.4']
2025-05-12 23:19:04,817 - numba.core.byteflow - DEBUG - dispatch pc=184, inst=STORE_FAST(arg=4, lineno=1656)
2025-05-12 23:19:04,818 - numba.core.byteflow - DEBUG - stack ['$182build_string.8']
2025-05-12 23:19:04,818 - numba.core.byteflow - DEBUG - dispatch pc=186, inst=JUMP_FORWARD(arg=44, lineno=1656)
2025-05-12 23:19:04,818 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,818 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=276, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:04,818 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=188 nstack_initial=0), State(pc_initial=118 nstack_initial=7), State(pc_initial=92 nstack_initial=7), State(pc_initial=276 nstack_initial=0)])
2025-05-12 23:19:04,819 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:04,819 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=188 nstack_initial=0)
2025-05-12 23:19:04,821 - numba.core.byteflow - DEBUG - dispatch pc=188, inst=LOAD_CONST(arg=2, lineno=1658)
2025-05-12 23:19:04,823 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,823 - numba.core.byteflow - DEBUG - dispatch pc=190, inst=LOAD_CONST(arg=5, lineno=1658)
2025-05-12 23:19:04,823 - numba.core.byteflow - DEBUG - stack ['$const188.0.2']
2025-05-12 23:19:04,824 - numba.core.byteflow - DEBUG - dispatch pc=192, inst=LOAD_ATTR(arg=3, lineno=1658)
2025-05-12 23:19:04,824 - numba.core.byteflow - DEBUG - stack ['$const188.0.2', '$const190.1.5']
2025-05-12 23:19:04,824 - numba.core.byteflow - DEBUG - dispatch pc=212, inst=LOAD_FAST(arg=1, lineno=1658)
2025-05-12 23:19:04,825 - numba.core.byteflow - DEBUG - stack ['$const188.0.2', '$null$192.3', '$192load_attr.2']
2025-05-12 23:19:04,826 - numba.core.byteflow - DEBUG - dispatch pc=214, inst=GET_ITER(arg=None, lineno=1658)
2025-05-12 23:19:04,826 - numba.core.byteflow - DEBUG - stack ['$const188.0.2', '$null$192.3', '$192load_attr.2', '$index_shape212.4']
2025-05-12 23:19:04,827 - numba.core.byteflow - DEBUG - dispatch pc=216, inst=LOAD_FAST_AND_CLEAR(arg=3, lineno=1658)
2025-05-12 23:19:04,827 - numba.core.byteflow - DEBUG - stack ['$const188.0.2', '$null$192.3', '$192load_attr.2', '$214get_iter.5']
2025-05-12 23:19:04,827 - numba.core.byteflow - DEBUG - dispatch pc=218, inst=SWAP(arg=2, lineno=1658)
2025-05-12 23:19:04,828 - numba.core.byteflow - DEBUG - stack ['$const188.0.2', '$null$192.3', '$192load_attr.2', '$214get_iter.5', '$x216.6']
2025-05-12 23:19:04,828 - numba.core.byteflow - DEBUG - dispatch pc=220, inst=BUILD_LIST(arg=0, lineno=1658)
2025-05-12 23:19:04,828 - numba.core.byteflow - DEBUG - stack ['$const188.0.2', '$null$192.3', '$192load_attr.2', '$x216.6', '$214get_iter.5']
2025-05-12 23:19:04,828 - numba.core.byteflow - DEBUG - dispatch pc=222, inst=SWAP(arg=2, lineno=1658)
2025-05-12 23:19:04,830 - numba.core.byteflow - DEBUG - stack ['$const188.0.2', '$null$192.3', '$192load_attr.2', '$x216.6', '$214get_iter.5', '$220build_list.7']
2025-05-12 23:19:04,832 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=224, stack=('$const188.0.2', '$null$192.3', '$192load_attr.2', '$x216.6', '$220build_list.7', '$214get_iter.5'), blockstack=(), npush=0)]
2025-05-12 23:19:04,832 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=118 nstack_initial=7), State(pc_initial=92 nstack_initial=7), State(pc_initial=276 nstack_initial=0), State(pc_initial=224 nstack_initial=6)])
2025-05-12 23:19:04,832 - numba.core.byteflow - DEBUG - stack: ['$phi118.0', '$null$118.1', '$phi118.2', '$phi118.3', '$phi118.4', '$phi118.5', '$phi118.6']
2025-05-12 23:19:04,833 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=118 nstack_initial=7)
2025-05-12 23:19:04,833 - numba.core.byteflow - DEBUG - dispatch pc=118, inst=END_FOR(arg=None, lineno=1654)
2025-05-12 23:19:04,833 - numba.core.byteflow - DEBUG - stack ['$phi118.0', '$null$118.1', '$phi118.2', '$phi118.3', '$phi118.4', '$phi118.5', '$phi118.6']
2025-05-12 23:19:04,834 - numba.core.byteflow - DEBUG - dispatch pc=120, inst=SWAP(arg=2, lineno=1654)
2025-05-12 23:19:04,834 - numba.core.byteflow - DEBUG - stack ['$phi118.0', '$null$118.1', '$phi118.2', '$phi118.3', '$phi118.4']
2025-05-12 23:19:04,834 - numba.core.byteflow - DEBUG - dispatch pc=122, inst=STORE_FAST(arg=3, lineno=1654)
2025-05-12 23:19:04,834 - numba.core.byteflow - DEBUG - stack ['$phi118.0', '$null$118.1', '$phi118.2', '$phi118.4', '$phi118.3']
2025-05-12 23:19:04,835 - numba.core.byteflow - DEBUG - dispatch pc=124, inst=CALL(arg=1, lineno=1654)
2025-05-12 23:19:04,835 - numba.core.byteflow - DEBUG - stack ['$phi118.0', '$null$118.1', '$phi118.2', '$phi118.4']
2025-05-12 23:19:04,835 - numba.core.byteflow - DEBUG - dispatch pc=132, inst=FORMAT_VALUE(arg=0, lineno=1654)
2025-05-12 23:19:04,836 - numba.core.byteflow - DEBUG - stack ['$phi118.0', '$124call.7']
2025-05-12 23:19:04,836 - numba.core.byteflow - DEBUG - dispatch pc=134, inst=LOAD_CONST(arg=6, lineno=1654)
2025-05-12 23:19:04,837 - numba.core.byteflow - DEBUG - stack ['$phi118.0', '$132format_value.9']
2025-05-12 23:19:04,839 - numba.core.byteflow - DEBUG - dispatch pc=136, inst=BUILD_STRING(arg=3, lineno=1654)
2025-05-12 23:19:04,839 - numba.core.byteflow - DEBUG - stack ['$phi118.0', '$132format_value.9', '$const134.10.6']
2025-05-12 23:19:04,840 - numba.core.byteflow - DEBUG - dispatch pc=138, inst=STORE_FAST(arg=2, lineno=1654)
2025-05-12 23:19:04,840 - numba.core.byteflow - DEBUG - stack ['$136build_string.12']
2025-05-12 23:19:04,840 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=140, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:04,840 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=92 nstack_initial=7), State(pc_initial=276 nstack_initial=0), State(pc_initial=224 nstack_initial=6), State(pc_initial=140 nstack_initial=0)])
2025-05-12 23:19:04,841 - numba.core.byteflow - DEBUG - stack: ['$phi92.0', '$null$92.1', '$phi92.2', '$phi92.3', '$phi92.4', '$phi92.5', '$phi92.6']
2025-05-12 23:19:04,841 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=92 nstack_initial=7)
2025-05-12 23:19:04,842 - numba.core.byteflow - DEBUG - dispatch pc=92, inst=STORE_FAST(arg=3, lineno=1654)
2025-05-12 23:19:04,842 - numba.core.byteflow - DEBUG - stack ['$phi92.0', '$null$92.1', '$phi92.2', '$phi92.3', '$phi92.4', '$phi92.5', '$phi92.6']
2025-05-12 23:19:04,843 - numba.core.byteflow - DEBUG - dispatch pc=94, inst=LOAD_GLOBAL(arg=5, lineno=1654)
2025-05-12 23:19:04,843 - numba.core.byteflow - DEBUG - stack ['$phi92.0', '$null$92.1', '$phi92.2', '$phi92.3', '$phi92.4', '$phi92.5']
2025-05-12 23:19:04,843 - numba.core.byteflow - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=3, lineno=1654)
2025-05-12 23:19:04,844 - numba.core.byteflow - DEBUG - stack ['$phi92.0', '$null$92.1', '$phi92.2', '$phi92.3', '$phi92.4', '$phi92.5', '$null$94.8', '$94load_global.7']
2025-05-12 23:19:04,844 - numba.core.byteflow - DEBUG - dispatch pc=106, inst=CALL(arg=1, lineno=1654)
2025-05-12 23:19:04,844 - numba.core.byteflow - DEBUG - stack ['$phi92.0', '$null$92.1', '$phi92.2', '$phi92.3', '$phi92.4', '$phi92.5', '$null$94.8', '$94load_global.7', '$x104.9']
2025-05-12 23:19:04,845 - numba.core.byteflow - DEBUG - dispatch pc=114, inst=LIST_APPEND(arg=2, lineno=1654)
2025-05-12 23:19:04,845 - numba.core.byteflow - DEBUG - stack ['$phi92.0', '$null$92.1', '$phi92.2', '$phi92.3', '$phi92.4', '$phi92.5', '$106call.10']
2025-05-12 23:19:04,845 - numba.core.byteflow - DEBUG - dispatch pc=116, inst=JUMP_BACKWARD(arg=15, lineno=1654)
2025-05-12 23:19:04,846 - numba.core.byteflow - DEBUG - stack ['$phi92.0', '$null$92.1', '$phi92.2', '$phi92.3', '$phi92.4', '$phi92.5']
2025-05-12 23:19:04,846 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=88, stack=('$phi92.0', '$null$92.1', '$phi92.2', '$phi92.3', '$phi92.4', '$phi92.5'), blockstack=(), npush=0)]
2025-05-12 23:19:04,847 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=276 nstack_initial=0), State(pc_initial=224 nstack_initial=6), State(pc_initial=140 nstack_initial=0), State(pc_initial=88 nstack_initial=6)])
2025-05-12 23:19:04,848 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:04,848 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=276 nstack_initial=0)
2025-05-12 23:19:04,849 - numba.core.byteflow - DEBUG - dispatch pc=276, inst=LOAD_CONST(arg=7, lineno=1659)
2025-05-12 23:19:04,849 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,849 - numba.core.byteflow - DEBUG - dispatch pc=278, inst=LOAD_FAST(arg=2, lineno=1659)
2025-05-12 23:19:04,849 - numba.core.byteflow - DEBUG - stack ['$const276.0.7']
2025-05-12 23:19:04,850 - numba.core.byteflow - DEBUG - dispatch pc=280, inst=FORMAT_VALUE(arg=0, lineno=1659)
2025-05-12 23:19:04,850 - numba.core.byteflow - DEBUG - stack ['$const276.0.7', '$shape_str278.1']
2025-05-12 23:19:04,850 - numba.core.byteflow - DEBUG - dispatch pc=282, inst=LOAD_CONST(arg=8, lineno=1659)
2025-05-12 23:19:04,851 - numba.core.byteflow - DEBUG - stack ['$const276.0.7', '$280format_value.3']
2025-05-12 23:19:04,851 - numba.core.byteflow - DEBUG - dispatch pc=284, inst=LOAD_FAST(arg=4, lineno=1660)
2025-05-12 23:19:04,851 - numba.core.byteflow - DEBUG - stack ['$const276.0.7', '$280format_value.3', '$const282.4.8']
2025-05-12 23:19:04,851 - numba.core.byteflow - DEBUG - dispatch pc=286, inst=FORMAT_VALUE(arg=0, lineno=1660)
2025-05-12 23:19:04,851 - numba.core.byteflow - DEBUG - stack ['$const276.0.7', '$280format_value.3', '$const282.4.8', '$index_str284.5']
2025-05-12 23:19:04,852 - numba.core.byteflow - DEBUG - dispatch pc=288, inst=BUILD_STRING(arg=4, lineno=1659)
2025-05-12 23:19:04,852 - numba.core.byteflow - DEBUG - stack ['$const276.0.7', '$280format_value.3', '$const282.4.8', '$286format_value.7']
2025-05-12 23:19:04,852 - numba.core.byteflow - DEBUG - dispatch pc=290, inst=STORE_FAST(arg=5, lineno=1659)
2025-05-12 23:19:04,852 - numba.core.byteflow - DEBUG - stack ['$288build_string.10']
2025-05-12 23:19:04,853 - numba.core.byteflow - DEBUG - dispatch pc=292, inst=LOAD_GLOBAL(arg=7, lineno=1661)
2025-05-12 23:19:04,853 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,853 - numba.core.byteflow - DEBUG - dispatch pc=302, inst=LOAD_FAST(arg=5, lineno=1661)
2025-05-12 23:19:04,854 - numba.core.byteflow - DEBUG - stack ['$null$292.12', '$292load_global.11']
2025-05-12 23:19:04,854 - numba.core.byteflow - DEBUG - dispatch pc=304, inst=CALL(arg=1, lineno=1661)
2025-05-12 23:19:04,854 - numba.core.byteflow - DEBUG - stack ['$null$292.12', '$292load_global.11', '$msg302.13']
2025-05-12 23:19:04,854 - numba.core.byteflow - DEBUG - dispatch pc=312, inst=RAISE_VARARGS(arg=1, lineno=1661)
2025-05-12 23:19:04,855 - numba.core.byteflow - DEBUG - stack ['$304call.14']
2025-05-12 23:19:04,856 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:04,856 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=224 nstack_initial=6), State(pc_initial=140 nstack_initial=0), State(pc_initial=88 nstack_initial=6)])
2025-05-12 23:19:04,856 - numba.core.byteflow - DEBUG - stack: ['$phi224.0', '$null$224.1', '$phi224.2', '$phi224.3', '$phi224.4', '$phi224.5']
2025-05-12 23:19:04,856 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=224 nstack_initial=6)
2025-05-12 23:19:04,857 - numba.core.byteflow - DEBUG - dispatch pc=224, inst=FOR_ITER(arg=13, lineno=1658)
2025-05-12 23:19:04,857 - numba.core.byteflow - DEBUG - stack ['$phi224.0', '$null$224.1', '$phi224.2', '$phi224.3', '$phi224.4', '$phi224.5']
2025-05-12 23:19:04,857 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=254, stack=('$phi224.0', '$null$224.1', '$phi224.2', '$phi224.3', '$phi224.4', '$phi224.5', '$224for_iter.7'), blockstack=(), npush=0), Edge(pc=228, stack=('$phi224.0', '$null$224.1', '$phi224.2', '$phi224.3', '$phi224.4', '$phi224.5', '$224for_iter.7'), blockstack=(), npush=0)]
2025-05-12 23:19:04,858 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=140 nstack_initial=0), State(pc_initial=88 nstack_initial=6), State(pc_initial=254 nstack_initial=7), State(pc_initial=228 nstack_initial=7)])
2025-05-12 23:19:04,858 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=88 nstack_initial=6), State(pc_initial=254 nstack_initial=7), State(pc_initial=228 nstack_initial=7)])
2025-05-12 23:19:04,859 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=254 nstack_initial=7), State(pc_initial=228 nstack_initial=7)])
2025-05-12 23:19:04,859 - numba.core.byteflow - DEBUG - stack: ['$phi254.0', '$null$254.1', '$phi254.2', '$phi254.3', '$phi254.4', '$phi254.5', '$phi254.6']
2025-05-12 23:19:04,859 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=254 nstack_initial=7)
2025-05-12 23:19:04,859 - numba.core.byteflow - DEBUG - dispatch pc=254, inst=END_FOR(arg=None, lineno=1658)
2025-05-12 23:19:04,859 - numba.core.byteflow - DEBUG - stack ['$phi254.0', '$null$254.1', '$phi254.2', '$phi254.3', '$phi254.4', '$phi254.5', '$phi254.6']
2025-05-12 23:19:04,861 - numba.core.byteflow - DEBUG - dispatch pc=256, inst=SWAP(arg=2, lineno=1658)
2025-05-12 23:19:04,861 - numba.core.byteflow - DEBUG - stack ['$phi254.0', '$null$254.1', '$phi254.2', '$phi254.3', '$phi254.4']
2025-05-12 23:19:04,861 - numba.core.byteflow - DEBUG - dispatch pc=258, inst=STORE_FAST(arg=3, lineno=1658)
2025-05-12 23:19:04,862 - numba.core.byteflow - DEBUG - stack ['$phi254.0', '$null$254.1', '$phi254.2', '$phi254.4', '$phi254.3']
2025-05-12 23:19:04,862 - numba.core.byteflow - DEBUG - dispatch pc=260, inst=CALL(arg=1, lineno=1658)
2025-05-12 23:19:04,862 - numba.core.byteflow - DEBUG - stack ['$phi254.0', '$null$254.1', '$phi254.2', '$phi254.4']
2025-05-12 23:19:04,864 - numba.core.byteflow - DEBUG - dispatch pc=268, inst=FORMAT_VALUE(arg=0, lineno=1658)
2025-05-12 23:19:04,864 - numba.core.byteflow - DEBUG - stack ['$phi254.0', '$260call.7']
2025-05-12 23:19:04,864 - numba.core.byteflow - DEBUG - dispatch pc=270, inst=LOAD_CONST(arg=6, lineno=1658)
2025-05-12 23:19:04,864 - numba.core.byteflow - DEBUG - stack ['$phi254.0', '$268format_value.9']
2025-05-12 23:19:04,865 - numba.core.byteflow - DEBUG - dispatch pc=272, inst=BUILD_STRING(arg=3, lineno=1658)
2025-05-12 23:19:04,865 - numba.core.byteflow - DEBUG - stack ['$phi254.0', '$268format_value.9', '$const270.10.6']
2025-05-12 23:19:04,865 - numba.core.byteflow - DEBUG - dispatch pc=274, inst=STORE_FAST(arg=4, lineno=1658)
2025-05-12 23:19:04,867 - numba.core.byteflow - DEBUG - stack ['$272build_string.12']
2025-05-12 23:19:04,867 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=276, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:04,867 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=228 nstack_initial=7), State(pc_initial=276 nstack_initial=0)])
2025-05-12 23:19:04,867 - numba.core.byteflow - DEBUG - stack: ['$phi228.0', '$null$228.1', '$phi228.2', '$phi228.3', '$phi228.4', '$phi228.5', '$phi228.6']
2025-05-12 23:19:04,867 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=228 nstack_initial=7)
2025-05-12 23:19:04,868 - numba.core.byteflow - DEBUG - dispatch pc=228, inst=STORE_FAST(arg=3, lineno=1658)
2025-05-12 23:19:04,868 - numba.core.byteflow - DEBUG - stack ['$phi228.0', '$null$228.1', '$phi228.2', '$phi228.3', '$phi228.4', '$phi228.5', '$phi228.6']
2025-05-12 23:19:04,869 - numba.core.byteflow - DEBUG - dispatch pc=230, inst=LOAD_GLOBAL(arg=5, lineno=1658)
2025-05-12 23:19:04,870 - numba.core.byteflow - DEBUG - stack ['$phi228.0', '$null$228.1', '$phi228.2', '$phi228.3', '$phi228.4', '$phi228.5']
2025-05-12 23:19:04,870 - numba.core.byteflow - DEBUG - dispatch pc=240, inst=LOAD_FAST(arg=3, lineno=1658)
2025-05-12 23:19:04,870 - numba.core.byteflow - DEBUG - stack ['$phi228.0', '$null$228.1', '$phi228.2', '$phi228.3', '$phi228.4', '$phi228.5', '$null$230.8', '$230load_global.7']
2025-05-12 23:19:04,871 - numba.core.byteflow - DEBUG - dispatch pc=242, inst=CALL(arg=1, lineno=1658)
2025-05-12 23:19:04,871 - numba.core.byteflow - DEBUG - stack ['$phi228.0', '$null$228.1', '$phi228.2', '$phi228.3', '$phi228.4', '$phi228.5', '$null$230.8', '$230load_global.7', '$x240.9']
2025-05-12 23:19:04,871 - numba.core.byteflow - DEBUG - dispatch pc=250, inst=LIST_APPEND(arg=2, lineno=1658)
2025-05-12 23:19:04,871 - numba.core.byteflow - DEBUG - stack ['$phi228.0', '$null$228.1', '$phi228.2', '$phi228.3', '$phi228.4', '$phi228.5', '$242call.10']
2025-05-12 23:19:04,873 - numba.core.byteflow - DEBUG - dispatch pc=252, inst=JUMP_BACKWARD(arg=15, lineno=1658)
2025-05-12 23:19:04,873 - numba.core.byteflow - DEBUG - stack ['$phi228.0', '$null$228.1', '$phi228.2', '$phi228.3', '$phi228.4', '$phi228.5']
2025-05-12 23:19:04,873 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=224, stack=('$phi228.0', '$null$228.1', '$phi228.2', '$phi228.3', '$phi228.4', '$phi228.5'), blockstack=(), npush=0)]
2025-05-12 23:19:04,874 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=276 nstack_initial=0), State(pc_initial=224 nstack_initial=6)])
2025-05-12 23:19:04,875 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=224 nstack_initial=6)])
2025-05-12 23:19:04,876 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:04,876 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=6): {'$phi88.5'},
             State(pc_initial=92 nstack_initial=7): {'$phi92.4', '$phi92.6'},
             State(pc_initial=118 nstack_initial=7): {'$phi118.0',
                                                      '$phi118.2',
                                                      '$phi118.3',
                                                      '$phi118.4'},
             State(pc_initial=140 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set(),
             State(pc_initial=188 nstack_initial=0): set(),
             State(pc_initial=224 nstack_initial=6): {'$phi224.5'},
             State(pc_initial=228 nstack_initial=7): {'$phi228.6', '$phi228.4'},
             State(pc_initial=254 nstack_initial=7): {'$phi254.0',
                                                      '$phi254.2',
                                                      '$phi254.3',
                                                      '$phi254.4'},
             State(pc_initial=276 nstack_initial=0): set()})
2025-05-12 23:19:04,879 - numba.core.byteflow - DEBUG - defmap: {'$null$224.1': State(pc_initial=188 nstack_initial=0),
 '$null$88.1': State(pc_initial=52 nstack_initial=0),
 '$phi118.6': State(pc_initial=88 nstack_initial=6),
 '$phi224.0': State(pc_initial=188 nstack_initial=0),
 '$phi224.2': State(pc_initial=188 nstack_initial=0),
 '$phi224.3': State(pc_initial=188 nstack_initial=0),
 '$phi224.4': State(pc_initial=188 nstack_initial=0),
 '$phi224.5': State(pc_initial=188 nstack_initial=0),
 '$phi228.6': State(pc_initial=224 nstack_initial=6),
 '$phi254.6': State(pc_initial=224 nstack_initial=6),
 '$phi88.0': State(pc_initial=52 nstack_initial=0),
 '$phi88.2': State(pc_initial=52 nstack_initial=0),
 '$phi88.3': State(pc_initial=52 nstack_initial=0),
 '$phi88.4': State(pc_initial=52 nstack_initial=0),
 '$phi88.5': State(pc_initial=52 nstack_initial=0),
 '$phi92.6': State(pc_initial=88 nstack_initial=6)}
2025-05-12 23:19:04,880 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$null$118.1': {('$null$88.1',
                              State(pc_initial=88 nstack_initial=6))},
             '$null$224.1': {('$null$192.3',
                              State(pc_initial=188 nstack_initial=0)),
                             ('$null$228.1',
                              State(pc_initial=228 nstack_initial=7))},
             '$null$228.1': {('$null$224.1',
                              State(pc_initial=224 nstack_initial=6))},
             '$null$254.1': {('$null$224.1',
                              State(pc_initial=224 nstack_initial=6))},
             '$null$88.1': {('$null$56.3',
                             State(pc_initial=52 nstack_initial=0)),
                            ('$null$92.1',
                             State(pc_initial=92 nstack_initial=7))},
             '$null$92.1': {('$null$88.1',
                             State(pc_initial=88 nstack_initial=6))},
             '$phi118.0': {('$phi88.0', State(pc_initial=88 nstack_initial=6))},
             '$phi118.2': {('$phi88.2', State(pc_initial=88 nstack_initial=6))},
             '$phi118.3': {('$phi88.3', State(pc_initial=88 nstack_initial=6))},
             '$phi118.4': {('$phi88.4', State(pc_initial=88 nstack_initial=6))},
             '$phi118.5': {('$phi88.5', State(pc_initial=88 nstack_initial=6))},
             '$phi118.6': {('$88for_iter.7',
                            State(pc_initial=88 nstack_initial=6))},
             '$phi224.0': {('$const188.0.2',
                            State(pc_initial=188 nstack_initial=0)),
                           ('$phi228.0',
                            State(pc_initial=228 nstack_initial=7))},
             '$phi224.2': {('$192load_attr.2',
                            State(pc_initial=188 nstack_initial=0)),
                           ('$phi228.2',
                            State(pc_initial=228 nstack_initial=7))},
             '$phi224.3': {('$phi228.3',
                            State(pc_initial=228 nstack_initial=7)),
                           ('$x216.6', State(pc_initial=188 nstack_initial=0))},
             '$phi224.4': {('$220build_list.7',
                            State(pc_initial=188 nstack_initial=0)),
                           ('$phi228.4',
                            State(pc_initial=228 nstack_initial=7))},
             '$phi224.5': {('$214get_iter.5',
                            State(pc_initial=188 nstack_initial=0)),
                           ('$phi228.5',
                            State(pc_initial=228 nstack_initial=7))},
             '$phi228.0': {('$phi224.0',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi228.2': {('$phi224.2',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi228.3': {('$phi224.3',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi228.4': {('$phi224.4',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi228.5': {('$phi224.5',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi228.6': {('$224for_iter.7',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi254.0': {('$phi224.0',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi254.2': {('$phi224.2',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi254.3': {('$phi224.3',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi254.4': {('$phi224.4',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi254.5': {('$phi224.5',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi254.6': {('$224for_iter.7',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi88.0': {('$const52.0.2',
                           State(pc_initial=52 nstack_initial=0)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=7))},
             '$phi88.2': {('$56load_attr.2',
                           State(pc_initial=52 nstack_initial=0)),
                          ('$phi92.2', State(pc_initial=92 nstack_initial=7))},
             '$phi88.3': {('$phi92.3', State(pc_initial=92 nstack_initial=7)),
                          ('$x80.6', State(pc_initial=52 nstack_initial=0))},
             '$phi88.4': {('$84build_list.7',
                           State(pc_initial=52 nstack_initial=0)),
                          ('$phi92.4', State(pc_initial=92 nstack_initial=7))},
             '$phi88.5': {('$78get_iter.5',
                           State(pc_initial=52 nstack_initial=0)),
                          ('$phi92.5', State(pc_initial=92 nstack_initial=7))},
             '$phi92.0': {('$phi88.0', State(pc_initial=88 nstack_initial=6))},
             '$phi92.2': {('$phi88.2', State(pc_initial=88 nstack_initial=6))},
             '$phi92.3': {('$phi88.3', State(pc_initial=88 nstack_initial=6))},
             '$phi92.4': {('$phi88.4', State(pc_initial=88 nstack_initial=6))},
             '$phi92.5': {('$phi88.5', State(pc_initial=88 nstack_initial=6))},
             '$phi92.6': {('$88for_iter.7',
                           State(pc_initial=88 nstack_initial=6))}})
2025-05-12 23:19:04,885 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$null$118.1': {('$null$56.3',
                              State(pc_initial=52 nstack_initial=0)),
                             ('$null$92.1',
                              State(pc_initial=92 nstack_initial=7))},
             '$null$224.1': {('$null$192.3',
                              State(pc_initial=188 nstack_initial=0)),
                             ('$null$224.1',
                              State(pc_initial=224 nstack_initial=6))},
             '$null$228.1': {('$null$192.3',
                              State(pc_initial=188 nstack_initial=0))},
             '$null$254.1': {('$null$192.3',
                              State(pc_initial=188 nstack_initial=0))},
             '$null$88.1': {('$null$56.3',
                             State(pc_initial=52 nstack_initial=0)),
                            ('$null$88.1',
                             State(pc_initial=88 nstack_initial=6))},
             '$null$92.1': {('$null$56.3',
                             State(pc_initial=52 nstack_initial=0))},
             '$phi118.0': {('$const52.0.2',
                            State(pc_initial=52 nstack_initial=0)),
                           ('$phi92.0', State(pc_initial=92 nstack_initial=7))},
             '$phi118.2': {('$56load_attr.2',
                            State(pc_initial=52 nstack_initial=0)),
                           ('$phi92.2', State(pc_initial=92 nstack_initial=7))},
             '$phi118.3': {('$phi92.3', State(pc_initial=92 nstack_initial=7)),
                           ('$x80.6', State(pc_initial=52 nstack_initial=0))},
             '$phi118.4': {('$84build_list.7',
                            State(pc_initial=52 nstack_initial=0)),
                           ('$phi92.4', State(pc_initial=92 nstack_initial=7))},
             '$phi118.5': {('$78get_iter.5',
                            State(pc_initial=52 nstack_initial=0)),
                           ('$phi92.5', State(pc_initial=92 nstack_initial=7))},
             '$phi118.6': {('$88for_iter.7',
                            State(pc_initial=88 nstack_initial=6))},
             '$phi224.0': {('$const188.0.2',
                            State(pc_initial=188 nstack_initial=0)),
                           ('$phi224.0',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi224.2': {('$192load_attr.2',
                            State(pc_initial=188 nstack_initial=0)),
                           ('$phi224.2',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi224.3': {('$phi224.3',
                            State(pc_initial=224 nstack_initial=6)),
                           ('$x216.6', State(pc_initial=188 nstack_initial=0))},
             '$phi224.4': {('$220build_list.7',
                            State(pc_initial=188 nstack_initial=0)),
                           ('$phi224.4',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi224.5': {('$214get_iter.5',
                            State(pc_initial=188 nstack_initial=0)),
                           ('$phi224.5',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi228.0': {('$const188.0.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.2': {('$192load_attr.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.3': {('$x216.6', State(pc_initial=188 nstack_initial=0))},
             '$phi228.4': {('$220build_list.7',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.5': {('$214get_iter.5',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.6': {('$224for_iter.7',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi254.0': {('$const188.0.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi254.2': {('$192load_attr.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi254.3': {('$x216.6', State(pc_initial=188 nstack_initial=0))},
             '$phi254.4': {('$220build_list.7',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi254.5': {('$214get_iter.5',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi254.6': {('$224for_iter.7',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi88.0': {('$const52.0.2',
                           State(pc_initial=52 nstack_initial=0)),
                          ('$phi88.0', State(pc_initial=88 nstack_initial=6))},
             '$phi88.2': {('$56load_attr.2',
                           State(pc_initial=52 nstack_initial=0)),
                          ('$phi88.2', State(pc_initial=88 nstack_initial=6))},
             '$phi88.3': {('$phi88.3', State(pc_initial=88 nstack_initial=6)),
                          ('$x80.6', State(pc_initial=52 nstack_initial=0))},
             '$phi88.4': {('$84build_list.7',
                           State(pc_initial=52 nstack_initial=0)),
                          ('$phi88.4', State(pc_initial=88 nstack_initial=6))},
             '$phi88.5': {('$78get_iter.5',
                           State(pc_initial=52 nstack_initial=0)),
                          ('$phi88.5', State(pc_initial=88 nstack_initial=6))},
             '$phi92.0': {('$const52.0.2',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.2': {('$56load_attr.2',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.3': {('$x80.6', State(pc_initial=52 nstack_initial=0))},
             '$phi92.4': {('$84build_list.7',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.5': {('$78get_iter.5',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.6': {('$88for_iter.7',
                           State(pc_initial=88 nstack_initial=6))}})
2025-05-12 23:19:04,889 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$null$118.1': {('$null$56.3',
                              State(pc_initial=52 nstack_initial=0))},
             '$null$224.1': {('$null$192.3',
                              State(pc_initial=188 nstack_initial=0))},
             '$null$228.1': {('$null$192.3',
                              State(pc_initial=188 nstack_initial=0))},
             '$null$254.1': {('$null$192.3',
                              State(pc_initial=188 nstack_initial=0))},
             '$null$88.1': {('$null$56.3',
                             State(pc_initial=52 nstack_initial=0))},
             '$null$92.1': {('$null$56.3',
                             State(pc_initial=52 nstack_initial=0))},
             '$phi118.0': {('$const52.0.2',
                            State(pc_initial=52 nstack_initial=0))},
             '$phi118.2': {('$56load_attr.2',
                            State(pc_initial=52 nstack_initial=0))},
             '$phi118.3': {('$x80.6', State(pc_initial=52 nstack_initial=0))},
             '$phi118.4': {('$84build_list.7',
                            State(pc_initial=52 nstack_initial=0))},
             '$phi118.5': {('$78get_iter.5',
                            State(pc_initial=52 nstack_initial=0))},
             '$phi118.6': {('$88for_iter.7',
                            State(pc_initial=88 nstack_initial=6))},
             '$phi224.0': {('$const188.0.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi224.2': {('$192load_attr.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi224.3': {('$x216.6', State(pc_initial=188 nstack_initial=0))},
             '$phi224.4': {('$220build_list.7',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi224.5': {('$214get_iter.5',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.0': {('$const188.0.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.2': {('$192load_attr.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.3': {('$x216.6', State(pc_initial=188 nstack_initial=0))},
             '$phi228.4': {('$220build_list.7',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.5': {('$214get_iter.5',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.6': {('$224for_iter.7',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi254.0': {('$const188.0.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi254.2': {('$192load_attr.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi254.3': {('$x216.6', State(pc_initial=188 nstack_initial=0))},
             '$phi254.4': {('$220build_list.7',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi254.5': {('$214get_iter.5',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi254.6': {('$224for_iter.7',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi88.0': {('$const52.0.2',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi88.2': {('$56load_attr.2',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi88.3': {('$x80.6', State(pc_initial=52 nstack_initial=0))},
             '$phi88.4': {('$84build_list.7',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi88.5': {('$78get_iter.5',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.0': {('$const52.0.2',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.2': {('$56load_attr.2',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.3': {('$x80.6', State(pc_initial=52 nstack_initial=0))},
             '$phi92.4': {('$84build_list.7',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.5': {('$78get_iter.5',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.6': {('$88for_iter.7',
                           State(pc_initial=88 nstack_initial=6))}})
2025-05-12 23:19:04,895 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$null$118.1': {('$null$56.3',
                              State(pc_initial=52 nstack_initial=0))},
             '$null$224.1': {('$null$192.3',
                              State(pc_initial=188 nstack_initial=0))},
             '$null$228.1': {('$null$192.3',
                              State(pc_initial=188 nstack_initial=0))},
             '$null$254.1': {('$null$192.3',
                              State(pc_initial=188 nstack_initial=0))},
             '$null$88.1': {('$null$56.3',
                             State(pc_initial=52 nstack_initial=0))},
             '$null$92.1': {('$null$56.3',
                             State(pc_initial=52 nstack_initial=0))},
             '$phi118.0': {('$const52.0.2',
                            State(pc_initial=52 nstack_initial=0))},
             '$phi118.2': {('$56load_attr.2',
                            State(pc_initial=52 nstack_initial=0))},
             '$phi118.3': {('$x80.6', State(pc_initial=52 nstack_initial=0))},
             '$phi118.4': {('$84build_list.7',
                            State(pc_initial=52 nstack_initial=0))},
             '$phi118.5': {('$78get_iter.5',
                            State(pc_initial=52 nstack_initial=0))},
             '$phi118.6': {('$88for_iter.7',
                            State(pc_initial=88 nstack_initial=6))},
             '$phi224.0': {('$const188.0.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi224.2': {('$192load_attr.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi224.3': {('$x216.6', State(pc_initial=188 nstack_initial=0))},
             '$phi224.4': {('$220build_list.7',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi224.5': {('$214get_iter.5',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.0': {('$const188.0.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.2': {('$192load_attr.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.3': {('$x216.6', State(pc_initial=188 nstack_initial=0))},
             '$phi228.4': {('$220build_list.7',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.5': {('$214get_iter.5',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi228.6': {('$224for_iter.7',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi254.0': {('$const188.0.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi254.2': {('$192load_attr.2',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi254.3': {('$x216.6', State(pc_initial=188 nstack_initial=0))},
             '$phi254.4': {('$220build_list.7',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi254.5': {('$214get_iter.5',
                            State(pc_initial=188 nstack_initial=0))},
             '$phi254.6': {('$224for_iter.7',
                            State(pc_initial=224 nstack_initial=6))},
             '$phi88.0': {('$const52.0.2',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi88.2': {('$56load_attr.2',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi88.3': {('$x80.6', State(pc_initial=52 nstack_initial=0))},
             '$phi88.4': {('$84build_list.7',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi88.5': {('$78get_iter.5',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.0': {('$const52.0.2',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.2': {('$56load_attr.2',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.3': {('$x80.6', State(pc_initial=52 nstack_initial=0))},
             '$phi92.4': {('$84build_list.7',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.5': {('$78get_iter.5',
                           State(pc_initial=52 nstack_initial=0))},
             '$phi92.6': {('$88for_iter.7',
                           State(pc_initial=88 nstack_initial=6))}})
2025-05-12 23:19:04,899 - numba.core.byteflow - DEBUG - keep phismap: {'$phi118.0': {('$const52.0.2', State(pc_initial=52 nstack_initial=0))},
 '$phi118.2': {('$56load_attr.2', State(pc_initial=52 nstack_initial=0))},
 '$phi118.3': {('$x80.6', State(pc_initial=52 nstack_initial=0))},
 '$phi118.4': {('$84build_list.7', State(pc_initial=52 nstack_initial=0))},
 '$phi224.5': {('$214get_iter.5', State(pc_initial=188 nstack_initial=0))},
 '$phi228.4': {('$220build_list.7', State(pc_initial=188 nstack_initial=0))},
 '$phi228.6': {('$224for_iter.7', State(pc_initial=224 nstack_initial=6))},
 '$phi254.0': {('$const188.0.2', State(pc_initial=188 nstack_initial=0))},
 '$phi254.2': {('$192load_attr.2', State(pc_initial=188 nstack_initial=0))},
 '$phi254.3': {('$x216.6', State(pc_initial=188 nstack_initial=0))},
 '$phi254.4': {('$220build_list.7', State(pc_initial=188 nstack_initial=0))},
 '$phi88.5': {('$78get_iter.5', State(pc_initial=52 nstack_initial=0))},
 '$phi92.4': {('$84build_list.7', State(pc_initial=52 nstack_initial=0))},
 '$phi92.6': {('$88for_iter.7', State(pc_initial=88 nstack_initial=6))}}
2025-05-12 23:19:04,900 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=52 nstack_initial=0): {'$phi118.0': '$const52.0.2',
                                                     '$phi118.2': '$56load_attr.2',
                                                     '$phi118.3': '$x80.6',
                                                     '$phi118.4': '$84build_list.7',
                                                     '$phi88.5': '$78get_iter.5',
                                                     '$phi92.4': '$84build_list.7'},
             State(pc_initial=88 nstack_initial=6): {'$phi92.6': '$88for_iter.7'},
             State(pc_initial=188 nstack_initial=0): {'$phi224.5': '$214get_iter.5',
                                                      '$phi228.4': '$220build_list.7',
                                                      '$phi254.0': '$const188.0.2',
                                                      '$phi254.2': '$192load_attr.2',
                                                      '$phi254.3': '$x216.6',
                                                      '$phi254.4': '$220build_list.7'},
             State(pc_initial=224 nstack_initial=6): {'$phi228.6': '$224for_iter.7'}})
2025-05-12 23:19:04,902 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:04,902 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$src_shapes14.2'}), (16, {'func': '$4load_global.0', 'args': ['$src_shapes14.2'], 'kw_names': None, 'res': '$16call.3'}), (24, {'res': '$const24.4.1'}), (26, {'lhs': '$16call.3', 'rhs': '$const24.4.1', 'res': '$26compare_op.5'}), (30, {'pred': '$26compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 52: ()})
2025-05-12 23:19:04,902 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$const32.0.2'}), (34, {'res': '$src_shapes34.1'}), (36, {'res': '$const36.2.3'}), (38, {'index': '$const36.2.3', 'target': '$src_shapes34.1', 'res': '$38binary_subscr.3'}), (42, {'value': '$38binary_subscr.3', 'res': '$42format_value.5', 'strvar': '$42format_value.4'}), (44, {'res': '$const44.6.4'}), (46, {'strings': ['$const32.0.2', '$42format_value.5', '$const44.6.4'], 'tmps': ['$46build_string.7', '$46build_string.8']}), (48, {'value': '$46build_string.8'}), (50, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ()})
2025-05-12 23:19:04,903 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$const52.0.2'}), (54, {'res': '$const54.1.5'}), (56, {'item': '$const54.1.5', 'res': '$56load_attr.2'}), (76, {'res': '$src_shapes76.4'}), (78, {'value': '$src_shapes76.4', 'res': '$78get_iter.5'}), (80, {'res': '$x80.6'}), (84, {'items': [], 'res': '$84build_list.7'})), outgoing_phis={'$phi92.4': '$84build_list.7', '$phi88.5': '$78get_iter.5', '$phi118.3': '$x80.6', '$phi118.4': '$84build_list.7', '$phi118.0': '$const52.0.2', '$phi118.2': '$56load_attr.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$const52.0.2', '$null$56.3', '$56load_attr.2', '$x80.6', '$84build_list.7', '$78get_iter.5')})
2025-05-12 23:19:04,903 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=88 nstack_initial=6):
AdaptBlockInfo(insts=((88, {'iterator': '$phi88.5', 'pair': '$88for_iter.6', 'indval': '$88for_iter.7', 'pred': '$88for_iter.8'}),), outgoing_phis={'$phi92.6': '$88for_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={118: ('$phi88.0', '$null$88.1', '$phi88.2', '$phi88.3', '$phi88.4', '$phi88.5', '$88for_iter.7'), 92: ('$phi88.0', '$null$88.1', '$phi88.2', '$phi88.3', '$phi88.4', '$phi88.5', '$88for_iter.7')})
2025-05-12 23:19:04,904 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=92 nstack_initial=7):
AdaptBlockInfo(insts=((92, {'value': '$phi92.6'}), (94, {'idx': 2, 'res': '$94load_global.7'}), (104, {'res': '$x104.9'}), (106, {'func': '$94load_global.7', 'args': ['$x104.9'], 'kw_names': None, 'res': '$106call.10'}), (114, {'target': '$phi92.4', 'value': '$106call.10', 'appendvar': '$114list_append.11', 'res': '$114list_append.12'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi92.0', '$null$92.1', '$phi92.2', '$phi92.3', '$phi92.4', '$phi92.5')})
2025-05-12 23:19:04,904 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=118 nstack_initial=7):
AdaptBlockInfo(insts=((122, {'value': '$phi118.3'}), (124, {'func': '$phi118.2', 'args': ['$phi118.4'], 'kw_names': None, 'res': '$124call.7'}), (132, {'value': '$124call.7', 'res': '$132format_value.9', 'strvar': '$132format_value.8'}), (134, {'res': '$const134.10.6'}), (136, {'strings': ['$phi118.0', '$132format_value.9', '$const134.10.6'], 'tmps': ['$136build_string.11', '$136build_string.12']}), (138, {'value': '$136build_string.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={140: ()})
2025-05-12 23:19:04,905 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=140 nstack_initial=0):
AdaptBlockInfo(insts=((140, {'idx': 0, 'res': '$140load_global.0'}), (150, {'res': '$index_shape150.2'}), (152, {'func': '$140load_global.0', 'args': ['$index_shape150.2'], 'kw_names': None, 'res': '$152call.3'}), (160, {'res': '$const160.4.1'}), (162, {'lhs': '$152call.3', 'rhs': '$const160.4.1', 'res': '$162compare_op.5'}), (166, {'pred': '$162compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: (), 188: ()})
2025-05-12 23:19:04,906 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0.2'}), (170, {'res': '$index_shape170.1'}), (172, {'res': '$const172.2.3'}), (174, {'index': '$const172.2.3', 'target': '$index_shape170.1', 'res': '$174binary_subscr.3'}), (178, {'value': '$174binary_subscr.3', 'res': '$178format_value.5', 'strvar': '$178format_value.4'}), (180, {'res': '$const180.6.4'}), (182, {'strings': ['$const168.0.2', '$178format_value.5', '$const180.6.4'], 'tmps': ['$182build_string.7', '$182build_string.8']}), (184, {'value': '$182build_string.8'}), (186, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={276: ()})
2025-05-12 23:19:04,906 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=188 nstack_initial=0):
AdaptBlockInfo(insts=((188, {'res': '$const188.0.2'}), (190, {'res': '$const190.1.5'}), (192, {'item': '$const190.1.5', 'res': '$192load_attr.2'}), (212, {'res': '$index_shape212.4'}), (214, {'value': '$index_shape212.4', 'res': '$214get_iter.5'}), (216, {'res': '$x216.6'}), (220, {'items': [], 'res': '$220build_list.7'})), outgoing_phis={'$phi254.4': '$220build_list.7', '$phi254.2': '$192load_attr.2', '$phi254.3': '$x216.6', '$phi254.0': '$const188.0.2', '$phi228.4': '$220build_list.7', '$phi224.5': '$214get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={224: ('$const188.0.2', '$null$192.3', '$192load_attr.2', '$x216.6', '$220build_list.7', '$214get_iter.5')})
2025-05-12 23:19:04,907 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=224 nstack_initial=6):
AdaptBlockInfo(insts=((224, {'iterator': '$phi224.5', 'pair': '$224for_iter.6', 'indval': '$224for_iter.7', 'pred': '$224for_iter.8'}),), outgoing_phis={'$phi228.6': '$224for_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={254: ('$phi224.0', '$null$224.1', '$phi224.2', '$phi224.3', '$phi224.4', '$phi224.5', '$224for_iter.7'), 228: ('$phi224.0', '$null$224.1', '$phi224.2', '$phi224.3', '$phi224.4', '$phi224.5', '$224for_iter.7')})
2025-05-12 23:19:04,908 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=228 nstack_initial=7):
AdaptBlockInfo(insts=((228, {'value': '$phi228.6'}), (230, {'idx': 2, 'res': '$230load_global.7'}), (240, {'res': '$x240.9'}), (242, {'func': '$230load_global.7', 'args': ['$x240.9'], 'kw_names': None, 'res': '$242call.10'}), (250, {'target': '$phi228.4', 'value': '$242call.10', 'appendvar': '$250list_append.11', 'res': '$250list_append.12'}), (252, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={224: ('$phi228.0', '$null$228.1', '$phi228.2', '$phi228.3', '$phi228.4', '$phi228.5')})
2025-05-12 23:19:04,908 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=254 nstack_initial=7):
AdaptBlockInfo(insts=((258, {'value': '$phi254.3'}), (260, {'func': '$phi254.2', 'args': ['$phi254.4'], 'kw_names': None, 'res': '$260call.7'}), (268, {'value': '$260call.7', 'res': '$268format_value.9', 'strvar': '$268format_value.8'}), (270, {'res': '$const270.10.6'}), (272, {'strings': ['$phi254.0', '$268format_value.9', '$const270.10.6'], 'tmps': ['$272build_string.11', '$272build_string.12']}), (274, {'value': '$272build_string.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={276: ()})
2025-05-12 23:19:04,908 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=276 nstack_initial=0):
AdaptBlockInfo(insts=((276, {'res': '$const276.0.7'}), (278, {'res': '$shape_str278.1'}), (280, {'value': '$shape_str278.1', 'res': '$280format_value.3', 'strvar': '$280format_value.2'}), (282, {'res': '$const282.4.8'}), (284, {'res': '$index_str284.5'}), (286, {'value': '$index_str284.5', 'res': '$286format_value.7', 'strvar': '$286format_value.6'}), (288, {'strings': ['$const276.0.7', '$280format_value.3', '$const282.4.8', '$286format_value.7'], 'tmps': ['$288build_string.8', '$288build_string.9', '$288build_string.10']}), (290, {'value': '$288build_string.10'}), (292, {'idx': 3, 'res': '$292load_global.11'}), (302, {'res': '$msg302.13'}), (304, {'func': '$292load_global.11', 'args': ['$msg302.13'], 'kw_names': None, 'res': '$304call.14'}), (312, {'exc': '$304call.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:04,912 - numba.core.interpreter - DEBUG - label 0:
    src_shapes = arg(0, name=src_shapes)     ['src_shapes']
    index_shape = arg(1, name=index_shape)   ['index_shape']
    $4load_global.0 = global(len: <built-in function len>) ['$4load_global.0']
    $16call.3 = call $4load_global.0(src_shapes, func=$4load_global.0, args=[Var(src_shapes, arrayobj.py:1650)], kws=(), vararg=None, varkwarg=None, target=None) ['$16call.3', '$4load_global.0', 'src_shapes']
    $const24.4.1 = const(int, 1)             ['$const24.4.1']
    $26compare_op.5 = $16call.3 == $const24.4.1 ['$16call.3', '$26compare_op.5', '$const24.4.1']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($26compare_op.5, func=bool30, args=(Var($26compare_op.5, arrayobj.py:1651),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.5', '$30pred', 'bool30']
    branch $30pred, 32, 52                   ['$30pred']
label 32:
    $const32.0.2 = const(str, ()             ['$const32.0.2']
    $const36.2.3 = const(int, 0)             ['$const36.2.3']
    $38binary_subscr.3 = getitem(value=src_shapes, index=$const36.2.3, fn=<built-in function getitem>) ['$38binary_subscr.3', '$const36.2.3', 'src_shapes']
    $42format_value.4 = global(str: <class 'str'>) ['$42format_value.4']
    $42format_value.5 = call $42format_value.4($38binary_subscr.3, func=$42format_value.4, args=(Var($38binary_subscr.3, arrayobj.py:1652),), kws=(), vararg=None, varkwarg=None, target=None) ['$38binary_subscr.3', '$42format_value.4', '$42format_value.5']
    $const44.6.4 = const(str, ,))            ['$const44.6.4']
    $46build_string.7 = $const32.0.2 + $42format_value.5 ['$42format_value.5', '$46build_string.7', '$const32.0.2']
    shape_str = $46build_string.7 + $const44.6.4 ['$46build_string.7', '$const44.6.4', 'shape_str']
    jump 140                                 []
label 52:
    $const52.0.2 = const(str, ()             ['$const52.0.2']
    $const54.1.5 = const(str, , )            ['$const54.1.5']
    $56load_attr.2 = getattr(value=$const54.1.5, attr=join) ['$56load_attr.2', '$const54.1.5']
    $78get_iter.5 = getiter(value=src_shapes) ['$78get_iter.5', 'src_shapes']
    $x80.6 = undef()                         ['$x80.6']
    $84build_list.7 = build_list(items=[])   ['$84build_list.7']
    $phi92.4 = $84build_list.7               ['$84build_list.7', '$phi92.4']
    $phi88.5 = $78get_iter.5                 ['$78get_iter.5', '$phi88.5']
    $phi118.3 = $x80.6                       ['$phi118.3', '$x80.6']
    $phi118.4 = $84build_list.7              ['$84build_list.7', '$phi118.4']
    $phi118.0 = $const52.0.2                 ['$const52.0.2', '$phi118.0']
    $phi118.2 = $56load_attr.2               ['$56load_attr.2', '$phi118.2']
    jump 88                                  []
label 88:
    $88for_iter.6 = iternext(value=$phi88.5) ['$88for_iter.6', '$phi88.5']
    $88for_iter.7 = pair_first(value=$88for_iter.6) ['$88for_iter.6', '$88for_iter.7']
    $88for_iter.8 = pair_second(value=$88for_iter.6) ['$88for_iter.6', '$88for_iter.8']
    $phi92.6 = $88for_iter.7                 ['$88for_iter.7', '$phi92.6']
    branch $88for_iter.8, 92, 118            ['$88for_iter.8']
label 92:
    x = $phi92.6                             ['$phi92.6', 'x']
    $94load_global.7 = global(str: <class 'str'>) ['$94load_global.7']
    $106call.10 = call $94load_global.7(x, func=$94load_global.7, args=[Var(x, arrayobj.py:1654)], kws=(), vararg=None, varkwarg=None, target=None) ['$106call.10', '$94load_global.7', 'x']
    $114list_append.11 = getattr(value=$phi92.4, attr=append) ['$114list_append.11', '$phi92.4']
    $114list_append.12 = call $114list_append.11($106call.10, func=$114list_append.11, args=(Var($106call.10, arrayobj.py:1654),), kws=(), vararg=None, varkwarg=None, target=None) ['$106call.10', '$114list_append.11', '$114list_append.12']
    jump 88                                  []
label 118:
    x = $phi118.3                            ['$phi118.3', 'x']
    $124call.7 = call $phi118.2($phi118.4, func=$phi118.2, args=[Var($phi118.4, arrayobj.py:1654)], kws=(), vararg=None, varkwarg=None, target=None) ['$124call.7', '$phi118.2', '$phi118.4']
    $132format_value.8 = global(str: <class 'str'>) ['$132format_value.8']
    $132format_value.9 = call $132format_value.8($124call.7, func=$132format_value.8, args=(Var($124call.7, arrayobj.py:1654),), kws=(), vararg=None, varkwarg=None, target=None) ['$124call.7', '$132format_value.8', '$132format_value.9']
    $const134.10.6 = const(str, ))           ['$const134.10.6']
    $136build_string.11 = $phi118.0 + $132format_value.9 ['$132format_value.9', '$136build_string.11', '$phi118.0']
    shape_str = $136build_string.11 + $const134.10.6 ['$136build_string.11', '$const134.10.6', 'shape_str']
    jump 140                                 []
label 140:
    $140load_global.0 = global(len: <built-in function len>) ['$140load_global.0']
    $152call.3 = call $140load_global.0(index_shape, func=$140load_global.0, args=[Var(index_shape, arrayobj.py:1650)], kws=(), vararg=None, varkwarg=None, target=None) ['$140load_global.0', '$152call.3', 'index_shape']
    $const160.4.1 = const(int, 1)            ['$const160.4.1']
    $162compare_op.5 = $152call.3 == $const160.4.1 ['$152call.3', '$162compare_op.5', '$const160.4.1']
    bool166 = global(bool: <class 'bool'>)   ['bool166']
    $166pred = call bool166($162compare_op.5, func=bool166, args=(Var($162compare_op.5, arrayobj.py:1655),), kws=(), vararg=None, varkwarg=None, target=None) ['$162compare_op.5', '$166pred', 'bool166']
    branch $166pred, 168, 188                ['$166pred']
label 168:
    $const168.0.2 = const(str, ()            ['$const168.0.2']
    $const172.2.3 = const(int, 0)            ['$const172.2.3']
    $174binary_subscr.3 = getitem(value=index_shape, index=$const172.2.3, fn=<built-in function getitem>) ['$174binary_subscr.3', '$const172.2.3', 'index_shape']
    $178format_value.4 = global(str: <class 'str'>) ['$178format_value.4']
    $178format_value.5 = call $178format_value.4($174binary_subscr.3, func=$178format_value.4, args=(Var($174binary_subscr.3, arrayobj.py:1656),), kws=(), vararg=None, varkwarg=None, target=None) ['$174binary_subscr.3', '$178format_value.4', '$178format_value.5']
    $const180.6.4 = const(str, ,))           ['$const180.6.4']
    $182build_string.7 = $const168.0.2 + $178format_value.5 ['$178format_value.5', '$182build_string.7', '$const168.0.2']
    index_str = $182build_string.7 + $const180.6.4 ['$182build_string.7', '$const180.6.4', 'index_str']
    jump 276                                 []
label 188:
    $const188.0.2 = const(str, ()            ['$const188.0.2']
    $const190.1.5 = const(str, , )           ['$const190.1.5']
    $192load_attr.2 = getattr(value=$const190.1.5, attr=join) ['$192load_attr.2', '$const190.1.5']
    $214get_iter.5 = getiter(value=index_shape) ['$214get_iter.5', 'index_shape']
    $220build_list.7 = build_list(items=[])  ['$220build_list.7']
    $phi254.4 = $220build_list.7             ['$220build_list.7', '$phi254.4']
    $phi254.2 = $192load_attr.2              ['$192load_attr.2', '$phi254.2']
    $phi254.3 = x                            ['$phi254.3', 'x']
    $phi254.0 = $const188.0.2                ['$const188.0.2', '$phi254.0']
    $phi228.4 = $220build_list.7             ['$220build_list.7', '$phi228.4']
    $phi224.5 = $214get_iter.5               ['$214get_iter.5', '$phi224.5']
    jump 224                                 []
label 224:
    $224for_iter.6 = iternext(value=$phi224.5) ['$224for_iter.6', '$phi224.5']
    $224for_iter.7 = pair_first(value=$224for_iter.6) ['$224for_iter.6', '$224for_iter.7']
    $224for_iter.8 = pair_second(value=$224for_iter.6) ['$224for_iter.6', '$224for_iter.8']
    $phi228.6 = $224for_iter.7               ['$224for_iter.7', '$phi228.6']
    branch $224for_iter.8, 228, 254          ['$224for_iter.8']
label 228:
    x = $phi228.6                            ['$phi228.6', 'x']
    $230load_global.7 = global(str: <class 'str'>) ['$230load_global.7']
    $242call.10 = call $230load_global.7(x, func=$230load_global.7, args=[Var(x, arrayobj.py:1654)], kws=(), vararg=None, varkwarg=None, target=None) ['$230load_global.7', '$242call.10', 'x']
    $250list_append.11 = getattr(value=$phi228.4, attr=append) ['$250list_append.11', '$phi228.4']
    $250list_append.12 = call $250list_append.11($242call.10, func=$250list_append.11, args=(Var($242call.10, arrayobj.py:1658),), kws=(), vararg=None, varkwarg=None, target=None) ['$242call.10', '$250list_append.11', '$250list_append.12']
    jump 224                                 []
label 254:
    x = $phi254.3                            ['$phi254.3', 'x']
    $260call.7 = call $phi254.2($phi254.4, func=$phi254.2, args=[Var($phi254.4, arrayobj.py:1658)], kws=(), vararg=None, varkwarg=None, target=None) ['$260call.7', '$phi254.2', '$phi254.4']
    $268format_value.8 = global(str: <class 'str'>) ['$268format_value.8']
    $268format_value.9 = call $268format_value.8($260call.7, func=$268format_value.8, args=(Var($260call.7, arrayobj.py:1658),), kws=(), vararg=None, varkwarg=None, target=None) ['$260call.7', '$268format_value.8', '$268format_value.9']
    $const270.10.6 = const(str, ))           ['$const270.10.6']
    $272build_string.11 = $phi254.0 + $268format_value.9 ['$268format_value.9', '$272build_string.11', '$phi254.0']
    index_str = $272build_string.11 + $const270.10.6 ['$272build_string.11', '$const270.10.6', 'index_str']
    jump 276                                 []
label 276:
    $const276.0.7 = const(str, cannot assign slice of shape ) ['$const276.0.7']
    $280format_value.2 = global(str: <class 'str'>) ['$280format_value.2']
    $280format_value.3 = call $280format_value.2(shape_str, func=$280format_value.2, args=(Var(shape_str, arrayobj.py:1652),), kws=(), vararg=None, varkwarg=None, target=None) ['$280format_value.2', '$280format_value.3', 'shape_str']
    $const282.4.8 = const(str,  from input of shape ) ['$const282.4.8']
    $286format_value.6 = global(str: <class 'str'>) ['$286format_value.6']
    $286format_value.7 = call $286format_value.6(index_str, func=$286format_value.6, args=(Var(index_str, arrayobj.py:1656),), kws=(), vararg=None, varkwarg=None, target=None) ['$286format_value.6', '$286format_value.7', 'index_str']
    $288build_string.8 = $const276.0.7 + $280format_value.3 ['$280format_value.3', '$288build_string.8', '$const276.0.7']
    $288build_string.9 = $288build_string.8 + $const282.4.8 ['$288build_string.8', '$288build_string.9', '$const282.4.8']
    msg = $288build_string.9 + $286format_value.7 ['$286format_value.7', '$288build_string.9', 'msg']
    $292load_global.11 = global(ValueError: <class 'ValueError'>) ['$292load_global.11']
    $304call.14 = call $292load_global.11(msg, func=$292load_global.11, args=[Var(msg, arrayobj.py:1659)], kws=(), vararg=None, varkwarg=None, target=None) ['$292load_global.11', '$304call.14', 'msg']
    raise $304call.14                        ['$304call.14']

2025-05-12 23:19:04,934 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:04,935 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A895F710>
2025-05-12 23:19:04,935 - numba.core.ssa - DEBUG - on stmt: src_shapes = arg(0, name=src_shapes)
2025-05-12 23:19:04,936 - numba.core.ssa - DEBUG - on stmt: index_shape = arg(1, name=index_shape)
2025-05-12 23:19:04,936 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(len: <built-in function len>)
2025-05-12 23:19:04,936 - numba.core.ssa - DEBUG - on stmt: $16call.3 = const(int, 1)
2025-05-12 23:19:04,936 - numba.core.ssa - DEBUG - on stmt: $const24.4.1 = const(int, 1)
2025-05-12 23:19:04,938 - numba.core.ssa - DEBUG - on stmt: $26compare_op.5 = const(bool, True)
2025-05-12 23:19:04,938 - numba.core.ssa - DEBUG - on stmt: bool30 = global(bool: <class 'bool'>)
2025-05-12 23:19:04,939 - numba.core.ssa - DEBUG - on stmt: $30pred = call bool30($26compare_op.5, func=bool30, args=(Var($26compare_op.5, arrayobj.py:1651),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,940 - numba.core.ssa - DEBUG - on stmt: jump 32
2025-05-12 23:19:04,940 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 32
2025-05-12 23:19:04,942 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A895F710>
2025-05-12 23:19:04,942 - numba.core.ssa - DEBUG - on stmt: $const32.0.2 = const(str, ()
2025-05-12 23:19:04,942 - numba.core.ssa - DEBUG - on stmt: $const36.2.3 = const(int, 0)
2025-05-12 23:19:04,943 - numba.core.ssa - DEBUG - on stmt: $38binary_subscr.3 = static_getitem(value=src_shapes, index=0, index_var=$const36.2.3, fn=<built-in function getitem>)
2025-05-12 23:19:04,943 - numba.core.ssa - DEBUG - on stmt: $42format_value.4 = global(str: <class 'str'>)
2025-05-12 23:19:04,943 - numba.core.ssa - DEBUG - on stmt: $42format_value.5 = call $42format_value.4($38binary_subscr.3, func=$42format_value.4, args=(Var($38binary_subscr.3, arrayobj.py:1652),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,943 - numba.core.ssa - DEBUG - on stmt: $const44.6.4 = const(str, ,))
2025-05-12 23:19:04,944 - numba.core.ssa - DEBUG - on stmt: $46build_string.7 = $const32.0.2 + $42format_value.5
2025-05-12 23:19:04,944 - numba.core.ssa - DEBUG - on stmt: shape_str = $46build_string.7 + $const44.6.4
2025-05-12 23:19:04,944 - numba.core.ssa - DEBUG - on stmt: jump 140
2025-05-12 23:19:04,944 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 140
2025-05-12 23:19:04,944 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A895F710>
2025-05-12 23:19:04,944 - numba.core.ssa - DEBUG - on stmt: $140load_global.0 = global(len: <built-in function len>)
2025-05-12 23:19:04,945 - numba.core.ssa - DEBUG - on stmt: $152call.3 = const(int, 1)
2025-05-12 23:19:04,945 - numba.core.ssa - DEBUG - on stmt: $const160.4.1 = const(int, 1)
2025-05-12 23:19:04,945 - numba.core.ssa - DEBUG - on stmt: $162compare_op.5 = const(bool, True)
2025-05-12 23:19:04,945 - numba.core.ssa - DEBUG - on stmt: bool166 = global(bool: <class 'bool'>)
2025-05-12 23:19:04,947 - numba.core.ssa - DEBUG - on stmt: $166pred = call bool166($162compare_op.5, func=bool166, args=(Var($162compare_op.5, arrayobj.py:1655),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,949 - numba.core.ssa - DEBUG - on stmt: jump 168
2025-05-12 23:19:04,949 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 168
2025-05-12 23:19:04,950 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A895F710>
2025-05-12 23:19:04,950 - numba.core.ssa - DEBUG - on stmt: $const168.0.2 = const(str, ()
2025-05-12 23:19:04,950 - numba.core.ssa - DEBUG - on stmt: $const172.2.3 = const(int, 0)
2025-05-12 23:19:04,950 - numba.core.ssa - DEBUG - on stmt: $174binary_subscr.3 = static_getitem(value=index_shape, index=0, index_var=$const172.2.3, fn=<built-in function getitem>)
2025-05-12 23:19:04,950 - numba.core.ssa - DEBUG - on stmt: $178format_value.4 = global(str: <class 'str'>)
2025-05-12 23:19:04,951 - numba.core.ssa - DEBUG - on stmt: $178format_value.5 = call $178format_value.4($174binary_subscr.3, func=$178format_value.4, args=(Var($174binary_subscr.3, arrayobj.py:1656),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,951 - numba.core.ssa - DEBUG - on stmt: $const180.6.4 = const(str, ,))
2025-05-12 23:19:04,952 - numba.core.ssa - DEBUG - on stmt: $182build_string.7 = $const168.0.2 + $178format_value.5
2025-05-12 23:19:04,952 - numba.core.ssa - DEBUG - on stmt: index_str = $182build_string.7 + $const180.6.4
2025-05-12 23:19:04,952 - numba.core.ssa - DEBUG - on stmt: jump 276
2025-05-12 23:19:04,952 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 276
2025-05-12 23:19:04,952 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A895F710>
2025-05-12 23:19:04,953 - numba.core.ssa - DEBUG - on stmt: $const276.0.7 = const(str, cannot assign slice of shape )
2025-05-12 23:19:04,953 - numba.core.ssa - DEBUG - on stmt: $280format_value.2 = global(str: <class 'str'>)
2025-05-12 23:19:04,953 - numba.core.ssa - DEBUG - on stmt: $280format_value.3 = call $280format_value.2(shape_str, func=$280format_value.2, args=(Var(shape_str, arrayobj.py:1652),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,954 - numba.core.ssa - DEBUG - on stmt: $const282.4.8 = const(str,  from input of shape )
2025-05-12 23:19:04,955 - numba.core.ssa - DEBUG - on stmt: $286format_value.6 = global(str: <class 'str'>)
2025-05-12 23:19:04,956 - numba.core.ssa - DEBUG - on stmt: $286format_value.7 = call $286format_value.6(index_str, func=$286format_value.6, args=(Var(index_str, arrayobj.py:1656),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,957 - numba.core.ssa - DEBUG - on stmt: $288build_string.8 = $const276.0.7 + $280format_value.3
2025-05-12 23:19:04,958 - numba.core.ssa - DEBUG - on stmt: $288build_string.9 = $288build_string.8 + $const282.4.8
2025-05-12 23:19:04,958 - numba.core.ssa - DEBUG - on stmt: msg = $288build_string.9 + $286format_value.7
2025-05-12 23:19:04,958 - numba.core.ssa - DEBUG - on stmt: $292load_global.11 = global(ValueError: <class 'ValueError'>)
2025-05-12 23:19:04,958 - numba.core.ssa - DEBUG - on stmt: $304call.14 = call $292load_global.11(msg, func=$292load_global.11, args=[Var(msg, arrayobj.py:1659)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:04,959 - numba.core.ssa - DEBUG - on stmt: <dynamic> raise <class 'ValueError'>(Var(msg, arrayobj.py:1659))
2025-05-12 23:19:04,959 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$140load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8937800>,
                                    140)],
             '$152call.3': [(<numba.core.ir.Assign object at 0x000001E8A8937500>,
                             140)],
             '$162compare_op.5': [(<numba.core.ir.Assign object at 0x000001E8A89375F0>,
                                   140)],
             '$166pred': [(<numba.core.ir.Assign object at 0x000001E8A89363F0>,
                           140)],
             '$16call.3': [(<numba.core.ir.Assign object at 0x000001E8A895F170>,
                            0)],
             '$174binary_subscr.3': [(<numba.core.ir.Assign object at 0x000001E8A895F020>,
                                      168)],
             '$178format_value.4': [(<numba.core.ir.Assign object at 0x000001E8A8923EF0>,
                                     168)],
             '$178format_value.5': [(<numba.core.ir.Assign object at 0x000001E8A89233E0>,
                                     168)],
             '$182build_string.7': [(<numba.core.ir.Assign object at 0x000001E8A8923740>,
                                     168)],
             '$26compare_op.5': [(<numba.core.ir.Assign object at 0x000001E8A895FA10>,
                                  0)],
             '$280format_value.2': [(<numba.core.ir.Assign object at 0x000001E8A8921070>,
                                     276)],
             '$280format_value.3': [(<numba.core.ir.Assign object at 0x000001E8A8920B60>,
                                     276)],
             '$286format_value.6': [(<numba.core.ir.Assign object at 0x000001E8A8920E30>,
                                     276)],
             '$286format_value.7': [(<numba.core.ir.Assign object at 0x000001E8A8920F50>,
                                     276)],
             '$288build_string.8': [(<numba.core.ir.Assign object at 0x000001E8A8920800>,
                                     276)],
             '$288build_string.9': [(<numba.core.ir.Assign object at 0x000001E8A89200B0>,
                                     276)],
             '$292load_global.11': [(<numba.core.ir.Assign object at 0x000001E8A8920530>,
                                     276)],
             '$304call.14': [(<numba.core.ir.Assign object at 0x000001E8A8920350>,
                              276)],
             '$30pred': [(<numba.core.ir.Assign object at 0x000001E8A8936EA0>,
                          0)],
             '$38binary_subscr.3': [(<numba.core.ir.Assign object at 0x000001E8A8921550>,
                                     32)],
             '$42format_value.4': [(<numba.core.ir.Assign object at 0x000001E8A8936630>,
                                    32)],
             '$42format_value.5': [(<numba.core.ir.Assign object at 0x000001E8A89365A0>,
                                    32)],
             '$46build_string.7': [(<numba.core.ir.Assign object at 0x000001E8A8936090>,
                                    32)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A895F110>,
                                  0)],
             '$const160.4.1': [(<numba.core.ir.Assign object at 0x000001E8A89373E0>,
                                140)],
             '$const168.0.2': [(<numba.core.ir.Assign object at 0x000001E8A8936270>,
                                168)],
             '$const172.2.3': [(<numba.core.ir.Assign object at 0x000001E8A8923FE0>,
                                168)],
             '$const180.6.4': [(<numba.core.ir.Assign object at 0x000001E8A8923C50>,
                                168)],
             '$const24.4.1': [(<numba.core.ir.Assign object at 0x000001E8A895F440>,
                               0)],
             '$const276.0.7': [(<numba.core.ir.Assign object at 0x000001E8A8921760>,
                                276)],
             '$const282.4.8': [(<numba.core.ir.Assign object at 0x000001E8A8920A40>,
                                276)],
             '$const32.0.2': [(<numba.core.ir.Assign object at 0x000001E8A8936B40>,
                               32)],
             '$const36.2.3': [(<numba.core.ir.Assign object at 0x000001E8A89368A0>,
                               32)],
             '$const44.6.4': [(<numba.core.ir.Assign object at 0x000001E8A89360F0>,
                               32)],
             'bool166': [(<numba.core.ir.Assign object at 0x000001E8A8937170>,
                          140)],
             'bool30': [(<numba.core.ir.Assign object at 0x000001E8A895F3B0>,
                         0)],
             'index_shape': [(<numba.core.ir.Assign object at 0x000001E8A895F080>,
                              0)],
             'index_str': [(<numba.core.ir.Assign object at 0x000001E8A8923950>,
                            168)],
             'msg': [(<numba.core.ir.Assign object at 0x000001E8A89201A0>,
                      276)],
             'shape_str': [(<numba.core.ir.Assign object at 0x000001E8A8935D30>,
                            32)],
             'src_shapes': [(<numba.core.ir.Assign object at 0x000001E8A895F860>,
                             0)]})
2025-05-12 23:19:04,967 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A895F710>
2025-05-12 23:19:04,985 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1019)
           2	RESUME(arg=0, lineno=1019)
           4	LOAD_CONST(arg=1, lineno=1020)
           6	STORE_FAST(arg=1, lineno=1020)
           8	LOAD_GLOBAL(arg=1, lineno=1021)
          18	LOAD_FAST(arg=0, lineno=1021)
          20	LOAD_FAST(arg=1, lineno=1021)
          22	CALL(arg=2, lineno=1021)
          30	LOAD_CONST(arg=2, lineno=1021)
          32	COMPARE_OP(arg=40, lineno=1021)
          36	POP_JUMP_IF_FALSE(arg=17, lineno=1021)
          38	PUSH_NULL(arg=None, lineno=1022)
          40	LOAD_GLOBAL(arg=3, lineno=1022)
          50	LOAD_FAST(arg=0, lineno=1022)
          52	LOAD_FAST(arg=1, lineno=1022)
          54	CALL(arg=2, lineno=1022)
          62	CALL(arg=0, lineno=1022)
          70	RETURN_VALUE(arg=None, lineno=1022)
>         72	LOAD_GLOBAL(arg=5, lineno=1024)
          82	LOAD_FAST(arg=0, lineno=1024)
          84	CALL(arg=1, lineno=1024)
          92	RETURN_VALUE(arg=None, lineno=1024)
2025-05-12 23:19:04,985 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:04,985 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:04,987 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:04,987 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1019)
2025-05-12 23:19:04,988 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,988 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=1019)
2025-05-12 23:19:04,988 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,988 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1020)
2025-05-12 23:19:04,989 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,989 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=1020)
2025-05-12 23:19:04,989 - numba.core.byteflow - DEBUG - stack ['$const4.0.1']
2025-05-12 23:19:04,990 - numba.core.byteflow - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=1021)
2025-05-12 23:19:04,991 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,991 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=1021)
2025-05-12 23:19:04,991 - numba.core.byteflow - DEBUG - stack ['$null$8.2', '$8load_global.1']
2025-05-12 23:19:04,992 - numba.core.byteflow - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=1021)
2025-05-12 23:19:04,992 - numba.core.byteflow - DEBUG - stack ['$null$8.2', '$8load_global.1', '$object18.3']
2025-05-12 23:19:04,992 - numba.core.byteflow - DEBUG - dispatch pc=22, inst=CALL(arg=2, lineno=1021)
2025-05-12 23:19:04,992 - numba.core.byteflow - DEBUG - stack ['$null$8.2', '$8load_global.1', '$object18.3', '$attr20.4']
2025-05-12 23:19:04,993 - numba.core.byteflow - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=1021)
2025-05-12 23:19:04,993 - numba.core.byteflow - DEBUG - stack ['$22call.5']
2025-05-12 23:19:04,993 - numba.core.byteflow - DEBUG - dispatch pc=32, inst=COMPARE_OP(arg=40, lineno=1021)
2025-05-12 23:19:04,994 - numba.core.byteflow - DEBUG - stack ['$22call.5', '$const30.6.2']
2025-05-12 23:19:04,994 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1021)
2025-05-12 23:19:04,994 - numba.core.byteflow - DEBUG - stack ['$32compare_op.7']
2025-05-12 23:19:04,994 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:04,994 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2025-05-12 23:19:04,994 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:04,995 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=38 nstack_initial=0)
2025-05-12 23:19:04,995 - numba.core.byteflow - DEBUG - dispatch pc=38, inst=PUSH_NULL(arg=None, lineno=1022)
2025-05-12 23:19:04,996 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:04,996 - numba.core.byteflow - DEBUG - dispatch pc=40, inst=LOAD_GLOBAL(arg=3, lineno=1022)
2025-05-12 23:19:04,997 - numba.core.byteflow - DEBUG - stack ['$null$38.0']
2025-05-12 23:19:04,997 - numba.core.byteflow - DEBUG - dispatch pc=50, inst=LOAD_FAST(arg=0, lineno=1022)
2025-05-12 23:19:04,998 - numba.core.byteflow - DEBUG - stack ['$null$38.0', '$null$40.2', '$40load_global.1']
2025-05-12 23:19:04,998 - numba.core.byteflow - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=1022)
2025-05-12 23:19:04,998 - numba.core.byteflow - DEBUG - stack ['$null$38.0', '$null$40.2', '$40load_global.1', '$object50.3']
2025-05-12 23:19:04,999 - numba.core.byteflow - DEBUG - dispatch pc=54, inst=CALL(arg=2, lineno=1022)
2025-05-12 23:19:04,999 - numba.core.byteflow - DEBUG - stack ['$null$38.0', '$null$40.2', '$40load_global.1', '$object50.3', '$attr52.4']
2025-05-12 23:19:04,999 - numba.core.byteflow - DEBUG - dispatch pc=62, inst=CALL(arg=0, lineno=1022)
2025-05-12 23:19:04,999 - numba.core.byteflow - DEBUG - stack ['$null$38.0', '$54call.5']
2025-05-12 23:19:05,000 - numba.core.byteflow - DEBUG - dispatch pc=70, inst=RETURN_VALUE(arg=None, lineno=1022)
2025-05-12 23:19:05,000 - numba.core.byteflow - DEBUG - stack ['$62call.6']
2025-05-12 23:19:05,000 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,000 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=72 nstack_initial=0)])
2025-05-12 23:19:05,001 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,001 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=72 nstack_initial=0)
2025-05-12 23:19:05,001 - numba.core.byteflow - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=5, lineno=1024)
2025-05-12 23:19:05,002 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,002 - numba.core.byteflow - DEBUG - dispatch pc=82, inst=LOAD_FAST(arg=0, lineno=1024)
2025-05-12 23:19:05,002 - numba.core.byteflow - DEBUG - stack ['$null$72.1', '$72load_global.0']
2025-05-12 23:19:05,002 - numba.core.byteflow - DEBUG - dispatch pc=84, inst=CALL(arg=1, lineno=1024)
2025-05-12 23:19:05,003 - numba.core.byteflow - DEBUG - stack ['$null$72.1', '$72load_global.0', '$object82.2']
2025-05-12 23:19:05,003 - numba.core.byteflow - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=1024)
2025-05-12 23:19:05,003 - numba.core.byteflow - DEBUG - stack ['$84call.3']
2025-05-12 23:19:05,004 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,005 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:05,005 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set()})
2025-05-12 23:19:05,005 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:05,006 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,006 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,006 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:05,007 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:05,007 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:05,007 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$const4.0.1'}), (6, {'value': '$const4.0.1'}), (8, {'idx': 0, 'res': '$8load_global.1'}), (18, {'res': '$object18.3'}), (20, {'res': '$attr20.4'}), (22, {'func': '$8load_global.1', 'args': ['$object18.3', '$attr20.4'], 'kw_names': None, 'res': '$22call.5'}), (30, {'res': '$const30.6.2'}), (32, {'lhs': '$22call.5', 'rhs': '$const30.6.2', 'res': '$32compare_op.7'}), (36, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: (), 72: ()})
2025-05-12 23:19:05,008 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {}), (40, {'idx': 1, 'res': '$40load_global.1'}), (50, {'res': '$object50.3'}), (52, {'res': '$attr52.4'}), (54, {'func': '$40load_global.1', 'args': ['$object50.3', '$attr52.4'], 'kw_names': None, 'res': '$54call.5'}), (62, {'func': '$54call.5', 'args': [], 'kw_names': None, 'res': '$62call.6'}), (70, {'retval': '$62call.6', 'castval': '$70return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,008 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'idx': 2, 'res': '$72load_global.0'}), (82, {'res': '$object82.2'}), (84, {'func': '$72load_global.0', 'args': ['$object82.2'], 'kw_names': None, 'res': '$84call.3'}), (92, {'retval': '$84call.3', 'castval': '$92return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,010 - numba.core.interpreter - DEBUG - label 0:
    object = arg(0, name=object)             ['object']
    attr = const(str, __str__)               ['attr']
    $8load_global.1 = global(hasattr: <built-in function hasattr>) ['$8load_global.1']
    $22call.5 = call $8load_global.1(object, attr, func=$8load_global.1, args=[Var(object, old_builtins.py:1019), Var(attr, old_builtins.py:1020)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.5', '$8load_global.1', 'attr', 'object']
    $const30.6.2 = const(bool, True)         ['$const30.6.2']
    $32compare_op.7 = $22call.5 == $const30.6.2 ['$22call.5', '$32compare_op.7', '$const30.6.2']
    bool36 = global(bool: <class 'bool'>)    ['bool36']
    $36pred = call bool36($32compare_op.7, func=bool36, args=(Var($32compare_op.7, old_builtins.py:1021),), kws=(), vararg=None, varkwarg=None, target=None) ['$32compare_op.7', '$36pred', 'bool36']
    branch $36pred, 38, 72                   ['$36pred']
label 38:
    $40load_global.1 = global(getattr: <built-in function getattr>) ['$40load_global.1']
    $54call.5 = call $40load_global.1(object, attr, func=$40load_global.1, args=[Var(object, old_builtins.py:1019), Var(attr, old_builtins.py:1020)], kws=(), vararg=None, varkwarg=None, target=None) ['$40load_global.1', '$54call.5', 'attr', 'object']
    $62call.6 = call $54call.5(func=$54call.5, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$54call.5', '$62call.6']
    $70return_value.7 = cast(value=$62call.6) ['$62call.6', '$70return_value.7']
    return $70return_value.7                 ['$70return_value.7']
label 72:
    $72load_global.0 = global(repr: <built-in function repr>) ['$72load_global.0']
    $84call.3 = call $72load_global.0(object, func=$72load_global.0, args=[Var(object, old_builtins.py:1019)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.0', '$84call.3', 'object']
    $92return_value.4 = cast(value=$84call.3) ['$84call.3', '$92return_value.4']
    return $92return_value.4                 ['$92return_value.4']

2025-05-12 23:19:05,021 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:05,021 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8907620>
2025-05-12 23:19:05,021 - numba.core.ssa - DEBUG - on stmt: object = arg(0, name=object)
2025-05-12 23:19:05,022 - numba.core.ssa - DEBUG - on stmt: attr = const(str, __str__)
2025-05-12 23:19:05,022 - numba.core.ssa - DEBUG - on stmt: $8load_global.1 = global(hasattr: <built-in function hasattr>)
2025-05-12 23:19:05,023 - numba.core.ssa - DEBUG - on stmt: $22call.5 = call $8load_global.1(object, attr, func=$8load_global.1, args=[Var(object, old_builtins.py:1019), Var(attr, old_builtins.py:1020)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,023 - numba.core.ssa - DEBUG - on stmt: $const30.6.2 = const(bool, True)
2025-05-12 23:19:05,024 - numba.core.ssa - DEBUG - on stmt: $32compare_op.7 = $22call.5 == $const30.6.2
2025-05-12 23:19:05,024 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,024 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.7, func=bool36, args=(Var($32compare_op.7, old_builtins.py:1021),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,025 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 38, 72
2025-05-12 23:19:05,025 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 38
2025-05-12 23:19:05,026 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8907620>
2025-05-12 23:19:05,026 - numba.core.ssa - DEBUG - on stmt: $40load_global.1 = global(getattr: <built-in function getattr>)
2025-05-12 23:19:05,027 - numba.core.ssa - DEBUG - on stmt: $54call.5 = call $40load_global.1(object, attr, func=$40load_global.1, args=[Var(object, old_builtins.py:1019), Var(attr, old_builtins.py:1020)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,027 - numba.core.ssa - DEBUG - on stmt: $62call.6 = call $54call.5(func=$54call.5, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,027 - numba.core.ssa - DEBUG - on stmt: $70return_value.7 = cast(value=$62call.6)
2025-05-12 23:19:05,027 - numba.core.ssa - DEBUG - on stmt: return $70return_value.7
2025-05-12 23:19:05,028 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 72
2025-05-12 23:19:05,028 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8907620>
2025-05-12 23:19:05,028 - numba.core.ssa - DEBUG - on stmt: $72load_global.0 = global(repr: <built-in function repr>)
2025-05-12 23:19:05,028 - numba.core.ssa - DEBUG - on stmt: $84call.3 = call $72load_global.0(object, func=$72load_global.0, args=[Var(object, old_builtins.py:1019)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,028 - numba.core.ssa - DEBUG - on stmt: $92return_value.4 = cast(value=$84call.3)
2025-05-12 23:19:05,029 - numba.core.ssa - DEBUG - on stmt: return $92return_value.4
2025-05-12 23:19:05,030 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$22call.5': [(<numba.core.ir.Assign object at 0x000001E8A8907710>,
                            0)],
             '$32compare_op.7': [(<numba.core.ir.Assign object at 0x000001E8A89075F0>,
                                  0)],
             '$36pred': [(<numba.core.ir.Assign object at 0x000001E8A8904C20>,
                          0)],
             '$40load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A8904D40>,
                                   38)],
             '$54call.5': [(<numba.core.ir.Assign object at 0x000001E8A8904440>,
                            38)],
             '$62call.6': [(<numba.core.ir.Assign object at 0x000001E8A89042F0>,
                            38)],
             '$70return_value.7': [(<numba.core.ir.Assign object at 0x000001E8A8904140>,
                                    38)],
             '$72load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A89046E0>,
                                   72)],
             '$84call.3': [(<numba.core.ir.Assign object at 0x000001E8A8905640>,
                            72)],
             '$8load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A8907800>,
                                  0)],
             '$92return_value.4': [(<numba.core.ir.Assign object at 0x000001E8A8905370>,
                                    72)],
             '$const30.6.2': [(<numba.core.ir.Assign object at 0x000001E8A8907560>,
                               0)],
             'attr': [(<numba.core.ir.Assign object at 0x000001E8A8906B40>, 0)],
             'bool36': [(<numba.core.ir.Assign object at 0x000001E8A8904AA0>,
                         0)],
             'object': [(<numba.core.ir.Assign object at 0x000001E8A8907E90>,
                         0)]})
2025-05-12 23:19:05,031 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8907620>
2025-05-12 23:19:05,043 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=998)
           2	RESUME(arg=0, lineno=998)
           4	LOAD_GLOBAL(arg=1, lineno=999)
          14	LOAD_FAST(arg=0, lineno=999)
          16	LOAD_FAST(arg=1, lineno=999)
          18	CALL(arg=2, lineno=999)
          26	RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:05,043 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:05,043 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,044 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:05,044 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=998)
2025-05-12 23:19:05,044 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,045 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=998)
2025-05-12 23:19:05,045 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,045 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=999)
2025-05-12 23:19:05,046 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,046 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=999)
2025-05-12 23:19:05,046 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:05,047 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=999)
2025-05-12 23:19:05,047 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:05,047 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=CALL(arg=2, lineno=999)
2025-05-12 23:19:05,048 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:05,048 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:05,048 - numba.core.byteflow - DEBUG - stack ['$18call.4']
2025-05-12 23:19:05,049 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,049 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:05,049 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:05,049 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:05,051 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,051 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,051 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:05,051 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:05,052 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:05,052 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,052 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'name', 'obj']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-05-12 23:19:05,055 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:05,055 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A89066F0>
2025-05-12 23:19:05,056 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:05,056 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:05,056 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>)
2025-05-12 23:19:05,056 - numba.core.ssa - DEBUG - on stmt: $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,057 - numba.core.ssa - DEBUG - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-05-12 23:19:05,057 - numba.core.ssa - DEBUG - on stmt: return $26return_value.5
2025-05-12 23:19:05,058 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001E8A88DD910>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A88DD850>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A88DDCD0>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A88DD760>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A88DD490>, 0)]})
2025-05-12 23:19:05,058 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A89066F0>
2025-05-12 23:19:05,069 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(int64, unicode_type)
 
There are 2 candidate implementations:
[1m - Of which 2 did not match due to:
 Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
   With argument(s): '(int64, unicode_type)':[0m
[1m  Rejected as the implementation raised a specific error:
    RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:05,085 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(int64, unicode_type)
 
There are 2 candidate implementations:
[1m  - Of which 2 did not match due to:
  Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
    With argument(s): '(int64, unicode_type)':[0m
[1m   Rejected as the implementation raised a specific error:
     RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:05,095 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=998)
           2	RESUME(arg=0, lineno=998)
           4	LOAD_GLOBAL(arg=1, lineno=999)
          14	LOAD_FAST(arg=0, lineno=999)
          16	LOAD_FAST(arg=1, lineno=999)
          18	CALL(arg=2, lineno=999)
          26	RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:05,095 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:05,095 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,097 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:05,098 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=998)
2025-05-12 23:19:05,098 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,098 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=998)
2025-05-12 23:19:05,098 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,098 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=999)
2025-05-12 23:19:05,099 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,099 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=999)
2025-05-12 23:19:05,099 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:05,099 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=999)
2025-05-12 23:19:05,099 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:05,100 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=CALL(arg=2, lineno=999)
2025-05-12 23:19:05,100 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:05,100 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:05,100 - numba.core.byteflow - DEBUG - stack ['$18call.4']
2025-05-12 23:19:05,101 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,101 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:05,101 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:05,102 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:05,102 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,102 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,102 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:05,102 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:05,103 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:05,103 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,104 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'name', 'obj']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-05-12 23:19:05,107 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:05,107 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88F8980>
2025-05-12 23:19:05,107 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:05,108 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:05,108 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>)
2025-05-12 23:19:05,108 - numba.core.ssa - DEBUG - on stmt: $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,109 - numba.core.ssa - DEBUG - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-05-12 23:19:05,109 - numba.core.ssa - DEBUG - on stmt: return $26return_value.5
2025-05-12 23:19:05,109 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001E8A88FA1B0>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A88F9EE0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A88FA570>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A88FA660>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A88FA810>, 0)]})
2025-05-12 23:19:05,111 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A88F8980>
2025-05-12 23:19:05,143 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=954)
           2	RESUME(arg=0, lineno=954)
           4	LOAD_GLOBAL(arg=1, lineno=955)
          14	LOAD_FAST(arg=0, lineno=955)
          16	LOAD_FAST(arg=1, lineno=955)
          18	LOAD_GLOBAL(arg=2, lineno=955)
          28	CALL(arg=3, lineno=955)
          36	RETURN_VALUE(arg=None, lineno=955)
2025-05-12 23:19:05,144 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:05,144 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,145 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:05,145 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=954)
2025-05-12 23:19:05,145 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,146 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=954)
2025-05-12 23:19:05,146 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,146 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=955)
2025-05-12 23:19:05,146 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,147 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=955)
2025-05-12 23:19:05,147 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:05,147 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=955)
2025-05-12 23:19:05,148 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:05,148 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=955)
2025-05-12 23:19:05,148 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:05,148 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=CALL(arg=3, lineno=955)
2025-05-12 23:19:05,149 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3', '$18load_global.4']
2025-05-12 23:19:05,149 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=955)
2025-05-12 23:19:05,149 - numba.core.byteflow - DEBUG - stack ['$28call.5']
2025-05-12 23:19:05,149 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,149 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:05,151 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:05,151 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:05,152 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,152 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,152 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:05,153 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:05,153 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:05,153 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'idx': 1, 'res': '$18load_global.4'}), (28, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3', '$18load_global.4'], 'kw_names': None, 'res': '$28call.5'}), (36, {'retval': '$28call.5', 'castval': '$36return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,154 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_getattr: <intrinsic resolve_getattr>) ['$4load_global.0']
    $18load_global.4 = global(_getattr_default: _getattr_default_type()) ['$18load_global.4']
    $28call.5 = call $4load_global.0(obj, name, $18load_global.4, func=$4load_global.0, args=[Var(obj, old_builtins.py:954), Var(name, old_builtins.py:954), Var($18load_global.4, old_builtins.py:955)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_global.4', '$28call.5', '$4load_global.0', 'name', 'obj']
    $36return_value.6 = cast(value=$28call.5) ['$28call.5', '$36return_value.6']
    return $36return_value.6                 ['$36return_value.6']

2025-05-12 23:19:05,157 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:05,157 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A174A0>
2025-05-12 23:19:05,158 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:05,158 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:05,158 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_getattr: <intrinsic resolve_getattr>)
2025-05-12 23:19:05,159 - numba.core.ssa - DEBUG - on stmt: $18load_global.4 = global(_getattr_default: _getattr_default_type())
2025-05-12 23:19:05,159 - numba.core.ssa - DEBUG - on stmt: $28call.5 = call $4load_global.0(obj, name, $18load_global.4, func=$4load_global.0, args=[Var(obj, old_builtins.py:954), Var(name, old_builtins.py:954), Var($18load_global.4, old_builtins.py:955)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,159 - numba.core.ssa - DEBUG - on stmt: $36return_value.6 = cast(value=$28call.5)
2025-05-12 23:19:05,160 - numba.core.ssa - DEBUG - on stmt: return $36return_value.6
2025-05-12 23:19:05,160 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18load_global.4': [(<numba.core.ir.Assign object at 0x000001E8A8A17E90>,
                                   0)],
             '$28call.5': [(<numba.core.ir.Assign object at 0x000001E8A8A28080>,
                            0)],
             '$36return_value.6': [(<numba.core.ir.Assign object at 0x000001E8A8A281A0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8A17B60>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A8A179E0>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A8A178C0>, 0)]})
2025-05-12 23:19:05,161 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8A174A0>
2025-05-12 23:19:05,196 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2572)
           2	COPY_FREE_VARS(arg=1, lineno=2572)
           4	RESUME(arg=0, lineno=2572)
           6	LOAD_CONST(arg=1, lineno=2573)
           8	STORE_FAST(arg=1, lineno=2573)
          10	LOAD_FAST(arg=0, lineno=2574)
          12	LOAD_CONST(arg=2, lineno=2574)
          14	COMPARE_OP(arg=2, lineno=2574)
          18	POP_JUMP_IF_FALSE(arg=5, lineno=2574)
          20	LOAD_FAST(arg=0, lineno=2575)
          22	UNARY_NEGATIVE(arg=None, lineno=2575)
          24	STORE_FAST(arg=0, lineno=2575)
          26	LOAD_CONST(arg=3, lineno=2576)
          28	STORE_FAST(arg=1, lineno=2576)
>         30	LOAD_FAST(arg=0, lineno=2577)
          32	LOAD_CONST(arg=2, lineno=2577)
          34	COMPARE_OP(arg=40, lineno=2577)
          38	POP_JUMP_IF_FALSE(arg=1, lineno=2577)
          40	RETURN_CONST(arg=4, lineno=2578)
>         42	LOAD_FAST(arg=1, lineno=2579)
          44	LOAD_CONST(arg=5, lineno=2579)
          46	BINARY_OP(arg=0, lineno=2579)
          50	LOAD_GLOBAL(arg=1, lineno=2579)
          60	LOAD_GLOBAL(arg=3, lineno=2579)
          70	LOAD_ATTR(arg=4, lineno=2579)
          90	LOAD_GLOBAL(arg=3, lineno=2579)
         100	LOAD_ATTR(arg=6, lineno=2579)
         120	LOAD_FAST(arg=0, lineno=2579)
         122	CALL(arg=1, lineno=2579)
         130	CALL(arg=1, lineno=2579)
         138	CALL(arg=1, lineno=2579)
         146	BINARY_OP(arg=0, lineno=2579)
         150	STORE_FAST(arg=2, lineno=2579)
         152	LOAD_GLOBAL(arg=8, lineno=2580)
         162	STORE_FAST(arg=3, lineno=2580)
         164	LOAD_GLOBAL(arg=11, lineno=2581)
         174	LOAD_FAST(arg=3, lineno=2581)
         176	CALL(arg=1, lineno=2581)
         184	STORE_FAST(arg=4, lineno=2581)
         186	LOAD_GLOBAL(arg=13, lineno=2582)
         196	LOAD_FAST(arg=3, lineno=2582)
         198	LOAD_FAST(arg=4, lineno=2582)
         200	LOAD_FAST(arg=2, lineno=2582)
         202	LOAD_CONST(arg=3, lineno=2582)
         204	CALL(arg=4, lineno=2582)
         212	STORE_FAST(arg=5, lineno=2582)
         214	LOAD_FAST(arg=1, lineno=2583)
         216	POP_JUMP_IF_FALSE(arg=22, lineno=2583)
         218	LOAD_GLOBAL(arg=15, lineno=2584)
         228	LOAD_FAST(arg=5, lineno=2584)
         230	LOAD_CONST(arg=2, lineno=2584)
         232	LOAD_GLOBAL(arg=17, lineno=2584)
         242	LOAD_CONST(arg=6, lineno=2584)
         244	CALL(arg=1, lineno=2584)
         252	CALL(arg=3, lineno=2584)
         260	POP_TOP(arg=None, lineno=2584)
>        262	LOAD_FAST(arg=2, lineno=2585)
         264	LOAD_CONST(arg=5, lineno=2585)
         266	BINARY_OP(arg=10, lineno=2585)
         270	STORE_FAST(arg=6, lineno=2585)
         272	LOAD_FAST(arg=0, lineno=2586)
         274	LOAD_CONST(arg=2, lineno=2586)
         276	COMPARE_OP(arg=68, lineno=2586)
         280	POP_JUMP_IF_FALSE(arg=53, lineno=2586)
>        282	LOAD_GLOBAL(arg=19, lineno=2587)
         292	LOAD_FAST(arg=0, lineno=2587)
         294	LOAD_DEREF(arg=9, lineno=2587)
         296	CALL(arg=2, lineno=2587)
         304	UNPACK_SEQUENCE(arg=2, lineno=2587)
         308	STORE_FAST(arg=0, lineno=2587)
         310	STORE_FAST(arg=7, lineno=2587)
         312	LOAD_GLOBAL(arg=17, lineno=2588)
         322	LOAD_CONST(arg=4, lineno=2588)
         324	CALL(arg=1, lineno=2588)
         332	LOAD_FAST(arg=7, lineno=2588)
         334	BINARY_OP(arg=0, lineno=2588)
         338	STORE_FAST(arg=8, lineno=2588)
         340	LOAD_GLOBAL(arg=15, lineno=2589)
         350	LOAD_FAST(arg=5, lineno=2589)
         352	LOAD_FAST(arg=6, lineno=2589)
         354	LOAD_FAST(arg=8, lineno=2589)
         356	CALL(arg=3, lineno=2589)
         364	POP_TOP(arg=None, lineno=2589)
         366	LOAD_FAST(arg=6, lineno=2590)
         368	LOAD_CONST(arg=5, lineno=2590)
         370	BINARY_OP(arg=23, lineno=2590)
         374	STORE_FAST(arg=6, lineno=2590)
         376	LOAD_FAST(arg=0, lineno=2586)
         378	LOAD_CONST(arg=2, lineno=2586)
         380	COMPARE_OP(arg=68, lineno=2586)
         384	POP_JUMP_IF_FALSE(arg=1, lineno=2586)
         386	JUMP_BACKWARD(arg=53, lineno=2586)
>        388	LOAD_FAST(arg=5, lineno=2591)
         390	RETURN_VALUE(arg=None, lineno=2591)
2025-05-12 23:19:05,198 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:05,198 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,199 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:05,201 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2572)
2025-05-12 23:19:05,202 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,202 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=2572)
2025-05-12 23:19:05,203 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,203 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=RESUME(arg=0, lineno=2572)
2025-05-12 23:19:05,204 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,204 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=2573)
2025-05-12 23:19:05,205 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,205 - numba.core.byteflow - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=1, lineno=2573)
2025-05-12 23:19:05,206 - numba.core.byteflow - DEBUG - stack ['$const6.0.1']
2025-05-12 23:19:05,206 - numba.core.byteflow - DEBUG - dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=2574)
2025-05-12 23:19:05,207 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,208 - numba.core.byteflow - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=2, lineno=2574)
2025-05-12 23:19:05,208 - numba.core.byteflow - DEBUG - stack ['$n10.1']
2025-05-12 23:19:05,208 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=COMPARE_OP(arg=2, lineno=2574)
2025-05-12 23:19:05,208 - numba.core.byteflow - DEBUG - stack ['$n10.1', '$const12.2.2']
2025-05-12 23:19:05,209 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=POP_JUMP_IF_FALSE(arg=5, lineno=2574)
2025-05-12 23:19:05,209 - numba.core.byteflow - DEBUG - stack ['$14compare_op.3']
2025-05-12 23:19:05,210 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=20, stack=(), blockstack=(), npush=0), Edge(pc=30, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,210 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=20 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2025-05-12 23:19:05,210 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,211 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=20 nstack_initial=0)
2025-05-12 23:19:05,211 - numba.core.byteflow - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=2575)
2025-05-12 23:19:05,212 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,213 - numba.core.byteflow - DEBUG - dispatch pc=22, inst=UNARY_NEGATIVE(arg=None, lineno=2575)
2025-05-12 23:19:05,214 - numba.core.byteflow - DEBUG - stack ['$n20.0']
2025-05-12 23:19:05,214 - numba.core.byteflow - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=0, lineno=2575)
2025-05-12 23:19:05,215 - numba.core.byteflow - DEBUG - stack ['$22unary_negative.1']
2025-05-12 23:19:05,215 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=2576)
2025-05-12 23:19:05,216 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,216 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=STORE_FAST(arg=1, lineno=2576)
2025-05-12 23:19:05,216 - numba.core.byteflow - DEBUG - stack ['$const26.2.3']
2025-05-12 23:19:05,216 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=30, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,217 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=30 nstack_initial=0)])
2025-05-12 23:19:05,217 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,217 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=30 nstack_initial=0)
2025-05-12 23:19:05,217 - numba.core.byteflow - DEBUG - dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=2577)
2025-05-12 23:19:05,218 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,218 - numba.core.byteflow - DEBUG - dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=2577)
2025-05-12 23:19:05,219 - numba.core.byteflow - DEBUG - stack ['$n30.0']
2025-05-12 23:19:05,219 - numba.core.byteflow - DEBUG - dispatch pc=34, inst=COMPARE_OP(arg=40, lineno=2577)
2025-05-12 23:19:05,221 - numba.core.byteflow - DEBUG - stack ['$n30.0', '$const32.1.2']
2025-05-12 23:19:05,222 - numba.core.byteflow - DEBUG - dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=1, lineno=2577)
2025-05-12 23:19:05,222 - numba.core.byteflow - DEBUG - stack ['$34compare_op.2']
2025-05-12 23:19:05,223 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=42, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,224 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=30 nstack_initial=0), State(pc_initial=40 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
2025-05-12 23:19:05,224 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=42 nstack_initial=0)])
2025-05-12 23:19:05,225 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,225 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2025-05-12 23:19:05,226 - numba.core.byteflow - DEBUG - dispatch pc=40, inst=RETURN_CONST(arg=4, lineno=2578)
2025-05-12 23:19:05,226 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,226 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,227 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=42 nstack_initial=0)])
2025-05-12 23:19:05,227 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,227 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=42 nstack_initial=0)
2025-05-12 23:19:05,228 - numba.core.byteflow - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=1, lineno=2579)
2025-05-12 23:19:05,228 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,230 - numba.core.byteflow - DEBUG - dispatch pc=44, inst=LOAD_CONST(arg=5, lineno=2579)
2025-05-12 23:19:05,230 - numba.core.byteflow - DEBUG - stack ['$flag42.0']
2025-05-12 23:19:05,231 - numba.core.byteflow - DEBUG - dispatch pc=46, inst=BINARY_OP(arg=0, lineno=2579)
2025-05-12 23:19:05,231 - numba.core.byteflow - DEBUG - stack ['$flag42.0', '$const44.1.5']
2025-05-12 23:19:05,232 - numba.core.byteflow - DEBUG - dispatch pc=50, inst=LOAD_GLOBAL(arg=1, lineno=2579)
2025-05-12 23:19:05,232 - numba.core.byteflow - DEBUG - stack ['$binop_add46.2']
2025-05-12 23:19:05,232 - numba.core.byteflow - DEBUG - dispatch pc=60, inst=LOAD_GLOBAL(arg=3, lineno=2579)
2025-05-12 23:19:05,233 - numba.core.byteflow - DEBUG - stack ['$binop_add46.2', '$null$50.4', '$50load_global.3']
2025-05-12 23:19:05,233 - numba.core.byteflow - DEBUG - dispatch pc=70, inst=LOAD_ATTR(arg=4, lineno=2579)
2025-05-12 23:19:05,234 - numba.core.byteflow - DEBUG - stack ['$binop_add46.2', '$null$50.4', '$50load_global.3', '$null$60.6', '$60load_global.5']
2025-05-12 23:19:05,234 - numba.core.byteflow - DEBUG - dispatch pc=90, inst=LOAD_GLOBAL(arg=3, lineno=2579)
2025-05-12 23:19:05,234 - numba.core.byteflow - DEBUG - stack ['$binop_add46.2', '$null$50.4', '$50load_global.3', '$null$60.6', '$70load_attr.7']
2025-05-12 23:19:05,235 - numba.core.byteflow - DEBUG - dispatch pc=100, inst=LOAD_ATTR(arg=6, lineno=2579)
2025-05-12 23:19:05,235 - numba.core.byteflow - DEBUG - stack ['$binop_add46.2', '$null$50.4', '$50load_global.3', '$null$60.6', '$70load_attr.7', '$null$90.9', '$90load_global.8']
2025-05-12 23:19:05,235 - numba.core.byteflow - DEBUG - dispatch pc=120, inst=LOAD_FAST(arg=0, lineno=2579)
2025-05-12 23:19:05,236 - numba.core.byteflow - DEBUG - stack ['$binop_add46.2', '$null$50.4', '$50load_global.3', '$null$60.6', '$70load_attr.7', '$null$90.9', '$100load_attr.10']
2025-05-12 23:19:05,237 - numba.core.byteflow - DEBUG - dispatch pc=122, inst=CALL(arg=1, lineno=2579)
2025-05-12 23:19:05,238 - numba.core.byteflow - DEBUG - stack ['$binop_add46.2', '$null$50.4', '$50load_global.3', '$null$60.6', '$70load_attr.7', '$null$90.9', '$100load_attr.10', '$n120.11']
2025-05-12 23:19:05,238 - numba.core.byteflow - DEBUG - dispatch pc=130, inst=CALL(arg=1, lineno=2579)
2025-05-12 23:19:05,238 - numba.core.byteflow - DEBUG - stack ['$binop_add46.2', '$null$50.4', '$50load_global.3', '$null$60.6', '$70load_attr.7', '$122call.12']
2025-05-12 23:19:05,240 - numba.core.byteflow - DEBUG - dispatch pc=138, inst=CALL(arg=1, lineno=2579)
2025-05-12 23:19:05,240 - numba.core.byteflow - DEBUG - stack ['$binop_add46.2', '$null$50.4', '$50load_global.3', '$130call.13']
2025-05-12 23:19:05,240 - numba.core.byteflow - DEBUG - dispatch pc=146, inst=BINARY_OP(arg=0, lineno=2579)
2025-05-12 23:19:05,241 - numba.core.byteflow - DEBUG - stack ['$binop_add46.2', '$138call.14']
2025-05-12 23:19:05,241 - numba.core.byteflow - DEBUG - dispatch pc=150, inst=STORE_FAST(arg=2, lineno=2579)
2025-05-12 23:19:05,242 - numba.core.byteflow - DEBUG - stack ['$binop_add146.15']
2025-05-12 23:19:05,242 - numba.core.byteflow - DEBUG - dispatch pc=152, inst=LOAD_GLOBAL(arg=8, lineno=2580)
2025-05-12 23:19:05,242 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,242 - numba.core.byteflow - DEBUG - dispatch pc=162, inst=STORE_FAST(arg=3, lineno=2580)
2025-05-12 23:19:05,243 - numba.core.byteflow - DEBUG - stack ['$152load_global.16']
2025-05-12 23:19:05,243 - numba.core.byteflow - DEBUG - dispatch pc=164, inst=LOAD_GLOBAL(arg=11, lineno=2581)
2025-05-12 23:19:05,243 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,244 - numba.core.byteflow - DEBUG - dispatch pc=174, inst=LOAD_FAST(arg=3, lineno=2581)
2025-05-12 23:19:05,244 - numba.core.byteflow - DEBUG - stack ['$null$164.18', '$164load_global.17']
2025-05-12 23:19:05,245 - numba.core.byteflow - DEBUG - dispatch pc=176, inst=CALL(arg=1, lineno=2581)
2025-05-12 23:19:05,245 - numba.core.byteflow - DEBUG - stack ['$null$164.18', '$164load_global.17', '$kind174.19']
2025-05-12 23:19:05,246 - numba.core.byteflow - DEBUG - dispatch pc=184, inst=STORE_FAST(arg=4, lineno=2581)
2025-05-12 23:19:05,247 - numba.core.byteflow - DEBUG - stack ['$176call.20']
2025-05-12 23:19:05,247 - numba.core.byteflow - DEBUG - dispatch pc=186, inst=LOAD_GLOBAL(arg=13, lineno=2582)
2025-05-12 23:19:05,247 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,248 - numba.core.byteflow - DEBUG - dispatch pc=196, inst=LOAD_FAST(arg=3, lineno=2582)
2025-05-12 23:19:05,248 - numba.core.byteflow - DEBUG - stack ['$null$186.22', '$186load_global.21']
2025-05-12 23:19:05,248 - numba.core.byteflow - DEBUG - dispatch pc=198, inst=LOAD_FAST(arg=4, lineno=2582)
2025-05-12 23:19:05,248 - numba.core.byteflow - DEBUG - stack ['$null$186.22', '$186load_global.21', '$kind196.23']
2025-05-12 23:19:05,249 - numba.core.byteflow - DEBUG - dispatch pc=200, inst=LOAD_FAST(arg=2, lineno=2582)
2025-05-12 23:19:05,249 - numba.core.byteflow - DEBUG - stack ['$null$186.22', '$186load_global.21', '$kind196.23', '$char_width198.24']
2025-05-12 23:19:05,250 - numba.core.byteflow - DEBUG - dispatch pc=202, inst=LOAD_CONST(arg=3, lineno=2582)
2025-05-12 23:19:05,250 - numba.core.byteflow - DEBUG - stack ['$null$186.22', '$186load_global.21', '$kind196.23', '$char_width198.24', '$length200.25']
2025-05-12 23:19:05,251 - numba.core.byteflow - DEBUG - dispatch pc=204, inst=CALL(arg=4, lineno=2582)
2025-05-12 23:19:05,251 - numba.core.byteflow - DEBUG - stack ['$null$186.22', '$186load_global.21', '$kind196.23', '$char_width198.24', '$length200.25', '$const202.26.3']
2025-05-12 23:19:05,251 - numba.core.byteflow - DEBUG - dispatch pc=212, inst=STORE_FAST(arg=5, lineno=2582)
2025-05-12 23:19:05,252 - numba.core.byteflow - DEBUG - stack ['$204call.27']
2025-05-12 23:19:05,252 - numba.core.byteflow - DEBUG - dispatch pc=214, inst=LOAD_FAST(arg=1, lineno=2583)
2025-05-12 23:19:05,252 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,253 - numba.core.byteflow - DEBUG - dispatch pc=216, inst=POP_JUMP_IF_FALSE(arg=22, lineno=2583)
2025-05-12 23:19:05,254 - numba.core.byteflow - DEBUG - stack ['$flag214.28']
2025-05-12 23:19:05,255 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=218, stack=(), blockstack=(), npush=0), Edge(pc=262, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,255 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=218 nstack_initial=0), State(pc_initial=262 nstack_initial=0)])
2025-05-12 23:19:05,255 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,255 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=218 nstack_initial=0)
2025-05-12 23:19:05,256 - numba.core.byteflow - DEBUG - dispatch pc=218, inst=LOAD_GLOBAL(arg=15, lineno=2584)
2025-05-12 23:19:05,256 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,256 - numba.core.byteflow - DEBUG - dispatch pc=228, inst=LOAD_FAST(arg=5, lineno=2584)
2025-05-12 23:19:05,257 - numba.core.byteflow - DEBUG - stack ['$null$218.1', '$218load_global.0']
2025-05-12 23:19:05,257 - numba.core.byteflow - DEBUG - dispatch pc=230, inst=LOAD_CONST(arg=2, lineno=2584)
2025-05-12 23:19:05,257 - numba.core.byteflow - DEBUG - stack ['$null$218.1', '$218load_global.0', '$s228.2']
2025-05-12 23:19:05,257 - numba.core.byteflow - DEBUG - dispatch pc=232, inst=LOAD_GLOBAL(arg=17, lineno=2584)
2025-05-12 23:19:05,259 - numba.core.byteflow - DEBUG - stack ['$null$218.1', '$218load_global.0', '$s228.2', '$const230.3.2']
2025-05-12 23:19:05,259 - numba.core.byteflow - DEBUG - dispatch pc=242, inst=LOAD_CONST(arg=6, lineno=2584)
2025-05-12 23:19:05,259 - numba.core.byteflow - DEBUG - stack ['$null$218.1', '$218load_global.0', '$s228.2', '$const230.3.2', '$null$232.5', '$232load_global.4']
2025-05-12 23:19:05,260 - numba.core.byteflow - DEBUG - dispatch pc=244, inst=CALL(arg=1, lineno=2584)
2025-05-12 23:19:05,260 - numba.core.byteflow - DEBUG - stack ['$null$218.1', '$218load_global.0', '$s228.2', '$const230.3.2', '$null$232.5', '$232load_global.4', '$const242.6.6']
2025-05-12 23:19:05,261 - numba.core.byteflow - DEBUG - dispatch pc=252, inst=CALL(arg=3, lineno=2584)
2025-05-12 23:19:05,261 - numba.core.byteflow - DEBUG - stack ['$null$218.1', '$218load_global.0', '$s228.2', '$const230.3.2', '$244call.7']
2025-05-12 23:19:05,262 - numba.core.byteflow - DEBUG - dispatch pc=260, inst=POP_TOP(arg=None, lineno=2584)
2025-05-12 23:19:05,263 - numba.core.byteflow - DEBUG - stack ['$252call.8']
2025-05-12 23:19:05,263 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=262, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,264 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=262 nstack_initial=0), State(pc_initial=262 nstack_initial=0)])
2025-05-12 23:19:05,264 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,265 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=262 nstack_initial=0)
2025-05-12 23:19:05,266 - numba.core.byteflow - DEBUG - dispatch pc=262, inst=LOAD_FAST(arg=2, lineno=2585)
2025-05-12 23:19:05,266 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,266 - numba.core.byteflow - DEBUG - dispatch pc=264, inst=LOAD_CONST(arg=5, lineno=2585)
2025-05-12 23:19:05,267 - numba.core.byteflow - DEBUG - stack ['$length262.0']
2025-05-12 23:19:05,267 - numba.core.byteflow - DEBUG - dispatch pc=266, inst=BINARY_OP(arg=10, lineno=2585)
2025-05-12 23:19:05,268 - numba.core.byteflow - DEBUG - stack ['$length262.0', '$const264.1.5']
2025-05-12 23:19:05,268 - numba.core.byteflow - DEBUG - dispatch pc=270, inst=STORE_FAST(arg=6, lineno=2585)
2025-05-12 23:19:05,268 - numba.core.byteflow - DEBUG - stack ['$binop_sub266.2']
2025-05-12 23:19:05,269 - numba.core.byteflow - DEBUG - dispatch pc=272, inst=LOAD_FAST(arg=0, lineno=2586)
2025-05-12 23:19:05,269 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,269 - numba.core.byteflow - DEBUG - dispatch pc=274, inst=LOAD_CONST(arg=2, lineno=2586)
2025-05-12 23:19:05,270 - numba.core.byteflow - DEBUG - stack ['$n272.3']
2025-05-12 23:19:05,271 - numba.core.byteflow - DEBUG - dispatch pc=276, inst=COMPARE_OP(arg=68, lineno=2586)
2025-05-12 23:19:05,271 - numba.core.byteflow - DEBUG - stack ['$n272.3', '$const274.4.2']
2025-05-12 23:19:05,271 - numba.core.byteflow - DEBUG - dispatch pc=280, inst=POP_JUMP_IF_FALSE(arg=53, lineno=2586)
2025-05-12 23:19:05,272 - numba.core.byteflow - DEBUG - stack ['$276compare_op.5']
2025-05-12 23:19:05,272 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=282, stack=(), blockstack=(), npush=0), Edge(pc=388, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,273 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=262 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=388 nstack_initial=0)])
2025-05-12 23:19:05,274 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=282 nstack_initial=0), State(pc_initial=388 nstack_initial=0)])
2025-05-12 23:19:05,274 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,274 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=282 nstack_initial=0)
2025-05-12 23:19:05,274 - numba.core.byteflow - DEBUG - dispatch pc=282, inst=LOAD_GLOBAL(arg=19, lineno=2587)
2025-05-12 23:19:05,275 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,275 - numba.core.byteflow - DEBUG - dispatch pc=292, inst=LOAD_FAST(arg=0, lineno=2587)
2025-05-12 23:19:05,275 - numba.core.byteflow - DEBUG - stack ['$null$282.1', '$282load_global.0']
2025-05-12 23:19:05,275 - numba.core.byteflow - DEBUG - dispatch pc=294, inst=LOAD_DEREF(arg=9, lineno=2587)
2025-05-12 23:19:05,276 - numba.core.byteflow - DEBUG - stack ['$null$282.1', '$282load_global.0', '$n292.2']
2025-05-12 23:19:05,276 - numba.core.byteflow - DEBUG - dispatch pc=296, inst=CALL(arg=2, lineno=2587)
2025-05-12 23:19:05,276 - numba.core.byteflow - DEBUG - stack ['$null$282.1', '$282load_global.0', '$n292.2', '$294load_deref.3']
2025-05-12 23:19:05,276 - numba.core.byteflow - DEBUG - dispatch pc=304, inst=UNPACK_SEQUENCE(arg=2, lineno=2587)
2025-05-12 23:19:05,277 - numba.core.byteflow - DEBUG - stack ['$296call.4']
2025-05-12 23:19:05,277 - numba.core.byteflow - DEBUG - dispatch pc=308, inst=STORE_FAST(arg=0, lineno=2587)
2025-05-12 23:19:05,277 - numba.core.byteflow - DEBUG - stack ['$304unpack_sequence.6', '$304unpack_sequence.5']
2025-05-12 23:19:05,277 - numba.core.byteflow - DEBUG - dispatch pc=310, inst=STORE_FAST(arg=7, lineno=2587)
2025-05-12 23:19:05,281 - numba.core.byteflow - DEBUG - stack ['$304unpack_sequence.6']
2025-05-12 23:19:05,281 - numba.core.byteflow - DEBUG - dispatch pc=312, inst=LOAD_GLOBAL(arg=17, lineno=2588)
2025-05-12 23:19:05,282 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,282 - numba.core.byteflow - DEBUG - dispatch pc=322, inst=LOAD_CONST(arg=4, lineno=2588)
2025-05-12 23:19:05,282 - numba.core.byteflow - DEBUG - stack ['$null$312.9', '$312load_global.8']
2025-05-12 23:19:05,283 - numba.core.byteflow - DEBUG - dispatch pc=324, inst=CALL(arg=1, lineno=2588)
2025-05-12 23:19:05,283 - numba.core.byteflow - DEBUG - stack ['$null$312.9', '$312load_global.8', '$const322.10.4']
2025-05-12 23:19:05,284 - numba.core.byteflow - DEBUG - dispatch pc=332, inst=LOAD_FAST(arg=7, lineno=2588)
2025-05-12 23:19:05,284 - numba.core.byteflow - DEBUG - stack ['$324call.11']
2025-05-12 23:19:05,284 - numba.core.byteflow - DEBUG - dispatch pc=334, inst=BINARY_OP(arg=0, lineno=2588)
2025-05-12 23:19:05,284 - numba.core.byteflow - DEBUG - stack ['$324call.11', '$digit332.12']
2025-05-12 23:19:05,285 - numba.core.byteflow - DEBUG - dispatch pc=338, inst=STORE_FAST(arg=8, lineno=2588)
2025-05-12 23:19:05,285 - numba.core.byteflow - DEBUG - stack ['$binop_add334.13']
2025-05-12 23:19:05,285 - numba.core.byteflow - DEBUG - dispatch pc=340, inst=LOAD_GLOBAL(arg=15, lineno=2589)
2025-05-12 23:19:05,285 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,286 - numba.core.byteflow - DEBUG - dispatch pc=350, inst=LOAD_FAST(arg=5, lineno=2589)
2025-05-12 23:19:05,286 - numba.core.byteflow - DEBUG - stack ['$null$340.15', '$340load_global.14']
2025-05-12 23:19:05,286 - numba.core.byteflow - DEBUG - dispatch pc=352, inst=LOAD_FAST(arg=6, lineno=2589)
2025-05-12 23:19:05,286 - numba.core.byteflow - DEBUG - stack ['$null$340.15', '$340load_global.14', '$s350.16']
2025-05-12 23:19:05,287 - numba.core.byteflow - DEBUG - dispatch pc=354, inst=LOAD_FAST(arg=8, lineno=2589)
2025-05-12 23:19:05,289 - numba.core.byteflow - DEBUG - stack ['$null$340.15', '$340load_global.14', '$s350.16', '$idx352.17']
2025-05-12 23:19:05,289 - numba.core.byteflow - DEBUG - dispatch pc=356, inst=CALL(arg=3, lineno=2589)
2025-05-12 23:19:05,289 - numba.core.byteflow - DEBUG - stack ['$null$340.15', '$340load_global.14', '$s350.16', '$idx352.17', '$c354.18']
2025-05-12 23:19:05,289 - numba.core.byteflow - DEBUG - dispatch pc=364, inst=POP_TOP(arg=None, lineno=2589)
2025-05-12 23:19:05,289 - numba.core.byteflow - DEBUG - stack ['$356call.19']
2025-05-12 23:19:05,290 - numba.core.byteflow - DEBUG - dispatch pc=366, inst=LOAD_FAST(arg=6, lineno=2590)
2025-05-12 23:19:05,290 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,291 - numba.core.byteflow - DEBUG - dispatch pc=368, inst=LOAD_CONST(arg=5, lineno=2590)
2025-05-12 23:19:05,291 - numba.core.byteflow - DEBUG - stack ['$idx366.20']
2025-05-12 23:19:05,292 - numba.core.byteflow - DEBUG - dispatch pc=370, inst=BINARY_OP(arg=23, lineno=2590)
2025-05-12 23:19:05,292 - numba.core.byteflow - DEBUG - stack ['$idx366.20', '$const368.21.5']
2025-05-12 23:19:05,292 - numba.core.byteflow - DEBUG - dispatch pc=374, inst=STORE_FAST(arg=6, lineno=2590)
2025-05-12 23:19:05,293 - numba.core.byteflow - DEBUG - stack ['$binop_isub370.22']
2025-05-12 23:19:05,293 - numba.core.byteflow - DEBUG - dispatch pc=376, inst=LOAD_FAST(arg=0, lineno=2586)
2025-05-12 23:19:05,293 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,294 - numba.core.byteflow - DEBUG - dispatch pc=378, inst=LOAD_CONST(arg=2, lineno=2586)
2025-05-12 23:19:05,294 - numba.core.byteflow - DEBUG - stack ['$n376.23']
2025-05-12 23:19:05,294 - numba.core.byteflow - DEBUG - dispatch pc=380, inst=COMPARE_OP(arg=68, lineno=2586)
2025-05-12 23:19:05,294 - numba.core.byteflow - DEBUG - stack ['$n376.23', '$const378.24.2']
2025-05-12 23:19:05,295 - numba.core.byteflow - DEBUG - dispatch pc=384, inst=POP_JUMP_IF_FALSE(arg=1, lineno=2586)
2025-05-12 23:19:05,296 - numba.core.byteflow - DEBUG - stack ['$380compare_op.25']
2025-05-12 23:19:05,297 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=386, stack=(), blockstack=(), npush=0), Edge(pc=388, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,298 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=388 nstack_initial=0), State(pc_initial=386 nstack_initial=0), State(pc_initial=388 nstack_initial=0)])
2025-05-12 23:19:05,298 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,299 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=388 nstack_initial=0)
2025-05-12 23:19:05,299 - numba.core.byteflow - DEBUG - dispatch pc=388, inst=LOAD_FAST(arg=5, lineno=2591)
2025-05-12 23:19:05,299 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,299 - numba.core.byteflow - DEBUG - dispatch pc=390, inst=RETURN_VALUE(arg=None, lineno=2591)
2025-05-12 23:19:05,301 - numba.core.byteflow - DEBUG - stack ['$s388.0']
2025-05-12 23:19:05,302 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,302 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=386 nstack_initial=0), State(pc_initial=388 nstack_initial=0)])
2025-05-12 23:19:05,302 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,302 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=386 nstack_initial=0)
2025-05-12 23:19:05,303 - numba.core.byteflow - DEBUG - dispatch pc=386, inst=JUMP_BACKWARD(arg=53, lineno=2586)
2025-05-12 23:19:05,303 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,303 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=282, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,305 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=388 nstack_initial=0), State(pc_initial=282 nstack_initial=0)])
2025-05-12 23:19:05,305 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=282 nstack_initial=0)])
2025-05-12 23:19:05,306 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:05,307 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=0): set(),
             State(pc_initial=30 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=218 nstack_initial=0): set(),
             State(pc_initial=262 nstack_initial=0): set(),
             State(pc_initial=282 nstack_initial=0): set(),
             State(pc_initial=386 nstack_initial=0): set(),
             State(pc_initial=388 nstack_initial=0): set()})
2025-05-12 23:19:05,307 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:05,308 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,308 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,308 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:05,308 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:05,309 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:05,309 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$const6.0.1'}), (8, {'value': '$const6.0.1'}), (10, {'res': '$n10.1'}), (12, {'res': '$const12.2.2'}), (14, {'lhs': '$n10.1', 'rhs': '$const12.2.2', 'res': '$14compare_op.3'}), (18, {'pred': '$14compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: (), 30: ()})
2025-05-12 23:19:05,310 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=20 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$n20.0'}), (22, {'value': '$n20.0', 'res': '$22unary_negative.1'}), (24, {'value': '$22unary_negative.1'}), (26, {'res': '$const26.2.3'}), (28, {'value': '$const26.2.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={30: ()})
2025-05-12 23:19:05,310 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=30 nstack_initial=0):
AdaptBlockInfo(insts=((30, {'res': '$n30.0'}), (32, {'res': '$const32.1.2'}), (34, {'lhs': '$n30.0', 'rhs': '$const32.1.2', 'res': '$34compare_op.2'}), (38, {'pred': '$34compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 42: ()})
2025-05-12 23:19:05,311 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {'retval': '$const40.0', 'castval': '$40return_const.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,311 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'res': '$flag42.0'}), (44, {'res': '$const44.1.5'}), (46, {'op': '+', 'lhs': '$flag42.0', 'rhs': '$const44.1.5', 'res': '$binop_add46.2'}), (50, {'idx': 0, 'res': '$50load_global.3'}), (60, {'idx': 1, 'res': '$60load_global.5'}), (70, {'item': '$60load_global.5', 'res': '$70load_attr.7'}), (90, {'idx': 1, 'res': '$90load_global.8'}), (100, {'item': '$90load_global.8', 'res': '$100load_attr.10'}), (120, {'res': '$n120.11'}), (122, {'func': '$100load_attr.10', 'args': ['$n120.11'], 'kw_names': None, 'res': '$122call.12'}), (130, {'func': '$70load_attr.7', 'args': ['$122call.12'], 'kw_names': None, 'res': '$130call.13'}), (138, {'func': '$50load_global.3', 'args': ['$130call.13'], 'kw_names': None, 'res': '$138call.14'}), (146, {'op': '+', 'lhs': '$binop_add46.2', 'rhs': '$138call.14', 'res': '$binop_add146.15'}), (150, {'value': '$binop_add146.15'}), (152, {'idx': 4, 'res': '$152load_global.16'}), (162, {'value': '$152load_global.16'}), (164, {'idx': 5, 'res': '$164load_global.17'}), (174, {'res': '$kind174.19'}), (176, {'func': '$164load_global.17', 'args': ['$kind174.19'], 'kw_names': None, 'res': '$176call.20'}), (184, {'value': '$176call.20'}), (186, {'idx': 6, 'res': '$186load_global.21'}), (196, {'res': '$kind196.23'}), (198, {'res': '$char_width198.24'}), (200, {'res': '$length200.25'}), (202, {'res': '$const202.26.3'}), (204, {'func': '$186load_global.21', 'args': ['$kind196.23', '$char_width198.24', '$length200.25', '$const202.26.3'], 'kw_names': None, 'res': '$204call.27'}), (212, {'value': '$204call.27'}), (214, {'res': '$flag214.28'}), (216, {'pred': '$flag214.28'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={218: (), 262: ()})
2025-05-12 23:19:05,313 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=218 nstack_initial=0):
AdaptBlockInfo(insts=((218, {'idx': 7, 'res': '$218load_global.0'}), (228, {'res': '$s228.2'}), (230, {'res': '$const230.3.2'}), (232, {'idx': 8, 'res': '$232load_global.4'}), (242, {'res': '$const242.6.6'}), (244, {'func': '$232load_global.4', 'args': ['$const242.6.6'], 'kw_names': None, 'res': '$244call.7'}), (252, {'func': '$218load_global.0', 'args': ['$s228.2', '$const230.3.2', '$244call.7'], 'kw_names': None, 'res': '$252call.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={262: ()})
2025-05-12 23:19:05,315 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=262 nstack_initial=0):
AdaptBlockInfo(insts=((262, {'res': '$length262.0'}), (264, {'res': '$const264.1.5'}), (266, {'op': '-', 'lhs': '$length262.0', 'rhs': '$const264.1.5', 'res': '$binop_sub266.2'}), (270, {'value': '$binop_sub266.2'}), (272, {'res': '$n272.3'}), (274, {'res': '$const274.4.2'}), (276, {'lhs': '$n272.3', 'rhs': '$const274.4.2', 'res': '$276compare_op.5'}), (280, {'pred': '$276compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: (), 388: ()})
2025-05-12 23:19:05,315 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=282 nstack_initial=0):
AdaptBlockInfo(insts=((282, {'idx': 9, 'res': '$282load_global.0'}), (292, {'res': '$n292.2'}), (294, {'res': '$294load_deref.3'}), (296, {'func': '$282load_global.0', 'args': ['$n292.2', '$294load_deref.3'], 'kw_names': None, 'res': '$296call.4'}), (304, {'iterable': '$296call.4', 'stores': ['$304unpack_sequence.5', '$304unpack_sequence.6'], 'tupleobj': '$304unpack_sequence.7'}), (308, {'value': '$304unpack_sequence.5'}), (310, {'value': '$304unpack_sequence.6'}), (312, {'idx': 8, 'res': '$312load_global.8'}), (322, {'res': '$const322.10.4'}), (324, {'func': '$312load_global.8', 'args': ['$const322.10.4'], 'kw_names': None, 'res': '$324call.11'}), (332, {'res': '$digit332.12'}), (334, {'op': '+', 'lhs': '$324call.11', 'rhs': '$digit332.12', 'res': '$binop_add334.13'}), (338, {'value': '$binop_add334.13'}), (340, {'idx': 7, 'res': '$340load_global.14'}), (350, {'res': '$s350.16'}), (352, {'res': '$idx352.17'}), (354, {'res': '$c354.18'}), (356, {'func': '$340load_global.14', 'args': ['$s350.16', '$idx352.17', '$c354.18'], 'kw_names': None, 'res': '$356call.19'}), (366, {'res': '$idx366.20'}), (368, {'res': '$const368.21.5'}), (370, {'op': '-=', 'lhs': '$idx366.20', 'rhs': '$const368.21.5', 'res': '$binop_isub370.22'}), (374, {'value': '$binop_isub370.22'}), (376, {'res': '$n376.23'}), (378, {'res': '$const378.24.2'}), (380, {'lhs': '$n376.23', 'rhs': '$const378.24.2', 'res': '$380compare_op.25'}), (384, {'pred': '$380compare_op.25'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={386: (), 388: ()})
2025-05-12 23:19:05,317 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=386 nstack_initial=0):
AdaptBlockInfo(insts=((386, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: ()})
2025-05-12 23:19:05,317 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=388 nstack_initial=0):
AdaptBlockInfo(insts=((388, {'res': '$s388.0'}), (390, {'retval': '$s388.0', 'castval': '$390return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,321 - numba.core.interpreter - DEBUG - label 0:
    n = arg(0, name=n)                       ['n']
    flag = const(bool, False)                ['flag']
    $const12.2.2 = const(int, 0)             ['$const12.2.2']
    $14compare_op.3 = n < $const12.2.2       ['$14compare_op.3', '$const12.2.2', 'n']
    bool18 = global(bool: <class 'bool'>)    ['bool18']
    $18pred = call bool18($14compare_op.3, func=bool18, args=(Var($14compare_op.3, unicode.py:2574),), kws=(), vararg=None, varkwarg=None, target=None) ['$14compare_op.3', '$18pred', 'bool18']
    branch $18pred, 20, 30                   ['$18pred']
label 20:
    n = unary(fn=<built-in function neg>, value=n) ['n', 'n']
    flag = const(bool, True)                 ['flag']
    jump 30                                  []
label 30:
    $const32.1.2 = const(int, 0)             ['$const32.1.2']
    $34compare_op.2 = n == $const32.1.2      ['$34compare_op.2', '$const32.1.2', 'n']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($34compare_op.2, func=bool38, args=(Var($34compare_op.2, unicode.py:2577),), kws=(), vararg=None, varkwarg=None, target=None) ['$34compare_op.2', '$38pred', 'bool38']
    branch $38pred, 40, 42                   ['$38pred']
label 40:
    $const40.0 = const(str, 0)               ['$const40.0']
    $40return_const.1 = cast(value=$const40.0) ['$40return_const.1', '$const40.0']
    return $40return_const.1                 ['$40return_const.1']
label 42:
    $const44.1.5 = const(int, 1)             ['$const44.1.5']
    $binop_add46.2 = flag + $const44.1.5     ['$binop_add46.2', '$const44.1.5', 'flag']
    $50load_global.3 = global(int: <class 'int'>) ['$50load_global.3']
    $60load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$60load_global.5']
    $70load_attr.7 = getattr(value=$60load_global.5, attr=floor) ['$60load_global.5', '$70load_attr.7']
    $90load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$90load_global.8']
    $100load_attr.10 = getattr(value=$90load_global.8, attr=log10) ['$100load_attr.10', '$90load_global.8']
    $122call.12 = call $100load_attr.10(n, func=$100load_attr.10, args=[Var(n, unicode.py:2572)], kws=(), vararg=None, varkwarg=None, target=None) ['$100load_attr.10', '$122call.12', 'n']
    $130call.13 = call $70load_attr.7($122call.12, func=$70load_attr.7, args=[Var($122call.12, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None) ['$122call.12', '$130call.13', '$70load_attr.7']
    $138call.14 = call $50load_global.3($130call.13, func=$50load_global.3, args=[Var($130call.13, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None) ['$130call.13', '$138call.14', '$50load_global.3']
    length = $binop_add46.2 + $138call.14    ['$138call.14', '$binop_add46.2', 'length']
    kind = global(PY_UNICODE_1BYTE_KIND: 1)  ['kind']
    $164load_global.17 = global(_kind_to_byte_width: <function _kind_to_byte_width at 0x000001E8A8036C00>) ['$164load_global.17']
    char_width = call $164load_global.17(kind, func=$164load_global.17, args=[Var(kind, unicode.py:2580)], kws=(), vararg=None, varkwarg=None, target=None) ['$164load_global.17', 'char_width', 'kind']
    $186load_global.21 = global(_malloc_string: <intrinsic _malloc_string>) ['$186load_global.21']
    $const202.26.3 = const(bool, True)       ['$const202.26.3']
    s = call $186load_global.21(kind, char_width, length, $const202.26.3, func=$186load_global.21, args=[Var(kind, unicode.py:2580), Var(char_width, unicode.py:2581), Var(length, unicode.py:2579), Var($const202.26.3, unicode.py:2582)], kws=(), vararg=None, varkwarg=None, target=None) ['$186load_global.21', '$const202.26.3', 'char_width', 'kind', 'length', 's']
    bool216 = global(bool: <class 'bool'>)   ['bool216']
    $216pred = call bool216(flag, func=bool216, args=(Var(flag, unicode.py:2573),), kws=(), vararg=None, varkwarg=None, target=None) ['$216pred', 'bool216', 'flag']
    branch $216pred, 218, 262                ['$216pred']
label 218:
    $218load_global.0 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>) ['$218load_global.0']
    $const230.3.2 = const(int, 0)            ['$const230.3.2']
    $232load_global.4 = global(ord: <built-in function ord>) ['$232load_global.4']
    $const242.6.6 = const(str, -)            ['$const242.6.6']
    $244call.7 = call $232load_global.4($const242.6.6, func=$232load_global.4, args=[Var($const242.6.6, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None) ['$232load_global.4', '$244call.7', '$const242.6.6']
    $252call.8 = call $218load_global.0(s, $const230.3.2, $244call.7, func=$218load_global.0, args=[Var(s, unicode.py:2582), Var($const230.3.2, unicode.py:2584), Var($244call.7, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.0', '$244call.7', '$252call.8', '$const230.3.2', 's']
    jump 262                                 []
label 262:
    $const264.1.5 = const(int, 1)            ['$const264.1.5']
    idx = length - $const264.1.5             ['$const264.1.5', 'idx', 'length']
    $const274.4.2 = const(int, 0)            ['$const274.4.2']
    $276compare_op.5 = n > $const274.4.2     ['$276compare_op.5', '$const274.4.2', 'n']
    bool280 = global(bool: <class 'bool'>)   ['bool280']
    $280pred = call bool280($276compare_op.5, func=bool280, args=(Var($276compare_op.5, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None) ['$276compare_op.5', '$280pred', 'bool280']
    branch $280pred, 282, 388                ['$280pred']
label 282:
    $282load_global.0 = global(divmod: <built-in function divmod>) ['$282load_global.0']
    $294load_deref.3 = freevar(ten: 10)      ['$294load_deref.3']
    $296call.4 = call $282load_global.0(n, $294load_deref.3, func=$282load_global.0, args=[Var(n, unicode.py:2572), Var($294load_deref.3, unicode.py:2587)], kws=(), vararg=None, varkwarg=None, target=None) ['$282load_global.0', '$294load_deref.3', '$296call.4', 'n']
    $304unpack_sequence.7 = exhaust_iter(value=$296call.4, count=2) ['$296call.4', '$304unpack_sequence.7']
    $304unpack_sequence.5 = static_getitem(value=$304unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>) ['$304unpack_sequence.5', '$304unpack_sequence.7']
    $304unpack_sequence.6 = static_getitem(value=$304unpack_sequence.7, index=1, index_var=None, fn=<built-in function getitem>) ['$304unpack_sequence.6', '$304unpack_sequence.7']
    n = $304unpack_sequence.5                ['$304unpack_sequence.5', 'n']
    digit = $304unpack_sequence.6            ['$304unpack_sequence.6', 'digit']
    $312load_global.8 = global(ord: <built-in function ord>) ['$312load_global.8']
    $const322.10.4 = const(str, 0)           ['$const322.10.4']
    $324call.11 = call $312load_global.8($const322.10.4, func=$312load_global.8, args=[Var($const322.10.4, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None) ['$312load_global.8', '$324call.11', '$const322.10.4']
    c = $324call.11 + digit                  ['$324call.11', 'c', 'digit']
    $340load_global.14 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>) ['$340load_global.14']
    $356call.19 = call $340load_global.14(s, idx, c, func=$340load_global.14, args=[Var(s, unicode.py:2582), Var(idx, unicode.py:2585), Var(c, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None) ['$340load_global.14', '$356call.19', 'c', 'idx', 's']
    $const368.21.5 = const(int, 1)           ['$const368.21.5']
    $binop_isub370.22 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=idx, rhs=$const368.21.5, static_lhs=Undefined, static_rhs=Undefined) ['$binop_isub370.22', '$const368.21.5', 'idx']
    idx = $binop_isub370.22                  ['$binop_isub370.22', 'idx']
    $const378.24.2 = const(int, 0)           ['$const378.24.2']
    $380compare_op.25 = n > $const378.24.2   ['$380compare_op.25', '$const378.24.2', 'n']
    bool384 = global(bool: <class 'bool'>)   ['bool384']
    $384pred = call bool384($380compare_op.25, func=bool384, args=(Var($380compare_op.25, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None) ['$380compare_op.25', '$384pred', 'bool384']
    branch $384pred, 386, 388                ['$384pred']
label 386:
    jump 282                                 []
label 388:
    $390return_value.1 = cast(value=s)       ['$390return_value.1', 's']
    return $390return_value.1                ['$390return_value.1']

2025-05-12 23:19:05,344 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:05,344 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A77710>
2025-05-12 23:19:05,345 - numba.core.ssa - DEBUG - on stmt: n = arg(0, name=n)
2025-05-12 23:19:05,346 - numba.core.ssa - DEBUG - on stmt: flag = const(bool, False)
2025-05-12 23:19:05,348 - numba.core.ssa - DEBUG - on stmt: $const12.2.2 = const(int, 0)
2025-05-12 23:19:05,348 - numba.core.ssa - DEBUG - on stmt: $14compare_op.3 = n < $const12.2.2
2025-05-12 23:19:05,348 - numba.core.ssa - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,349 - numba.core.ssa - DEBUG - on stmt: $18pred = call bool18($14compare_op.3, func=bool18, args=(Var($14compare_op.3, unicode.py:2574),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,349 - numba.core.ssa - DEBUG - on stmt: branch $18pred, 20, 30
2025-05-12 23:19:05,349 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 20
2025-05-12 23:19:05,349 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A77710>
2025-05-12 23:19:05,349 - numba.core.ssa - DEBUG - on stmt: n = unary(fn=<built-in function neg>, value=n)
2025-05-12 23:19:05,350 - numba.core.ssa - DEBUG - on stmt: flag = const(bool, True)
2025-05-12 23:19:05,350 - numba.core.ssa - DEBUG - on stmt: jump 30
2025-05-12 23:19:05,351 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 30
2025-05-12 23:19:05,351 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A77710>
2025-05-12 23:19:05,351 - numba.core.ssa - DEBUG - on stmt: $const32.1.2 = const(int, 0)
2025-05-12 23:19:05,351 - numba.core.ssa - DEBUG - on stmt: $34compare_op.2 = n == $const32.1.2
2025-05-12 23:19:05,352 - numba.core.ssa - DEBUG - on stmt: bool38 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,352 - numba.core.ssa - DEBUG - on stmt: $38pred = call bool38($34compare_op.2, func=bool38, args=(Var($34compare_op.2, unicode.py:2577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,352 - numba.core.ssa - DEBUG - on stmt: branch $38pred, 40, 42
2025-05-12 23:19:05,352 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 40
2025-05-12 23:19:05,352 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A77710>
2025-05-12 23:19:05,353 - numba.core.ssa - DEBUG - on stmt: $const40.0 = const(str, 0)
2025-05-12 23:19:05,354 - numba.core.ssa - DEBUG - on stmt: $40return_const.1 = cast(value=$const40.0)
2025-05-12 23:19:05,354 - numba.core.ssa - DEBUG - on stmt: return $40return_const.1
2025-05-12 23:19:05,356 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 42
2025-05-12 23:19:05,357 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A77710>
2025-05-12 23:19:05,357 - numba.core.ssa - DEBUG - on stmt: $const44.1.5 = const(int, 1)
2025-05-12 23:19:05,357 - numba.core.ssa - DEBUG - on stmt: $binop_add46.2 = flag + $const44.1.5
2025-05-12 23:19:05,357 - numba.core.ssa - DEBUG - on stmt: $50load_global.3 = global(int: <class 'int'>)
2025-05-12 23:19:05,357 - numba.core.ssa - DEBUG - on stmt: $60load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,359 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7 = getattr(value=$60load_global.5, attr=floor)
2025-05-12 23:19:05,359 - numba.core.ssa - DEBUG - on stmt: $90load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,359 - numba.core.ssa - DEBUG - on stmt: $100load_attr.10 = getattr(value=$90load_global.8, attr=log10)
2025-05-12 23:19:05,360 - numba.core.ssa - DEBUG - on stmt: $122call.12 = call $100load_attr.10(n, func=$100load_attr.10, args=[Var(n, unicode.py:2572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,360 - numba.core.ssa - DEBUG - on stmt: $130call.13 = call $70load_attr.7($122call.12, func=$70load_attr.7, args=[Var($122call.12, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,361 - numba.core.ssa - DEBUG - on stmt: $138call.14 = call $50load_global.3($130call.13, func=$50load_global.3, args=[Var($130call.13, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,361 - numba.core.ssa - DEBUG - on stmt: length = $binop_add46.2 + $138call.14
2025-05-12 23:19:05,361 - numba.core.ssa - DEBUG - on stmt: kind = global(PY_UNICODE_1BYTE_KIND: 1)
2025-05-12 23:19:05,361 - numba.core.ssa - DEBUG - on stmt: $164load_global.17 = global(_kind_to_byte_width: <function _kind_to_byte_width at 0x000001E8A8036C00>)
2025-05-12 23:19:05,362 - numba.core.ssa - DEBUG - on stmt: char_width = call $164load_global.17(kind, func=$164load_global.17, args=[Var(kind, unicode.py:2580)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,363 - numba.core.ssa - DEBUG - on stmt: $186load_global.21 = global(_malloc_string: <intrinsic _malloc_string>)
2025-05-12 23:19:05,364 - numba.core.ssa - DEBUG - on stmt: $const202.26.3 = const(bool, True)
2025-05-12 23:19:05,364 - numba.core.ssa - DEBUG - on stmt: s = call $186load_global.21(kind, char_width, length, $const202.26.3, func=$186load_global.21, args=[Var(kind, unicode.py:2580), Var(char_width, unicode.py:2581), Var(length, unicode.py:2579), Var($const202.26.3, unicode.py:2582)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,365 - numba.core.ssa - DEBUG - on stmt: bool216 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,365 - numba.core.ssa - DEBUG - on stmt: $216pred = call bool216(flag, func=bool216, args=(Var(flag, unicode.py:2573),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,366 - numba.core.ssa - DEBUG - on stmt: branch $216pred, 218, 262
2025-05-12 23:19:05,366 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 218
2025-05-12 23:19:05,366 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A77710>
2025-05-12 23:19:05,367 - numba.core.ssa - DEBUG - on stmt: $218load_global.0 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,367 - numba.core.ssa - DEBUG - on stmt: $const230.3.2 = const(int, 0)
2025-05-12 23:19:05,367 - numba.core.ssa - DEBUG - on stmt: $232load_global.4 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,367 - numba.core.ssa - DEBUG - on stmt: $const242.6.6 = const(str, -)
2025-05-12 23:19:05,368 - numba.core.ssa - DEBUG - on stmt: $244call.7 = call $232load_global.4($const242.6.6, func=$232load_global.4, args=[Var($const242.6.6, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,368 - numba.core.ssa - DEBUG - on stmt: $252call.8 = call $218load_global.0(s, $const230.3.2, $244call.7, func=$218load_global.0, args=[Var(s, unicode.py:2582), Var($const230.3.2, unicode.py:2584), Var($244call.7, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,368 - numba.core.ssa - DEBUG - on stmt: jump 262
2025-05-12 23:19:05,369 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 262
2025-05-12 23:19:05,369 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A77710>
2025-05-12 23:19:05,370 - numba.core.ssa - DEBUG - on stmt: $const264.1.5 = const(int, 1)
2025-05-12 23:19:05,370 - numba.core.ssa - DEBUG - on stmt: idx = length - $const264.1.5
2025-05-12 23:19:05,371 - numba.core.ssa - DEBUG - on stmt: $const274.4.2 = const(int, 0)
2025-05-12 23:19:05,371 - numba.core.ssa - DEBUG - on stmt: $276compare_op.5 = n > $const274.4.2
2025-05-12 23:19:05,372 - numba.core.ssa - DEBUG - on stmt: bool280 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,372 - numba.core.ssa - DEBUG - on stmt: $280pred = call bool280($276compare_op.5, func=bool280, args=(Var($276compare_op.5, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,373 - numba.core.ssa - DEBUG - on stmt: branch $280pred, 282, 388
2025-05-12 23:19:05,373 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 282
2025-05-12 23:19:05,374 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A77710>
2025-05-12 23:19:05,374 - numba.core.ssa - DEBUG - on stmt: $282load_global.0 = global(divmod: <built-in function divmod>)
2025-05-12 23:19:05,375 - numba.core.ssa - DEBUG - on stmt: $294load_deref.3 = freevar(ten: 10)
2025-05-12 23:19:05,375 - numba.core.ssa - DEBUG - on stmt: $296call.4 = call $282load_global.0(n, $294load_deref.3, func=$282load_global.0, args=[Var(n, unicode.py:2572), Var($294load_deref.3, unicode.py:2587)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,376 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.7 = exhaust_iter(value=$296call.4, count=2)
2025-05-12 23:19:05,376 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.5 = static_getitem(value=$304unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,376 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.6 = static_getitem(value=$304unpack_sequence.7, index=1, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,377 - numba.core.ssa - DEBUG - on stmt: n = $304unpack_sequence.5
2025-05-12 23:19:05,377 - numba.core.ssa - DEBUG - on stmt: digit = $304unpack_sequence.6
2025-05-12 23:19:05,378 - numba.core.ssa - DEBUG - on stmt: $312load_global.8 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,378 - numba.core.ssa - DEBUG - on stmt: $const322.10.4 = const(str, 0)
2025-05-12 23:19:05,378 - numba.core.ssa - DEBUG - on stmt: $324call.11 = call $312load_global.8($const322.10.4, func=$312load_global.8, args=[Var($const322.10.4, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,379 - numba.core.ssa - DEBUG - on stmt: c = $324call.11 + digit
2025-05-12 23:19:05,379 - numba.core.ssa - DEBUG - on stmt: $340load_global.14 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,380 - numba.core.ssa - DEBUG - on stmt: $356call.19 = call $340load_global.14(s, idx, c, func=$340load_global.14, args=[Var(s, unicode.py:2582), Var(idx, unicode.py:2585), Var(c, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,381 - numba.core.ssa - DEBUG - on stmt: $const368.21.5 = const(int, 1)
2025-05-12 23:19:05,381 - numba.core.ssa - DEBUG - on stmt: $binop_isub370.22 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=idx, rhs=$const368.21.5, static_lhs=Undefined, static_rhs=Undefined)
2025-05-12 23:19:05,382 - numba.core.ssa - DEBUG - on stmt: idx = $binop_isub370.22
2025-05-12 23:19:05,382 - numba.core.ssa - DEBUG - on stmt: $const378.24.2 = const(int, 0)
2025-05-12 23:19:05,382 - numba.core.ssa - DEBUG - on stmt: $380compare_op.25 = n > $const378.24.2
2025-05-12 23:19:05,383 - numba.core.ssa - DEBUG - on stmt: bool384 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,383 - numba.core.ssa - DEBUG - on stmt: $384pred = call bool384($380compare_op.25, func=bool384, args=(Var($380compare_op.25, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,384 - numba.core.ssa - DEBUG - on stmt: branch $384pred, 386, 388
2025-05-12 23:19:05,384 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 386
2025-05-12 23:19:05,385 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A77710>
2025-05-12 23:19:05,385 - numba.core.ssa - DEBUG - on stmt: jump 282
2025-05-12 23:19:05,385 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 388
2025-05-12 23:19:05,385 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A77710>
2025-05-12 23:19:05,386 - numba.core.ssa - DEBUG - on stmt: $390return_value.1 = cast(value=s)
2025-05-12 23:19:05,386 - numba.core.ssa - DEBUG - on stmt: return $390return_value.1
2025-05-12 23:19:05,387 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$100load_attr.10': [(<numba.core.ir.Assign object at 0x000001E8A8A62690>,
                                   42)],
             '$122call.12': [(<numba.core.ir.Assign object at 0x000001E8A8A62930>,
                              42)],
             '$130call.13': [(<numba.core.ir.Assign object at 0x000001E8A8A62AB0>,
                              42)],
             '$138call.14': [(<numba.core.ir.Assign object at 0x000001E8A8A62C30>,
                              42)],
             '$14compare_op.3': [(<numba.core.ir.Assign object at 0x000001E8A8A600E0>,
                                  0)],
             '$164load_global.17': [(<numba.core.ir.Assign object at 0x000001E8A8A631D0>,
                                     42)],
             '$186load_global.21': [(<numba.core.ir.Assign object at 0x000001E8A8A63680>,
                                     42)],
             '$18pred': [(<numba.core.ir.Assign object at 0x000001E8A8A60E60>,
                          0)],
             '$216pred': [(<numba.core.ir.Assign object at 0x000001E8A8A740E0>,
                           42)],
             '$218load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8A632F0>,
                                    218)],
             '$232load_global.4': [(<numba.core.ir.Assign object at 0x000001E8A8A74290>,
                                    218)],
             '$244call.7': [(<numba.core.ir.Assign object at 0x000001E8A8A74590>,
                             218)],
             '$252call.8': [(<numba.core.ir.Assign object at 0x000001E8A8A74710>,
                             218)],
             '$276compare_op.5': [(<numba.core.ir.Assign object at 0x000001E8A8A74F80>,
                                   262)],
             '$280pred': [(<numba.core.ir.Assign object at 0x000001E8A8A751F0>,
                           262)],
             '$282load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8A75310>,
                                    282)],
             '$294load_deref.3': [(<numba.core.ir.Assign object at 0x000001E8A8A75520>,
                                   282)],
             '$296call.4': [(<numba.core.ir.Assign object at 0x000001E8A8A756D0>,
                             282)],
             '$304unpack_sequence.5': [(<numba.core.ir.Assign object at 0x000001E8A8A75970>,
                                        282)],
             '$304unpack_sequence.6': [(<numba.core.ir.Assign object at 0x000001E8A8A75A90>,
                                        282)],
             '$304unpack_sequence.7': [(<numba.core.ir.Assign object at 0x000001E8A8A75820>,
                                        282)],
             '$312load_global.8': [(<numba.core.ir.Assign object at 0x000001E8A8A75D00>,
                                    282)],
             '$324call.11': [(<numba.core.ir.Assign object at 0x000001E8A8A76000>,
                              282)],
             '$340load_global.14': [(<numba.core.ir.Assign object at 0x000001E8A8A76450>,
                                     282)],
             '$34compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A8A61640>,
                                  30)],
             '$356call.19': [(<numba.core.ir.Assign object at 0x000001E8A8A768D0>,
                              282)],
             '$380compare_op.25': [(<numba.core.ir.Assign object at 0x000001E8A8A76FF0>,
                                    282)],
             '$384pred': [(<numba.core.ir.Assign object at 0x000001E8A8A77260>,
                           282)],
             '$38pred': [(<numba.core.ir.Assign object at 0x000001E8A8A618E0>,
                          30)],
             '$390return_value.1': [(<numba.core.ir.Assign object at 0x000001E8A8A77380>,
                                     388)],
             '$40return_const.1': [(<numba.core.ir.Assign object at 0x000001E8A8A61BB0>,
                                    40)],
             '$50load_global.3': [(<numba.core.ir.Assign object at 0x000001E8A8A62150>,
                                   42)],
             '$60load_global.5': [(<numba.core.ir.Assign object at 0x000001E8A8A622A0>,
                                   42)],
             '$70load_attr.7': [(<numba.core.ir.Assign object at 0x000001E8A8A623F0>,
                                 42)],
             '$90load_global.8': [(<numba.core.ir.Assign object at 0x000001E8A8A62540>,
                                   42)],
             '$binop_add46.2': [(<numba.core.ir.Assign object at 0x000001E8A8A62030>,
                                 42)],
             '$binop_isub370.22': [(<numba.core.ir.Assign object at 0x000001E8A8A76C00>,
                                    282)],
             '$const12.2.2': [(<numba.core.ir.Assign object at 0x000001E8A8A60620>,
                               0)],
             '$const202.26.3': [(<numba.core.ir.Assign object at 0x000001E8A8A63AA0>,
                                 42)],
             '$const230.3.2': [(<numba.core.ir.Assign object at 0x000001E8A8A63E30>,
                                218)],
             '$const242.6.6': [(<numba.core.ir.Assign object at 0x000001E8A8A743E0>,
                                218)],
             '$const264.1.5': [(<numba.core.ir.Assign object at 0x000001E8A8A74980>,
                                262)],
             '$const274.4.2': [(<numba.core.ir.Assign object at 0x000001E8A8A74E00>,
                                262)],
             '$const32.1.2': [(<numba.core.ir.Assign object at 0x000001E8A8A614C0>,
                               30)],
             '$const322.10.4': [(<numba.core.ir.Assign object at 0x000001E8A8A75E50>,
                                 282)],
             '$const368.21.5': [(<numba.core.ir.Assign object at 0x000001E8A8A76AB0>,
                                 282)],
             '$const378.24.2': [(<numba.core.ir.Assign object at 0x000001E8A8A76E70>,
                                 282)],
             '$const40.0': [(<numba.core.ir.Assign object at 0x000001E8A8A61A90>,
                             40)],
             '$const44.1.5': [(<numba.core.ir.Assign object at 0x000001E8A8A61EB0>,
                               42)],
             'bool18': [(<numba.core.ir.Assign object at 0x000001E8A8A60D10>,
                         0)],
             'bool216': [(<numba.core.ir.Assign object at 0x000001E8A8A63F80>,
                          42)],
             'bool280': [(<numba.core.ir.Assign object at 0x000001E8A8A750D0>,
                          262)],
             'bool38': [(<numba.core.ir.Assign object at 0x000001E8A8A61790>,
                         30)],
             'bool384': [(<numba.core.ir.Assign object at 0x000001E8A8A77140>,
                          282)],
             'c': [(<numba.core.ir.Assign object at 0x000001E8A8A76240>, 282)],
             'char_width': [(<numba.core.ir.Assign object at 0x000001E8A8A63470>,
                             42)],
             'digit': [(<numba.core.ir.Assign object at 0x000001E8A8A75BB0>,
                        282)],
             'flag': [(<numba.core.ir.Assign object at 0x000001E8A8A60980>, 0),
                      (<numba.core.ir.Assign object at 0x000001E8A8A612B0>,
                       20)],
             'idx': [(<numba.core.ir.Assign object at 0x000001E8A8A74B00>, 262),
                     (<numba.core.ir.Assign object at 0x000001E8A8A76C60>,
                      282)],
             'kind': [(<numba.core.ir.Assign object at 0x000001E8A8A62F90>,
                       42)],
             'length': [(<numba.core.ir.Assign object at 0x000001E8A8A62D80>,
                         42)],
             'n': [(<numba.core.ir.Assign object at 0x000001E8A8A60290>, 0),
                   (<numba.core.ir.Assign object at 0x000001E8A8A610D0>, 20),
                   (<numba.core.ir.Assign object at 0x000001E8A8A75880>, 282)],
             's': [(<numba.core.ir.Assign object at 0x000001E8A8A63C50>, 42)]})
2025-05-12 23:19:05,391 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8A77710>
2025-05-12 23:19:05,392 - numba.core.ssa - DEBUG - Fix SSA violator on var n
2025-05-12 23:19:05,393 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:05,393 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76630>
2025-05-12 23:19:05,393 - numba.core.ssa - DEBUG - on stmt: n = arg(0, name=n)
2025-05-12 23:19:05,393 - numba.core.ssa - DEBUG - first assign: n
2025-05-12 23:19:05,394 - numba.core.ssa - DEBUG - replaced with: n = arg(0, name=n)
2025-05-12 23:19:05,394 - numba.core.ssa - DEBUG - on stmt: flag = const(bool, False)
2025-05-12 23:19:05,394 - numba.core.ssa - DEBUG - on stmt: $const12.2.2 = const(int, 0)
2025-05-12 23:19:05,394 - numba.core.ssa - DEBUG - on stmt: $14compare_op.3 = n < $const12.2.2
2025-05-12 23:19:05,396 - numba.core.ssa - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,396 - numba.core.ssa - DEBUG - on stmt: $18pred = call bool18($14compare_op.3, func=bool18, args=(Var($14compare_op.3, unicode.py:2574),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,397 - numba.core.ssa - DEBUG - on stmt: branch $18pred, 20, 30
2025-05-12 23:19:05,397 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 20
2025-05-12 23:19:05,397 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76630>
2025-05-12 23:19:05,398 - numba.core.ssa - DEBUG - on stmt: n = unary(fn=<built-in function neg>, value=n)
2025-05-12 23:19:05,398 - numba.core.ssa - DEBUG - replaced with: n.1 = unary(fn=<built-in function neg>, value=n)
2025-05-12 23:19:05,398 - numba.core.ssa - DEBUG - on stmt: flag = const(bool, True)
2025-05-12 23:19:05,399 - numba.core.ssa - DEBUG - on stmt: jump 30
2025-05-12 23:19:05,400 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 30
2025-05-12 23:19:05,400 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76630>
2025-05-12 23:19:05,400 - numba.core.ssa - DEBUG - on stmt: $const32.1.2 = const(int, 0)
2025-05-12 23:19:05,401 - numba.core.ssa - DEBUG - on stmt: $34compare_op.2 = n == $const32.1.2
2025-05-12 23:19:05,401 - numba.core.ssa - DEBUG - on stmt: bool38 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,402 - numba.core.ssa - DEBUG - on stmt: $38pred = call bool38($34compare_op.2, func=bool38, args=(Var($34compare_op.2, unicode.py:2577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,402 - numba.core.ssa - DEBUG - on stmt: branch $38pred, 40, 42
2025-05-12 23:19:05,402 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 40
2025-05-12 23:19:05,402 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76630>
2025-05-12 23:19:05,403 - numba.core.ssa - DEBUG - on stmt: $const40.0 = const(str, 0)
2025-05-12 23:19:05,403 - numba.core.ssa - DEBUG - on stmt: $40return_const.1 = cast(value=$const40.0)
2025-05-12 23:19:05,403 - numba.core.ssa - DEBUG - on stmt: return $40return_const.1
2025-05-12 23:19:05,403 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 42
2025-05-12 23:19:05,404 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76630>
2025-05-12 23:19:05,404 - numba.core.ssa - DEBUG - on stmt: $const44.1.5 = const(int, 1)
2025-05-12 23:19:05,405 - numba.core.ssa - DEBUG - on stmt: $binop_add46.2 = flag + $const44.1.5
2025-05-12 23:19:05,405 - numba.core.ssa - DEBUG - on stmt: $50load_global.3 = global(int: <class 'int'>)
2025-05-12 23:19:05,405 - numba.core.ssa - DEBUG - on stmt: $60load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,406 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7 = getattr(value=$60load_global.5, attr=floor)
2025-05-12 23:19:05,406 - numba.core.ssa - DEBUG - on stmt: $90load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,406 - numba.core.ssa - DEBUG - on stmt: $100load_attr.10 = getattr(value=$90load_global.8, attr=log10)
2025-05-12 23:19:05,407 - numba.core.ssa - DEBUG - on stmt: $122call.12 = call $100load_attr.10(n, func=$100load_attr.10, args=[Var(n, unicode.py:2572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,407 - numba.core.ssa - DEBUG - on stmt: $130call.13 = call $70load_attr.7($122call.12, func=$70load_attr.7, args=[Var($122call.12, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,408 - numba.core.ssa - DEBUG - on stmt: $138call.14 = call $50load_global.3($130call.13, func=$50load_global.3, args=[Var($130call.13, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,408 - numba.core.ssa - DEBUG - on stmt: length = $binop_add46.2 + $138call.14
2025-05-12 23:19:05,408 - numba.core.ssa - DEBUG - on stmt: kind = global(PY_UNICODE_1BYTE_KIND: 1)
2025-05-12 23:19:05,408 - numba.core.ssa - DEBUG - on stmt: $164load_global.17 = global(_kind_to_byte_width: <function _kind_to_byte_width at 0x000001E8A8036C00>)
2025-05-12 23:19:05,408 - numba.core.ssa - DEBUG - on stmt: char_width = call $164load_global.17(kind, func=$164load_global.17, args=[Var(kind, unicode.py:2580)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,409 - numba.core.ssa - DEBUG - on stmt: $186load_global.21 = global(_malloc_string: <intrinsic _malloc_string>)
2025-05-12 23:19:05,409 - numba.core.ssa - DEBUG - on stmt: $const202.26.3 = const(bool, True)
2025-05-12 23:19:05,409 - numba.core.ssa - DEBUG - on stmt: s = call $186load_global.21(kind, char_width, length, $const202.26.3, func=$186load_global.21, args=[Var(kind, unicode.py:2580), Var(char_width, unicode.py:2581), Var(length, unicode.py:2579), Var($const202.26.3, unicode.py:2582)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,410 - numba.core.ssa - DEBUG - on stmt: bool216 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,410 - numba.core.ssa - DEBUG - on stmt: $216pred = call bool216(flag, func=bool216, args=(Var(flag, unicode.py:2573),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,411 - numba.core.ssa - DEBUG - on stmt: branch $216pred, 218, 262
2025-05-12 23:19:05,411 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 218
2025-05-12 23:19:05,411 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76630>
2025-05-12 23:19:05,412 - numba.core.ssa - DEBUG - on stmt: $218load_global.0 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,412 - numba.core.ssa - DEBUG - on stmt: $const230.3.2 = const(int, 0)
2025-05-12 23:19:05,412 - numba.core.ssa - DEBUG - on stmt: $232load_global.4 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,412 - numba.core.ssa - DEBUG - on stmt: $const242.6.6 = const(str, -)
2025-05-12 23:19:05,413 - numba.core.ssa - DEBUG - on stmt: $244call.7 = call $232load_global.4($const242.6.6, func=$232load_global.4, args=[Var($const242.6.6, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,413 - numba.core.ssa - DEBUG - on stmt: $252call.8 = call $218load_global.0(s, $const230.3.2, $244call.7, func=$218load_global.0, args=[Var(s, unicode.py:2582), Var($const230.3.2, unicode.py:2584), Var($244call.7, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,414 - numba.core.ssa - DEBUG - on stmt: jump 262
2025-05-12 23:19:05,414 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 262
2025-05-12 23:19:05,414 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76630>
2025-05-12 23:19:05,414 - numba.core.ssa - DEBUG - on stmt: $const264.1.5 = const(int, 1)
2025-05-12 23:19:05,415 - numba.core.ssa - DEBUG - on stmt: idx = length - $const264.1.5
2025-05-12 23:19:05,415 - numba.core.ssa - DEBUG - on stmt: $const274.4.2 = const(int, 0)
2025-05-12 23:19:05,415 - numba.core.ssa - DEBUG - on stmt: $276compare_op.5 = n > $const274.4.2
2025-05-12 23:19:05,416 - numba.core.ssa - DEBUG - on stmt: bool280 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,416 - numba.core.ssa - DEBUG - on stmt: $280pred = call bool280($276compare_op.5, func=bool280, args=(Var($276compare_op.5, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,416 - numba.core.ssa - DEBUG - on stmt: branch $280pred, 282, 388
2025-05-12 23:19:05,417 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 282
2025-05-12 23:19:05,417 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76630>
2025-05-12 23:19:05,417 - numba.core.ssa - DEBUG - on stmt: $282load_global.0 = global(divmod: <built-in function divmod>)
2025-05-12 23:19:05,417 - numba.core.ssa - DEBUG - on stmt: $294load_deref.3 = freevar(ten: 10)
2025-05-12 23:19:05,418 - numba.core.ssa - DEBUG - on stmt: $296call.4 = call $282load_global.0(n, $294load_deref.3, func=$282load_global.0, args=[Var(n, unicode.py:2572), Var($294load_deref.3, unicode.py:2587)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,418 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.7 = exhaust_iter(value=$296call.4, count=2)
2025-05-12 23:19:05,418 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.5 = static_getitem(value=$304unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,418 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.6 = static_getitem(value=$304unpack_sequence.7, index=1, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,419 - numba.core.ssa - DEBUG - on stmt: n = $304unpack_sequence.5
2025-05-12 23:19:05,419 - numba.core.ssa - DEBUG - replaced with: n.2 = $304unpack_sequence.5
2025-05-12 23:19:05,419 - numba.core.ssa - DEBUG - on stmt: digit = $304unpack_sequence.6
2025-05-12 23:19:05,419 - numba.core.ssa - DEBUG - on stmt: $312load_global.8 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,419 - numba.core.ssa - DEBUG - on stmt: $const322.10.4 = const(str, 0)
2025-05-12 23:19:05,421 - numba.core.ssa - DEBUG - on stmt: $324call.11 = call $312load_global.8($const322.10.4, func=$312load_global.8, args=[Var($const322.10.4, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,421 - numba.core.ssa - DEBUG - on stmt: c = $324call.11 + digit
2025-05-12 23:19:05,421 - numba.core.ssa - DEBUG - on stmt: $340load_global.14 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,421 - numba.core.ssa - DEBUG - on stmt: $356call.19 = call $340load_global.14(s, idx, c, func=$340load_global.14, args=[Var(s, unicode.py:2582), Var(idx, unicode.py:2585), Var(c, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,422 - numba.core.ssa - DEBUG - on stmt: $const368.21.5 = const(int, 1)
2025-05-12 23:19:05,422 - numba.core.ssa - DEBUG - on stmt: $binop_isub370.22 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=idx, rhs=$const368.21.5, static_lhs=Undefined, static_rhs=Undefined)
2025-05-12 23:19:05,423 - numba.core.ssa - DEBUG - on stmt: idx = $binop_isub370.22
2025-05-12 23:19:05,423 - numba.core.ssa - DEBUG - on stmt: $const378.24.2 = const(int, 0)
2025-05-12 23:19:05,423 - numba.core.ssa - DEBUG - on stmt: $380compare_op.25 = n > $const378.24.2
2025-05-12 23:19:05,424 - numba.core.ssa - DEBUG - on stmt: bool384 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,424 - numba.core.ssa - DEBUG - on stmt: $384pred = call bool384($380compare_op.25, func=bool384, args=(Var($380compare_op.25, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,424 - numba.core.ssa - DEBUG - on stmt: branch $384pred, 386, 388
2025-05-12 23:19:05,424 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 386
2025-05-12 23:19:05,425 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76630>
2025-05-12 23:19:05,425 - numba.core.ssa - DEBUG - on stmt: jump 282
2025-05-12 23:19:05,425 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 388
2025-05-12 23:19:05,425 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76630>
2025-05-12 23:19:05,425 - numba.core.ssa - DEBUG - on stmt: $390return_value.1 = cast(value=s)
2025-05-12 23:19:05,426 - numba.core.ssa - DEBUG - on stmt: return $390return_value.1
2025-05-12 23:19:05,426 - numba.core.ssa - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E8A8A77FE0>],
             20: [<numba.core.ir.Assign object at 0x000001E8A8AB8C20>],
             282: [<numba.core.ir.Assign object at 0x000001E8A8AB9310>]})
2025-05-12 23:19:05,426 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:05,427 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,427 - numba.core.ssa - DEBUG - on stmt: n = arg(0, name=n)
2025-05-12 23:19:05,427 - numba.core.ssa - DEBUG - on stmt: flag = const(bool, False)
2025-05-12 23:19:05,428 - numba.core.ssa - DEBUG - on stmt: $const12.2.2 = const(int, 0)
2025-05-12 23:19:05,428 - numba.core.ssa - DEBUG - on stmt: $14compare_op.3 = n < $const12.2.2
2025-05-12 23:19:05,428 - numba.core.ssa - DEBUG - find_def var='n' stmt=$14compare_op.3 = n < $const12.2.2
2025-05-12 23:19:05,428 - numba.core.ssa - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,428 - numba.core.ssa - DEBUG - on stmt: $18pred = call bool18($14compare_op.3, func=bool18, args=(Var($14compare_op.3, unicode.py:2574),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,429 - numba.core.ssa - DEBUG - on stmt: branch $18pred, 20, 30
2025-05-12 23:19:05,429 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 20
2025-05-12 23:19:05,430 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,430 - numba.core.ssa - DEBUG - on stmt: n.1 = unary(fn=<built-in function neg>, value=n)
2025-05-12 23:19:05,431 - numba.core.ssa - DEBUG - find_def var='n' stmt=n.1 = unary(fn=<built-in function neg>, value=n)
2025-05-12 23:19:05,431 - numba.core.ssa - DEBUG - find_def_from_top label 20
2025-05-12 23:19:05,431 - numba.core.ssa - DEBUG - idom 0 from label 20
2025-05-12 23:19:05,432 - numba.core.ssa - DEBUG - find_def_from_bottom label 0
2025-05-12 23:19:05,432 - numba.core.ssa - DEBUG - on stmt: flag = const(bool, True)
2025-05-12 23:19:05,432 - numba.core.ssa - DEBUG - on stmt: jump 30
2025-05-12 23:19:05,433 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 30
2025-05-12 23:19:05,433 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,433 - numba.core.ssa - DEBUG - on stmt: $const32.1.2 = const(int, 0)
2025-05-12 23:19:05,434 - numba.core.ssa - DEBUG - on stmt: $34compare_op.2 = n == $const32.1.2
2025-05-12 23:19:05,434 - numba.core.ssa - DEBUG - find_def var='n' stmt=$34compare_op.2 = n == $const32.1.2
2025-05-12 23:19:05,434 - numba.core.ssa - DEBUG - find_def_from_top label 30
2025-05-12 23:19:05,434 - numba.core.ssa - DEBUG - insert phi node n.3 = phi(incoming_values=[], incoming_blocks=[]) at 30
2025-05-12 23:19:05,434 - numba.core.ssa - DEBUG - find_def_from_bottom label 0
2025-05-12 23:19:05,435 - numba.core.ssa - DEBUG - incoming_def n = arg(0, name=n)
2025-05-12 23:19:05,435 - numba.core.ssa - DEBUG - find_def_from_bottom label 20
2025-05-12 23:19:05,435 - numba.core.ssa - DEBUG - incoming_def n.1 = unary(fn=<built-in function neg>, value=n)
2025-05-12 23:19:05,435 - numba.core.ssa - DEBUG - replaced with: $34compare_op.2 = n.3 == $const32.1.2
2025-05-12 23:19:05,435 - numba.core.ssa - DEBUG - on stmt: bool38 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,436 - numba.core.ssa - DEBUG - on stmt: $38pred = call bool38($34compare_op.2, func=bool38, args=(Var($34compare_op.2, unicode.py:2577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,436 - numba.core.ssa - DEBUG - on stmt: branch $38pred, 40, 42
2025-05-12 23:19:05,436 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 40
2025-05-12 23:19:05,436 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,437 - numba.core.ssa - DEBUG - on stmt: $const40.0 = const(str, 0)
2025-05-12 23:19:05,437 - numba.core.ssa - DEBUG - on stmt: $40return_const.1 = cast(value=$const40.0)
2025-05-12 23:19:05,437 - numba.core.ssa - DEBUG - on stmt: return $40return_const.1
2025-05-12 23:19:05,438 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 42
2025-05-12 23:19:05,438 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,439 - numba.core.ssa - DEBUG - on stmt: $const44.1.5 = const(int, 1)
2025-05-12 23:19:05,439 - numba.core.ssa - DEBUG - on stmt: $binop_add46.2 = flag + $const44.1.5
2025-05-12 23:19:05,440 - numba.core.ssa - DEBUG - on stmt: $50load_global.3 = global(int: <class 'int'>)
2025-05-12 23:19:05,440 - numba.core.ssa - DEBUG - on stmt: $60load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,440 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7 = getattr(value=$60load_global.5, attr=floor)
2025-05-12 23:19:05,441 - numba.core.ssa - DEBUG - on stmt: $90load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,441 - numba.core.ssa - DEBUG - on stmt: $100load_attr.10 = getattr(value=$90load_global.8, attr=log10)
2025-05-12 23:19:05,441 - numba.core.ssa - DEBUG - on stmt: $122call.12 = call $100load_attr.10(n, func=$100load_attr.10, args=[Var(n, unicode.py:2572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,442 - numba.core.ssa - DEBUG - find_def var='n' stmt=$122call.12 = call $100load_attr.10(n, func=$100load_attr.10, args=[Var(n, unicode.py:2572)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,442 - numba.core.ssa - DEBUG - find_def_from_top label 42
2025-05-12 23:19:05,443 - numba.core.ssa - DEBUG - idom 30 from label 42
2025-05-12 23:19:05,443 - numba.core.ssa - DEBUG - find_def_from_bottom label 30
2025-05-12 23:19:05,443 - numba.core.ssa - DEBUG - replaced with: $122call.12 = call $100load_attr.10(n.3, func=$100load_attr.10, args=[Var(n.3, unicode.py:2577)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,443 - numba.core.ssa - DEBUG - on stmt: $130call.13 = call $70load_attr.7($122call.12, func=$70load_attr.7, args=[Var($122call.12, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,444 - numba.core.ssa - DEBUG - on stmt: $138call.14 = call $50load_global.3($130call.13, func=$50load_global.3, args=[Var($130call.13, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,444 - numba.core.ssa - DEBUG - on stmt: length = $binop_add46.2 + $138call.14
2025-05-12 23:19:05,444 - numba.core.ssa - DEBUG - on stmt: kind = global(PY_UNICODE_1BYTE_KIND: 1)
2025-05-12 23:19:05,445 - numba.core.ssa - DEBUG - on stmt: $164load_global.17 = global(_kind_to_byte_width: <function _kind_to_byte_width at 0x000001E8A8036C00>)
2025-05-12 23:19:05,445 - numba.core.ssa - DEBUG - on stmt: char_width = call $164load_global.17(kind, func=$164load_global.17, args=[Var(kind, unicode.py:2580)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,445 - numba.core.ssa - DEBUG - on stmt: $186load_global.21 = global(_malloc_string: <intrinsic _malloc_string>)
2025-05-12 23:19:05,446 - numba.core.ssa - DEBUG - on stmt: $const202.26.3 = const(bool, True)
2025-05-12 23:19:05,446 - numba.core.ssa - DEBUG - on stmt: s = call $186load_global.21(kind, char_width, length, $const202.26.3, func=$186load_global.21, args=[Var(kind, unicode.py:2580), Var(char_width, unicode.py:2581), Var(length, unicode.py:2579), Var($const202.26.3, unicode.py:2582)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,446 - numba.core.ssa - DEBUG - on stmt: bool216 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,447 - numba.core.ssa - DEBUG - on stmt: $216pred = call bool216(flag, func=bool216, args=(Var(flag, unicode.py:2573),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,447 - numba.core.ssa - DEBUG - on stmt: branch $216pred, 218, 262
2025-05-12 23:19:05,447 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 218
2025-05-12 23:19:05,448 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,448 - numba.core.ssa - DEBUG - on stmt: $218load_global.0 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,448 - numba.core.ssa - DEBUG - on stmt: $const230.3.2 = const(int, 0)
2025-05-12 23:19:05,449 - numba.core.ssa - DEBUG - on stmt: $232load_global.4 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,449 - numba.core.ssa - DEBUG - on stmt: $const242.6.6 = const(str, -)
2025-05-12 23:19:05,449 - numba.core.ssa - DEBUG - on stmt: $244call.7 = call $232load_global.4($const242.6.6, func=$232load_global.4, args=[Var($const242.6.6, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,449 - numba.core.ssa - DEBUG - on stmt: $252call.8 = call $218load_global.0(s, $const230.3.2, $244call.7, func=$218load_global.0, args=[Var(s, unicode.py:2582), Var($const230.3.2, unicode.py:2584), Var($244call.7, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,449 - numba.core.ssa - DEBUG - on stmt: jump 262
2025-05-12 23:19:05,450 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 262
2025-05-12 23:19:05,450 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,450 - numba.core.ssa - DEBUG - on stmt: $const264.1.5 = const(int, 1)
2025-05-12 23:19:05,450 - numba.core.ssa - DEBUG - on stmt: idx = length - $const264.1.5
2025-05-12 23:19:05,451 - numba.core.ssa - DEBUG - on stmt: $const274.4.2 = const(int, 0)
2025-05-12 23:19:05,451 - numba.core.ssa - DEBUG - on stmt: $276compare_op.5 = n > $const274.4.2
2025-05-12 23:19:05,451 - numba.core.ssa - DEBUG - find_def var='n' stmt=$276compare_op.5 = n > $const274.4.2
2025-05-12 23:19:05,452 - numba.core.ssa - DEBUG - find_def_from_top label 262
2025-05-12 23:19:05,452 - numba.core.ssa - DEBUG - idom 42 from label 262
2025-05-12 23:19:05,452 - numba.core.ssa - DEBUG - find_def_from_bottom label 42
2025-05-12 23:19:05,452 - numba.core.ssa - DEBUG - find_def_from_top label 42
2025-05-12 23:19:05,453 - numba.core.ssa - DEBUG - idom 30 from label 42
2025-05-12 23:19:05,453 - numba.core.ssa - DEBUG - find_def_from_bottom label 30
2025-05-12 23:19:05,454 - numba.core.ssa - DEBUG - replaced with: $276compare_op.5 = n.3 > $const274.4.2
2025-05-12 23:19:05,454 - numba.core.ssa - DEBUG - on stmt: bool280 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,454 - numba.core.ssa - DEBUG - on stmt: $280pred = call bool280($276compare_op.5, func=bool280, args=(Var($276compare_op.5, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,455 - numba.core.ssa - DEBUG - on stmt: branch $280pred, 282, 388
2025-05-12 23:19:05,455 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 282
2025-05-12 23:19:05,455 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,455 - numba.core.ssa - DEBUG - on stmt: $282load_global.0 = global(divmod: <built-in function divmod>)
2025-05-12 23:19:05,456 - numba.core.ssa - DEBUG - on stmt: $294load_deref.3 = freevar(ten: 10)
2025-05-12 23:19:05,456 - numba.core.ssa - DEBUG - on stmt: $296call.4 = call $282load_global.0(n, $294load_deref.3, func=$282load_global.0, args=[Var(n, unicode.py:2572), Var($294load_deref.3, unicode.py:2587)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,456 - numba.core.ssa - DEBUG - find_def var='n' stmt=$296call.4 = call $282load_global.0(n, $294load_deref.3, func=$282load_global.0, args=[Var(n, unicode.py:2572), Var($294load_deref.3, unicode.py:2587)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,457 - numba.core.ssa - DEBUG - find_def_from_top label 282
2025-05-12 23:19:05,457 - numba.core.ssa - DEBUG - insert phi node n.4 = phi(incoming_values=[], incoming_blocks=[]) at 282
2025-05-12 23:19:05,459 - numba.core.ssa - DEBUG - find_def_from_bottom label 386
2025-05-12 23:19:05,459 - numba.core.ssa - DEBUG - find_def_from_top label 386
2025-05-12 23:19:05,459 - numba.core.ssa - DEBUG - idom 282 from label 386
2025-05-12 23:19:05,459 - numba.core.ssa - DEBUG - find_def_from_bottom label 282
2025-05-12 23:19:05,459 - numba.core.ssa - DEBUG - incoming_def n.2 = $304unpack_sequence.5
2025-05-12 23:19:05,460 - numba.core.ssa - DEBUG - find_def_from_bottom label 262
2025-05-12 23:19:05,460 - numba.core.ssa - DEBUG - find_def_from_top label 262
2025-05-12 23:19:05,460 - numba.core.ssa - DEBUG - idom 42 from label 262
2025-05-12 23:19:05,460 - numba.core.ssa - DEBUG - find_def_from_bottom label 42
2025-05-12 23:19:05,460 - numba.core.ssa - DEBUG - find_def_from_top label 42
2025-05-12 23:19:05,461 - numba.core.ssa - DEBUG - idom 30 from label 42
2025-05-12 23:19:05,461 - numba.core.ssa - DEBUG - find_def_from_bottom label 30
2025-05-12 23:19:05,461 - numba.core.ssa - DEBUG - incoming_def n.3 = phi(incoming_values=[Var(n, unicode.py:2572), Var(n.1, unicode.py:2575)], incoming_blocks=[0, 20])
2025-05-12 23:19:05,461 - numba.core.ssa - DEBUG - replaced with: $296call.4 = call $282load_global.0(n.4, $294load_deref.3, func=$282load_global.0, args=[Var(n.4, unicode.py:2587), Var($294load_deref.3, unicode.py:2587)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,462 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.7 = exhaust_iter(value=$296call.4, count=2)
2025-05-12 23:19:05,462 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.5 = static_getitem(value=$304unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,462 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.6 = static_getitem(value=$304unpack_sequence.7, index=1, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,463 - numba.core.ssa - DEBUG - on stmt: n.2 = $304unpack_sequence.5
2025-05-12 23:19:05,463 - numba.core.ssa - DEBUG - on stmt: digit = $304unpack_sequence.6
2025-05-12 23:19:05,464 - numba.core.ssa - DEBUG - on stmt: $312load_global.8 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,464 - numba.core.ssa - DEBUG - on stmt: $const322.10.4 = const(str, 0)
2025-05-12 23:19:05,464 - numba.core.ssa - DEBUG - on stmt: $324call.11 = call $312load_global.8($const322.10.4, func=$312load_global.8, args=[Var($const322.10.4, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,465 - numba.core.ssa - DEBUG - on stmt: c = $324call.11 + digit
2025-05-12 23:19:05,465 - numba.core.ssa - DEBUG - on stmt: $340load_global.14 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,465 - numba.core.ssa - DEBUG - on stmt: $356call.19 = call $340load_global.14(s, idx, c, func=$340load_global.14, args=[Var(s, unicode.py:2582), Var(idx, unicode.py:2585), Var(c, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,466 - numba.core.ssa - DEBUG - on stmt: $const368.21.5 = const(int, 1)
2025-05-12 23:19:05,466 - numba.core.ssa - DEBUG - on stmt: $binop_isub370.22 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=idx, rhs=$const368.21.5, static_lhs=Undefined, static_rhs=Undefined)
2025-05-12 23:19:05,466 - numba.core.ssa - DEBUG - on stmt: idx = $binop_isub370.22
2025-05-12 23:19:05,467 - numba.core.ssa - DEBUG - on stmt: $const378.24.2 = const(int, 0)
2025-05-12 23:19:05,467 - numba.core.ssa - DEBUG - on stmt: $380compare_op.25 = n > $const378.24.2
2025-05-12 23:19:05,467 - numba.core.ssa - DEBUG - find_def var='n' stmt=$380compare_op.25 = n > $const378.24.2
2025-05-12 23:19:05,468 - numba.core.ssa - DEBUG - replaced with: $380compare_op.25 = n.2 > $const378.24.2
2025-05-12 23:19:05,468 - numba.core.ssa - DEBUG - on stmt: bool384 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,468 - numba.core.ssa - DEBUG - on stmt: $384pred = call bool384($380compare_op.25, func=bool384, args=(Var($380compare_op.25, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,468 - numba.core.ssa - DEBUG - on stmt: branch $384pred, 386, 388
2025-05-12 23:19:05,468 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 386
2025-05-12 23:19:05,469 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,469 - numba.core.ssa - DEBUG - on stmt: jump 282
2025-05-12 23:19:05,469 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 388
2025-05-12 23:19:05,469 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,469 - numba.core.ssa - DEBUG - on stmt: $390return_value.1 = cast(value=s)
2025-05-12 23:19:05,469 - numba.core.ssa - DEBUG - on stmt: return $390return_value.1
2025-05-12 23:19:05,469 - numba.core.ssa - DEBUG - Fix SSA violator on var flag
2025-05-12 23:19:05,469 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:05,469 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76960>
2025-05-12 23:19:05,471 - numba.core.ssa - DEBUG - on stmt: n = arg(0, name=n)
2025-05-12 23:19:05,471 - numba.core.ssa - DEBUG - on stmt: flag = const(bool, False)
2025-05-12 23:19:05,471 - numba.core.ssa - DEBUG - first assign: flag
2025-05-12 23:19:05,471 - numba.core.ssa - DEBUG - replaced with: flag = const(bool, False)
2025-05-12 23:19:05,472 - numba.core.ssa - DEBUG - on stmt: $const12.2.2 = const(int, 0)
2025-05-12 23:19:05,472 - numba.core.ssa - DEBUG - on stmt: $14compare_op.3 = n < $const12.2.2
2025-05-12 23:19:05,473 - numba.core.ssa - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,473 - numba.core.ssa - DEBUG - on stmt: $18pred = call bool18($14compare_op.3, func=bool18, args=(Var($14compare_op.3, unicode.py:2574),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,473 - numba.core.ssa - DEBUG - on stmt: branch $18pred, 20, 30
2025-05-12 23:19:05,474 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 20
2025-05-12 23:19:05,474 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76960>
2025-05-12 23:19:05,474 - numba.core.ssa - DEBUG - on stmt: n.1 = unary(fn=<built-in function neg>, value=n)
2025-05-12 23:19:05,474 - numba.core.ssa - DEBUG - on stmt: flag = const(bool, True)
2025-05-12 23:19:05,475 - numba.core.ssa - DEBUG - replaced with: flag.1 = const(bool, True)
2025-05-12 23:19:05,475 - numba.core.ssa - DEBUG - on stmt: jump 30
2025-05-12 23:19:05,475 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 30
2025-05-12 23:19:05,475 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76960>
2025-05-12 23:19:05,475 - numba.core.ssa - DEBUG - on stmt: n.3 = phi(incoming_values=[Var(n, unicode.py:2572), Var(n.1, unicode.py:2575)], incoming_blocks=[0, 20])
2025-05-12 23:19:05,475 - numba.core.ssa - DEBUG - on stmt: $const32.1.2 = const(int, 0)
2025-05-12 23:19:05,476 - numba.core.ssa - DEBUG - on stmt: $34compare_op.2 = n.3 == $const32.1.2
2025-05-12 23:19:05,476 - numba.core.ssa - DEBUG - on stmt: bool38 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,476 - numba.core.ssa - DEBUG - on stmt: $38pred = call bool38($34compare_op.2, func=bool38, args=(Var($34compare_op.2, unicode.py:2577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,476 - numba.core.ssa - DEBUG - on stmt: branch $38pred, 40, 42
2025-05-12 23:19:05,476 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 40
2025-05-12 23:19:05,476 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76960>
2025-05-12 23:19:05,476 - numba.core.ssa - DEBUG - on stmt: $const40.0 = const(str, 0)
2025-05-12 23:19:05,477 - numba.core.ssa - DEBUG - on stmt: $40return_const.1 = cast(value=$const40.0)
2025-05-12 23:19:05,477 - numba.core.ssa - DEBUG - on stmt: return $40return_const.1
2025-05-12 23:19:05,477 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 42
2025-05-12 23:19:05,478 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76960>
2025-05-12 23:19:05,478 - numba.core.ssa - DEBUG - on stmt: $const44.1.5 = const(int, 1)
2025-05-12 23:19:05,478 - numba.core.ssa - DEBUG - on stmt: $binop_add46.2 = flag + $const44.1.5
2025-05-12 23:19:05,478 - numba.core.ssa - DEBUG - on stmt: $50load_global.3 = global(int: <class 'int'>)
2025-05-12 23:19:05,478 - numba.core.ssa - DEBUG - on stmt: $60load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,479 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7 = getattr(value=$60load_global.5, attr=floor)
2025-05-12 23:19:05,479 - numba.core.ssa - DEBUG - on stmt: $90load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,479 - numba.core.ssa - DEBUG - on stmt: $100load_attr.10 = getattr(value=$90load_global.8, attr=log10)
2025-05-12 23:19:05,480 - numba.core.ssa - DEBUG - on stmt: $122call.12 = call $100load_attr.10(n.3, func=$100load_attr.10, args=[Var(n.3, unicode.py:2577)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,480 - numba.core.ssa - DEBUG - on stmt: $130call.13 = call $70load_attr.7($122call.12, func=$70load_attr.7, args=[Var($122call.12, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,480 - numba.core.ssa - DEBUG - on stmt: $138call.14 = call $50load_global.3($130call.13, func=$50load_global.3, args=[Var($130call.13, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,481 - numba.core.ssa - DEBUG - on stmt: length = $binop_add46.2 + $138call.14
2025-05-12 23:19:05,481 - numba.core.ssa - DEBUG - on stmt: kind = global(PY_UNICODE_1BYTE_KIND: 1)
2025-05-12 23:19:05,481 - numba.core.ssa - DEBUG - on stmt: $164load_global.17 = global(_kind_to_byte_width: <function _kind_to_byte_width at 0x000001E8A8036C00>)
2025-05-12 23:19:05,482 - numba.core.ssa - DEBUG - on stmt: char_width = call $164load_global.17(kind, func=$164load_global.17, args=[Var(kind, unicode.py:2580)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,482 - numba.core.ssa - DEBUG - on stmt: $186load_global.21 = global(_malloc_string: <intrinsic _malloc_string>)
2025-05-12 23:19:05,482 - numba.core.ssa - DEBUG - on stmt: $const202.26.3 = const(bool, True)
2025-05-12 23:19:05,482 - numba.core.ssa - DEBUG - on stmt: s = call $186load_global.21(kind, char_width, length, $const202.26.3, func=$186load_global.21, args=[Var(kind, unicode.py:2580), Var(char_width, unicode.py:2581), Var(length, unicode.py:2579), Var($const202.26.3, unicode.py:2582)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,483 - numba.core.ssa - DEBUG - on stmt: bool216 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,483 - numba.core.ssa - DEBUG - on stmt: $216pred = call bool216(flag, func=bool216, args=(Var(flag, unicode.py:2573),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,483 - numba.core.ssa - DEBUG - on stmt: branch $216pred, 218, 262
2025-05-12 23:19:05,483 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 218
2025-05-12 23:19:05,483 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76960>
2025-05-12 23:19:05,484 - numba.core.ssa - DEBUG - on stmt: $218load_global.0 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,484 - numba.core.ssa - DEBUG - on stmt: $const230.3.2 = const(int, 0)
2025-05-12 23:19:05,484 - numba.core.ssa - DEBUG - on stmt: $232load_global.4 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,484 - numba.core.ssa - DEBUG - on stmt: $const242.6.6 = const(str, -)
2025-05-12 23:19:05,484 - numba.core.ssa - DEBUG - on stmt: $244call.7 = call $232load_global.4($const242.6.6, func=$232load_global.4, args=[Var($const242.6.6, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,484 - numba.core.ssa - DEBUG - on stmt: $252call.8 = call $218load_global.0(s, $const230.3.2, $244call.7, func=$218load_global.0, args=[Var(s, unicode.py:2582), Var($const230.3.2, unicode.py:2584), Var($244call.7, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,485 - numba.core.ssa - DEBUG - on stmt: jump 262
2025-05-12 23:19:05,485 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 262
2025-05-12 23:19:05,485 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76960>
2025-05-12 23:19:05,485 - numba.core.ssa - DEBUG - on stmt: $const264.1.5 = const(int, 1)
2025-05-12 23:19:05,485 - numba.core.ssa - DEBUG - on stmt: idx = length - $const264.1.5
2025-05-12 23:19:05,485 - numba.core.ssa - DEBUG - on stmt: $const274.4.2 = const(int, 0)
2025-05-12 23:19:05,485 - numba.core.ssa - DEBUG - on stmt: $276compare_op.5 = n.3 > $const274.4.2
2025-05-12 23:19:05,485 - numba.core.ssa - DEBUG - on stmt: bool280 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,486 - numba.core.ssa - DEBUG - on stmt: $280pred = call bool280($276compare_op.5, func=bool280, args=(Var($276compare_op.5, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,486 - numba.core.ssa - DEBUG - on stmt: branch $280pred, 282, 388
2025-05-12 23:19:05,486 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 282
2025-05-12 23:19:05,486 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76960>
2025-05-12 23:19:05,486 - numba.core.ssa - DEBUG - on stmt: n.4 = phi(incoming_values=[Var(n.2, unicode.py:2587), Var(n.3, unicode.py:2577)], incoming_blocks=[386, 262])
2025-05-12 23:19:05,487 - numba.core.ssa - DEBUG - on stmt: $282load_global.0 = global(divmod: <built-in function divmod>)
2025-05-12 23:19:05,487 - numba.core.ssa - DEBUG - on stmt: $294load_deref.3 = freevar(ten: 10)
2025-05-12 23:19:05,487 - numba.core.ssa - DEBUG - on stmt: $296call.4 = call $282load_global.0(n.4, $294load_deref.3, func=$282load_global.0, args=[Var(n.4, unicode.py:2587), Var($294load_deref.3, unicode.py:2587)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,487 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.7 = exhaust_iter(value=$296call.4, count=2)
2025-05-12 23:19:05,489 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.5 = static_getitem(value=$304unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,489 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.6 = static_getitem(value=$304unpack_sequence.7, index=1, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,489 - numba.core.ssa - DEBUG - on stmt: n.2 = $304unpack_sequence.5
2025-05-12 23:19:05,489 - numba.core.ssa - DEBUG - on stmt: digit = $304unpack_sequence.6
2025-05-12 23:19:05,490 - numba.core.ssa - DEBUG - on stmt: $312load_global.8 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,490 - numba.core.ssa - DEBUG - on stmt: $const322.10.4 = const(str, 0)
2025-05-12 23:19:05,490 - numba.core.ssa - DEBUG - on stmt: $324call.11 = call $312load_global.8($const322.10.4, func=$312load_global.8, args=[Var($const322.10.4, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,491 - numba.core.ssa - DEBUG - on stmt: c = $324call.11 + digit
2025-05-12 23:19:05,491 - numba.core.ssa - DEBUG - on stmt: $340load_global.14 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,491 - numba.core.ssa - DEBUG - on stmt: $356call.19 = call $340load_global.14(s, idx, c, func=$340load_global.14, args=[Var(s, unicode.py:2582), Var(idx, unicode.py:2585), Var(c, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,492 - numba.core.ssa - DEBUG - on stmt: $const368.21.5 = const(int, 1)
2025-05-12 23:19:05,492 - numba.core.ssa - DEBUG - on stmt: $binop_isub370.22 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=idx, rhs=$const368.21.5, static_lhs=Undefined, static_rhs=Undefined)
2025-05-12 23:19:05,492 - numba.core.ssa - DEBUG - on stmt: idx = $binop_isub370.22
2025-05-12 23:19:05,493 - numba.core.ssa - DEBUG - on stmt: $const378.24.2 = const(int, 0)
2025-05-12 23:19:05,493 - numba.core.ssa - DEBUG - on stmt: $380compare_op.25 = n.2 > $const378.24.2
2025-05-12 23:19:05,493 - numba.core.ssa - DEBUG - on stmt: bool384 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,493 - numba.core.ssa - DEBUG - on stmt: $384pred = call bool384($380compare_op.25, func=bool384, args=(Var($380compare_op.25, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,493 - numba.core.ssa - DEBUG - on stmt: branch $384pred, 386, 388
2025-05-12 23:19:05,494 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 386
2025-05-12 23:19:05,494 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76960>
2025-05-12 23:19:05,494 - numba.core.ssa - DEBUG - on stmt: jump 282
2025-05-12 23:19:05,494 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 388
2025-05-12 23:19:05,494 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A76960>
2025-05-12 23:19:05,494 - numba.core.ssa - DEBUG - on stmt: $390return_value.1 = cast(value=s)
2025-05-12 23:19:05,494 - numba.core.ssa - DEBUG - on stmt: return $390return_value.1
2025-05-12 23:19:05,495 - numba.core.ssa - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x000001E8A8AB8E90>],
             20: [<numba.core.ir.Assign object at 0x000001E8A8AB8F50>]})
2025-05-12 23:19:05,495 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:05,495 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,495 - numba.core.ssa - DEBUG - on stmt: n = arg(0, name=n)
2025-05-12 23:19:05,496 - numba.core.ssa - DEBUG - on stmt: flag = const(bool, False)
2025-05-12 23:19:05,496 - numba.core.ssa - DEBUG - on stmt: $const12.2.2 = const(int, 0)
2025-05-12 23:19:05,496 - numba.core.ssa - DEBUG - on stmt: $14compare_op.3 = n < $const12.2.2
2025-05-12 23:19:05,497 - numba.core.ssa - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,497 - numba.core.ssa - DEBUG - on stmt: $18pred = call bool18($14compare_op.3, func=bool18, args=(Var($14compare_op.3, unicode.py:2574),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,497 - numba.core.ssa - DEBUG - on stmt: branch $18pred, 20, 30
2025-05-12 23:19:05,498 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 20
2025-05-12 23:19:05,498 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,498 - numba.core.ssa - DEBUG - on stmt: n.1 = unary(fn=<built-in function neg>, value=n)
2025-05-12 23:19:05,498 - numba.core.ssa - DEBUG - on stmt: flag.1 = const(bool, True)
2025-05-12 23:19:05,499 - numba.core.ssa - DEBUG - on stmt: jump 30
2025-05-12 23:19:05,499 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 30
2025-05-12 23:19:05,499 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,499 - numba.core.ssa - DEBUG - on stmt: n.3 = phi(incoming_values=[Var(n, unicode.py:2572), Var(n.1, unicode.py:2575)], incoming_blocks=[0, 20])
2025-05-12 23:19:05,499 - numba.core.ssa - DEBUG - on stmt: $const32.1.2 = const(int, 0)
2025-05-12 23:19:05,499 - numba.core.ssa - DEBUG - on stmt: $34compare_op.2 = n.3 == $const32.1.2
2025-05-12 23:19:05,499 - numba.core.ssa - DEBUG - on stmt: bool38 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,501 - numba.core.ssa - DEBUG - on stmt: $38pred = call bool38($34compare_op.2, func=bool38, args=(Var($34compare_op.2, unicode.py:2577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,501 - numba.core.ssa - DEBUG - on stmt: branch $38pred, 40, 42
2025-05-12 23:19:05,501 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 40
2025-05-12 23:19:05,501 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,501 - numba.core.ssa - DEBUG - on stmt: $const40.0 = const(str, 0)
2025-05-12 23:19:05,502 - numba.core.ssa - DEBUG - on stmt: $40return_const.1 = cast(value=$const40.0)
2025-05-12 23:19:05,502 - numba.core.ssa - DEBUG - on stmt: return $40return_const.1
2025-05-12 23:19:05,502 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 42
2025-05-12 23:19:05,502 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,502 - numba.core.ssa - DEBUG - on stmt: $const44.1.5 = const(int, 1)
2025-05-12 23:19:05,503 - numba.core.ssa - DEBUG - on stmt: $binop_add46.2 = flag + $const44.1.5
2025-05-12 23:19:05,503 - numba.core.ssa - DEBUG - find_def var='flag' stmt=$binop_add46.2 = flag + $const44.1.5
2025-05-12 23:19:05,503 - numba.core.ssa - DEBUG - find_def_from_top label 42
2025-05-12 23:19:05,503 - numba.core.ssa - DEBUG - idom 30 from label 42
2025-05-12 23:19:05,503 - numba.core.ssa - DEBUG - find_def_from_bottom label 30
2025-05-12 23:19:05,503 - numba.core.ssa - DEBUG - find_def_from_top label 30
2025-05-12 23:19:05,504 - numba.core.ssa - DEBUG - insert phi node flag.2 = phi(incoming_values=[], incoming_blocks=[]) at 30
2025-05-12 23:19:05,504 - numba.core.ssa - DEBUG - find_def_from_bottom label 0
2025-05-12 23:19:05,505 - numba.core.ssa - DEBUG - incoming_def flag = const(bool, False)
2025-05-12 23:19:05,505 - numba.core.ssa - DEBUG - find_def_from_bottom label 20
2025-05-12 23:19:05,505 - numba.core.ssa - DEBUG - incoming_def flag.1 = const(bool, True)
2025-05-12 23:19:05,506 - numba.core.ssa - DEBUG - replaced with: $binop_add46.2 = flag.2 + $const44.1.5
2025-05-12 23:19:05,506 - numba.core.ssa - DEBUG - on stmt: $50load_global.3 = global(int: <class 'int'>)
2025-05-12 23:19:05,507 - numba.core.ssa - DEBUG - on stmt: $60load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,507 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7 = getattr(value=$60load_global.5, attr=floor)
2025-05-12 23:19:05,508 - numba.core.ssa - DEBUG - on stmt: $90load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,508 - numba.core.ssa - DEBUG - on stmt: $100load_attr.10 = getattr(value=$90load_global.8, attr=log10)
2025-05-12 23:19:05,508 - numba.core.ssa - DEBUG - on stmt: $122call.12 = call $100load_attr.10(n.3, func=$100load_attr.10, args=[Var(n.3, unicode.py:2577)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,508 - numba.core.ssa - DEBUG - on stmt: $130call.13 = call $70load_attr.7($122call.12, func=$70load_attr.7, args=[Var($122call.12, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,509 - numba.core.ssa - DEBUG - on stmt: $138call.14 = call $50load_global.3($130call.13, func=$50load_global.3, args=[Var($130call.13, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,509 - numba.core.ssa - DEBUG - on stmt: length = $binop_add46.2 + $138call.14
2025-05-12 23:19:05,509 - numba.core.ssa - DEBUG - on stmt: kind = global(PY_UNICODE_1BYTE_KIND: 1)
2025-05-12 23:19:05,509 - numba.core.ssa - DEBUG - on stmt: $164load_global.17 = global(_kind_to_byte_width: <function _kind_to_byte_width at 0x000001E8A8036C00>)
2025-05-12 23:19:05,510 - numba.core.ssa - DEBUG - on stmt: char_width = call $164load_global.17(kind, func=$164load_global.17, args=[Var(kind, unicode.py:2580)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,510 - numba.core.ssa - DEBUG - on stmt: $186load_global.21 = global(_malloc_string: <intrinsic _malloc_string>)
2025-05-12 23:19:05,510 - numba.core.ssa - DEBUG - on stmt: $const202.26.3 = const(bool, True)
2025-05-12 23:19:05,510 - numba.core.ssa - DEBUG - on stmt: s = call $186load_global.21(kind, char_width, length, $const202.26.3, func=$186load_global.21, args=[Var(kind, unicode.py:2580), Var(char_width, unicode.py:2581), Var(length, unicode.py:2579), Var($const202.26.3, unicode.py:2582)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,511 - numba.core.ssa - DEBUG - on stmt: bool216 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,511 - numba.core.ssa - DEBUG - on stmt: $216pred = call bool216(flag, func=bool216, args=(Var(flag, unicode.py:2573),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,511 - numba.core.ssa - DEBUG - find_def var='flag' stmt=$216pred = call bool216(flag, func=bool216, args=(Var(flag, unicode.py:2573),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,511 - numba.core.ssa - DEBUG - find_def_from_top label 42
2025-05-12 23:19:05,512 - numba.core.ssa - DEBUG - idom 30 from label 42
2025-05-12 23:19:05,513 - numba.core.ssa - DEBUG - find_def_from_bottom label 30
2025-05-12 23:19:05,514 - numba.core.ssa - DEBUG - replaced with: $216pred = call bool216(flag.2, func=bool216, args=(Var(flag.2, unicode.py:2579),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,514 - numba.core.ssa - DEBUG - on stmt: branch $216pred, 218, 262
2025-05-12 23:19:05,515 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 218
2025-05-12 23:19:05,515 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,515 - numba.core.ssa - DEBUG - on stmt: $218load_global.0 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,515 - numba.core.ssa - DEBUG - on stmt: $const230.3.2 = const(int, 0)
2025-05-12 23:19:05,516 - numba.core.ssa - DEBUG - on stmt: $232load_global.4 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,516 - numba.core.ssa - DEBUG - on stmt: $const242.6.6 = const(str, -)
2025-05-12 23:19:05,516 - numba.core.ssa - DEBUG - on stmt: $244call.7 = call $232load_global.4($const242.6.6, func=$232load_global.4, args=[Var($const242.6.6, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,516 - numba.core.ssa - DEBUG - on stmt: $252call.8 = call $218load_global.0(s, $const230.3.2, $244call.7, func=$218load_global.0, args=[Var(s, unicode.py:2582), Var($const230.3.2, unicode.py:2584), Var($244call.7, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,516 - numba.core.ssa - DEBUG - on stmt: jump 262
2025-05-12 23:19:05,517 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 262
2025-05-12 23:19:05,517 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,517 - numba.core.ssa - DEBUG - on stmt: $const264.1.5 = const(int, 1)
2025-05-12 23:19:05,517 - numba.core.ssa - DEBUG - on stmt: idx = length - $const264.1.5
2025-05-12 23:19:05,518 - numba.core.ssa - DEBUG - on stmt: $const274.4.2 = const(int, 0)
2025-05-12 23:19:05,518 - numba.core.ssa - DEBUG - on stmt: $276compare_op.5 = n.3 > $const274.4.2
2025-05-12 23:19:05,518 - numba.core.ssa - DEBUG - on stmt: bool280 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,518 - numba.core.ssa - DEBUG - on stmt: $280pred = call bool280($276compare_op.5, func=bool280, args=(Var($276compare_op.5, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,519 - numba.core.ssa - DEBUG - on stmt: branch $280pred, 282, 388
2025-05-12 23:19:05,519 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 282
2025-05-12 23:19:05,519 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,519 - numba.core.ssa - DEBUG - on stmt: n.4 = phi(incoming_values=[Var(n.2, unicode.py:2587), Var(n.3, unicode.py:2577)], incoming_blocks=[386, 262])
2025-05-12 23:19:05,519 - numba.core.ssa - DEBUG - on stmt: $282load_global.0 = global(divmod: <built-in function divmod>)
2025-05-12 23:19:05,522 - numba.core.ssa - DEBUG - on stmt: $294load_deref.3 = freevar(ten: 10)
2025-05-12 23:19:05,522 - numba.core.ssa - DEBUG - on stmt: $296call.4 = call $282load_global.0(n.4, $294load_deref.3, func=$282load_global.0, args=[Var(n.4, unicode.py:2587), Var($294load_deref.3, unicode.py:2587)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,522 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.7 = exhaust_iter(value=$296call.4, count=2)
2025-05-12 23:19:05,523 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.5 = static_getitem(value=$304unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,523 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.6 = static_getitem(value=$304unpack_sequence.7, index=1, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,523 - numba.core.ssa - DEBUG - on stmt: n.2 = $304unpack_sequence.5
2025-05-12 23:19:05,523 - numba.core.ssa - DEBUG - on stmt: digit = $304unpack_sequence.6
2025-05-12 23:19:05,524 - numba.core.ssa - DEBUG - on stmt: $312load_global.8 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,524 - numba.core.ssa - DEBUG - on stmt: $const322.10.4 = const(str, 0)
2025-05-12 23:19:05,524 - numba.core.ssa - DEBUG - on stmt: $324call.11 = call $312load_global.8($const322.10.4, func=$312load_global.8, args=[Var($const322.10.4, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,524 - numba.core.ssa - DEBUG - on stmt: c = $324call.11 + digit
2025-05-12 23:19:05,525 - numba.core.ssa - DEBUG - on stmt: $340load_global.14 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,525 - numba.core.ssa - DEBUG - on stmt: $356call.19 = call $340load_global.14(s, idx, c, func=$340load_global.14, args=[Var(s, unicode.py:2582), Var(idx, unicode.py:2585), Var(c, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,525 - numba.core.ssa - DEBUG - on stmt: $const368.21.5 = const(int, 1)
2025-05-12 23:19:05,526 - numba.core.ssa - DEBUG - on stmt: $binop_isub370.22 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=idx, rhs=$const368.21.5, static_lhs=Undefined, static_rhs=Undefined)
2025-05-12 23:19:05,526 - numba.core.ssa - DEBUG - on stmt: idx = $binop_isub370.22
2025-05-12 23:19:05,526 - numba.core.ssa - DEBUG - on stmt: $const378.24.2 = const(int, 0)
2025-05-12 23:19:05,526 - numba.core.ssa - DEBUG - on stmt: $380compare_op.25 = n.2 > $const378.24.2
2025-05-12 23:19:05,526 - numba.core.ssa - DEBUG - on stmt: bool384 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,526 - numba.core.ssa - DEBUG - on stmt: $384pred = call bool384($380compare_op.25, func=bool384, args=(Var($380compare_op.25, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,527 - numba.core.ssa - DEBUG - on stmt: branch $384pred, 386, 388
2025-05-12 23:19:05,527 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 386
2025-05-12 23:19:05,527 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,527 - numba.core.ssa - DEBUG - on stmt: jump 282
2025-05-12 23:19:05,527 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 388
2025-05-12 23:19:05,527 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76630>
2025-05-12 23:19:05,528 - numba.core.ssa - DEBUG - on stmt: $390return_value.1 = cast(value=s)
2025-05-12 23:19:05,528 - numba.core.ssa - DEBUG - on stmt: return $390return_value.1
2025-05-12 23:19:05,528 - numba.core.ssa - DEBUG - Fix SSA violator on var idx
2025-05-12 23:19:05,528 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:05,528 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A77410>
2025-05-12 23:19:05,528 - numba.core.ssa - DEBUG - on stmt: n = arg(0, name=n)
2025-05-12 23:19:05,529 - numba.core.ssa - DEBUG - on stmt: flag = const(bool, False)
2025-05-12 23:19:05,529 - numba.core.ssa - DEBUG - on stmt: $const12.2.2 = const(int, 0)
2025-05-12 23:19:05,529 - numba.core.ssa - DEBUG - on stmt: $14compare_op.3 = n < $const12.2.2
2025-05-12 23:19:05,530 - numba.core.ssa - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,530 - numba.core.ssa - DEBUG - on stmt: $18pred = call bool18($14compare_op.3, func=bool18, args=(Var($14compare_op.3, unicode.py:2574),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,530 - numba.core.ssa - DEBUG - on stmt: branch $18pred, 20, 30
2025-05-12 23:19:05,530 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 20
2025-05-12 23:19:05,531 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A77410>
2025-05-12 23:19:05,531 - numba.core.ssa - DEBUG - on stmt: n.1 = unary(fn=<built-in function neg>, value=n)
2025-05-12 23:19:05,531 - numba.core.ssa - DEBUG - on stmt: flag.1 = const(bool, True)
2025-05-12 23:19:05,532 - numba.core.ssa - DEBUG - on stmt: jump 30
2025-05-12 23:19:05,532 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 30
2025-05-12 23:19:05,532 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A77410>
2025-05-12 23:19:05,532 - numba.core.ssa - DEBUG - on stmt: flag.2 = phi(incoming_values=[Var(flag, unicode.py:2573), Var(flag.1, unicode.py:2576)], incoming_blocks=[0, 20])
2025-05-12 23:19:05,533 - numba.core.ssa - DEBUG - on stmt: n.3 = phi(incoming_values=[Var(n, unicode.py:2572), Var(n.1, unicode.py:2575)], incoming_blocks=[0, 20])
2025-05-12 23:19:05,533 - numba.core.ssa - DEBUG - on stmt: $const32.1.2 = const(int, 0)
2025-05-12 23:19:05,533 - numba.core.ssa - DEBUG - on stmt: $34compare_op.2 = n.3 == $const32.1.2
2025-05-12 23:19:05,533 - numba.core.ssa - DEBUG - on stmt: bool38 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,533 - numba.core.ssa - DEBUG - on stmt: $38pred = call bool38($34compare_op.2, func=bool38, args=(Var($34compare_op.2, unicode.py:2577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,534 - numba.core.ssa - DEBUG - on stmt: branch $38pred, 40, 42
2025-05-12 23:19:05,534 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 40
2025-05-12 23:19:05,534 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A77410>
2025-05-12 23:19:05,534 - numba.core.ssa - DEBUG - on stmt: $const40.0 = const(str, 0)
2025-05-12 23:19:05,534 - numba.core.ssa - DEBUG - on stmt: $40return_const.1 = cast(value=$const40.0)
2025-05-12 23:19:05,534 - numba.core.ssa - DEBUG - on stmt: return $40return_const.1
2025-05-12 23:19:05,535 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 42
2025-05-12 23:19:05,535 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A77410>
2025-05-12 23:19:05,535 - numba.core.ssa - DEBUG - on stmt: $const44.1.5 = const(int, 1)
2025-05-12 23:19:05,535 - numba.core.ssa - DEBUG - on stmt: $binop_add46.2 = flag.2 + $const44.1.5
2025-05-12 23:19:05,535 - numba.core.ssa - DEBUG - on stmt: $50load_global.3 = global(int: <class 'int'>)
2025-05-12 23:19:05,535 - numba.core.ssa - DEBUG - on stmt: $60load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,536 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7 = getattr(value=$60load_global.5, attr=floor)
2025-05-12 23:19:05,536 - numba.core.ssa - DEBUG - on stmt: $90load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,536 - numba.core.ssa - DEBUG - on stmt: $100load_attr.10 = getattr(value=$90load_global.8, attr=log10)
2025-05-12 23:19:05,537 - numba.core.ssa - DEBUG - on stmt: $122call.12 = call $100load_attr.10(n.3, func=$100load_attr.10, args=[Var(n.3, unicode.py:2577)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,537 - numba.core.ssa - DEBUG - on stmt: $130call.13 = call $70load_attr.7($122call.12, func=$70load_attr.7, args=[Var($122call.12, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,538 - numba.core.ssa - DEBUG - on stmt: $138call.14 = call $50load_global.3($130call.13, func=$50load_global.3, args=[Var($130call.13, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,538 - numba.core.ssa - DEBUG - on stmt: length = $binop_add46.2 + $138call.14
2025-05-12 23:19:05,539 - numba.core.ssa - DEBUG - on stmt: kind = global(PY_UNICODE_1BYTE_KIND: 1)
2025-05-12 23:19:05,539 - numba.core.ssa - DEBUG - on stmt: $164load_global.17 = global(_kind_to_byte_width: <function _kind_to_byte_width at 0x000001E8A8036C00>)
2025-05-12 23:19:05,539 - numba.core.ssa - DEBUG - on stmt: char_width = call $164load_global.17(kind, func=$164load_global.17, args=[Var(kind, unicode.py:2580)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,539 - numba.core.ssa - DEBUG - on stmt: $186load_global.21 = global(_malloc_string: <intrinsic _malloc_string>)
2025-05-12 23:19:05,539 - numba.core.ssa - DEBUG - on stmt: $const202.26.3 = const(bool, True)
2025-05-12 23:19:05,539 - numba.core.ssa - DEBUG - on stmt: s = call $186load_global.21(kind, char_width, length, $const202.26.3, func=$186load_global.21, args=[Var(kind, unicode.py:2580), Var(char_width, unicode.py:2581), Var(length, unicode.py:2579), Var($const202.26.3, unicode.py:2582)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,541 - numba.core.ssa - DEBUG - on stmt: bool216 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,541 - numba.core.ssa - DEBUG - on stmt: $216pred = call bool216(flag.2, func=bool216, args=(Var(flag.2, unicode.py:2579),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,541 - numba.core.ssa - DEBUG - on stmt: branch $216pred, 218, 262
2025-05-12 23:19:05,541 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 218
2025-05-12 23:19:05,542 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A77410>
2025-05-12 23:19:05,542 - numba.core.ssa - DEBUG - on stmt: $218load_global.0 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,542 - numba.core.ssa - DEBUG - on stmt: $const230.3.2 = const(int, 0)
2025-05-12 23:19:05,542 - numba.core.ssa - DEBUG - on stmt: $232load_global.4 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,543 - numba.core.ssa - DEBUG - on stmt: $const242.6.6 = const(str, -)
2025-05-12 23:19:05,543 - numba.core.ssa - DEBUG - on stmt: $244call.7 = call $232load_global.4($const242.6.6, func=$232load_global.4, args=[Var($const242.6.6, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,543 - numba.core.ssa - DEBUG - on stmt: $252call.8 = call $218load_global.0(s, $const230.3.2, $244call.7, func=$218load_global.0, args=[Var(s, unicode.py:2582), Var($const230.3.2, unicode.py:2584), Var($244call.7, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,544 - numba.core.ssa - DEBUG - on stmt: jump 262
2025-05-12 23:19:05,544 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 262
2025-05-12 23:19:05,544 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A77410>
2025-05-12 23:19:05,544 - numba.core.ssa - DEBUG - on stmt: $const264.1.5 = const(int, 1)
2025-05-12 23:19:05,544 - numba.core.ssa - DEBUG - on stmt: idx = length - $const264.1.5
2025-05-12 23:19:05,545 - numba.core.ssa - DEBUG - first assign: idx
2025-05-12 23:19:05,545 - numba.core.ssa - DEBUG - replaced with: idx = length - $const264.1.5
2025-05-12 23:19:05,545 - numba.core.ssa - DEBUG - on stmt: $const274.4.2 = const(int, 0)
2025-05-12 23:19:05,545 - numba.core.ssa - DEBUG - on stmt: $276compare_op.5 = n.3 > $const274.4.2
2025-05-12 23:19:05,546 - numba.core.ssa - DEBUG - on stmt: bool280 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,546 - numba.core.ssa - DEBUG - on stmt: $280pred = call bool280($276compare_op.5, func=bool280, args=(Var($276compare_op.5, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,547 - numba.core.ssa - DEBUG - on stmt: branch $280pred, 282, 388
2025-05-12 23:19:05,547 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 282
2025-05-12 23:19:05,547 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A77410>
2025-05-12 23:19:05,547 - numba.core.ssa - DEBUG - on stmt: n.4 = phi(incoming_values=[Var(n.2, unicode.py:2587), Var(n.3, unicode.py:2577)], incoming_blocks=[386, 262])
2025-05-12 23:19:05,548 - numba.core.ssa - DEBUG - on stmt: $282load_global.0 = global(divmod: <built-in function divmod>)
2025-05-12 23:19:05,548 - numba.core.ssa - DEBUG - on stmt: $294load_deref.3 = freevar(ten: 10)
2025-05-12 23:19:05,548 - numba.core.ssa - DEBUG - on stmt: $296call.4 = call $282load_global.0(n.4, $294load_deref.3, func=$282load_global.0, args=[Var(n.4, unicode.py:2587), Var($294load_deref.3, unicode.py:2587)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,548 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.7 = exhaust_iter(value=$296call.4, count=2)
2025-05-12 23:19:05,549 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.5 = static_getitem(value=$304unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,549 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.6 = static_getitem(value=$304unpack_sequence.7, index=1, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,549 - numba.core.ssa - DEBUG - on stmt: n.2 = $304unpack_sequence.5
2025-05-12 23:19:05,549 - numba.core.ssa - DEBUG - on stmt: digit = $304unpack_sequence.6
2025-05-12 23:19:05,549 - numba.core.ssa - DEBUG - on stmt: $312load_global.8 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,550 - numba.core.ssa - DEBUG - on stmt: $const322.10.4 = const(str, 0)
2025-05-12 23:19:05,550 - numba.core.ssa - DEBUG - on stmt: $324call.11 = call $312load_global.8($const322.10.4, func=$312load_global.8, args=[Var($const322.10.4, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,550 - numba.core.ssa - DEBUG - on stmt: c = $324call.11 + digit
2025-05-12 23:19:05,550 - numba.core.ssa - DEBUG - on stmt: $340load_global.14 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,550 - numba.core.ssa - DEBUG - on stmt: $356call.19 = call $340load_global.14(s, idx, c, func=$340load_global.14, args=[Var(s, unicode.py:2582), Var(idx, unicode.py:2585), Var(c, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,551 - numba.core.ssa - DEBUG - on stmt: $const368.21.5 = const(int, 1)
2025-05-12 23:19:05,551 - numba.core.ssa - DEBUG - on stmt: $binop_isub370.22 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=idx, rhs=$const368.21.5, static_lhs=Undefined, static_rhs=Undefined)
2025-05-12 23:19:05,551 - numba.core.ssa - DEBUG - on stmt: idx = $binop_isub370.22
2025-05-12 23:19:05,551 - numba.core.ssa - DEBUG - replaced with: idx.1 = $binop_isub370.22
2025-05-12 23:19:05,551 - numba.core.ssa - DEBUG - on stmt: $const378.24.2 = const(int, 0)
2025-05-12 23:19:05,551 - numba.core.ssa - DEBUG - on stmt: $380compare_op.25 = n.2 > $const378.24.2
2025-05-12 23:19:05,552 - numba.core.ssa - DEBUG - on stmt: bool384 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,552 - numba.core.ssa - DEBUG - on stmt: $384pred = call bool384($380compare_op.25, func=bool384, args=(Var($380compare_op.25, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,552 - numba.core.ssa - DEBUG - on stmt: branch $384pred, 386, 388
2025-05-12 23:19:05,552 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 386
2025-05-12 23:19:05,553 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A77410>
2025-05-12 23:19:05,553 - numba.core.ssa - DEBUG - on stmt: jump 282
2025-05-12 23:19:05,554 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 388
2025-05-12 23:19:05,554 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8A77410>
2025-05-12 23:19:05,554 - numba.core.ssa - DEBUG - on stmt: $390return_value.1 = cast(value=s)
2025-05-12 23:19:05,555 - numba.core.ssa - DEBUG - on stmt: return $390return_value.1
2025-05-12 23:19:05,555 - numba.core.ssa - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {262: [<numba.core.ir.Assign object at 0x000001E8A8AB82F0>],
             282: [<numba.core.ir.Assign object at 0x000001E8A8AB8EC0>]})
2025-05-12 23:19:05,556 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:05,556 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76960>
2025-05-12 23:19:05,557 - numba.core.ssa - DEBUG - on stmt: n = arg(0, name=n)
2025-05-12 23:19:05,557 - numba.core.ssa - DEBUG - on stmt: flag = const(bool, False)
2025-05-12 23:19:05,557 - numba.core.ssa - DEBUG - on stmt: $const12.2.2 = const(int, 0)
2025-05-12 23:19:05,557 - numba.core.ssa - DEBUG - on stmt: $14compare_op.3 = n < $const12.2.2
2025-05-12 23:19:05,558 - numba.core.ssa - DEBUG - on stmt: bool18 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,558 - numba.core.ssa - DEBUG - on stmt: $18pred = call bool18($14compare_op.3, func=bool18, args=(Var($14compare_op.3, unicode.py:2574),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,558 - numba.core.ssa - DEBUG - on stmt: branch $18pred, 20, 30
2025-05-12 23:19:05,558 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 20
2025-05-12 23:19:05,559 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76960>
2025-05-12 23:19:05,559 - numba.core.ssa - DEBUG - on stmt: n.1 = unary(fn=<built-in function neg>, value=n)
2025-05-12 23:19:05,559 - numba.core.ssa - DEBUG - on stmt: flag.1 = const(bool, True)
2025-05-12 23:19:05,560 - numba.core.ssa - DEBUG - on stmt: jump 30
2025-05-12 23:19:05,560 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 30
2025-05-12 23:19:05,560 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76960>
2025-05-12 23:19:05,560 - numba.core.ssa - DEBUG - on stmt: flag.2 = phi(incoming_values=[Var(flag, unicode.py:2573), Var(flag.1, unicode.py:2576)], incoming_blocks=[0, 20])
2025-05-12 23:19:05,560 - numba.core.ssa - DEBUG - on stmt: n.3 = phi(incoming_values=[Var(n, unicode.py:2572), Var(n.1, unicode.py:2575)], incoming_blocks=[0, 20])
2025-05-12 23:19:05,561 - numba.core.ssa - DEBUG - on stmt: $const32.1.2 = const(int, 0)
2025-05-12 23:19:05,561 - numba.core.ssa - DEBUG - on stmt: $34compare_op.2 = n.3 == $const32.1.2
2025-05-12 23:19:05,561 - numba.core.ssa - DEBUG - on stmt: bool38 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,561 - numba.core.ssa - DEBUG - on stmt: $38pred = call bool38($34compare_op.2, func=bool38, args=(Var($34compare_op.2, unicode.py:2577),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,561 - numba.core.ssa - DEBUG - on stmt: branch $38pred, 40, 42
2025-05-12 23:19:05,562 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 40
2025-05-12 23:19:05,562 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76960>
2025-05-12 23:19:05,562 - numba.core.ssa - DEBUG - on stmt: $const40.0 = const(str, 0)
2025-05-12 23:19:05,563 - numba.core.ssa - DEBUG - on stmt: $40return_const.1 = cast(value=$const40.0)
2025-05-12 23:19:05,563 - numba.core.ssa - DEBUG - on stmt: return $40return_const.1
2025-05-12 23:19:05,563 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 42
2025-05-12 23:19:05,564 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76960>
2025-05-12 23:19:05,564 - numba.core.ssa - DEBUG - on stmt: $const44.1.5 = const(int, 1)
2025-05-12 23:19:05,565 - numba.core.ssa - DEBUG - on stmt: $binop_add46.2 = flag.2 + $const44.1.5
2025-05-12 23:19:05,565 - numba.core.ssa - DEBUG - on stmt: $50load_global.3 = global(int: <class 'int'>)
2025-05-12 23:19:05,565 - numba.core.ssa - DEBUG - on stmt: $60load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,565 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7 = getattr(value=$60load_global.5, attr=floor)
2025-05-12 23:19:05,566 - numba.core.ssa - DEBUG - on stmt: $90load_global.8 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:05,566 - numba.core.ssa - DEBUG - on stmt: $100load_attr.10 = getattr(value=$90load_global.8, attr=log10)
2025-05-12 23:19:05,566 - numba.core.ssa - DEBUG - on stmt: $122call.12 = call $100load_attr.10(n.3, func=$100load_attr.10, args=[Var(n.3, unicode.py:2577)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,566 - numba.core.ssa - DEBUG - on stmt: $130call.13 = call $70load_attr.7($122call.12, func=$70load_attr.7, args=[Var($122call.12, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,566 - numba.core.ssa - DEBUG - on stmt: $138call.14 = call $50load_global.3($130call.13, func=$50load_global.3, args=[Var($130call.13, unicode.py:2579)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,567 - numba.core.ssa - DEBUG - on stmt: length = $binop_add46.2 + $138call.14
2025-05-12 23:19:05,567 - numba.core.ssa - DEBUG - on stmt: kind = global(PY_UNICODE_1BYTE_KIND: 1)
2025-05-12 23:19:05,567 - numba.core.ssa - DEBUG - on stmt: $164load_global.17 = global(_kind_to_byte_width: <function _kind_to_byte_width at 0x000001E8A8036C00>)
2025-05-12 23:19:05,567 - numba.core.ssa - DEBUG - on stmt: char_width = call $164load_global.17(kind, func=$164load_global.17, args=[Var(kind, unicode.py:2580)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,568 - numba.core.ssa - DEBUG - on stmt: $186load_global.21 = global(_malloc_string: <intrinsic _malloc_string>)
2025-05-12 23:19:05,568 - numba.core.ssa - DEBUG - on stmt: $const202.26.3 = const(bool, True)
2025-05-12 23:19:05,568 - numba.core.ssa - DEBUG - on stmt: s = call $186load_global.21(kind, char_width, length, $const202.26.3, func=$186load_global.21, args=[Var(kind, unicode.py:2580), Var(char_width, unicode.py:2581), Var(length, unicode.py:2579), Var($const202.26.3, unicode.py:2582)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,568 - numba.core.ssa - DEBUG - on stmt: bool216 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,568 - numba.core.ssa - DEBUG - on stmt: $216pred = call bool216(flag.2, func=bool216, args=(Var(flag.2, unicode.py:2579),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,569 - numba.core.ssa - DEBUG - on stmt: branch $216pred, 218, 262
2025-05-12 23:19:05,569 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 218
2025-05-12 23:19:05,569 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76960>
2025-05-12 23:19:05,569 - numba.core.ssa - DEBUG - on stmt: $218load_global.0 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,569 - numba.core.ssa - DEBUG - on stmt: $const230.3.2 = const(int, 0)
2025-05-12 23:19:05,570 - numba.core.ssa - DEBUG - on stmt: $232load_global.4 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,570 - numba.core.ssa - DEBUG - on stmt: $const242.6.6 = const(str, -)
2025-05-12 23:19:05,570 - numba.core.ssa - DEBUG - on stmt: $244call.7 = call $232load_global.4($const242.6.6, func=$232load_global.4, args=[Var($const242.6.6, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,571 - numba.core.ssa - DEBUG - on stmt: $252call.8 = call $218load_global.0(s, $const230.3.2, $244call.7, func=$218load_global.0, args=[Var(s, unicode.py:2582), Var($const230.3.2, unicode.py:2584), Var($244call.7, unicode.py:2584)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,571 - numba.core.ssa - DEBUG - on stmt: jump 262
2025-05-12 23:19:05,571 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 262
2025-05-12 23:19:05,572 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76960>
2025-05-12 23:19:05,572 - numba.core.ssa - DEBUG - on stmt: $const264.1.5 = const(int, 1)
2025-05-12 23:19:05,572 - numba.core.ssa - DEBUG - on stmt: idx = length - $const264.1.5
2025-05-12 23:19:05,573 - numba.core.ssa - DEBUG - on stmt: $const274.4.2 = const(int, 0)
2025-05-12 23:19:05,573 - numba.core.ssa - DEBUG - on stmt: $276compare_op.5 = n.3 > $const274.4.2
2025-05-12 23:19:05,573 - numba.core.ssa - DEBUG - on stmt: bool280 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,573 - numba.core.ssa - DEBUG - on stmt: $280pred = call bool280($276compare_op.5, func=bool280, args=(Var($276compare_op.5, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,574 - numba.core.ssa - DEBUG - on stmt: branch $280pred, 282, 388
2025-05-12 23:19:05,574 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 282
2025-05-12 23:19:05,575 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76960>
2025-05-12 23:19:05,575 - numba.core.ssa - DEBUG - on stmt: n.4 = phi(incoming_values=[Var(n.2, unicode.py:2587), Var(n.3, unicode.py:2577)], incoming_blocks=[386, 262])
2025-05-12 23:19:05,575 - numba.core.ssa - DEBUG - on stmt: $282load_global.0 = global(divmod: <built-in function divmod>)
2025-05-12 23:19:05,575 - numba.core.ssa - DEBUG - on stmt: $294load_deref.3 = freevar(ten: 10)
2025-05-12 23:19:05,575 - numba.core.ssa - DEBUG - on stmt: $296call.4 = call $282load_global.0(n.4, $294load_deref.3, func=$282load_global.0, args=[Var(n.4, unicode.py:2587), Var($294load_deref.3, unicode.py:2587)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,575 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.7 = exhaust_iter(value=$296call.4, count=2)
2025-05-12 23:19:05,576 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.5 = static_getitem(value=$304unpack_sequence.7, index=0, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,576 - numba.core.ssa - DEBUG - on stmt: $304unpack_sequence.6 = static_getitem(value=$304unpack_sequence.7, index=1, index_var=None, fn=<built-in function getitem>)
2025-05-12 23:19:05,576 - numba.core.ssa - DEBUG - on stmt: n.2 = $304unpack_sequence.5
2025-05-12 23:19:05,576 - numba.core.ssa - DEBUG - on stmt: digit = $304unpack_sequence.6
2025-05-12 23:19:05,576 - numba.core.ssa - DEBUG - on stmt: $312load_global.8 = global(ord: <built-in function ord>)
2025-05-12 23:19:05,576 - numba.core.ssa - DEBUG - on stmt: $const322.10.4 = const(str, 0)
2025-05-12 23:19:05,576 - numba.core.ssa - DEBUG - on stmt: $324call.11 = call $312load_global.8($const322.10.4, func=$312load_global.8, args=[Var($const322.10.4, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,577 - numba.core.ssa - DEBUG - on stmt: c = $324call.11 + digit
2025-05-12 23:19:05,577 - numba.core.ssa - DEBUG - on stmt: $340load_global.14 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:05,577 - numba.core.ssa - DEBUG - on stmt: $356call.19 = call $340load_global.14(s, idx, c, func=$340load_global.14, args=[Var(s, unicode.py:2582), Var(idx, unicode.py:2585), Var(c, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,577 - numba.core.ssa - DEBUG - find_def var='idx' stmt=$356call.19 = call $340load_global.14(s, idx, c, func=$340load_global.14, args=[Var(s, unicode.py:2582), Var(idx, unicode.py:2585), Var(c, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,577 - numba.core.ssa - DEBUG - find_def_from_top label 282
2025-05-12 23:19:05,577 - numba.core.ssa - DEBUG - insert phi node idx.2 = phi(incoming_values=[], incoming_blocks=[]) at 282
2025-05-12 23:19:05,577 - numba.core.ssa - DEBUG - find_def_from_bottom label 386
2025-05-12 23:19:05,577 - numba.core.ssa - DEBUG - find_def_from_top label 386
2025-05-12 23:19:05,579 - numba.core.ssa - DEBUG - idom 282 from label 386
2025-05-12 23:19:05,579 - numba.core.ssa - DEBUG - find_def_from_bottom label 282
2025-05-12 23:19:05,579 - numba.core.ssa - DEBUG - incoming_def idx.1 = $binop_isub370.22
2025-05-12 23:19:05,580 - numba.core.ssa - DEBUG - find_def_from_bottom label 262
2025-05-12 23:19:05,580 - numba.core.ssa - DEBUG - incoming_def idx = length - $const264.1.5
2025-05-12 23:19:05,581 - numba.core.ssa - DEBUG - replaced with: $356call.19 = call $340load_global.14(s, idx.2, c, func=$340load_global.14, args=[Var(s, unicode.py:2582), Var(idx.2, unicode.py:2587), Var(c, unicode.py:2588)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,581 - numba.core.ssa - DEBUG - on stmt: $const368.21.5 = const(int, 1)
2025-05-12 23:19:05,582 - numba.core.ssa - DEBUG - on stmt: $binop_isub370.22 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=idx, rhs=$const368.21.5, static_lhs=Undefined, static_rhs=Undefined)
2025-05-12 23:19:05,582 - numba.core.ssa - DEBUG - find_def var='idx' stmt=$binop_isub370.22 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=idx, rhs=$const368.21.5, static_lhs=Undefined, static_rhs=Undefined)
2025-05-12 23:19:05,582 - numba.core.ssa - DEBUG - replaced with: $binop_isub370.22 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=idx.2, rhs=$const368.21.5, static_lhs=Undefined, static_rhs=Undefined)
2025-05-12 23:19:05,583 - numba.core.ssa - DEBUG - on stmt: idx.1 = $binop_isub370.22
2025-05-12 23:19:05,584 - numba.core.ssa - DEBUG - on stmt: $const378.24.2 = const(int, 0)
2025-05-12 23:19:05,584 - numba.core.ssa - DEBUG - on stmt: $380compare_op.25 = n.2 > $const378.24.2
2025-05-12 23:19:05,584 - numba.core.ssa - DEBUG - on stmt: bool384 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,584 - numba.core.ssa - DEBUG - on stmt: $384pred = call bool384($380compare_op.25, func=bool384, args=(Var($380compare_op.25, unicode.py:2586),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,584 - numba.core.ssa - DEBUG - on stmt: branch $384pred, 386, 388
2025-05-12 23:19:05,584 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 386
2025-05-12 23:19:05,585 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76960>
2025-05-12 23:19:05,585 - numba.core.ssa - DEBUG - on stmt: jump 282
2025-05-12 23:19:05,585 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 388
2025-05-12 23:19:05,585 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8A76960>
2025-05-12 23:19:05,585 - numba.core.ssa - DEBUG - on stmt: $390return_value.1 = cast(value=s)
2025-05-12 23:19:05,586 - numba.core.ssa - DEBUG - on stmt: return $390return_value.1
2025-05-12 23:19:05,621 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=400)
           2	RESUME(arg=0, lineno=400)
           4	LOAD_FAST(arg=0, lineno=402)
           6	LOAD_GLOBAL(arg=0, lineno=402)
          16	COMPARE_OP(arg=40, lineno=402)
          20	POP_JUMP_IF_FALSE(arg=1, lineno=402)
          22	RETURN_CONST(arg=1, lineno=403)
>         24	LOAD_FAST(arg=0, lineno=404)
          26	LOAD_GLOBAL(arg=2, lineno=404)
          36	COMPARE_OP(arg=40, lineno=404)
          40	POP_JUMP_IF_FALSE(arg=1, lineno=404)
          42	RETURN_CONST(arg=2, lineno=405)
>         44	LOAD_FAST(arg=0, lineno=406)
          46	LOAD_GLOBAL(arg=4, lineno=406)
          56	COMPARE_OP(arg=40, lineno=406)
          60	POP_JUMP_IF_FALSE(arg=1, lineno=406)
          62	RETURN_CONST(arg=3, lineno=407)
>         64	LOAD_GLOBAL(arg=7, lineno=409)
          74	LOAD_CONST(arg=4, lineno=409)
          76	CALL(arg=1, lineno=409)
          84	RAISE_VARARGS(arg=1, lineno=409)
2025-05-12 23:19:05,622 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:05,623 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,623 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:05,623 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=400)
2025-05-12 23:19:05,624 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,624 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=400)
2025-05-12 23:19:05,624 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,624 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=402)
2025-05-12 23:19:05,624 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,625 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=402)
2025-05-12 23:19:05,625 - numba.core.byteflow - DEBUG - stack ['$kind4.0']
2025-05-12 23:19:05,625 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=40, lineno=402)
2025-05-12 23:19:05,625 - numba.core.byteflow - DEBUG - stack ['$kind4.0', '$6load_global.1']
2025-05-12 23:19:05,625 - numba.core.byteflow - DEBUG - dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=1, lineno=402)
2025-05-12 23:19:05,625 - numba.core.byteflow - DEBUG - stack ['$16compare_op.2']
2025-05-12 23:19:05,626 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,626 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
2025-05-12 23:19:05,626 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,626 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=22 nstack_initial=0)
2025-05-12 23:19:05,626 - numba.core.byteflow - DEBUG - dispatch pc=22, inst=RETURN_CONST(arg=1, lineno=403)
2025-05-12 23:19:05,626 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,627 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,627 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0)])
2025-05-12 23:19:05,627 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,628 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
2025-05-12 23:19:05,628 - numba.core.byteflow - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=404)
2025-05-12 23:19:05,628 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,628 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=LOAD_GLOBAL(arg=2, lineno=404)
2025-05-12 23:19:05,629 - numba.core.byteflow - DEBUG - stack ['$kind24.0']
2025-05-12 23:19:05,629 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=COMPARE_OP(arg=40, lineno=404)
2025-05-12 23:19:05,629 - numba.core.byteflow - DEBUG - stack ['$kind24.0', '$26load_global.1']
2025-05-12 23:19:05,629 - numba.core.byteflow - DEBUG - dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=1, lineno=404)
2025-05-12 23:19:05,630 - numba.core.byteflow - DEBUG - stack ['$36compare_op.2']
2025-05-12 23:19:05,631 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,631 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2025-05-12 23:19:05,631 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,632 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=42 nstack_initial=0)
2025-05-12 23:19:05,632 - numba.core.byteflow - DEBUG - dispatch pc=42, inst=RETURN_CONST(arg=2, lineno=405)
2025-05-12 23:19:05,632 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,632 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,633 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=44 nstack_initial=0)])
2025-05-12 23:19:05,633 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,633 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=44 nstack_initial=0)
2025-05-12 23:19:05,633 - numba.core.byteflow - DEBUG - dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=406)
2025-05-12 23:19:05,634 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,634 - numba.core.byteflow - DEBUG - dispatch pc=46, inst=LOAD_GLOBAL(arg=4, lineno=406)
2025-05-12 23:19:05,634 - numba.core.byteflow - DEBUG - stack ['$kind44.0']
2025-05-12 23:19:05,634 - numba.core.byteflow - DEBUG - dispatch pc=56, inst=COMPARE_OP(arg=40, lineno=406)
2025-05-12 23:19:05,634 - numba.core.byteflow - DEBUG - stack ['$kind44.0', '$46load_global.1']
2025-05-12 23:19:05,635 - numba.core.byteflow - DEBUG - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=1, lineno=406)
2025-05-12 23:19:05,635 - numba.core.byteflow - DEBUG - stack ['$56compare_op.2']
2025-05-12 23:19:05,635 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=64, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,635 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=64 nstack_initial=0)])
2025-05-12 23:19:05,635 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,635 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=0)
2025-05-12 23:19:05,635 - numba.core.byteflow - DEBUG - dispatch pc=62, inst=RETURN_CONST(arg=3, lineno=407)
2025-05-12 23:19:05,636 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,636 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,636 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=64 nstack_initial=0)])
2025-05-12 23:19:05,636 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,636 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=64 nstack_initial=0)
2025-05-12 23:19:05,637 - numba.core.byteflow - DEBUG - dispatch pc=64, inst=LOAD_GLOBAL(arg=7, lineno=409)
2025-05-12 23:19:05,637 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,637 - numba.core.byteflow - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=4, lineno=409)
2025-05-12 23:19:05,637 - numba.core.byteflow - DEBUG - stack ['$null$64.1', '$64load_global.0']
2025-05-12 23:19:05,639 - numba.core.byteflow - DEBUG - dispatch pc=76, inst=CALL(arg=1, lineno=409)
2025-05-12 23:19:05,639 - numba.core.byteflow - DEBUG - stack ['$null$64.1', '$64load_global.0', '$const74.2.4']
2025-05-12 23:19:05,640 - numba.core.byteflow - DEBUG - dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=409)
2025-05-12 23:19:05,640 - numba.core.byteflow - DEBUG - stack ['$76call.3']
2025-05-12 23:19:05,640 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,641 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:05,641 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set()})
2025-05-12 23:19:05,641 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:05,642 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,642 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,642 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:05,642 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:05,642 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:05,643 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$kind4.0'}), (6, {'idx': 0, 'res': '$6load_global.1'}), (16, {'lhs': '$kind4.0', 'rhs': '$6load_global.1', 'res': '$16compare_op.2'}), (20, {'pred': '$16compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 24: ()})
2025-05-12 23:19:05,643 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'retval': '$const22.0', 'castval': '$22return_const.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,643 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$kind24.0'}), (26, {'idx': 1, 'res': '$26load_global.1'}), (36, {'lhs': '$kind24.0', 'rhs': '$26load_global.1', 'res': '$36compare_op.2'}), (40, {'pred': '$36compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 44: ()})
2025-05-12 23:19:05,643 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'retval': '$const42.0', 'castval': '$42return_const.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,644 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$kind44.0'}), (46, {'idx': 2, 'res': '$46load_global.1'}), (56, {'lhs': '$kind44.0', 'rhs': '$46load_global.1', 'res': '$56compare_op.2'}), (60, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 64: ()})
2025-05-12 23:19:05,644 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'retval': '$const62.0', 'castval': '$62return_const.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,644 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'idx': 3, 'res': '$64load_global.0'}), (74, {'res': '$const74.2.4'}), (76, {'func': '$64load_global.0', 'args': ['$const74.2.4'], 'kw_names': None, 'res': '$76call.3'}), (84, {'exc': '$76call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,645 - numba.core.interpreter - DEBUG - label 0:
    kind = arg(0, name=kind)                 ['kind']
    $6load_global.1 = global(PY_UNICODE_1BYTE_KIND: 1) ['$6load_global.1']
    $16compare_op.2 = kind == $6load_global.1 ['$16compare_op.2', '$6load_global.1', 'kind']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($16compare_op.2, func=bool20, args=(Var($16compare_op.2, unicode.py:402),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.2', '$20pred', 'bool20']
    branch $20pred, 22, 24                   ['$20pred']
label 22:
    $const22.0 = const(int, 1)               ['$const22.0']
    $22return_const.1 = cast(value=$const22.0) ['$22return_const.1', '$const22.0']
    return $22return_const.1                 ['$22return_const.1']
label 24:
    $26load_global.1 = global(PY_UNICODE_2BYTE_KIND: 2) ['$26load_global.1']
    $36compare_op.2 = kind == $26load_global.1 ['$26load_global.1', '$36compare_op.2', 'kind']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($36compare_op.2, func=bool40, args=(Var($36compare_op.2, unicode.py:404),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.2', '$40pred', 'bool40']
    branch $40pred, 42, 44                   ['$40pred']
label 42:
    $const42.0 = const(int, 2)               ['$const42.0']
    $42return_const.1 = cast(value=$const42.0) ['$42return_const.1', '$const42.0']
    return $42return_const.1                 ['$42return_const.1']
label 44:
    $46load_global.1 = global(PY_UNICODE_4BYTE_KIND: 4) ['$46load_global.1']
    $56compare_op.2 = kind == $46load_global.1 ['$46load_global.1', '$56compare_op.2', 'kind']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($56compare_op.2, func=bool60, args=(Var($56compare_op.2, unicode.py:406),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$60pred', 'bool60']
    branch $60pred, 62, 64                   ['$60pred']
label 62:
    $const62.0 = const(int, 4)               ['$const62.0']
    $62return_const.1 = cast(value=$const62.0) ['$62return_const.1', '$const62.0']
    return $62return_const.1                 ['$62return_const.1']
label 64:
    $64load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$64load_global.0']
    $const74.2.4 = const(str, Unexpected unicode encoding encountered) ['$const74.2.4']
    $76call.3 = call $64load_global.0($const74.2.4, func=$64load_global.0, args=[Var($const74.2.4, unicode.py:409)], kws=(), vararg=None, varkwarg=None, target=None) ['$64load_global.0', '$76call.3', '$const74.2.4']
    raise $76call.3                          ['$76call.3']

2025-05-12 23:19:05,653 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:05,654 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A4B4A0>
2025-05-12 23:19:05,655 - numba.core.ssa - DEBUG - on stmt: kind = arg(0, name=kind)
2025-05-12 23:19:05,655 - numba.core.ssa - DEBUG - on stmt: $6load_global.1 = global(PY_UNICODE_1BYTE_KIND: 1)
2025-05-12 23:19:05,655 - numba.core.ssa - DEBUG - on stmt: $16compare_op.2 = kind == $6load_global.1
2025-05-12 23:19:05,655 - numba.core.ssa - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,657 - numba.core.ssa - DEBUG - on stmt: $20pred = call bool20($16compare_op.2, func=bool20, args=(Var($16compare_op.2, unicode.py:402),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,657 - numba.core.ssa - DEBUG - on stmt: branch $20pred, 22, 24
2025-05-12 23:19:05,657 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 22
2025-05-12 23:19:05,657 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A4B4A0>
2025-05-12 23:19:05,658 - numba.core.ssa - DEBUG - on stmt: $const22.0 = const(int, 1)
2025-05-12 23:19:05,658 - numba.core.ssa - DEBUG - on stmt: $22return_const.1 = cast(value=$const22.0)
2025-05-12 23:19:05,658 - numba.core.ssa - DEBUG - on stmt: return $22return_const.1
2025-05-12 23:19:05,658 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 24
2025-05-12 23:19:05,658 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A4B4A0>
2025-05-12 23:19:05,658 - numba.core.ssa - DEBUG - on stmt: $26load_global.1 = global(PY_UNICODE_2BYTE_KIND: 2)
2025-05-12 23:19:05,658 - numba.core.ssa - DEBUG - on stmt: $36compare_op.2 = kind == $26load_global.1
2025-05-12 23:19:05,658 - numba.core.ssa - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,658 - numba.core.ssa - DEBUG - on stmt: $40pred = call bool40($36compare_op.2, func=bool40, args=(Var($36compare_op.2, unicode.py:404),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,659 - numba.core.ssa - DEBUG - on stmt: branch $40pred, 42, 44
2025-05-12 23:19:05,659 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 42
2025-05-12 23:19:05,659 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A4B4A0>
2025-05-12 23:19:05,659 - numba.core.ssa - DEBUG - on stmt: $const42.0 = const(int, 2)
2025-05-12 23:19:05,659 - numba.core.ssa - DEBUG - on stmt: $42return_const.1 = cast(value=$const42.0)
2025-05-12 23:19:05,660 - numba.core.ssa - DEBUG - on stmt: return $42return_const.1
2025-05-12 23:19:05,660 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 44
2025-05-12 23:19:05,660 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A4B4A0>
2025-05-12 23:19:05,661 - numba.core.ssa - DEBUG - on stmt: $46load_global.1 = global(PY_UNICODE_4BYTE_KIND: 4)
2025-05-12 23:19:05,661 - numba.core.ssa - DEBUG - on stmt: $56compare_op.2 = kind == $46load_global.1
2025-05-12 23:19:05,662 - numba.core.ssa - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,662 - numba.core.ssa - DEBUG - on stmt: $60pred = call bool60($56compare_op.2, func=bool60, args=(Var($56compare_op.2, unicode.py:406),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,663 - numba.core.ssa - DEBUG - on stmt: branch $60pred, 62, 64
2025-05-12 23:19:05,663 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 62
2025-05-12 23:19:05,663 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A4B4A0>
2025-05-12 23:19:05,663 - numba.core.ssa - DEBUG - on stmt: $const62.0 = const(int, 4)
2025-05-12 23:19:05,664 - numba.core.ssa - DEBUG - on stmt: $62return_const.1 = cast(value=$const62.0)
2025-05-12 23:19:05,664 - numba.core.ssa - DEBUG - on stmt: return $62return_const.1
2025-05-12 23:19:05,664 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 64
2025-05-12 23:19:05,665 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A4B4A0>
2025-05-12 23:19:05,665 - numba.core.ssa - DEBUG - on stmt: $64load_global.0 = global(AssertionError: <class 'AssertionError'>)
2025-05-12 23:19:05,665 - numba.core.ssa - DEBUG - on stmt: $const74.2.4 = const(str, Unexpected unicode encoding encountered)
2025-05-12 23:19:05,666 - numba.core.ssa - DEBUG - on stmt: $76call.3 = call $64load_global.0($const74.2.4, func=$64load_global.0, args=[Var($const74.2.4, unicode.py:409)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,666 - numba.core.ssa - DEBUG - on stmt: <static> raise <class 'AssertionError'>('Unexpected unicode encoding encountered')
2025-05-12 23:19:05,666 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$16compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A8A4B920>,
                                  0)],
             '$20pred': [(<numba.core.ir.Assign object at 0x000001E8A8A4B8C0>,
                          0)],
             '$22return_const.1': [(<numba.core.ir.Assign object at 0x000001E8A8A48110>,
                                    22)],
             '$26load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A8A481D0>,
                                   24)],
             '$36compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A8A4B3B0>,
                                  24)],
             '$40pred': [(<numba.core.ir.Assign object at 0x000001E8A8A4B620>,
                          24)],
             '$42return_const.1': [(<numba.core.ir.Assign object at 0x000001E8A8A4AB10>,
                                    42)],
             '$46load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A8A4B770>,
                                   44)],
             '$56compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A8A4AF00>,
                                  44)],
             '$60pred': [(<numba.core.ir.Assign object at 0x000001E8A8A4ABD0>,
                          44)],
             '$62return_const.1': [(<numba.core.ir.Assign object at 0x000001E8A8A49DF0>,
                                    62)],
             '$64load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8A2BEF0>,
                                   64)],
             '$6load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A8A48B60>,
                                  0)],
             '$76call.3': [(<numba.core.ir.Assign object at 0x000001E8A8A2B8F0>,
                            64)],
             '$const22.0': [(<numba.core.ir.Assign object at 0x000001E8A8A48170>,
                             22)],
             '$const42.0': [(<numba.core.ir.Assign object at 0x000001E8A8A4B1A0>,
                             42)],
             '$const62.0': [(<numba.core.ir.Assign object at 0x000001E8A8A49D90>,
                             62)],
             '$const74.2.4': [(<numba.core.ir.Assign object at 0x000001E8A8A29BB0>,
                               64)],
             'bool20': [(<numba.core.ir.Assign object at 0x000001E8A8A4B650>,
                         0)],
             'bool40': [(<numba.core.ir.Assign object at 0x000001E8A8A4B320>,
                         24)],
             'bool60': [(<numba.core.ir.Assign object at 0x000001E8A8A4AF60>,
                         44)],
             'kind': [(<numba.core.ir.Assign object at 0x000001E8A8A4BAA0>,
                       0)]})
2025-05-12 23:19:05,668 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8A4B4A0>
2025-05-12 23:19:05,759 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2510)
           2	RESUME(arg=0, lineno=2510)
           4	LOAD_GLOBAL(arg=1, lineno=2511)
          14	LOAD_FAST(arg=0, lineno=2511)
          16	CALL(arg=1, lineno=2511)
          24	STORE_FAST(arg=1, lineno=2511)
          26	LOAD_FAST(arg=1, lineno=2512)
          28	LOAD_CONST(arg=1, lineno=2512)
          30	COMPARE_OP(arg=55, lineno=2512)
          34	POP_JUMP_IF_FALSE(arg=11, lineno=2512)
          36	LOAD_GLOBAL(arg=3, lineno=2514)
          46	LOAD_CONST(arg=2, lineno=2514)
          48	CALL(arg=1, lineno=2514)
          56	RAISE_VARARGS(arg=1, lineno=2514)
>         58	LOAD_GLOBAL(arg=5, lineno=2515)
          68	LOAD_FAST(arg=0, lineno=2515)
          70	LOAD_CONST(arg=3, lineno=2515)
          72	CALL(arg=2, lineno=2515)
          80	RETURN_VALUE(arg=None, lineno=2515)
2025-05-12 23:19:05,759 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:05,760 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,760 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:05,760 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2510)
2025-05-12 23:19:05,760 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,761 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=2510)
2025-05-12 23:19:05,761 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,761 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=2511)
2025-05-12 23:19:05,762 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,762 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=2511)
2025-05-12 23:19:05,762 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:05,762 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=CALL(arg=1, lineno=2511)
2025-05-12 23:19:05,763 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$c14.2']
2025-05-12 23:19:05,763 - numba.core.byteflow - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=1, lineno=2511)
2025-05-12 23:19:05,763 - numba.core.byteflow - DEBUG - stack ['$16call.3']
2025-05-12 23:19:05,763 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=2512)
2025-05-12 23:19:05,764 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,764 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=LOAD_CONST(arg=1, lineno=2512)
2025-05-12 23:19:05,764 - numba.core.byteflow - DEBUG - stack ['$lc26.4']
2025-05-12 23:19:05,765 - numba.core.byteflow - DEBUG - dispatch pc=30, inst=COMPARE_OP(arg=55, lineno=2512)
2025-05-12 23:19:05,765 - numba.core.byteflow - DEBUG - stack ['$lc26.4', '$const28.5.1']
2025-05-12 23:19:05,765 - numba.core.byteflow - DEBUG - dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=11, lineno=2512)
2025-05-12 23:19:05,766 - numba.core.byteflow - DEBUG - stack ['$30compare_op.6']
2025-05-12 23:19:05,766 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=36, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,766 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
2025-05-12 23:19:05,766 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,767 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=36 nstack_initial=0)
2025-05-12 23:19:05,767 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=LOAD_GLOBAL(arg=3, lineno=2514)
2025-05-12 23:19:05,767 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,767 - numba.core.byteflow - DEBUG - dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=2514)
2025-05-12 23:19:05,768 - numba.core.byteflow - DEBUG - stack ['$null$36.1', '$36load_global.0']
2025-05-12 23:19:05,768 - numba.core.byteflow - DEBUG - dispatch pc=48, inst=CALL(arg=1, lineno=2514)
2025-05-12 23:19:05,768 - numba.core.byteflow - DEBUG - stack ['$null$36.1', '$36load_global.0', '$const46.2.2']
2025-05-12 23:19:05,769 - numba.core.byteflow - DEBUG - dispatch pc=56, inst=RAISE_VARARGS(arg=1, lineno=2514)
2025-05-12 23:19:05,769 - numba.core.byteflow - DEBUG - stack ['$48call.3']
2025-05-12 23:19:05,769 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,769 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=58 nstack_initial=0)])
2025-05-12 23:19:05,771 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,772 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=58 nstack_initial=0)
2025-05-12 23:19:05,772 - numba.core.byteflow - DEBUG - dispatch pc=58, inst=LOAD_GLOBAL(arg=5, lineno=2515)
2025-05-12 23:19:05,772 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,773 - numba.core.byteflow - DEBUG - dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=2515)
2025-05-12 23:19:05,773 - numba.core.byteflow - DEBUG - stack ['$null$58.1', '$58load_global.0']
2025-05-12 23:19:05,774 - numba.core.byteflow - DEBUG - dispatch pc=70, inst=LOAD_CONST(arg=3, lineno=2515)
2025-05-12 23:19:05,774 - numba.core.byteflow - DEBUG - stack ['$null$58.1', '$58load_global.0', '$c68.2']
2025-05-12 23:19:05,774 - numba.core.byteflow - DEBUG - dispatch pc=72, inst=CALL(arg=2, lineno=2515)
2025-05-12 23:19:05,775 - numba.core.byteflow - DEBUG - stack ['$null$58.1', '$58load_global.0', '$c68.2', '$const70.3.3']
2025-05-12 23:19:05,775 - numba.core.byteflow - DEBUG - dispatch pc=80, inst=RETURN_VALUE(arg=None, lineno=2515)
2025-05-12 23:19:05,775 - numba.core.byteflow - DEBUG - stack ['$72call.4']
2025-05-12 23:19:05,776 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,776 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:05,777 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set()})
2025-05-12 23:19:05,778 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:05,778 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,778 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,779 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:05,779 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:05,779 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:05,781 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$c14.2'}), (16, {'func': '$4load_global.0', 'args': ['$c14.2'], 'kw_names': None, 'res': '$16call.3'}), (24, {'value': '$16call.3'}), (26, {'res': '$lc26.4'}), (28, {'res': '$const28.5.1'}), (30, {'lhs': '$lc26.4', 'rhs': '$const28.5.1', 'res': '$30compare_op.6'}), (34, {'pred': '$30compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={36: (), 58: ()})
2025-05-12 23:19:05,782 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'idx': 1, 'res': '$36load_global.0'}), (46, {'res': '$const46.2.2'}), (48, {'func': '$36load_global.0', 'args': ['$const46.2.2'], 'kw_names': None, 'res': '$48call.3'}), (56, {'exc': '$48call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,782 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'idx': 2, 'res': '$58load_global.0'}), (68, {'res': '$c68.2'}), (70, {'res': '$const70.3.3'}), (72, {'func': '$58load_global.0', 'args': ['$c68.2', '$const70.3.3'], 'kw_names': None, 'res': '$72call.4'}), (80, {'retval': '$72call.4', 'castval': '$80return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,783 - numba.core.interpreter - DEBUG - label 0:
    c = arg(0, name=c)                       ['c']
    $4load_global.0 = global(len: <built-in function len>) ['$4load_global.0']
    lc = call $4load_global.0(c, func=$4load_global.0, args=[Var(c, unicode.py:2510)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.0', 'c', 'lc']
    $const28.5.1 = const(int, 1)             ['$const28.5.1']
    $30compare_op.6 = lc != $const28.5.1     ['$30compare_op.6', '$const28.5.1', 'lc']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($30compare_op.6, func=bool34, args=(Var($30compare_op.6, unicode.py:2512),), kws=(), vararg=None, varkwarg=None, target=None) ['$30compare_op.6', '$34pred', 'bool34']
    branch $34pred, 36, 58                   ['$34pred']
label 36:
    $36load_global.0 = global(TypeError: <class 'TypeError'>) ['$36load_global.0']
    $const46.2.2 = const(str, ord() expected a character) ['$const46.2.2']
    $48call.3 = call $36load_global.0($const46.2.2, func=$36load_global.0, args=[Var($const46.2.2, unicode.py:2514)], kws=(), vararg=None, varkwarg=None, target=None) ['$36load_global.0', '$48call.3', '$const46.2.2']
    raise $48call.3                          ['$48call.3']
label 58:
    $58load_global.0 = global(_get_code_point: <function _get_code_point at 0x000001E8A80365C0>) ['$58load_global.0']
    $const70.3.3 = const(int, 0)             ['$const70.3.3']
    $72call.4 = call $58load_global.0(c, $const70.3.3, func=$58load_global.0, args=[Var(c, unicode.py:2510), Var($const70.3.3, unicode.py:2515)], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_global.0', '$72call.4', '$const70.3.3', 'c']
    $80return_value.5 = cast(value=$72call.4) ['$72call.4', '$80return_value.5']
    return $80return_value.5                 ['$80return_value.5']

2025-05-12 23:19:05,796 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:05,796 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A48DA0>
2025-05-12 23:19:05,796 - numba.core.ssa - DEBUG - on stmt: c = arg(0, name=c)
2025-05-12 23:19:05,797 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(len: <built-in function len>)
2025-05-12 23:19:05,797 - numba.core.ssa - DEBUG - on stmt: lc = call $4load_global.0(c, func=$4load_global.0, args=[Var(c, unicode.py:2510)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,798 - numba.core.ssa - DEBUG - on stmt: $const28.5.1 = const(int, 1)
2025-05-12 23:19:05,798 - numba.core.ssa - DEBUG - on stmt: $30compare_op.6 = lc != $const28.5.1
2025-05-12 23:19:05,798 - numba.core.ssa - DEBUG - on stmt: bool34 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,799 - numba.core.ssa - DEBUG - on stmt: $34pred = call bool34($30compare_op.6, func=bool34, args=(Var($30compare_op.6, unicode.py:2512),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,800 - numba.core.ssa - DEBUG - on stmt: branch $34pred, 36, 58
2025-05-12 23:19:05,800 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 36
2025-05-12 23:19:05,801 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A48DA0>
2025-05-12 23:19:05,802 - numba.core.ssa - DEBUG - on stmt: $36load_global.0 = global(TypeError: <class 'TypeError'>)
2025-05-12 23:19:05,802 - numba.core.ssa - DEBUG - on stmt: $const46.2.2 = const(str, ord() expected a character)
2025-05-12 23:19:05,803 - numba.core.ssa - DEBUG - on stmt: $48call.3 = call $36load_global.0($const46.2.2, func=$36load_global.0, args=[Var($const46.2.2, unicode.py:2514)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,803 - numba.core.ssa - DEBUG - on stmt: <static> raise <class 'TypeError'>('ord() expected a character')
2025-05-12 23:19:05,804 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 58
2025-05-12 23:19:05,804 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A48DA0>
2025-05-12 23:19:05,805 - numba.core.ssa - DEBUG - on stmt: $58load_global.0 = global(_get_code_point: <function _get_code_point at 0x000001E8A80365C0>)
2025-05-12 23:19:05,805 - numba.core.ssa - DEBUG - on stmt: $const70.3.3 = const(int, 0)
2025-05-12 23:19:05,806 - numba.core.ssa - DEBUG - on stmt: $72call.4 = call $58load_global.0(c, $const70.3.3, func=$58load_global.0, args=[Var(c, unicode.py:2510), Var($const70.3.3, unicode.py:2515)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,806 - numba.core.ssa - DEBUG - on stmt: $80return_value.5 = cast(value=$72call.4)
2025-05-12 23:19:05,807 - numba.core.ssa - DEBUG - on stmt: return $80return_value.5
2025-05-12 23:19:05,808 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$30compare_op.6': [(<numba.core.ir.Assign object at 0x000001E8A88F9430>,
                                  0)],
             '$34pred': [(<numba.core.ir.Assign object at 0x000001E8A88F9B50>,
                          0)],
             '$36load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A88FBB90>,
                                   36)],
             '$48call.3': [(<numba.core.ir.Assign object at 0x000001E8A88F9250>,
                            36)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A88FB020>,
                                  0)],
             '$58load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A88FBC20>,
                                   58)],
             '$72call.4': [(<numba.core.ir.Assign object at 0x000001E8A8936390>,
                            58)],
             '$80return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A8906F60>,
                                    58)],
             '$const28.5.1': [(<numba.core.ir.Assign object at 0x000001E8A88F93A0>,
                               0)],
             '$const46.2.2': [(<numba.core.ir.Assign object at 0x000001E8A88F9880>,
                               36)],
             '$const70.3.3': [(<numba.core.ir.Assign object at 0x000001E8A89440B0>,
                               58)],
             'bool34': [(<numba.core.ir.Assign object at 0x000001E8A88F95E0>,
                         0)],
             'c': [(<numba.core.ir.Assign object at 0x000001E8A88FB770>, 0)],
             'lc': [(<numba.core.ir.Assign object at 0x000001E8A88FA060>, 0)]})
2025-05-12 23:19:05,810 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8A48DA0>
2025-05-12 23:19:05,822 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=479)
           2	RESUME(arg=0, lineno=479)
           4	LOAD_FAST(arg=0, lineno=480)
           6	LOAD_ATTR(arg=0, lineno=480)
          26	RETURN_VALUE(arg=None, lineno=480)
2025-05-12 23:19:05,822 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:05,823 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,823 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:05,824 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=479)
2025-05-12 23:19:05,824 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,824 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=479)
2025-05-12 23:19:05,825 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,825 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=480)
2025-05-12 23:19:05,825 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,825 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=480)
2025-05-12 23:19:05,826 - numba.core.byteflow - DEBUG - stack ['$s4.0']
2025-05-12 23:19:05,826 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=480)
2025-05-12 23:19:05,827 - numba.core.byteflow - DEBUG - stack ['$6load_attr.1']
2025-05-12 23:19:05,827 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,828 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:05,828 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:05,828 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:05,828 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,829 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,829 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:05,829 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:05,829 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:05,829 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$s4.0'}), (6, {'item': '$s4.0', 'res': '$6load_attr.1'}), (26, {'retval': '$6load_attr.1', 'castval': '$26return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,831 - numba.core.interpreter - DEBUG - label 0:
    s = arg(0, name=s)                       ['s']
    $6load_attr.1 = getattr(value=s, attr=_length) ['$6load_attr.1', 's']
    $26return_value.2 = cast(value=$6load_attr.1) ['$26return_value.2', '$6load_attr.1']
    return $26return_value.2                 ['$26return_value.2']

2025-05-12 23:19:05,833 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:05,835 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88DD8B0>
2025-05-12 23:19:05,836 - numba.core.ssa - DEBUG - on stmt: s = arg(0, name=s)
2025-05-12 23:19:05,837 - numba.core.ssa - DEBUG - on stmt: $6load_attr.1 = getattr(value=s, attr=_length)
2025-05-12 23:19:05,837 - numba.core.ssa - DEBUG - on stmt: $26return_value.2 = cast(value=$6load_attr.1)
2025-05-12 23:19:05,837 - numba.core.ssa - DEBUG - on stmt: return $26return_value.2
2025-05-12 23:19:05,838 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$26return_value.2': [(<numba.core.ir.Assign object at 0x000001E8A8ABA330>,
                                    0)],
             '$6load_attr.1': [(<numba.core.ir.Assign object at 0x000001E8A8ABA3C0>,
                                0)],
             's': [(<numba.core.ir.Assign object at 0x000001E8A8ABA8A0>, 0)]})
2025-05-12 23:19:05,838 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A88DD8B0>
2025-05-12 23:19:05,875 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=290)
           2	RESUME(arg=0, lineno=290)
           4	LOAD_FAST(arg=0, lineno=292)
           6	LOAD_ATTR(arg=0, lineno=292)
          26	LOAD_GLOBAL(arg=2, lineno=292)
          36	COMPARE_OP(arg=40, lineno=292)
          40	POP_JUMP_IF_FALSE(arg=22, lineno=292)
          42	LOAD_GLOBAL(arg=5, lineno=293)
          52	LOAD_FAST(arg=0, lineno=293)
          54	LOAD_ATTR(arg=6, lineno=293)
          74	LOAD_FAST(arg=1, lineno=293)
          76	CALL(arg=2, lineno=293)
          84	RETURN_VALUE(arg=None, lineno=293)
>         86	LOAD_FAST(arg=0, lineno=294)
          88	LOAD_ATTR(arg=0, lineno=294)
         108	LOAD_GLOBAL(arg=8, lineno=294)
         118	COMPARE_OP(arg=40, lineno=294)
         122	POP_JUMP_IF_FALSE(arg=22, lineno=294)
         124	LOAD_GLOBAL(arg=11, lineno=295)
         134	LOAD_FAST(arg=0, lineno=295)
         136	LOAD_ATTR(arg=6, lineno=295)
         156	LOAD_FAST(arg=1, lineno=295)
         158	CALL(arg=2, lineno=295)
         166	RETURN_VALUE(arg=None, lineno=295)
>        168	LOAD_FAST(arg=0, lineno=296)
         170	LOAD_ATTR(arg=0, lineno=296)
         190	LOAD_GLOBAL(arg=12, lineno=296)
         200	COMPARE_OP(arg=40, lineno=296)
         204	POP_JUMP_IF_FALSE(arg=22, lineno=296)
         206	LOAD_GLOBAL(arg=15, lineno=297)
         216	LOAD_FAST(arg=0, lineno=297)
         218	LOAD_ATTR(arg=6, lineno=297)
         238	LOAD_FAST(arg=1, lineno=297)
         240	CALL(arg=2, lineno=297)
         248	RETURN_VALUE(arg=None, lineno=297)
>        250	RETURN_CONST(arg=1, lineno=301)
2025-05-12 23:19:05,876 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:05,877 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,877 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:05,877 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=290)
2025-05-12 23:19:05,877 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,877 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=290)
2025-05-12 23:19:05,878 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,878 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=292)
2025-05-12 23:19:05,878 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,879 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=292)
2025-05-12 23:19:05,879 - numba.core.byteflow - DEBUG - stack ['$a4.0']
2025-05-12 23:19:05,879 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=LOAD_GLOBAL(arg=2, lineno=292)
2025-05-12 23:19:05,879 - numba.core.byteflow - DEBUG - stack ['$6load_attr.1']
2025-05-12 23:19:05,879 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=COMPARE_OP(arg=40, lineno=292)
2025-05-12 23:19:05,879 - numba.core.byteflow - DEBUG - stack ['$6load_attr.1', '$26load_global.2']
2025-05-12 23:19:05,880 - numba.core.byteflow - DEBUG - dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=22, lineno=292)
2025-05-12 23:19:05,880 - numba.core.byteflow - DEBUG - stack ['$36compare_op.3']
2025-05-12 23:19:05,880 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,881 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2025-05-12 23:19:05,881 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,882 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=42 nstack_initial=0)
2025-05-12 23:19:05,882 - numba.core.byteflow - DEBUG - dispatch pc=42, inst=LOAD_GLOBAL(arg=5, lineno=293)
2025-05-12 23:19:05,882 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,882 - numba.core.byteflow - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=293)
2025-05-12 23:19:05,883 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0']
2025-05-12 23:19:05,883 - numba.core.byteflow - DEBUG - dispatch pc=54, inst=LOAD_ATTR(arg=6, lineno=293)
2025-05-12 23:19:05,883 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0', '$a52.2']
2025-05-12 23:19:05,884 - numba.core.byteflow - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=293)
2025-05-12 23:19:05,884 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0', '$54load_attr.3']
2025-05-12 23:19:05,885 - numba.core.byteflow - DEBUG - dispatch pc=76, inst=CALL(arg=2, lineno=293)
2025-05-12 23:19:05,885 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0', '$54load_attr.3', '$i74.4']
2025-05-12 23:19:05,885 - numba.core.byteflow - DEBUG - dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=293)
2025-05-12 23:19:05,886 - numba.core.byteflow - DEBUG - stack ['$76call.5']
2025-05-12 23:19:05,886 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,887 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=86 nstack_initial=0)])
2025-05-12 23:19:05,887 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,887 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=86 nstack_initial=0)
2025-05-12 23:19:05,888 - numba.core.byteflow - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=0, lineno=294)
2025-05-12 23:19:05,888 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,888 - numba.core.byteflow - DEBUG - dispatch pc=88, inst=LOAD_ATTR(arg=0, lineno=294)
2025-05-12 23:19:05,888 - numba.core.byteflow - DEBUG - stack ['$a86.0']
2025-05-12 23:19:05,889 - numba.core.byteflow - DEBUG - dispatch pc=108, inst=LOAD_GLOBAL(arg=8, lineno=294)
2025-05-12 23:19:05,889 - numba.core.byteflow - DEBUG - stack ['$88load_attr.1']
2025-05-12 23:19:05,889 - numba.core.byteflow - DEBUG - dispatch pc=118, inst=COMPARE_OP(arg=40, lineno=294)
2025-05-12 23:19:05,890 - numba.core.byteflow - DEBUG - stack ['$88load_attr.1', '$108load_global.2']
2025-05-12 23:19:05,890 - numba.core.byteflow - DEBUG - dispatch pc=122, inst=POP_JUMP_IF_FALSE(arg=22, lineno=294)
2025-05-12 23:19:05,890 - numba.core.byteflow - DEBUG - stack ['$118compare_op.3']
2025-05-12 23:19:05,890 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,890 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
2025-05-12 23:19:05,891 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,891 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=124 nstack_initial=0)
2025-05-12 23:19:05,891 - numba.core.byteflow - DEBUG - dispatch pc=124, inst=LOAD_GLOBAL(arg=11, lineno=295)
2025-05-12 23:19:05,891 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,892 - numba.core.byteflow - DEBUG - dispatch pc=134, inst=LOAD_FAST(arg=0, lineno=295)
2025-05-12 23:19:05,893 - numba.core.byteflow - DEBUG - stack ['$null$124.1', '$124load_global.0']
2025-05-12 23:19:05,893 - numba.core.byteflow - DEBUG - dispatch pc=136, inst=LOAD_ATTR(arg=6, lineno=295)
2025-05-12 23:19:05,893 - numba.core.byteflow - DEBUG - stack ['$null$124.1', '$124load_global.0', '$a134.2']
2025-05-12 23:19:05,894 - numba.core.byteflow - DEBUG - dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=295)
2025-05-12 23:19:05,894 - numba.core.byteflow - DEBUG - stack ['$null$124.1', '$124load_global.0', '$136load_attr.3']
2025-05-12 23:19:05,894 - numba.core.byteflow - DEBUG - dispatch pc=158, inst=CALL(arg=2, lineno=295)
2025-05-12 23:19:05,894 - numba.core.byteflow - DEBUG - stack ['$null$124.1', '$124load_global.0', '$136load_attr.3', '$i156.4']
2025-05-12 23:19:05,895 - numba.core.byteflow - DEBUG - dispatch pc=166, inst=RETURN_VALUE(arg=None, lineno=295)
2025-05-12 23:19:05,895 - numba.core.byteflow - DEBUG - stack ['$158call.5']
2025-05-12 23:19:05,895 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,895 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=168 nstack_initial=0)])
2025-05-12 23:19:05,896 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,896 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=168 nstack_initial=0)
2025-05-12 23:19:05,896 - numba.core.byteflow - DEBUG - dispatch pc=168, inst=LOAD_FAST(arg=0, lineno=296)
2025-05-12 23:19:05,896 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,896 - numba.core.byteflow - DEBUG - dispatch pc=170, inst=LOAD_ATTR(arg=0, lineno=296)
2025-05-12 23:19:05,896 - numba.core.byteflow - DEBUG - stack ['$a168.0']
2025-05-12 23:19:05,897 - numba.core.byteflow - DEBUG - dispatch pc=190, inst=LOAD_GLOBAL(arg=12, lineno=296)
2025-05-12 23:19:05,897 - numba.core.byteflow - DEBUG - stack ['$170load_attr.1']
2025-05-12 23:19:05,897 - numba.core.byteflow - DEBUG - dispatch pc=200, inst=COMPARE_OP(arg=40, lineno=296)
2025-05-12 23:19:05,897 - numba.core.byteflow - DEBUG - stack ['$170load_attr.1', '$190load_global.2']
2025-05-12 23:19:05,898 - numba.core.byteflow - DEBUG - dispatch pc=204, inst=POP_JUMP_IF_FALSE(arg=22, lineno=296)
2025-05-12 23:19:05,898 - numba.core.byteflow - DEBUG - stack ['$200compare_op.3']
2025-05-12 23:19:05,898 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=206, stack=(), blockstack=(), npush=0), Edge(pc=250, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:05,898 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=206 nstack_initial=0), State(pc_initial=250 nstack_initial=0)])
2025-05-12 23:19:05,898 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,898 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=206 nstack_initial=0)
2025-05-12 23:19:05,898 - numba.core.byteflow - DEBUG - dispatch pc=206, inst=LOAD_GLOBAL(arg=15, lineno=297)
2025-05-12 23:19:05,898 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,899 - numba.core.byteflow - DEBUG - dispatch pc=216, inst=LOAD_FAST(arg=0, lineno=297)
2025-05-12 23:19:05,899 - numba.core.byteflow - DEBUG - stack ['$null$206.1', '$206load_global.0']
2025-05-12 23:19:05,899 - numba.core.byteflow - DEBUG - dispatch pc=218, inst=LOAD_ATTR(arg=6, lineno=297)
2025-05-12 23:19:05,899 - numba.core.byteflow - DEBUG - stack ['$null$206.1', '$206load_global.0', '$a216.2']
2025-05-12 23:19:05,900 - numba.core.byteflow - DEBUG - dispatch pc=238, inst=LOAD_FAST(arg=1, lineno=297)
2025-05-12 23:19:05,900 - numba.core.byteflow - DEBUG - stack ['$null$206.1', '$206load_global.0', '$218load_attr.3']
2025-05-12 23:19:05,901 - numba.core.byteflow - DEBUG - dispatch pc=240, inst=CALL(arg=2, lineno=297)
2025-05-12 23:19:05,901 - numba.core.byteflow - DEBUG - stack ['$null$206.1', '$206load_global.0', '$218load_attr.3', '$i238.4']
2025-05-12 23:19:05,902 - numba.core.byteflow - DEBUG - dispatch pc=248, inst=RETURN_VALUE(arg=None, lineno=297)
2025-05-12 23:19:05,902 - numba.core.byteflow - DEBUG - stack ['$240call.5']
2025-05-12 23:19:05,902 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,902 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=250 nstack_initial=0)])
2025-05-12 23:19:05,903 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:05,903 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=250 nstack_initial=0)
2025-05-12 23:19:05,903 - numba.core.byteflow - DEBUG - dispatch pc=250, inst=RETURN_CONST(arg=1, lineno=301)
2025-05-12 23:19:05,903 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:05,903 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:05,904 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:05,904 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set(),
             State(pc_initial=206 nstack_initial=0): set(),
             State(pc_initial=250 nstack_initial=0): set()})
2025-05-12 23:19:05,904 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:05,904 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,905 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:05,905 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:05,905 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:05,905 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:05,905 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$a4.0'}), (6, {'item': '$a4.0', 'res': '$6load_attr.1'}), (26, {'idx': 1, 'res': '$26load_global.2'}), (36, {'lhs': '$6load_attr.1', 'rhs': '$26load_global.2', 'res': '$36compare_op.3'}), (40, {'pred': '$36compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 86: ()})
2025-05-12 23:19:05,905 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'idx': 2, 'res': '$42load_global.0'}), (52, {'res': '$a52.2'}), (54, {'item': '$a52.2', 'res': '$54load_attr.3'}), (74, {'res': '$i74.4'}), (76, {'func': '$42load_global.0', 'args': ['$54load_attr.3', '$i74.4'], 'kw_names': None, 'res': '$76call.5'}), (84, {'retval': '$76call.5', 'castval': '$84return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,906 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$a86.0'}), (88, {'item': '$a86.0', 'res': '$88load_attr.1'}), (108, {'idx': 4, 'res': '$108load_global.2'}), (118, {'lhs': '$88load_attr.1', 'rhs': '$108load_global.2', 'res': '$118compare_op.3'}), (122, {'pred': '$118compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={124: (), 168: ()})
2025-05-12 23:19:05,906 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'idx': 5, 'res': '$124load_global.0'}), (134, {'res': '$a134.2'}), (136, {'item': '$a134.2', 'res': '$136load_attr.3'}), (156, {'res': '$i156.4'}), (158, {'func': '$124load_global.0', 'args': ['$136load_attr.3', '$i156.4'], 'kw_names': None, 'res': '$158call.5'}), (166, {'retval': '$158call.5', 'castval': '$166return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,906 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$a168.0'}), (170, {'item': '$a168.0', 'res': '$170load_attr.1'}), (190, {'idx': 6, 'res': '$190load_global.2'}), (200, {'lhs': '$170load_attr.1', 'rhs': '$190load_global.2', 'res': '$200compare_op.3'}), (204, {'pred': '$200compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={206: (), 250: ()})
2025-05-12 23:19:05,906 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=206 nstack_initial=0):
AdaptBlockInfo(insts=((206, {'idx': 7, 'res': '$206load_global.0'}), (216, {'res': '$a216.2'}), (218, {'item': '$a216.2', 'res': '$218load_attr.3'}), (238, {'res': '$i238.4'}), (240, {'func': '$206load_global.0', 'args': ['$218load_attr.3', '$i238.4'], 'kw_names': None, 'res': '$240call.5'}), (248, {'retval': '$240call.5', 'castval': '$248return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,906 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=250 nstack_initial=0):
AdaptBlockInfo(insts=((250, {'retval': '$const250.0', 'castval': '$250return_const.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:05,908 - numba.core.interpreter - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    i = arg(1, name=i)                       ['i']
    $6load_attr.1 = getattr(value=a, attr=_kind) ['$6load_attr.1', 'a']
    $26load_global.2 = global(PY_UNICODE_1BYTE_KIND: 1) ['$26load_global.2']
    $36compare_op.3 = $6load_attr.1 == $26load_global.2 ['$26load_global.2', '$36compare_op.3', '$6load_attr.1']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($36compare_op.3, func=bool40, args=(Var($36compare_op.3, unicode.py:292),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.3', '$40pred', 'bool40']
    branch $40pred, 42, 86                   ['$40pred']
label 42:
    $42load_global.0 = global(deref_uint8: <intrinsic deref_uint8>) ['$42load_global.0']
    $54load_attr.3 = getattr(value=a, attr=_data) ['$54load_attr.3', 'a']
    $76call.5 = call $42load_global.0($54load_attr.3, i, func=$42load_global.0, args=[Var($54load_attr.3, unicode.py:293), Var(i, unicode.py:290)], kws=(), vararg=None, varkwarg=None, target=None) ['$42load_global.0', '$54load_attr.3', '$76call.5', 'i']
    $84return_value.6 = cast(value=$76call.5) ['$76call.5', '$84return_value.6']
    return $84return_value.6                 ['$84return_value.6']
label 86:
    $88load_attr.1 = getattr(value=a, attr=_kind) ['$88load_attr.1', 'a']
    $108load_global.2 = global(PY_UNICODE_2BYTE_KIND: 2) ['$108load_global.2']
    $118compare_op.3 = $88load_attr.1 == $108load_global.2 ['$108load_global.2', '$118compare_op.3', '$88load_attr.1']
    bool122 = global(bool: <class 'bool'>)   ['bool122']
    $122pred = call bool122($118compare_op.3, func=bool122, args=(Var($118compare_op.3, unicode.py:294),), kws=(), vararg=None, varkwarg=None, target=None) ['$118compare_op.3', '$122pred', 'bool122']
    branch $122pred, 124, 168                ['$122pred']
label 124:
    $124load_global.0 = global(deref_uint16: <intrinsic deref_uint16>) ['$124load_global.0']
    $136load_attr.3 = getattr(value=a, attr=_data) ['$136load_attr.3', 'a']
    $158call.5 = call $124load_global.0($136load_attr.3, i, func=$124load_global.0, args=[Var($136load_attr.3, unicode.py:295), Var(i, unicode.py:290)], kws=(), vararg=None, varkwarg=None, target=None) ['$124load_global.0', '$136load_attr.3', '$158call.5', 'i']
    $166return_value.6 = cast(value=$158call.5) ['$158call.5', '$166return_value.6']
    return $166return_value.6                ['$166return_value.6']
label 168:
    $170load_attr.1 = getattr(value=a, attr=_kind) ['$170load_attr.1', 'a']
    $190load_global.2 = global(PY_UNICODE_4BYTE_KIND: 4) ['$190load_global.2']
    $200compare_op.3 = $170load_attr.1 == $190load_global.2 ['$170load_attr.1', '$190load_global.2', '$200compare_op.3']
    bool204 = global(bool: <class 'bool'>)   ['bool204']
    $204pred = call bool204($200compare_op.3, func=bool204, args=(Var($200compare_op.3, unicode.py:296),), kws=(), vararg=None, varkwarg=None, target=None) ['$200compare_op.3', '$204pred', 'bool204']
    branch $204pred, 206, 250                ['$204pred']
label 206:
    $206load_global.0 = global(deref_uint32: <intrinsic deref_uint32>) ['$206load_global.0']
    $218load_attr.3 = getattr(value=a, attr=_data) ['$218load_attr.3', 'a']
    $240call.5 = call $206load_global.0($218load_attr.3, i, func=$206load_global.0, args=[Var($218load_attr.3, unicode.py:297), Var(i, unicode.py:290)], kws=(), vararg=None, varkwarg=None, target=None) ['$206load_global.0', '$218load_attr.3', '$240call.5', 'i']
    $248return_value.6 = cast(value=$240call.5) ['$240call.5', '$248return_value.6']
    return $248return_value.6                ['$248return_value.6']
label 250:
    $const250.0 = const(int, 0)              ['$const250.0']
    $250return_const.1 = cast(value=$const250.0) ['$250return_const.1', '$const250.0']
    return $250return_const.1                ['$250return_const.1']

2025-05-12 23:19:05,916 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:05,916 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADFB00>
2025-05-12 23:19:05,917 - numba.core.ssa - DEBUG - on stmt: a = arg(0, name=a)
2025-05-12 23:19:05,917 - numba.core.ssa - DEBUG - on stmt: i = arg(1, name=i)
2025-05-12 23:19:05,917 - numba.core.ssa - DEBUG - on stmt: $6load_attr.1 = getattr(value=a, attr=_kind)
2025-05-12 23:19:05,918 - numba.core.ssa - DEBUG - on stmt: $26load_global.2 = global(PY_UNICODE_1BYTE_KIND: 1)
2025-05-12 23:19:05,918 - numba.core.ssa - DEBUG - on stmt: $36compare_op.3 = $6load_attr.1 == $26load_global.2
2025-05-12 23:19:05,918 - numba.core.ssa - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,919 - numba.core.ssa - DEBUG - on stmt: $40pred = call bool40($36compare_op.3, func=bool40, args=(Var($36compare_op.3, unicode.py:292),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,919 - numba.core.ssa - DEBUG - on stmt: branch $40pred, 42, 86
2025-05-12 23:19:05,919 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 42
2025-05-12 23:19:05,919 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADFB00>
2025-05-12 23:19:05,919 - numba.core.ssa - DEBUG - on stmt: $42load_global.0 = global(deref_uint8: <intrinsic deref_uint8>)
2025-05-12 23:19:05,919 - numba.core.ssa - DEBUG - on stmt: $54load_attr.3 = getattr(value=a, attr=_data)
2025-05-12 23:19:05,921 - numba.core.ssa - DEBUG - on stmt: $76call.5 = call $42load_global.0($54load_attr.3, i, func=$42load_global.0, args=[Var($54load_attr.3, unicode.py:293), Var(i, unicode.py:290)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,921 - numba.core.ssa - DEBUG - on stmt: $84return_value.6 = cast(value=$76call.5)
2025-05-12 23:19:05,921 - numba.core.ssa - DEBUG - on stmt: return $84return_value.6
2025-05-12 23:19:05,921 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 86
2025-05-12 23:19:05,921 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADFB00>
2025-05-12 23:19:05,922 - numba.core.ssa - DEBUG - on stmt: $88load_attr.1 = getattr(value=a, attr=_kind)
2025-05-12 23:19:05,922 - numba.core.ssa - DEBUG - on stmt: $108load_global.2 = global(PY_UNICODE_2BYTE_KIND: 2)
2025-05-12 23:19:05,922 - numba.core.ssa - DEBUG - on stmt: $118compare_op.3 = $88load_attr.1 == $108load_global.2
2025-05-12 23:19:05,922 - numba.core.ssa - DEBUG - on stmt: bool122 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,922 - numba.core.ssa - DEBUG - on stmt: $122pred = call bool122($118compare_op.3, func=bool122, args=(Var($118compare_op.3, unicode.py:294),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,922 - numba.core.ssa - DEBUG - on stmt: branch $122pred, 124, 168
2025-05-12 23:19:05,923 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 124
2025-05-12 23:19:05,923 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADFB00>
2025-05-12 23:19:05,923 - numba.core.ssa - DEBUG - on stmt: $124load_global.0 = global(deref_uint16: <intrinsic deref_uint16>)
2025-05-12 23:19:05,923 - numba.core.ssa - DEBUG - on stmt: $136load_attr.3 = getattr(value=a, attr=_data)
2025-05-12 23:19:05,924 - numba.core.ssa - DEBUG - on stmt: $158call.5 = call $124load_global.0($136load_attr.3, i, func=$124load_global.0, args=[Var($136load_attr.3, unicode.py:295), Var(i, unicode.py:290)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,925 - numba.core.ssa - DEBUG - on stmt: $166return_value.6 = cast(value=$158call.5)
2025-05-12 23:19:05,925 - numba.core.ssa - DEBUG - on stmt: return $166return_value.6
2025-05-12 23:19:05,925 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 168
2025-05-12 23:19:05,926 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADFB00>
2025-05-12 23:19:05,927 - numba.core.ssa - DEBUG - on stmt: $170load_attr.1 = getattr(value=a, attr=_kind)
2025-05-12 23:19:05,927 - numba.core.ssa - DEBUG - on stmt: $190load_global.2 = global(PY_UNICODE_4BYTE_KIND: 4)
2025-05-12 23:19:05,927 - numba.core.ssa - DEBUG - on stmt: $200compare_op.3 = $170load_attr.1 == $190load_global.2
2025-05-12 23:19:05,928 - numba.core.ssa - DEBUG - on stmt: bool204 = global(bool: <class 'bool'>)
2025-05-12 23:19:05,928 - numba.core.ssa - DEBUG - on stmt: $204pred = call bool204($200compare_op.3, func=bool204, args=(Var($200compare_op.3, unicode.py:296),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,928 - numba.core.ssa - DEBUG - on stmt: branch $204pred, 206, 250
2025-05-12 23:19:05,928 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 206
2025-05-12 23:19:05,928 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADFB00>
2025-05-12 23:19:05,928 - numba.core.ssa - DEBUG - on stmt: $206load_global.0 = global(deref_uint32: <intrinsic deref_uint32>)
2025-05-12 23:19:05,929 - numba.core.ssa - DEBUG - on stmt: $218load_attr.3 = getattr(value=a, attr=_data)
2025-05-12 23:19:05,929 - numba.core.ssa - DEBUG - on stmt: $240call.5 = call $206load_global.0($218load_attr.3, i, func=$206load_global.0, args=[Var($218load_attr.3, unicode.py:297), Var(i, unicode.py:290)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:05,929 - numba.core.ssa - DEBUG - on stmt: $248return_value.6 = cast(value=$240call.5)
2025-05-12 23:19:05,929 - numba.core.ssa - DEBUG - on stmt: return $248return_value.6
2025-05-12 23:19:05,930 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 250
2025-05-12 23:19:05,930 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADFB00>
2025-05-12 23:19:05,930 - numba.core.ssa - DEBUG - on stmt: $const250.0 = const(int, 0)
2025-05-12 23:19:05,930 - numba.core.ssa - DEBUG - on stmt: $250return_const.1 = cast(value=$const250.0)
2025-05-12 23:19:05,930 - numba.core.ssa - DEBUG - on stmt: return $250return_const.1
2025-05-12 23:19:05,931 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$108load_global.2': [(<numba.core.ir.Assign object at 0x000001E8A8AE51C0>,
                                    86)],
             '$118compare_op.3': [(<numba.core.ir.Assign object at 0x000001E8A8AE5340>,
                                   86)],
             '$122pred': [(<numba.core.ir.Assign object at 0x000001E8A8AE55B0>,
                           86)],
             '$124load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8AE5790>,
                                    124)],
             '$136load_attr.3': [(<numba.core.ir.Assign object at 0x000001E8A8AE59D0>,
                                  124)],
             '$158call.5': [(<numba.core.ir.Assign object at 0x000001E8A8AE5C70>,
                             124)],
             '$166return_value.6': [(<numba.core.ir.Assign object at 0x000001E8A8AE5D90>,
                                     124)],
             '$170load_attr.1': [(<numba.core.ir.Assign object at 0x000001E8A8AE6000>,
                                  168)],
             '$190load_global.2': [(<numba.core.ir.Assign object at 0x000001E8A8AE6150>,
                                    168)],
             '$200compare_op.3': [(<numba.core.ir.Assign object at 0x000001E8A8AE62D0>,
                                   168)],
             '$204pred': [(<numba.core.ir.Assign object at 0x000001E8A8AE6540>,
                           168)],
             '$206load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8AE6720>,
                                    206)],
             '$218load_attr.3': [(<numba.core.ir.Assign object at 0x000001E8A8AE6960>,
                                  206)],
             '$240call.5': [(<numba.core.ir.Assign object at 0x000001E8A8AE6C00>,
                             206)],
             '$248return_value.6': [(<numba.core.ir.Assign object at 0x000001E8A8AE6D20>,
                                     206)],
             '$250return_const.1': [(<numba.core.ir.Assign object at 0x000001E8A8AE6F90>,
                                     250)],
             '$26load_global.2': [(<numba.core.ir.Assign object at 0x000001E8A8AE4080>,
                                   0)],
             '$36compare_op.3': [(<numba.core.ir.Assign object at 0x000001E8A8AE4380>,
                                  0)],
             '$40pred': [(<numba.core.ir.Assign object at 0x000001E8A8AE4620>,
                          0)],
             '$42load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8AE4800>,
                                   42)],
             '$54load_attr.3': [(<numba.core.ir.Assign object at 0x000001E8A8AE4A40>,
                                 42)],
             '$6load_attr.1': [(<numba.core.ir.Assign object at 0x000001E8A8AE41D0>,
                                0)],
             '$76call.5': [(<numba.core.ir.Assign object at 0x000001E8A8AE4CE0>,
                            42)],
             '$84return_value.6': [(<numba.core.ir.Assign object at 0x000001E8A8AE4E00>,
                                    42)],
             '$88load_attr.1': [(<numba.core.ir.Assign object at 0x000001E8A8AE5070>,
                                 86)],
             '$const250.0': [(<numba.core.ir.Assign object at 0x000001E8A8AE6E70>,
                              250)],
             'a': [(<numba.core.ir.Assign object at 0x000001E8A8ADE5D0>, 0)],
             'bool122': [(<numba.core.ir.Assign object at 0x000001E8A8AE5490>,
                          86)],
             'bool204': [(<numba.core.ir.Assign object at 0x000001E8A8AE6420>,
                          168)],
             'bool40': [(<numba.core.ir.Assign object at 0x000001E8A8AE44D0>,
                         0)],
             'i': [(<numba.core.ir.Assign object at 0x000001E8A8ADF860>, 0)]})
2025-05-12 23:19:05,933 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8ACDE50>
2025-05-12 23:19:06,074 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=336)
           2	RESUME(arg=0, lineno=336)
           4	LOAD_FAST(arg=0, lineno=344)
           6	LOAD_ATTR(arg=0, lineno=344)
          26	LOAD_GLOBAL(arg=2, lineno=344)
          36	COMPARE_OP(arg=40, lineno=344)
          40	POP_JUMP_IF_FALSE(arg=24, lineno=344)
          42	LOAD_GLOBAL(arg=5, lineno=345)
          52	LOAD_FAST(arg=0, lineno=345)
          54	LOAD_ATTR(arg=6, lineno=345)
          74	LOAD_FAST(arg=1, lineno=345)
          76	LOAD_FAST(arg=2, lineno=345)
          78	CALL(arg=3, lineno=345)
          86	POP_TOP(arg=None, lineno=345)
          88	RETURN_CONST(arg=0, lineno=345)
>         90	LOAD_FAST(arg=0, lineno=346)
          92	LOAD_ATTR(arg=0, lineno=346)
         112	LOAD_GLOBAL(arg=8, lineno=346)
         122	COMPARE_OP(arg=40, lineno=346)
         126	POP_JUMP_IF_FALSE(arg=24, lineno=346)
         128	LOAD_GLOBAL(arg=11, lineno=347)
         138	LOAD_FAST(arg=0, lineno=347)
         140	LOAD_ATTR(arg=6, lineno=347)
         160	LOAD_FAST(arg=1, lineno=347)
         162	LOAD_FAST(arg=2, lineno=347)
         164	CALL(arg=3, lineno=347)
         172	POP_TOP(arg=None, lineno=347)
         174	RETURN_CONST(arg=0, lineno=347)
>        176	LOAD_FAST(arg=0, lineno=348)
         178	LOAD_ATTR(arg=0, lineno=348)
         198	LOAD_GLOBAL(arg=12, lineno=348)
         208	COMPARE_OP(arg=40, lineno=348)
         212	POP_JUMP_IF_FALSE(arg=24, lineno=348)
         214	LOAD_GLOBAL(arg=15, lineno=349)
         224	LOAD_FAST(arg=0, lineno=349)
         226	LOAD_ATTR(arg=6, lineno=349)
         246	LOAD_FAST(arg=1, lineno=349)
         248	LOAD_FAST(arg=2, lineno=349)
         250	CALL(arg=3, lineno=349)
         258	POP_TOP(arg=None, lineno=349)
         260	RETURN_CONST(arg=0, lineno=349)
>        262	LOAD_GLOBAL(arg=17, lineno=351)
         272	LOAD_CONST(arg=1, lineno=352)
         274	CALL(arg=1, lineno=351)
         282	RAISE_VARARGS(arg=1, lineno=351)
2025-05-12 23:19:06,074 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:06,074 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,075 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:06,075 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=336)
2025-05-12 23:19:06,075 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,075 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=336)
2025-05-12 23:19:06,076 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,076 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=344)
2025-05-12 23:19:06,076 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,076 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=344)
2025-05-12 23:19:06,076 - numba.core.byteflow - DEBUG - stack ['$a4.0']
2025-05-12 23:19:06,077 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=LOAD_GLOBAL(arg=2, lineno=344)
2025-05-12 23:19:06,077 - numba.core.byteflow - DEBUG - stack ['$6load_attr.1']
2025-05-12 23:19:06,077 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=COMPARE_OP(arg=40, lineno=344)
2025-05-12 23:19:06,077 - numba.core.byteflow - DEBUG - stack ['$6load_attr.1', '$26load_global.2']
2025-05-12 23:19:06,077 - numba.core.byteflow - DEBUG - dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=24, lineno=344)
2025-05-12 23:19:06,078 - numba.core.byteflow - DEBUG - stack ['$36compare_op.3']
2025-05-12 23:19:06,078 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=90, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:06,078 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
2025-05-12 23:19:06,078 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,078 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=42 nstack_initial=0)
2025-05-12 23:19:06,079 - numba.core.byteflow - DEBUG - dispatch pc=42, inst=LOAD_GLOBAL(arg=5, lineno=345)
2025-05-12 23:19:06,079 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,079 - numba.core.byteflow - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=345)
2025-05-12 23:19:06,079 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0']
2025-05-12 23:19:06,079 - numba.core.byteflow - DEBUG - dispatch pc=54, inst=LOAD_ATTR(arg=6, lineno=345)
2025-05-12 23:19:06,079 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0', '$a52.2']
2025-05-12 23:19:06,079 - numba.core.byteflow - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=345)
2025-05-12 23:19:06,082 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0', '$54load_attr.3']
2025-05-12 23:19:06,082 - numba.core.byteflow - DEBUG - dispatch pc=76, inst=LOAD_FAST(arg=2, lineno=345)
2025-05-12 23:19:06,082 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0', '$54load_attr.3', '$i74.4']
2025-05-12 23:19:06,082 - numba.core.byteflow - DEBUG - dispatch pc=78, inst=CALL(arg=3, lineno=345)
2025-05-12 23:19:06,083 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0', '$54load_attr.3', '$i74.4', '$ch76.5']
2025-05-12 23:19:06,083 - numba.core.byteflow - DEBUG - dispatch pc=86, inst=POP_TOP(arg=None, lineno=345)
2025-05-12 23:19:06,083 - numba.core.byteflow - DEBUG - stack ['$78call.6']
2025-05-12 23:19:06,084 - numba.core.byteflow - DEBUG - dispatch pc=88, inst=RETURN_CONST(arg=0, lineno=345)
2025-05-12 23:19:06,084 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,084 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:06,085 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0)])
2025-05-12 23:19:06,085 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,085 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-05-12 23:19:06,085 - numba.core.byteflow - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=0, lineno=346)
2025-05-12 23:19:06,086 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,086 - numba.core.byteflow - DEBUG - dispatch pc=92, inst=LOAD_ATTR(arg=0, lineno=346)
2025-05-12 23:19:06,087 - numba.core.byteflow - DEBUG - stack ['$a90.0']
2025-05-12 23:19:06,087 - numba.core.byteflow - DEBUG - dispatch pc=112, inst=LOAD_GLOBAL(arg=8, lineno=346)
2025-05-12 23:19:06,087 - numba.core.byteflow - DEBUG - stack ['$92load_attr.1']
2025-05-12 23:19:06,088 - numba.core.byteflow - DEBUG - dispatch pc=122, inst=COMPARE_OP(arg=40, lineno=346)
2025-05-12 23:19:06,088 - numba.core.byteflow - DEBUG - stack ['$92load_attr.1', '$112load_global.2']
2025-05-12 23:19:06,088 - numba.core.byteflow - DEBUG - dispatch pc=126, inst=POP_JUMP_IF_FALSE(arg=24, lineno=346)
2025-05-12 23:19:06,089 - numba.core.byteflow - DEBUG - stack ['$122compare_op.3']
2025-05-12 23:19:06,089 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0), Edge(pc=176, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:06,090 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=176 nstack_initial=0)])
2025-05-12 23:19:06,090 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,090 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=128 nstack_initial=0)
2025-05-12 23:19:06,090 - numba.core.byteflow - DEBUG - dispatch pc=128, inst=LOAD_GLOBAL(arg=11, lineno=347)
2025-05-12 23:19:06,090 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,091 - numba.core.byteflow - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=347)
2025-05-12 23:19:06,091 - numba.core.byteflow - DEBUG - stack ['$null$128.1', '$128load_global.0']
2025-05-12 23:19:06,092 - numba.core.byteflow - DEBUG - dispatch pc=140, inst=LOAD_ATTR(arg=6, lineno=347)
2025-05-12 23:19:06,092 - numba.core.byteflow - DEBUG - stack ['$null$128.1', '$128load_global.0', '$a138.2']
2025-05-12 23:19:06,093 - numba.core.byteflow - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=1, lineno=347)
2025-05-12 23:19:06,094 - numba.core.byteflow - DEBUG - stack ['$null$128.1', '$128load_global.0', '$140load_attr.3']
2025-05-12 23:19:06,094 - numba.core.byteflow - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=2, lineno=347)
2025-05-12 23:19:06,094 - numba.core.byteflow - DEBUG - stack ['$null$128.1', '$128load_global.0', '$140load_attr.3', '$i160.4']
2025-05-12 23:19:06,095 - numba.core.byteflow - DEBUG - dispatch pc=164, inst=CALL(arg=3, lineno=347)
2025-05-12 23:19:06,095 - numba.core.byteflow - DEBUG - stack ['$null$128.1', '$128load_global.0', '$140load_attr.3', '$i160.4', '$ch162.5']
2025-05-12 23:19:06,095 - numba.core.byteflow - DEBUG - dispatch pc=172, inst=POP_TOP(arg=None, lineno=347)
2025-05-12 23:19:06,096 - numba.core.byteflow - DEBUG - stack ['$164call.6']
2025-05-12 23:19:06,096 - numba.core.byteflow - DEBUG - dispatch pc=174, inst=RETURN_CONST(arg=0, lineno=347)
2025-05-12 23:19:06,097 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,097 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:06,098 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=176 nstack_initial=0)])
2025-05-12 23:19:06,098 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,098 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=176 nstack_initial=0)
2025-05-12 23:19:06,098 - numba.core.byteflow - DEBUG - dispatch pc=176, inst=LOAD_FAST(arg=0, lineno=348)
2025-05-12 23:19:06,098 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,098 - numba.core.byteflow - DEBUG - dispatch pc=178, inst=LOAD_ATTR(arg=0, lineno=348)
2025-05-12 23:19:06,098 - numba.core.byteflow - DEBUG - stack ['$a176.0']
2025-05-12 23:19:06,098 - numba.core.byteflow - DEBUG - dispatch pc=198, inst=LOAD_GLOBAL(arg=12, lineno=348)
2025-05-12 23:19:06,099 - numba.core.byteflow - DEBUG - stack ['$178load_attr.1']
2025-05-12 23:19:06,099 - numba.core.byteflow - DEBUG - dispatch pc=208, inst=COMPARE_OP(arg=40, lineno=348)
2025-05-12 23:19:06,099 - numba.core.byteflow - DEBUG - stack ['$178load_attr.1', '$198load_global.2']
2025-05-12 23:19:06,099 - numba.core.byteflow - DEBUG - dispatch pc=212, inst=POP_JUMP_IF_FALSE(arg=24, lineno=348)
2025-05-12 23:19:06,099 - numba.core.byteflow - DEBUG - stack ['$208compare_op.3']
2025-05-12 23:19:06,100 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=214, stack=(), blockstack=(), npush=0), Edge(pc=262, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:06,100 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=214 nstack_initial=0), State(pc_initial=262 nstack_initial=0)])
2025-05-12 23:19:06,103 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,104 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=214 nstack_initial=0)
2025-05-12 23:19:06,105 - numba.core.byteflow - DEBUG - dispatch pc=214, inst=LOAD_GLOBAL(arg=15, lineno=349)
2025-05-12 23:19:06,105 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,106 - numba.core.byteflow - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=0, lineno=349)
2025-05-12 23:19:06,106 - numba.core.byteflow - DEBUG - stack ['$null$214.1', '$214load_global.0']
2025-05-12 23:19:06,106 - numba.core.byteflow - DEBUG - dispatch pc=226, inst=LOAD_ATTR(arg=6, lineno=349)
2025-05-12 23:19:06,106 - numba.core.byteflow - DEBUG - stack ['$null$214.1', '$214load_global.0', '$a224.2']
2025-05-12 23:19:06,106 - numba.core.byteflow - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=349)
2025-05-12 23:19:06,107 - numba.core.byteflow - DEBUG - stack ['$null$214.1', '$214load_global.0', '$226load_attr.3']
2025-05-12 23:19:06,107 - numba.core.byteflow - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=2, lineno=349)
2025-05-12 23:19:06,107 - numba.core.byteflow - DEBUG - stack ['$null$214.1', '$214load_global.0', '$226load_attr.3', '$i246.4']
2025-05-12 23:19:06,107 - numba.core.byteflow - DEBUG - dispatch pc=250, inst=CALL(arg=3, lineno=349)
2025-05-12 23:19:06,107 - numba.core.byteflow - DEBUG - stack ['$null$214.1', '$214load_global.0', '$226load_attr.3', '$i246.4', '$ch248.5']
2025-05-12 23:19:06,108 - numba.core.byteflow - DEBUG - dispatch pc=258, inst=POP_TOP(arg=None, lineno=349)
2025-05-12 23:19:06,108 - numba.core.byteflow - DEBUG - stack ['$250call.6']
2025-05-12 23:19:06,108 - numba.core.byteflow - DEBUG - dispatch pc=260, inst=RETURN_CONST(arg=0, lineno=349)
2025-05-12 23:19:06,108 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,109 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:06,111 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=262 nstack_initial=0)])
2025-05-12 23:19:06,112 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,112 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=262 nstack_initial=0)
2025-05-12 23:19:06,112 - numba.core.byteflow - DEBUG - dispatch pc=262, inst=LOAD_GLOBAL(arg=17, lineno=351)
2025-05-12 23:19:06,113 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,113 - numba.core.byteflow - DEBUG - dispatch pc=272, inst=LOAD_CONST(arg=1, lineno=352)
2025-05-12 23:19:06,113 - numba.core.byteflow - DEBUG - stack ['$null$262.1', '$262load_global.0']
2025-05-12 23:19:06,113 - numba.core.byteflow - DEBUG - dispatch pc=274, inst=CALL(arg=1, lineno=351)
2025-05-12 23:19:06,114 - numba.core.byteflow - DEBUG - stack ['$null$262.1', '$262load_global.0', '$const272.2.1']
2025-05-12 23:19:06,114 - numba.core.byteflow - DEBUG - dispatch pc=282, inst=RAISE_VARARGS(arg=1, lineno=351)
2025-05-12 23:19:06,114 - numba.core.byteflow - DEBUG - stack ['$274call.3']
2025-05-12 23:19:06,114 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:06,115 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:06,115 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=90 nstack_initial=0): set(),
             State(pc_initial=128 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=214 nstack_initial=0): set(),
             State(pc_initial=262 nstack_initial=0): set()})
2025-05-12 23:19:06,116 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:06,116 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,116 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,117 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:06,118 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:06,118 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:06,118 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$a4.0'}), (6, {'item': '$a4.0', 'res': '$6load_attr.1'}), (26, {'idx': 1, 'res': '$26load_global.2'}), (36, {'lhs': '$6load_attr.1', 'rhs': '$26load_global.2', 'res': '$36compare_op.3'}), (40, {'pred': '$36compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 90: ()})
2025-05-12 23:19:06,119 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'idx': 2, 'res': '$42load_global.0'}), (52, {'res': '$a52.2'}), (54, {'item': '$a52.2', 'res': '$54load_attr.3'}), (74, {'res': '$i74.4'}), (76, {'res': '$ch76.5'}), (78, {'func': '$42load_global.0', 'args': ['$54load_attr.3', '$i74.4', '$ch76.5'], 'kw_names': None, 'res': '$78call.6'}), (88, {'retval': '$const88.7', 'castval': '$88return_const.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:06,119 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$a90.0'}), (92, {'item': '$a90.0', 'res': '$92load_attr.1'}), (112, {'idx': 4, 'res': '$112load_global.2'}), (122, {'lhs': '$92load_attr.1', 'rhs': '$112load_global.2', 'res': '$122compare_op.3'}), (126, {'pred': '$122compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: (), 176: ()})
2025-05-12 23:19:06,120 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=128 nstack_initial=0):
AdaptBlockInfo(insts=((128, {'idx': 5, 'res': '$128load_global.0'}), (138, {'res': '$a138.2'}), (140, {'item': '$a138.2', 'res': '$140load_attr.3'}), (160, {'res': '$i160.4'}), (162, {'res': '$ch162.5'}), (164, {'func': '$128load_global.0', 'args': ['$140load_attr.3', '$i160.4', '$ch162.5'], 'kw_names': None, 'res': '$164call.6'}), (174, {'retval': '$const174.7', 'castval': '$174return_const.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:06,120 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$a176.0'}), (178, {'item': '$a176.0', 'res': '$178load_attr.1'}), (198, {'idx': 6, 'res': '$198load_global.2'}), (208, {'lhs': '$178load_attr.1', 'rhs': '$198load_global.2', 'res': '$208compare_op.3'}), (212, {'pred': '$208compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={214: (), 262: ()})
2025-05-12 23:19:06,121 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=214 nstack_initial=0):
AdaptBlockInfo(insts=((214, {'idx': 7, 'res': '$214load_global.0'}), (224, {'res': '$a224.2'}), (226, {'item': '$a224.2', 'res': '$226load_attr.3'}), (246, {'res': '$i246.4'}), (248, {'res': '$ch248.5'}), (250, {'func': '$214load_global.0', 'args': ['$226load_attr.3', '$i246.4', '$ch248.5'], 'kw_names': None, 'res': '$250call.6'}), (260, {'retval': '$const260.7', 'castval': '$260return_const.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:06,121 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=262 nstack_initial=0):
AdaptBlockInfo(insts=((262, {'idx': 8, 'res': '$262load_global.0'}), (272, {'res': '$const272.2.1'}), (274, {'func': '$262load_global.0', 'args': ['$const272.2.1'], 'kw_names': None, 'res': '$274call.3'}), (282, {'exc': '$274call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:06,125 - numba.core.interpreter - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    i = arg(1, name=i)                       ['i']
    ch = arg(2, name=ch)                     ['ch']
    $6load_attr.1 = getattr(value=a, attr=_kind) ['$6load_attr.1', 'a']
    $26load_global.2 = global(PY_UNICODE_1BYTE_KIND: 1) ['$26load_global.2']
    $36compare_op.3 = $6load_attr.1 == $26load_global.2 ['$26load_global.2', '$36compare_op.3', '$6load_attr.1']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($36compare_op.3, func=bool40, args=(Var($36compare_op.3, unicode.py:344),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.3', '$40pred', 'bool40']
    branch $40pred, 42, 90                   ['$40pred']
label 42:
    $42load_global.0 = global(set_uint8: <intrinsic set_uint8>) ['$42load_global.0']
    $54load_attr.3 = getattr(value=a, attr=_data) ['$54load_attr.3', 'a']
    $78call.6 = call $42load_global.0($54load_attr.3, i, ch, func=$42load_global.0, args=[Var($54load_attr.3, unicode.py:345), Var(i, unicode.py:336), Var(ch, unicode.py:336)], kws=(), vararg=None, varkwarg=None, target=None) ['$42load_global.0', '$54load_attr.3', '$78call.6', 'ch', 'i']
    $const88.7 = const(NoneType, None)       ['$const88.7']
    $88return_const.8 = cast(value=$const88.7) ['$88return_const.8', '$const88.7']
    return $88return_const.8                 ['$88return_const.8']
label 90:
    $92load_attr.1 = getattr(value=a, attr=_kind) ['$92load_attr.1', 'a']
    $112load_global.2 = global(PY_UNICODE_2BYTE_KIND: 2) ['$112load_global.2']
    $122compare_op.3 = $92load_attr.1 == $112load_global.2 ['$112load_global.2', '$122compare_op.3', '$92load_attr.1']
    bool126 = global(bool: <class 'bool'>)   ['bool126']
    $126pred = call bool126($122compare_op.3, func=bool126, args=(Var($122compare_op.3, unicode.py:346),), kws=(), vararg=None, varkwarg=None, target=None) ['$122compare_op.3', '$126pred', 'bool126']
    branch $126pred, 128, 176                ['$126pred']
label 128:
    $128load_global.0 = global(set_uint16: <intrinsic set_uint16>) ['$128load_global.0']
    $140load_attr.3 = getattr(value=a, attr=_data) ['$140load_attr.3', 'a']
    $164call.6 = call $128load_global.0($140load_attr.3, i, ch, func=$128load_global.0, args=[Var($140load_attr.3, unicode.py:347), Var(i, unicode.py:336), Var(ch, unicode.py:336)], kws=(), vararg=None, varkwarg=None, target=None) ['$128load_global.0', '$140load_attr.3', '$164call.6', 'ch', 'i']
    $const174.7 = const(NoneType, None)      ['$const174.7']
    $174return_const.8 = cast(value=$const174.7) ['$174return_const.8', '$const174.7']
    return $174return_const.8                ['$174return_const.8']
label 176:
    $178load_attr.1 = getattr(value=a, attr=_kind) ['$178load_attr.1', 'a']
    $198load_global.2 = global(PY_UNICODE_4BYTE_KIND: 4) ['$198load_global.2']
    $208compare_op.3 = $178load_attr.1 == $198load_global.2 ['$178load_attr.1', '$198load_global.2', '$208compare_op.3']
    bool212 = global(bool: <class 'bool'>)   ['bool212']
    $212pred = call bool212($208compare_op.3, func=bool212, args=(Var($208compare_op.3, unicode.py:348),), kws=(), vararg=None, varkwarg=None, target=None) ['$208compare_op.3', '$212pred', 'bool212']
    branch $212pred, 214, 262                ['$212pred']
label 214:
    $214load_global.0 = global(set_uint32: <intrinsic set_uint32>) ['$214load_global.0']
    $226load_attr.3 = getattr(value=a, attr=_data) ['$226load_attr.3', 'a']
    $250call.6 = call $214load_global.0($226load_attr.3, i, ch, func=$214load_global.0, args=[Var($226load_attr.3, unicode.py:349), Var(i, unicode.py:336), Var(ch, unicode.py:336)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_global.0', '$226load_attr.3', '$250call.6', 'ch', 'i']
    $const260.7 = const(NoneType, None)      ['$const260.7']
    $260return_const.8 = cast(value=$const260.7) ['$260return_const.8', '$const260.7']
    return $260return_const.8                ['$260return_const.8']
label 262:
    $262load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$262load_global.0']
    $const272.2.1 = const(str, Unexpected unicode representation in _set_code_point) ['$const272.2.1']
    $274call.3 = call $262load_global.0($const272.2.1, func=$262load_global.0, args=[Var($const272.2.1, unicode.py:352)], kws=(), vararg=None, varkwarg=None, target=None) ['$262load_global.0', '$274call.3', '$const272.2.1']
    raise $274call.3                         ['$274call.3']

2025-05-12 23:19:06,139 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:06,139 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADE7B0>
2025-05-12 23:19:06,140 - numba.core.ssa - DEBUG - on stmt: a = arg(0, name=a)
2025-05-12 23:19:06,141 - numba.core.ssa - DEBUG - on stmt: i = arg(1, name=i)
2025-05-12 23:19:06,141 - numba.core.ssa - DEBUG - on stmt: ch = arg(2, name=ch)
2025-05-12 23:19:06,142 - numba.core.ssa - DEBUG - on stmt: $6load_attr.1 = getattr(value=a, attr=_kind)
2025-05-12 23:19:06,143 - numba.core.ssa - DEBUG - on stmt: $26load_global.2 = global(PY_UNICODE_1BYTE_KIND: 1)
2025-05-12 23:19:06,144 - numba.core.ssa - DEBUG - on stmt: $36compare_op.3 = $6load_attr.1 == $26load_global.2
2025-05-12 23:19:06,144 - numba.core.ssa - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-05-12 23:19:06,145 - numba.core.ssa - DEBUG - on stmt: $40pred = call bool40($36compare_op.3, func=bool40, args=(Var($36compare_op.3, unicode.py:344),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,145 - numba.core.ssa - DEBUG - on stmt: branch $40pred, 42, 90
2025-05-12 23:19:06,146 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 42
2025-05-12 23:19:06,147 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADE7B0>
2025-05-12 23:19:06,147 - numba.core.ssa - DEBUG - on stmt: $42load_global.0 = global(set_uint8: <intrinsic set_uint8>)
2025-05-12 23:19:06,147 - numba.core.ssa - DEBUG - on stmt: $54load_attr.3 = getattr(value=a, attr=_data)
2025-05-12 23:19:06,148 - numba.core.ssa - DEBUG - on stmt: $78call.6 = call $42load_global.0($54load_attr.3, i, ch, func=$42load_global.0, args=[Var($54load_attr.3, unicode.py:345), Var(i, unicode.py:336), Var(ch, unicode.py:336)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,148 - numba.core.ssa - DEBUG - on stmt: $const88.7 = const(NoneType, None)
2025-05-12 23:19:06,148 - numba.core.ssa - DEBUG - on stmt: $88return_const.8 = cast(value=$const88.7)
2025-05-12 23:19:06,149 - numba.core.ssa - DEBUG - on stmt: return $88return_const.8
2025-05-12 23:19:06,149 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 90
2025-05-12 23:19:06,149 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADE7B0>
2025-05-12 23:19:06,149 - numba.core.ssa - DEBUG - on stmt: $92load_attr.1 = getattr(value=a, attr=_kind)
2025-05-12 23:19:06,151 - numba.core.ssa - DEBUG - on stmt: $112load_global.2 = global(PY_UNICODE_2BYTE_KIND: 2)
2025-05-12 23:19:06,152 - numba.core.ssa - DEBUG - on stmt: $122compare_op.3 = $92load_attr.1 == $112load_global.2
2025-05-12 23:19:06,153 - numba.core.ssa - DEBUG - on stmt: bool126 = global(bool: <class 'bool'>)
2025-05-12 23:19:06,154 - numba.core.ssa - DEBUG - on stmt: $126pred = call bool126($122compare_op.3, func=bool126, args=(Var($122compare_op.3, unicode.py:346),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,154 - numba.core.ssa - DEBUG - on stmt: branch $126pred, 128, 176
2025-05-12 23:19:06,154 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 128
2025-05-12 23:19:06,155 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADE7B0>
2025-05-12 23:19:06,155 - numba.core.ssa - DEBUG - on stmt: $128load_global.0 = global(set_uint16: <intrinsic set_uint16>)
2025-05-12 23:19:06,155 - numba.core.ssa - DEBUG - on stmt: $140load_attr.3 = getattr(value=a, attr=_data)
2025-05-12 23:19:06,156 - numba.core.ssa - DEBUG - on stmt: $164call.6 = call $128load_global.0($140load_attr.3, i, ch, func=$128load_global.0, args=[Var($140load_attr.3, unicode.py:347), Var(i, unicode.py:336), Var(ch, unicode.py:336)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,157 - numba.core.ssa - DEBUG - on stmt: $const174.7 = const(NoneType, None)
2025-05-12 23:19:06,157 - numba.core.ssa - DEBUG - on stmt: $174return_const.8 = cast(value=$const174.7)
2025-05-12 23:19:06,157 - numba.core.ssa - DEBUG - on stmt: return $174return_const.8
2025-05-12 23:19:06,158 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 176
2025-05-12 23:19:06,158 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADE7B0>
2025-05-12 23:19:06,160 - numba.core.ssa - DEBUG - on stmt: $178load_attr.1 = getattr(value=a, attr=_kind)
2025-05-12 23:19:06,161 - numba.core.ssa - DEBUG - on stmt: $198load_global.2 = global(PY_UNICODE_4BYTE_KIND: 4)
2025-05-12 23:19:06,161 - numba.core.ssa - DEBUG - on stmt: $208compare_op.3 = $178load_attr.1 == $198load_global.2
2025-05-12 23:19:06,161 - numba.core.ssa - DEBUG - on stmt: bool212 = global(bool: <class 'bool'>)
2025-05-12 23:19:06,162 - numba.core.ssa - DEBUG - on stmt: $212pred = call bool212($208compare_op.3, func=bool212, args=(Var($208compare_op.3, unicode.py:348),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,162 - numba.core.ssa - DEBUG - on stmt: branch $212pred, 214, 262
2025-05-12 23:19:06,163 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 214
2025-05-12 23:19:06,163 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADE7B0>
2025-05-12 23:19:06,163 - numba.core.ssa - DEBUG - on stmt: $214load_global.0 = global(set_uint32: <intrinsic set_uint32>)
2025-05-12 23:19:06,164 - numba.core.ssa - DEBUG - on stmt: $226load_attr.3 = getattr(value=a, attr=_data)
2025-05-12 23:19:06,164 - numba.core.ssa - DEBUG - on stmt: $250call.6 = call $214load_global.0($226load_attr.3, i, ch, func=$214load_global.0, args=[Var($226load_attr.3, unicode.py:349), Var(i, unicode.py:336), Var(ch, unicode.py:336)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,165 - numba.core.ssa - DEBUG - on stmt: $const260.7 = const(NoneType, None)
2025-05-12 23:19:06,165 - numba.core.ssa - DEBUG - on stmt: $260return_const.8 = cast(value=$const260.7)
2025-05-12 23:19:06,165 - numba.core.ssa - DEBUG - on stmt: return $260return_const.8
2025-05-12 23:19:06,165 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 262
2025-05-12 23:19:06,166 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADE7B0>
2025-05-12 23:19:06,166 - numba.core.ssa - DEBUG - on stmt: $262load_global.0 = global(AssertionError: <class 'AssertionError'>)
2025-05-12 23:19:06,166 - numba.core.ssa - DEBUG - on stmt: $const272.2.1 = const(str, Unexpected unicode representation in _set_code_point)
2025-05-12 23:19:06,166 - numba.core.ssa - DEBUG - on stmt: $274call.3 = call $262load_global.0($const272.2.1, func=$262load_global.0, args=[Var($const272.2.1, unicode.py:352)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,167 - numba.core.ssa - DEBUG - on stmt: <static> raise <class 'AssertionError'>('Unexpected unicode representation in _set_code_point')
2025-05-12 23:19:06,167 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$112load_global.2': [(<numba.core.ir.Assign object at 0x000001E8A8ACF5C0>,
                                    90)],
             '$122compare_op.3': [(<numba.core.ir.Assign object at 0x000001E8A8ACE720>,
                                   90)],
             '$126pred': [(<numba.core.ir.Assign object at 0x000001E8A8ACE510>,
                           90)],
             '$128load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8ACEC00>,
                                    128)],
             '$140load_attr.3': [(<numba.core.ir.Assign object at 0x000001E8A8ACCEC0>,
                                  128)],
             '$164call.6': [(<numba.core.ir.Assign object at 0x000001E8A8ACDBB0>,
                             128)],
             '$174return_const.8': [(<numba.core.ir.Assign object at 0x000001E8A8ACDAC0>,
                                     128)],
             '$178load_attr.1': [(<numba.core.ir.Assign object at 0x000001E8A8ACDA90>,
                                  176)],
             '$198load_global.2': [(<numba.core.ir.Assign object at 0x000001E8A8ACD490>,
                                    176)],
             '$208compare_op.3': [(<numba.core.ir.Assign object at 0x000001E8A8ACD520>,
                                   176)],
             '$212pred': [(<numba.core.ir.Assign object at 0x000001E8A8ACD070>,
                           176)],
             '$214load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8ACD8E0>,
                                    214)],
             '$226load_attr.3': [(<numba.core.ir.Assign object at 0x000001E8A8ACD340>,
                                  214)],
             '$250call.6': [(<numba.core.ir.Assign object at 0x000001E8A8ACC920>,
                             214)],
             '$260return_const.8': [(<numba.core.ir.Assign object at 0x000001E8A8ACCAA0>,
                                     214)],
             '$262load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8ACCB90>,
                                    262)],
             '$26load_global.2': [(<numba.core.ir.Assign object at 0x000001E8A8ACFDA0>,
                                   0)],
             '$274call.3': [(<numba.core.ir.Assign object at 0x000001E8A8ACC620>,
                             262)],
             '$36compare_op.3': [(<numba.core.ir.Assign object at 0x000001E8A8ACF3B0>,
                                  0)],
             '$40pred': [(<numba.core.ir.Assign object at 0x000001E8A8ACD430>,
                          0)],
             '$42load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8ACFE30>,
                                   42)],
             '$54load_attr.3': [(<numba.core.ir.Assign object at 0x000001E8A8ACF7A0>,
                                 42)],
             '$6load_attr.1': [(<numba.core.ir.Assign object at 0x000001E8A8ACFFE0>,
                                0)],
             '$78call.6': [(<numba.core.ir.Assign object at 0x000001E8A8ACF1A0>,
                            42)],
             '$88return_const.8': [(<numba.core.ir.Assign object at 0x000001E8A8ACEF60>,
                                    42)],
             '$92load_attr.1': [(<numba.core.ir.Assign object at 0x000001E8A8ACEC90>,
                                 90)],
             '$const174.7': [(<numba.core.ir.Assign object at 0x000001E8A8ACDCD0>,
                              128)],
             '$const260.7': [(<numba.core.ir.Assign object at 0x000001E8A8ACC800>,
                              214)],
             '$const272.2.1': [(<numba.core.ir.Assign object at 0x000001E8A8ACC5C0>,
                                262)],
             '$const88.7': [(<numba.core.ir.Assign object at 0x000001E8A8ACF080>,
                             42)],
             'a': [(<numba.core.ir.Assign object at 0x000001E8A8ADD730>, 0)],
             'bool126': [(<numba.core.ir.Assign object at 0x000001E8A8ACE6F0>,
                          90)],
             'bool212': [(<numba.core.ir.Assign object at 0x000001E8A8ACCE00>,
                          176)],
             'bool40': [(<numba.core.ir.Assign object at 0x000001E8A8ACFA70>,
                         0)],
             'ch': [(<numba.core.ir.Assign object at 0x000001E8A8ACD760>, 0)],
             'i': [(<numba.core.ir.Assign object at 0x000001E8A8ACC740>, 0)]})
2025-05-12 23:19:06,172 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8ADE7B0>
2025-05-12 23:19:06,449 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1006)
           2	COPY_FREE_VARS(arg=1, lineno=1006)
           4	RESUME(arg=0, lineno=1006)
           6	LOAD_CONST(arg=1, lineno=1007)
           8	STORE_FAST(arg=1, lineno=1007)
          10	LOAD_GLOBAL(arg=1, lineno=1008)
          20	LOAD_FAST(arg=0, lineno=1008)
          22	LOAD_FAST(arg=1, lineno=1008)
          24	CALL(arg=2, lineno=1008)
          32	LOAD_CONST(arg=2, lineno=1008)
          34	COMPARE_OP(arg=40, lineno=1008)
          38	POP_JUMP_IF_FALSE(arg=17, lineno=1008)
          40	PUSH_NULL(arg=None, lineno=1009)
          42	LOAD_GLOBAL(arg=3, lineno=1009)
          52	LOAD_FAST(arg=0, lineno=1009)
          54	LOAD_FAST(arg=1, lineno=1009)
          56	CALL(arg=2, lineno=1009)
          64	CALL(arg=0, lineno=1009)
          72	RETURN_VALUE(arg=None, lineno=1009)
>         74	LOAD_DEREF(arg=2, lineno=1013)
          76	RETURN_VALUE(arg=None, lineno=1013)
2025-05-12 23:19:06,451 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:06,452 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,452 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:06,453 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1006)
2025-05-12 23:19:06,453 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,453 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=1006)
2025-05-12 23:19:06,454 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,454 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=RESUME(arg=0, lineno=1006)
2025-05-12 23:19:06,454 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,455 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=1007)
2025-05-12 23:19:06,455 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,455 - numba.core.byteflow - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=1, lineno=1007)
2025-05-12 23:19:06,456 - numba.core.byteflow - DEBUG - stack ['$const6.0.1']
2025-05-12 23:19:06,456 - numba.core.byteflow - DEBUG - dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=1008)
2025-05-12 23:19:06,456 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,457 - numba.core.byteflow - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=1008)
2025-05-12 23:19:06,458 - numba.core.byteflow - DEBUG - stack ['$null$10.2', '$10load_global.1']
2025-05-12 23:19:06,458 - numba.core.byteflow - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=1008)
2025-05-12 23:19:06,459 - numba.core.byteflow - DEBUG - stack ['$null$10.2', '$10load_global.1', '$obj20.3']
2025-05-12 23:19:06,459 - numba.core.byteflow - DEBUG - dispatch pc=24, inst=CALL(arg=2, lineno=1008)
2025-05-12 23:19:06,459 - numba.core.byteflow - DEBUG - stack ['$null$10.2', '$10load_global.1', '$obj20.3', '$attr22.4']
2025-05-12 23:19:06,461 - numba.core.byteflow - DEBUG - dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=1008)
2025-05-12 23:19:06,462 - numba.core.byteflow - DEBUG - stack ['$24call.5']
2025-05-12 23:19:06,462 - numba.core.byteflow - DEBUG - dispatch pc=34, inst=COMPARE_OP(arg=40, lineno=1008)
2025-05-12 23:19:06,462 - numba.core.byteflow - DEBUG - stack ['$24call.5', '$const32.6.2']
2025-05-12 23:19:06,464 - numba.core.byteflow - DEBUG - dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1008)
2025-05-12 23:19:06,465 - numba.core.byteflow - DEBUG - stack ['$34compare_op.7']
2025-05-12 23:19:06,465 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:06,466 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2025-05-12 23:19:06,466 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,466 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2025-05-12 23:19:06,466 - numba.core.byteflow - DEBUG - dispatch pc=40, inst=PUSH_NULL(arg=None, lineno=1009)
2025-05-12 23:19:06,467 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,468 - numba.core.byteflow - DEBUG - dispatch pc=42, inst=LOAD_GLOBAL(arg=3, lineno=1009)
2025-05-12 23:19:06,471 - numba.core.byteflow - DEBUG - stack ['$null$40.0']
2025-05-12 23:19:06,471 - numba.core.byteflow - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1009)
2025-05-12 23:19:06,471 - numba.core.byteflow - DEBUG - stack ['$null$40.0', '$null$42.2', '$42load_global.1']
2025-05-12 23:19:06,471 - numba.core.byteflow - DEBUG - dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=1009)
2025-05-12 23:19:06,474 - numba.core.byteflow - DEBUG - stack ['$null$40.0', '$null$42.2', '$42load_global.1', '$obj52.3']
2025-05-12 23:19:06,474 - numba.core.byteflow - DEBUG - dispatch pc=56, inst=CALL(arg=2, lineno=1009)
2025-05-12 23:19:06,474 - numba.core.byteflow - DEBUG - stack ['$null$40.0', '$null$42.2', '$42load_global.1', '$obj52.3', '$attr54.4']
2025-05-12 23:19:06,474 - numba.core.byteflow - DEBUG - dispatch pc=64, inst=CALL(arg=0, lineno=1009)
2025-05-12 23:19:06,474 - numba.core.byteflow - DEBUG - stack ['$null$40.0', '$56call.5']
2025-05-12 23:19:06,474 - numba.core.byteflow - DEBUG - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=1009)
2025-05-12 23:19:06,474 - numba.core.byteflow - DEBUG - stack ['$64call.6']
2025-05-12 23:19:06,481 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:06,481 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0)])
2025-05-12 23:19:06,481 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,482 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-05-12 23:19:06,482 - numba.core.byteflow - DEBUG - dispatch pc=74, inst=LOAD_DEREF(arg=2, lineno=1013)
2025-05-12 23:19:06,483 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,483 - numba.core.byteflow - DEBUG - dispatch pc=76, inst=RETURN_VALUE(arg=None, lineno=1013)
2025-05-12 23:19:06,484 - numba.core.byteflow - DEBUG - stack ['$74load_deref.0']
2025-05-12 23:19:06,484 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:06,484 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:06,485 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2025-05-12 23:19:06,485 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:06,485 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,488 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,488 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:06,488 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:06,488 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:06,488 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$const6.0.1'}), (8, {'value': '$const6.0.1'}), (10, {'idx': 0, 'res': '$10load_global.1'}), (20, {'res': '$obj20.3'}), (22, {'res': '$attr22.4'}), (24, {'func': '$10load_global.1', 'args': ['$obj20.3', '$attr22.4'], 'kw_names': None, 'res': '$24call.5'}), (32, {'res': '$const32.6.2'}), (34, {'lhs': '$24call.5', 'rhs': '$const32.6.2', 'res': '$34compare_op.7'}), (38, {'pred': '$34compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 74: ()})
2025-05-12 23:19:06,489 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {}), (42, {'idx': 1, 'res': '$42load_global.1'}), (52, {'res': '$obj52.3'}), (54, {'res': '$attr54.4'}), (56, {'func': '$42load_global.1', 'args': ['$obj52.3', '$attr54.4'], 'kw_names': None, 'res': '$56call.5'}), (64, {'func': '$56call.5', 'args': [], 'kw_names': None, 'res': '$64call.6'}), (72, {'retval': '$64call.6', 'castval': '$72return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:06,489 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$74load_deref.0'}), (76, {'retval': '$74load_deref.0', 'castval': '$76return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:06,491 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    attr = const(str, __repr__)              ['attr']
    $10load_global.1 = global(hasattr: <built-in function hasattr>) ['$10load_global.1']
    $24call.5 = call $10load_global.1(obj, attr, func=$10load_global.1, args=[Var(obj, old_builtins.py:1006), Var(attr, old_builtins.py:1007)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.1', '$24call.5', 'attr', 'obj']
    $const32.6.2 = const(bool, True)         ['$const32.6.2']
    $34compare_op.7 = $24call.5 == $const32.6.2 ['$24call.5', '$34compare_op.7', '$const32.6.2']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($34compare_op.7, func=bool38, args=(Var($34compare_op.7, old_builtins.py:1008),), kws=(), vararg=None, varkwarg=None, target=None) ['$34compare_op.7', '$38pred', 'bool38']
    branch $38pred, 40, 74                   ['$38pred']
label 40:
    $42load_global.1 = global(getattr: <built-in function getattr>) ['$42load_global.1']
    $56call.5 = call $42load_global.1(obj, attr, func=$42load_global.1, args=[Var(obj, old_builtins.py:1006), Var(attr, old_builtins.py:1007)], kws=(), vararg=None, varkwarg=None, target=None) ['$42load_global.1', '$56call.5', 'attr', 'obj']
    $64call.6 = call $56call.5(func=$56call.5, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$56call.5', '$64call.6']
    $72return_value.7 = cast(value=$64call.6) ['$64call.6', '$72return_value.7']
    return $72return_value.7                 ['$72return_value.7']
label 74:
    $74load_deref.0 = freevar(missing_repr_format: <object type:int64>) ['$74load_deref.0']
    $76return_value.1 = cast(value=$74load_deref.0) ['$74load_deref.0', '$76return_value.1']
    return $76return_value.1                 ['$76return_value.1']

2025-05-12 23:19:06,498 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:06,499 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A4BC20>
2025-05-12 23:19:06,499 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:06,499 - numba.core.ssa - DEBUG - on stmt: attr = const(str, __repr__)
2025-05-12 23:19:06,500 - numba.core.ssa - DEBUG - on stmt: $10load_global.1 = global(hasattr: <built-in function hasattr>)
2025-05-12 23:19:06,501 - numba.core.ssa - DEBUG - on stmt: $24call.5 = call $10load_global.1(obj, attr, func=$10load_global.1, args=[Var(obj, old_builtins.py:1006), Var(attr, old_builtins.py:1007)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,501 - numba.core.ssa - DEBUG - on stmt: $const32.6.2 = const(bool, True)
2025-05-12 23:19:06,501 - numba.core.ssa - DEBUG - on stmt: $34compare_op.7 = $24call.5 == $const32.6.2
2025-05-12 23:19:06,502 - numba.core.ssa - DEBUG - on stmt: bool38 = global(bool: <class 'bool'>)
2025-05-12 23:19:06,502 - numba.core.ssa - DEBUG - on stmt: $38pred = call bool38($34compare_op.7, func=bool38, args=(Var($34compare_op.7, old_builtins.py:1008),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,503 - numba.core.ssa - DEBUG - on stmt: branch $38pred, 40, 74
2025-05-12 23:19:06,505 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 40
2025-05-12 23:19:06,505 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A4BC20>
2025-05-12 23:19:06,506 - numba.core.ssa - DEBUG - on stmt: $42load_global.1 = global(getattr: <built-in function getattr>)
2025-05-12 23:19:06,506 - numba.core.ssa - DEBUG - on stmt: $56call.5 = call $42load_global.1(obj, attr, func=$42load_global.1, args=[Var(obj, old_builtins.py:1006), Var(attr, old_builtins.py:1007)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,508 - numba.core.ssa - DEBUG - on stmt: $64call.6 = call $56call.5(func=$56call.5, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,508 - numba.core.ssa - DEBUG - on stmt: $72return_value.7 = cast(value=$64call.6)
2025-05-12 23:19:06,508 - numba.core.ssa - DEBUG - on stmt: return $72return_value.7
2025-05-12 23:19:06,513 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 74
2025-05-12 23:19:06,513 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A4BC20>
2025-05-12 23:19:06,514 - numba.core.ssa - DEBUG - on stmt: $74load_deref.0 = freevar(missing_repr_format: <object type:int64>)
2025-05-12 23:19:06,514 - numba.core.ssa - DEBUG - on stmt: $76return_value.1 = cast(value=$74load_deref.0)
2025-05-12 23:19:06,515 - numba.core.ssa - DEBUG - on stmt: return $76return_value.1
2025-05-12 23:19:06,515 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A8AB9460>,
                                   0)],
             '$24call.5': [(<numba.core.ir.Assign object at 0x000001E8A8A164E0>,
                            0)],
             '$34compare_op.7': [(<numba.core.ir.Assign object at 0x000001E8A8A16AB0>,
                                  0)],
             '$38pred': [(<numba.core.ir.Assign object at 0x000001E8A8A0E9F0>,
                          0)],
             '$42load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A8A0F2C0>,
                                   40)],
             '$56call.5': [(<numba.core.ir.Assign object at 0x000001E8A8A0D4F0>,
                            40)],
             '$64call.6': [(<numba.core.ir.Assign object at 0x000001E8A8A0FD10>,
                            40)],
             '$72return_value.7': [(<numba.core.ir.Assign object at 0x000001E8A8B259A0>,
                                    40)],
             '$74load_deref.0': [(<numba.core.ir.Assign object at 0x000001E8A8B25A90>,
                                  74)],
             '$76return_value.1': [(<numba.core.ir.Assign object at 0x000001E8A8B257C0>,
                                    74)],
             '$const32.6.2': [(<numba.core.ir.Assign object at 0x000001E8A8A17770>,
                               0)],
             'attr': [(<numba.core.ir.Assign object at 0x000001E8A8AB85F0>, 0)],
             'bool38': [(<numba.core.ir.Assign object at 0x000001E8A8A15220>,
                         0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A8AB9370>, 0)]})
2025-05-12 23:19:06,521 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8B36A20>
2025-05-12 23:19:06,526 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=998)
           2	RESUME(arg=0, lineno=998)
           4	LOAD_GLOBAL(arg=1, lineno=999)
          14	LOAD_FAST(arg=0, lineno=999)
          16	LOAD_FAST(arg=1, lineno=999)
          18	CALL(arg=2, lineno=999)
          26	RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:06,528 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:06,529 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,529 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:06,530 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=998)
2025-05-12 23:19:06,531 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,532 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=998)
2025-05-12 23:19:06,532 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,533 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=999)
2025-05-12 23:19:06,537 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,538 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=999)
2025-05-12 23:19:06,538 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:06,540 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=999)
2025-05-12 23:19:06,540 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:06,547 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=CALL(arg=2, lineno=999)
2025-05-12 23:19:06,548 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:06,549 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:06,551 - numba.core.byteflow - DEBUG - stack ['$18call.4']
2025-05-12 23:19:06,552 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:06,552 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:06,554 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:06,554 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:06,554 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,555 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,555 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:06,556 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:06,556 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:06,556 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:06,557 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'name', 'obj']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-05-12 23:19:06,560 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:06,561 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8ADDFD0>
2025-05-12 23:19:06,562 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:06,563 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:06,563 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>)
2025-05-12 23:19:06,563 - numba.core.ssa - DEBUG - on stmt: $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,564 - numba.core.ssa - DEBUG - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-05-12 23:19:06,565 - numba.core.ssa - DEBUG - on stmt: return $26return_value.5
2025-05-12 23:19:06,565 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001E8A8ADDAC0>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A8B0CFE0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8ADD250>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A8ADDA00>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A8ADF3E0>, 0)]})
2025-05-12 23:19:06,568 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8ADDFD0>
2025-05-12 23:19:06,580 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(int64, unicode_type)
 
There are 2 candidate implementations:
[1m   - Of which 2 did not match due to:
   Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
     With argument(s): '(int64, unicode_type)':[0m
[1m    Rejected as the implementation raised a specific error:
      RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:06,595 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(int64, unicode_type)
 
There are 2 candidate implementations:
[1m    - Of which 2 did not match due to:
    Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
      With argument(s): '(int64, unicode_type)':[0m
[1m     Rejected as the implementation raised a specific error:
       RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:06,603 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=998)
           2	RESUME(arg=0, lineno=998)
           4	LOAD_GLOBAL(arg=1, lineno=999)
          14	LOAD_FAST(arg=0, lineno=999)
          16	LOAD_FAST(arg=1, lineno=999)
          18	CALL(arg=2, lineno=999)
          26	RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:06,604 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:06,604 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,605 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:06,606 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=998)
2025-05-12 23:19:06,606 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,606 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=998)
2025-05-12 23:19:06,607 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,607 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=999)
2025-05-12 23:19:06,607 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,607 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=999)
2025-05-12 23:19:06,607 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:06,608 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=999)
2025-05-12 23:19:06,608 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:06,609 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=CALL(arg=2, lineno=999)
2025-05-12 23:19:06,609 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:06,610 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:06,610 - numba.core.byteflow - DEBUG - stack ['$18call.4']
2025-05-12 23:19:06,613 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:06,613 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:06,614 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:06,614 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:06,614 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,615 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,615 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:06,616 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:06,616 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:06,616 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:06,617 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'name', 'obj']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-05-12 23:19:06,620 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:06,621 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8B0CBC0>
2025-05-12 23:19:06,621 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:06,622 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:06,622 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>)
2025-05-12 23:19:06,622 - numba.core.ssa - DEBUG - on stmt: $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,623 - numba.core.ssa - DEBUG - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-05-12 23:19:06,623 - numba.core.ssa - DEBUG - on stmt: return $26return_value.5
2025-05-12 23:19:06,623 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001E8A8AF7080>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A8AF6810>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8AF7260>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A8AF4B00>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A8AF5FD0>, 0)]})
2025-05-12 23:19:06,624 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8B0CBC0>
2025-05-12 23:19:06,665 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=954)
           2	RESUME(arg=0, lineno=954)
           4	LOAD_GLOBAL(arg=1, lineno=955)
          14	LOAD_FAST(arg=0, lineno=955)
          16	LOAD_FAST(arg=1, lineno=955)
          18	LOAD_GLOBAL(arg=2, lineno=955)
          28	CALL(arg=3, lineno=955)
          36	RETURN_VALUE(arg=None, lineno=955)
2025-05-12 23:19:06,666 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:06,666 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,666 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:06,667 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=954)
2025-05-12 23:19:06,667 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,668 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=954)
2025-05-12 23:19:06,668 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,668 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=955)
2025-05-12 23:19:06,669 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,669 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=955)
2025-05-12 23:19:06,669 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:06,669 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=955)
2025-05-12 23:19:06,669 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:06,669 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=955)
2025-05-12 23:19:06,671 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:06,671 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=CALL(arg=3, lineno=955)
2025-05-12 23:19:06,671 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3', '$18load_global.4']
2025-05-12 23:19:06,671 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=955)
2025-05-12 23:19:06,672 - numba.core.byteflow - DEBUG - stack ['$28call.5']
2025-05-12 23:19:06,673 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:06,673 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:06,674 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:06,674 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:06,675 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,675 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,676 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:06,676 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:06,678 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:06,678 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'idx': 1, 'res': '$18load_global.4'}), (28, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3', '$18load_global.4'], 'kw_names': None, 'res': '$28call.5'}), (36, {'retval': '$28call.5', 'castval': '$36return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:06,679 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_getattr: <intrinsic resolve_getattr>) ['$4load_global.0']
    $18load_global.4 = global(_getattr_default: _getattr_default_type()) ['$18load_global.4']
    $28call.5 = call $4load_global.0(obj, name, $18load_global.4, func=$4load_global.0, args=[Var(obj, old_builtins.py:954), Var(name, old_builtins.py:954), Var($18load_global.4, old_builtins.py:955)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_global.4', '$28call.5', '$4load_global.0', 'name', 'obj']
    $36return_value.6 = cast(value=$28call.5) ['$28call.5', '$36return_value.6']
    return $36return_value.6                 ['$36return_value.6']

2025-05-12 23:19:06,683 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:06,683 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8B9A0C0>
2025-05-12 23:19:06,685 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:06,685 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:06,686 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_getattr: <intrinsic resolve_getattr>)
2025-05-12 23:19:06,687 - numba.core.ssa - DEBUG - on stmt: $18load_global.4 = global(_getattr_default: _getattr_default_type())
2025-05-12 23:19:06,687 - numba.core.ssa - DEBUG - on stmt: $28call.5 = call $4load_global.0(obj, name, $18load_global.4, func=$4load_global.0, args=[Var(obj, old_builtins.py:954), Var(name, old_builtins.py:954), Var($18load_global.4, old_builtins.py:955)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,688 - numba.core.ssa - DEBUG - on stmt: $36return_value.6 = cast(value=$28call.5)
2025-05-12 23:19:06,688 - numba.core.ssa - DEBUG - on stmt: return $36return_value.6
2025-05-12 23:19:06,688 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18load_global.4': [(<numba.core.ir.Assign object at 0x000001E8A8B9AB70>,
                                   0)],
             '$28call.5': [(<numba.core.ir.Assign object at 0x000001E8A8B9AD20>,
                            0)],
             '$36return_value.6': [(<numba.core.ir.Assign object at 0x000001E8A8B9AE40>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8B9A840>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A8B9A6F0>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A8B9A5D0>, 0)]})
2025-05-12 23:19:06,689 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8B9A0C0>
2025-05-12 23:19:06,731 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2597)
           2	RESUME(arg=0, lineno=2597)
           4	LOAD_FAST(arg=0, lineno=2597)
           6	LOAD_ATTR(arg=1, lineno=2597)
          26	CALL(arg=0, lineno=2597)
          34	RETURN_VALUE(arg=None, lineno=2597)
2025-05-12 23:19:06,732 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:06,732 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,732 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:06,733 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2597)
2025-05-12 23:19:06,733 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,734 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=2597)
2025-05-12 23:19:06,734 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,735 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2597)
2025-05-12 23:19:06,735 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,735 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=1, lineno=2597)
2025-05-12 23:19:06,735 - numba.core.byteflow - DEBUG - stack ['$n4.0']
2025-05-12 23:19:06,736 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=CALL(arg=0, lineno=2597)
2025-05-12 23:19:06,736 - numba.core.byteflow - DEBUG - stack ['$null$6.2', '$6load_attr.1']
2025-05-12 23:19:06,737 - numba.core.byteflow - DEBUG - dispatch pc=34, inst=RETURN_VALUE(arg=None, lineno=2597)
2025-05-12 23:19:06,738 - numba.core.byteflow - DEBUG - stack ['$26call.3']
2025-05-12 23:19:06,738 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:06,738 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:06,739 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:06,740 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:06,740 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,740 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,741 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:06,741 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:06,741 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:06,742 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$n4.0'}), (6, {'item': '$n4.0', 'res': '$6load_attr.1'}), (26, {'func': '$6load_attr.1', 'args': [], 'kw_names': None, 'res': '$26call.3'}), (34, {'retval': '$26call.3', 'castval': '$34return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:06,744 - numba.core.interpreter - DEBUG - label 0:
    n = arg(0, name=n)                       ['n']
    $6load_attr.1 = getattr(value=n, attr=__str__) ['$6load_attr.1', 'n']
    $26call.3 = call $6load_attr.1(func=$6load_attr.1, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$26call.3', '$6load_attr.1']
    $34return_value.4 = cast(value=$26call.3) ['$26call.3', '$34return_value.4']
    return $34return_value.4                 ['$34return_value.4']

2025-05-12 23:19:06,756 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:06,756 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8BC8740>
2025-05-12 23:19:06,757 - numba.core.ssa - DEBUG - on stmt: n = arg(0, name=n)
2025-05-12 23:19:06,757 - numba.core.ssa - DEBUG - on stmt: $6load_attr.1 = getattr(value=n, attr=__str__)
2025-05-12 23:19:06,758 - numba.core.ssa - DEBUG - on stmt: $26call.3 = call $6load_attr.1(func=$6load_attr.1, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,758 - numba.core.ssa - DEBUG - on stmt: $34return_value.4 = cast(value=$26call.3)
2025-05-12 23:19:06,759 - numba.core.ssa - DEBUG - on stmt: return $34return_value.4
2025-05-12 23:19:06,759 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$26call.3': [(<numba.core.ir.Assign object at 0x000001E8A8BBEA80>,
                            0)],
             '$34return_value.4': [(<numba.core.ir.Assign object at 0x000001E8A8BBF440>,
                                    0)],
             '$6load_attr.1': [(<numba.core.ir.Assign object at 0x000001E8A8BBEC30>,
                                0)],
             'n': [(<numba.core.ir.Assign object at 0x000001E8A8BBF170>, 0)]})
2025-05-12 23:19:06,762 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8BC8740>
2025-05-12 23:19:06,851 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=998)
           2	RESUME(arg=0, lineno=998)
           4	LOAD_GLOBAL(arg=1, lineno=999)
          14	LOAD_FAST(arg=0, lineno=999)
          16	LOAD_FAST(arg=1, lineno=999)
          18	CALL(arg=2, lineno=999)
          26	RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:06,852 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:06,852 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:06,852 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:06,852 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=998)
2025-05-12 23:19:06,853 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,853 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=998)
2025-05-12 23:19:06,853 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,854 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=999)
2025-05-12 23:19:06,854 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:06,854 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=999)
2025-05-12 23:19:06,855 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:06,855 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=999)
2025-05-12 23:19:06,855 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:06,855 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=CALL(arg=2, lineno=999)
2025-05-12 23:19:06,856 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:06,856 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:06,857 - numba.core.byteflow - DEBUG - stack ['$18call.4']
2025-05-12 23:19:06,858 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:06,858 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:06,858 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:06,859 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:06,859 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,860 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:06,860 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:06,861 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:06,861 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:06,861 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:06,862 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'name', 'obj']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-05-12 23:19:06,866 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:06,866 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8BF70E0>
2025-05-12 23:19:06,867 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:06,867 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:06,867 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>)
2025-05-12 23:19:06,868 - numba.core.ssa - DEBUG - on stmt: $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:06,868 - numba.core.ssa - DEBUG - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-05-12 23:19:06,869 - numba.core.ssa - DEBUG - on stmt: return $26return_value.5
2025-05-12 23:19:06,869 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001E8A8BF7CB0>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A8BF7DD0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8BF7920>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A8BF77A0>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A8BF7680>, 0)]})
2025-05-12 23:19:06,871 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8BF70E0>
2025-05-12 23:19:06,889 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(int64, unicode_type)
 
There are 2 candidate implementations:
[1m     - Of which 2 did not match due to:
     Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
       With argument(s): '(int64, unicode_type)':[0m
[1m      Rejected as the implementation raised a specific error:
        RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:06,909 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(int64, unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
        With argument(s): '(int64, unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:07,098 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=998)
           2	RESUME(arg=0, lineno=998)
           4	LOAD_GLOBAL(arg=1, lineno=999)
          14	LOAD_FAST(arg=0, lineno=999)
          16	LOAD_FAST(arg=1, lineno=999)
          18	CALL(arg=2, lineno=999)
          26	RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:07,098 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:07,099 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,099 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:07,099 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=998)
2025-05-12 23:19:07,099 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,100 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=998)
2025-05-12 23:19:07,100 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,100 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=999)
2025-05-12 23:19:07,101 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,101 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=999)
2025-05-12 23:19:07,102 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:07,102 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=999)
2025-05-12 23:19:07,102 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:07,103 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=CALL(arg=2, lineno=999)
2025-05-12 23:19:07,103 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:07,103 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:07,105 - numba.core.byteflow - DEBUG - stack ['$18call.4']
2025-05-12 23:19:07,105 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,106 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:07,106 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:07,107 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:07,108 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:07,109 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:07,109 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:07,113 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:07,116 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:07,117 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,118 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'name', 'obj']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-05-12 23:19:07,123 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:07,124 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88C2A80>
2025-05-12 23:19:07,125 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:07,125 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:07,126 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>)
2025-05-12 23:19:07,126 - numba.core.ssa - DEBUG - on stmt: $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,127 - numba.core.ssa - DEBUG - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-05-12 23:19:07,127 - numba.core.ssa - DEBUG - on stmt: return $26return_value.5
2025-05-12 23:19:07,128 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001E8A88C1640>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A88C1760>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A88C0710>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A88C1A30>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A88C1DF0>, 0)]})
2025-05-12 23:19:07,129 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A88C2A80>
2025-05-12 23:19:07,143 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(int64, unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
        With argument(s): '(int64, unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:07,160 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(int64, unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
        With argument(s): '(int64, unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:07,271 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1885)
           2	RESUME(arg=0, lineno=1885)
           4	LOAD_FAST(arg=0, lineno=1886)
           6	LOAD_ATTR(arg=0, lineno=1886)
          26	LOAD_FAST(arg=1, lineno=1886)
          28	LOAD_ATTR(arg=0, lineno=1886)
          48	BINARY_OP(arg=0, lineno=1886)
          52	STORE_FAST(arg=2, lineno=1886)
          54	LOAD_GLOBAL(arg=3, lineno=1887)
          64	LOAD_FAST(arg=0, lineno=1887)
          66	LOAD_ATTR(arg=4, lineno=1887)
          86	LOAD_FAST(arg=1, lineno=1887)
          88	LOAD_ATTR(arg=4, lineno=1887)
         108	CALL(arg=2, lineno=1887)
         116	STORE_FAST(arg=3, lineno=1887)
         118	LOAD_GLOBAL(arg=7, lineno=1888)
         128	LOAD_FAST(arg=0, lineno=1888)
         130	LOAD_ATTR(arg=8, lineno=1888)
         150	LOAD_FAST(arg=1, lineno=1888)
         152	LOAD_ATTR(arg=8, lineno=1888)
         172	CALL(arg=2, lineno=1888)
         180	STORE_FAST(arg=4, lineno=1888)
         182	LOAD_GLOBAL(arg=11, lineno=1889)
         192	LOAD_FAST(arg=3, lineno=1889)
         194	LOAD_FAST(arg=2, lineno=1889)
         196	LOAD_FAST(arg=4, lineno=1889)
         198	CALL(arg=3, lineno=1889)
         206	STORE_FAST(arg=5, lineno=1889)
         208	LOAD_GLOBAL(arg=13, lineno=1890)
         218	LOAD_GLOBAL(arg=15, lineno=1890)
         228	LOAD_FAST(arg=0, lineno=1890)
         230	CALL(arg=1, lineno=1890)
         238	CALL(arg=1, lineno=1890)
         246	GET_ITER(arg=None, lineno=1890)
>        248	FOR_ITER(arg=25, lineno=1890)
         252	STORE_FAST(arg=6, lineno=1890)
         254	LOAD_GLOBAL(arg=17, lineno=1891)
         264	LOAD_FAST(arg=5, lineno=1891)
         266	LOAD_FAST(arg=6, lineno=1891)
         268	LOAD_GLOBAL(arg=19, lineno=1891)
         278	LOAD_FAST(arg=0, lineno=1891)
         280	LOAD_FAST(arg=6, lineno=1891)
         282	CALL(arg=2, lineno=1891)
         290	CALL(arg=3, lineno=1891)
         298	POP_TOP(arg=None, lineno=1891)
         300	JUMP_BACKWARD(arg=27, lineno=1891)
>        302	END_FOR(arg=None, lineno=1890)
         304	LOAD_GLOBAL(arg=13, lineno=1892)
         314	LOAD_GLOBAL(arg=15, lineno=1892)
         324	LOAD_FAST(arg=1, lineno=1892)
         326	CALL(arg=1, lineno=1892)
         334	CALL(arg=1, lineno=1892)
         342	GET_ITER(arg=None, lineno=1892)
>        344	FOR_ITER(arg=37, lineno=1892)
         348	STORE_FAST(arg=7, lineno=1892)
         350	LOAD_GLOBAL(arg=17, lineno=1893)
         360	LOAD_FAST(arg=5, lineno=1893)
         362	LOAD_GLOBAL(arg=15, lineno=1893)
         372	LOAD_FAST(arg=0, lineno=1893)
         374	CALL(arg=1, lineno=1893)
         382	LOAD_FAST(arg=7, lineno=1893)
         384	BINARY_OP(arg=0, lineno=1893)
         388	LOAD_GLOBAL(arg=19, lineno=1893)
         398	LOAD_FAST(arg=1, lineno=1893)
         400	LOAD_FAST(arg=7, lineno=1893)
         402	CALL(arg=2, lineno=1893)
         410	CALL(arg=3, lineno=1893)
         418	POP_TOP(arg=None, lineno=1893)
         420	JUMP_BACKWARD(arg=39, lineno=1893)
>        422	END_FOR(arg=None, lineno=1892)
         424	LOAD_FAST(arg=5, lineno=1894)
         426	RETURN_VALUE(arg=None, lineno=1894)
2025-05-12 23:19:07,273 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:07,274 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,274 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:07,275 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1885)
2025-05-12 23:19:07,275 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,276 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=1885)
2025-05-12 23:19:07,276 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,276 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1886)
2025-05-12 23:19:07,276 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,276 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=1886)
2025-05-12 23:19:07,277 - numba.core.byteflow - DEBUG - stack ['$a4.0']
2025-05-12 23:19:07,277 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=1886)
2025-05-12 23:19:07,277 - numba.core.byteflow - DEBUG - stack ['$6load_attr.1']
2025-05-12 23:19:07,278 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=LOAD_ATTR(arg=0, lineno=1886)
2025-05-12 23:19:07,278 - numba.core.byteflow - DEBUG - stack ['$6load_attr.1', '$b26.2']
2025-05-12 23:19:07,282 - numba.core.byteflow - DEBUG - dispatch pc=48, inst=BINARY_OP(arg=0, lineno=1886)
2025-05-12 23:19:07,284 - numba.core.byteflow - DEBUG - stack ['$6load_attr.1', '$28load_attr.3']
2025-05-12 23:19:07,284 - numba.core.byteflow - DEBUG - dispatch pc=52, inst=STORE_FAST(arg=2, lineno=1886)
2025-05-12 23:19:07,284 - numba.core.byteflow - DEBUG - stack ['$binop_add48.4']
2025-05-12 23:19:07,285 - numba.core.byteflow - DEBUG - dispatch pc=54, inst=LOAD_GLOBAL(arg=3, lineno=1887)
2025-05-12 23:19:07,285 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,287 - numba.core.byteflow - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=0, lineno=1887)
2025-05-12 23:19:07,289 - numba.core.byteflow - DEBUG - stack ['$null$54.6', '$54load_global.5']
2025-05-12 23:19:07,289 - numba.core.byteflow - DEBUG - dispatch pc=66, inst=LOAD_ATTR(arg=4, lineno=1887)
2025-05-12 23:19:07,290 - numba.core.byteflow - DEBUG - stack ['$null$54.6', '$54load_global.5', '$a64.7']
2025-05-12 23:19:07,290 - numba.core.byteflow - DEBUG - dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=1887)
2025-05-12 23:19:07,291 - numba.core.byteflow - DEBUG - stack ['$null$54.6', '$54load_global.5', '$66load_attr.8']
2025-05-12 23:19:07,292 - numba.core.byteflow - DEBUG - dispatch pc=88, inst=LOAD_ATTR(arg=4, lineno=1887)
2025-05-12 23:19:07,292 - numba.core.byteflow - DEBUG - stack ['$null$54.6', '$54load_global.5', '$66load_attr.8', '$b86.9']
2025-05-12 23:19:07,293 - numba.core.byteflow - DEBUG - dispatch pc=108, inst=CALL(arg=2, lineno=1887)
2025-05-12 23:19:07,293 - numba.core.byteflow - DEBUG - stack ['$null$54.6', '$54load_global.5', '$66load_attr.8', '$88load_attr.10']
2025-05-12 23:19:07,294 - numba.core.byteflow - DEBUG - dispatch pc=116, inst=STORE_FAST(arg=3, lineno=1887)
2025-05-12 23:19:07,294 - numba.core.byteflow - DEBUG - stack ['$108call.11']
2025-05-12 23:19:07,294 - numba.core.byteflow - DEBUG - dispatch pc=118, inst=LOAD_GLOBAL(arg=7, lineno=1888)
2025-05-12 23:19:07,294 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,294 - numba.core.byteflow - DEBUG - dispatch pc=128, inst=LOAD_FAST(arg=0, lineno=1888)
2025-05-12 23:19:07,296 - numba.core.byteflow - DEBUG - stack ['$null$118.13', '$118load_global.12']
2025-05-12 23:19:07,296 - numba.core.byteflow - DEBUG - dispatch pc=130, inst=LOAD_ATTR(arg=8, lineno=1888)
2025-05-12 23:19:07,296 - numba.core.byteflow - DEBUG - stack ['$null$118.13', '$118load_global.12', '$a128.14']
2025-05-12 23:19:07,298 - numba.core.byteflow - DEBUG - dispatch pc=150, inst=LOAD_FAST(arg=1, lineno=1888)
2025-05-12 23:19:07,300 - numba.core.byteflow - DEBUG - stack ['$null$118.13', '$118load_global.12', '$130load_attr.15']
2025-05-12 23:19:07,301 - numba.core.byteflow - DEBUG - dispatch pc=152, inst=LOAD_ATTR(arg=8, lineno=1888)
2025-05-12 23:19:07,301 - numba.core.byteflow - DEBUG - stack ['$null$118.13', '$118load_global.12', '$130load_attr.15', '$b150.16']
2025-05-12 23:19:07,301 - numba.core.byteflow - DEBUG - dispatch pc=172, inst=CALL(arg=2, lineno=1888)
2025-05-12 23:19:07,302 - numba.core.byteflow - DEBUG - stack ['$null$118.13', '$118load_global.12', '$130load_attr.15', '$152load_attr.17']
2025-05-12 23:19:07,302 - numba.core.byteflow - DEBUG - dispatch pc=180, inst=STORE_FAST(arg=4, lineno=1888)
2025-05-12 23:19:07,302 - numba.core.byteflow - DEBUG - stack ['$172call.18']
2025-05-12 23:19:07,303 - numba.core.byteflow - DEBUG - dispatch pc=182, inst=LOAD_GLOBAL(arg=11, lineno=1889)
2025-05-12 23:19:07,303 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,303 - numba.core.byteflow - DEBUG - dispatch pc=192, inst=LOAD_FAST(arg=3, lineno=1889)
2025-05-12 23:19:07,303 - numba.core.byteflow - DEBUG - stack ['$null$182.20', '$182load_global.19']
2025-05-12 23:19:07,305 - numba.core.byteflow - DEBUG - dispatch pc=194, inst=LOAD_FAST(arg=2, lineno=1889)
2025-05-12 23:19:07,307 - numba.core.byteflow - DEBUG - stack ['$null$182.20', '$182load_global.19', '$new_kind192.21']
2025-05-12 23:19:07,308 - numba.core.byteflow - DEBUG - dispatch pc=196, inst=LOAD_FAST(arg=4, lineno=1889)
2025-05-12 23:19:07,309 - numba.core.byteflow - DEBUG - stack ['$null$182.20', '$182load_global.19', '$new_kind192.21', '$new_length194.22']
2025-05-12 23:19:07,309 - numba.core.byteflow - DEBUG - dispatch pc=198, inst=CALL(arg=3, lineno=1889)
2025-05-12 23:19:07,309 - numba.core.byteflow - DEBUG - stack ['$null$182.20', '$182load_global.19', '$new_kind192.21', '$new_length194.22', '$new_ascii196.23']
2025-05-12 23:19:07,310 - numba.core.byteflow - DEBUG - dispatch pc=206, inst=STORE_FAST(arg=5, lineno=1889)
2025-05-12 23:19:07,310 - numba.core.byteflow - DEBUG - stack ['$198call.24']
2025-05-12 23:19:07,311 - numba.core.byteflow - DEBUG - dispatch pc=208, inst=LOAD_GLOBAL(arg=13, lineno=1890)
2025-05-12 23:19:07,311 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,312 - numba.core.byteflow - DEBUG - dispatch pc=218, inst=LOAD_GLOBAL(arg=15, lineno=1890)
2025-05-12 23:19:07,312 - numba.core.byteflow - DEBUG - stack ['$null$208.26', '$208load_global.25']
2025-05-12 23:19:07,312 - numba.core.byteflow - DEBUG - dispatch pc=228, inst=LOAD_FAST(arg=0, lineno=1890)
2025-05-12 23:19:07,312 - numba.core.byteflow - DEBUG - stack ['$null$208.26', '$208load_global.25', '$null$218.28', '$218load_global.27']
2025-05-12 23:19:07,312 - numba.core.byteflow - DEBUG - dispatch pc=230, inst=CALL(arg=1, lineno=1890)
2025-05-12 23:19:07,317 - numba.core.byteflow - DEBUG - stack ['$null$208.26', '$208load_global.25', '$null$218.28', '$218load_global.27', '$a228.29']
2025-05-12 23:19:07,318 - numba.core.byteflow - DEBUG - dispatch pc=238, inst=CALL(arg=1, lineno=1890)
2025-05-12 23:19:07,318 - numba.core.byteflow - DEBUG - stack ['$null$208.26', '$208load_global.25', '$230call.30']
2025-05-12 23:19:07,318 - numba.core.byteflow - DEBUG - dispatch pc=246, inst=GET_ITER(arg=None, lineno=1890)
2025-05-12 23:19:07,318 - numba.core.byteflow - DEBUG - stack ['$238call.31']
2025-05-12 23:19:07,319 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=248, stack=('$246get_iter.32',), blockstack=(), npush=0)]
2025-05-12 23:19:07,320 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=248 nstack_initial=1)])
2025-05-12 23:19:07,320 - numba.core.byteflow - DEBUG - stack: ['$phi248.0']
2025-05-12 23:19:07,320 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=248 nstack_initial=1)
2025-05-12 23:19:07,321 - numba.core.byteflow - DEBUG - dispatch pc=248, inst=FOR_ITER(arg=25, lineno=1890)
2025-05-12 23:19:07,322 - numba.core.byteflow - DEBUG - stack ['$phi248.0']
2025-05-12 23:19:07,322 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=302, stack=('$phi248.0', '$248for_iter.2'), blockstack=(), npush=0), Edge(pc=252, stack=('$phi248.0', '$248for_iter.2'), blockstack=(), npush=0)]
2025-05-12 23:19:07,323 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=302 nstack_initial=2), State(pc_initial=252 nstack_initial=2)])
2025-05-12 23:19:07,323 - numba.core.byteflow - DEBUG - stack: ['$phi302.0', '$phi302.1']
2025-05-12 23:19:07,323 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=302 nstack_initial=2)
2025-05-12 23:19:07,324 - numba.core.byteflow - DEBUG - dispatch pc=302, inst=END_FOR(arg=None, lineno=1890)
2025-05-12 23:19:07,324 - numba.core.byteflow - DEBUG - stack ['$phi302.0', '$phi302.1']
2025-05-12 23:19:07,324 - numba.core.byteflow - DEBUG - dispatch pc=304, inst=LOAD_GLOBAL(arg=13, lineno=1892)
2025-05-12 23:19:07,324 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,326 - numba.core.byteflow - DEBUG - dispatch pc=314, inst=LOAD_GLOBAL(arg=15, lineno=1892)
2025-05-12 23:19:07,326 - numba.core.byteflow - DEBUG - stack ['$null$304.3', '$304load_global.2']
2025-05-12 23:19:07,326 - numba.core.byteflow - DEBUG - dispatch pc=324, inst=LOAD_FAST(arg=1, lineno=1892)
2025-05-12 23:19:07,327 - numba.core.byteflow - DEBUG - stack ['$null$304.3', '$304load_global.2', '$null$314.5', '$314load_global.4']
2025-05-12 23:19:07,327 - numba.core.byteflow - DEBUG - dispatch pc=326, inst=CALL(arg=1, lineno=1892)
2025-05-12 23:19:07,327 - numba.core.byteflow - DEBUG - stack ['$null$304.3', '$304load_global.2', '$null$314.5', '$314load_global.4', '$b324.6']
2025-05-12 23:19:07,328 - numba.core.byteflow - DEBUG - dispatch pc=334, inst=CALL(arg=1, lineno=1892)
2025-05-12 23:19:07,329 - numba.core.byteflow - DEBUG - stack ['$null$304.3', '$304load_global.2', '$326call.7']
2025-05-12 23:19:07,329 - numba.core.byteflow - DEBUG - dispatch pc=342, inst=GET_ITER(arg=None, lineno=1892)
2025-05-12 23:19:07,334 - numba.core.byteflow - DEBUG - stack ['$334call.8']
2025-05-12 23:19:07,335 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=344, stack=('$342get_iter.9',), blockstack=(), npush=0)]
2025-05-12 23:19:07,336 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=252 nstack_initial=2), State(pc_initial=344 nstack_initial=1)])
2025-05-12 23:19:07,336 - numba.core.byteflow - DEBUG - stack: ['$phi252.0', '$phi252.1']
2025-05-12 23:19:07,336 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=252 nstack_initial=2)
2025-05-12 23:19:07,337 - numba.core.byteflow - DEBUG - dispatch pc=252, inst=STORE_FAST(arg=6, lineno=1890)
2025-05-12 23:19:07,337 - numba.core.byteflow - DEBUG - stack ['$phi252.0', '$phi252.1']
2025-05-12 23:19:07,337 - numba.core.byteflow - DEBUG - dispatch pc=254, inst=LOAD_GLOBAL(arg=17, lineno=1891)
2025-05-12 23:19:07,342 - numba.core.byteflow - DEBUG - stack ['$phi252.0']
2025-05-12 23:19:07,343 - numba.core.byteflow - DEBUG - dispatch pc=264, inst=LOAD_FAST(arg=5, lineno=1891)
2025-05-12 23:19:07,344 - numba.core.byteflow - DEBUG - stack ['$phi252.0', '$null$254.3', '$254load_global.2']
2025-05-12 23:19:07,344 - numba.core.byteflow - DEBUG - dispatch pc=266, inst=LOAD_FAST(arg=6, lineno=1891)
2025-05-12 23:19:07,344 - numba.core.byteflow - DEBUG - stack ['$phi252.0', '$null$254.3', '$254load_global.2', '$result264.4']
2025-05-12 23:19:07,344 - numba.core.byteflow - DEBUG - dispatch pc=268, inst=LOAD_GLOBAL(arg=19, lineno=1891)
2025-05-12 23:19:07,345 - numba.core.byteflow - DEBUG - stack ['$phi252.0', '$null$254.3', '$254load_global.2', '$result264.4', '$i266.5']
2025-05-12 23:19:07,345 - numba.core.byteflow - DEBUG - dispatch pc=278, inst=LOAD_FAST(arg=0, lineno=1891)
2025-05-12 23:19:07,345 - numba.core.byteflow - DEBUG - stack ['$phi252.0', '$null$254.3', '$254load_global.2', '$result264.4', '$i266.5', '$null$268.7', '$268load_global.6']
2025-05-12 23:19:07,346 - numba.core.byteflow - DEBUG - dispatch pc=280, inst=LOAD_FAST(arg=6, lineno=1891)
2025-05-12 23:19:07,346 - numba.core.byteflow - DEBUG - stack ['$phi252.0', '$null$254.3', '$254load_global.2', '$result264.4', '$i266.5', '$null$268.7', '$268load_global.6', '$a278.8']
2025-05-12 23:19:07,346 - numba.core.byteflow - DEBUG - dispatch pc=282, inst=CALL(arg=2, lineno=1891)
2025-05-12 23:19:07,350 - numba.core.byteflow - DEBUG - stack ['$phi252.0', '$null$254.3', '$254load_global.2', '$result264.4', '$i266.5', '$null$268.7', '$268load_global.6', '$a278.8', '$i280.9']
2025-05-12 23:19:07,352 - numba.core.byteflow - DEBUG - dispatch pc=290, inst=CALL(arg=3, lineno=1891)
2025-05-12 23:19:07,354 - numba.core.byteflow - DEBUG - stack ['$phi252.0', '$null$254.3', '$254load_global.2', '$result264.4', '$i266.5', '$282call.10']
2025-05-12 23:19:07,354 - numba.core.byteflow - DEBUG - dispatch pc=298, inst=POP_TOP(arg=None, lineno=1891)
2025-05-12 23:19:07,354 - numba.core.byteflow - DEBUG - stack ['$phi252.0', '$290call.11']
2025-05-12 23:19:07,354 - numba.core.byteflow - DEBUG - dispatch pc=300, inst=JUMP_BACKWARD(arg=27, lineno=1891)
2025-05-12 23:19:07,355 - numba.core.byteflow - DEBUG - stack ['$phi252.0']
2025-05-12 23:19:07,355 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=248, stack=('$phi252.0',), blockstack=(), npush=0)]
2025-05-12 23:19:07,355 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=344 nstack_initial=1), State(pc_initial=248 nstack_initial=1)])
2025-05-12 23:19:07,356 - numba.core.byteflow - DEBUG - stack: ['$phi344.0']
2025-05-12 23:19:07,357 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=344 nstack_initial=1)
2025-05-12 23:19:07,357 - numba.core.byteflow - DEBUG - dispatch pc=344, inst=FOR_ITER(arg=37, lineno=1892)
2025-05-12 23:19:07,358 - numba.core.byteflow - DEBUG - stack ['$phi344.0']
2025-05-12 23:19:07,358 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=422, stack=('$phi344.0', '$344for_iter.2'), blockstack=(), npush=0), Edge(pc=348, stack=('$phi344.0', '$344for_iter.2'), blockstack=(), npush=0)]
2025-05-12 23:19:07,359 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=248 nstack_initial=1), State(pc_initial=422 nstack_initial=2), State(pc_initial=348 nstack_initial=2)])
2025-05-12 23:19:07,359 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=422 nstack_initial=2), State(pc_initial=348 nstack_initial=2)])
2025-05-12 23:19:07,359 - numba.core.byteflow - DEBUG - stack: ['$phi422.0', '$phi422.1']
2025-05-12 23:19:07,360 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=422 nstack_initial=2)
2025-05-12 23:19:07,360 - numba.core.byteflow - DEBUG - dispatch pc=422, inst=END_FOR(arg=None, lineno=1892)
2025-05-12 23:19:07,361 - numba.core.byteflow - DEBUG - stack ['$phi422.0', '$phi422.1']
2025-05-12 23:19:07,361 - numba.core.byteflow - DEBUG - dispatch pc=424, inst=LOAD_FAST(arg=5, lineno=1894)
2025-05-12 23:19:07,361 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,362 - numba.core.byteflow - DEBUG - dispatch pc=426, inst=RETURN_VALUE(arg=None, lineno=1894)
2025-05-12 23:19:07,362 - numba.core.byteflow - DEBUG - stack ['$result424.2']
2025-05-12 23:19:07,366 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,367 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=348 nstack_initial=2)])
2025-05-12 23:19:07,368 - numba.core.byteflow - DEBUG - stack: ['$phi348.0', '$phi348.1']
2025-05-12 23:19:07,368 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=348 nstack_initial=2)
2025-05-12 23:19:07,368 - numba.core.byteflow - DEBUG - dispatch pc=348, inst=STORE_FAST(arg=7, lineno=1892)
2025-05-12 23:19:07,369 - numba.core.byteflow - DEBUG - stack ['$phi348.0', '$phi348.1']
2025-05-12 23:19:07,369 - numba.core.byteflow - DEBUG - dispatch pc=350, inst=LOAD_GLOBAL(arg=17, lineno=1893)
2025-05-12 23:19:07,369 - numba.core.byteflow - DEBUG - stack ['$phi348.0']
2025-05-12 23:19:07,373 - numba.core.byteflow - DEBUG - dispatch pc=360, inst=LOAD_FAST(arg=5, lineno=1893)
2025-05-12 23:19:07,374 - numba.core.byteflow - DEBUG - stack ['$phi348.0', '$null$350.3', '$350load_global.2']
2025-05-12 23:19:07,374 - numba.core.byteflow - DEBUG - dispatch pc=362, inst=LOAD_GLOBAL(arg=15, lineno=1893)
2025-05-12 23:19:07,375 - numba.core.byteflow - DEBUG - stack ['$phi348.0', '$null$350.3', '$350load_global.2', '$result360.4']
2025-05-12 23:19:07,376 - numba.core.byteflow - DEBUG - dispatch pc=372, inst=LOAD_FAST(arg=0, lineno=1893)
2025-05-12 23:19:07,376 - numba.core.byteflow - DEBUG - stack ['$phi348.0', '$null$350.3', '$350load_global.2', '$result360.4', '$null$362.6', '$362load_global.5']
2025-05-12 23:19:07,376 - numba.core.byteflow - DEBUG - dispatch pc=374, inst=CALL(arg=1, lineno=1893)
2025-05-12 23:19:07,376 - numba.core.byteflow - DEBUG - stack ['$phi348.0', '$null$350.3', '$350load_global.2', '$result360.4', '$null$362.6', '$362load_global.5', '$a372.7']
2025-05-12 23:19:07,377 - numba.core.byteflow - DEBUG - dispatch pc=382, inst=LOAD_FAST(arg=7, lineno=1893)
2025-05-12 23:19:07,377 - numba.core.byteflow - DEBUG - stack ['$phi348.0', '$null$350.3', '$350load_global.2', '$result360.4', '$374call.8']
2025-05-12 23:19:07,377 - numba.core.byteflow - DEBUG - dispatch pc=384, inst=BINARY_OP(arg=0, lineno=1893)
2025-05-12 23:19:07,378 - numba.core.byteflow - DEBUG - stack ['$phi348.0', '$null$350.3', '$350load_global.2', '$result360.4', '$374call.8', '$j382.9']
2025-05-12 23:19:07,378 - numba.core.byteflow - DEBUG - dispatch pc=388, inst=LOAD_GLOBAL(arg=19, lineno=1893)
2025-05-12 23:19:07,378 - numba.core.byteflow - DEBUG - stack ['$phi348.0', '$null$350.3', '$350load_global.2', '$result360.4', '$binop_add384.10']
2025-05-12 23:19:07,378 - numba.core.byteflow - DEBUG - dispatch pc=398, inst=LOAD_FAST(arg=1, lineno=1893)
2025-05-12 23:19:07,378 - numba.core.byteflow - DEBUG - stack ['$phi348.0', '$null$350.3', '$350load_global.2', '$result360.4', '$binop_add384.10', '$null$388.12', '$388load_global.11']
2025-05-12 23:19:07,378 - numba.core.byteflow - DEBUG - dispatch pc=400, inst=LOAD_FAST(arg=7, lineno=1893)
2025-05-12 23:19:07,379 - numba.core.byteflow - DEBUG - stack ['$phi348.0', '$null$350.3', '$350load_global.2', '$result360.4', '$binop_add384.10', '$null$388.12', '$388load_global.11', '$b398.13']
2025-05-12 23:19:07,384 - numba.core.byteflow - DEBUG - dispatch pc=402, inst=CALL(arg=2, lineno=1893)
2025-05-12 23:19:07,384 - numba.core.byteflow - DEBUG - stack ['$phi348.0', '$null$350.3', '$350load_global.2', '$result360.4', '$binop_add384.10', '$null$388.12', '$388load_global.11', '$b398.13', '$j400.14']
2025-05-12 23:19:07,384 - numba.core.byteflow - DEBUG - dispatch pc=410, inst=CALL(arg=3, lineno=1893)
2025-05-12 23:19:07,385 - numba.core.byteflow - DEBUG - stack ['$phi348.0', '$null$350.3', '$350load_global.2', '$result360.4', '$binop_add384.10', '$402call.15']
2025-05-12 23:19:07,385 - numba.core.byteflow - DEBUG - dispatch pc=418, inst=POP_TOP(arg=None, lineno=1893)
2025-05-12 23:19:07,385 - numba.core.byteflow - DEBUG - stack ['$phi348.0', '$410call.16']
2025-05-12 23:19:07,386 - numba.core.byteflow - DEBUG - dispatch pc=420, inst=JUMP_BACKWARD(arg=39, lineno=1893)
2025-05-12 23:19:07,386 - numba.core.byteflow - DEBUG - stack ['$phi348.0']
2025-05-12 23:19:07,386 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=344, stack=('$phi348.0',), blockstack=(), npush=0)]
2025-05-12 23:19:07,386 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=344 nstack_initial=1)])
2025-05-12 23:19:07,387 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:07,387 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=248 nstack_initial=1): {'$phi248.0'},
             State(pc_initial=252 nstack_initial=2): {'$phi252.1'},
             State(pc_initial=302 nstack_initial=2): set(),
             State(pc_initial=344 nstack_initial=1): {'$phi344.0'},
             State(pc_initial=348 nstack_initial=2): {'$phi348.1'},
             State(pc_initial=422 nstack_initial=2): set()})
2025-05-12 23:19:07,389 - numba.core.byteflow - DEBUG - defmap: {'$phi248.0': State(pc_initial=0 nstack_initial=0),
 '$phi252.1': State(pc_initial=248 nstack_initial=1),
 '$phi302.1': State(pc_initial=248 nstack_initial=1),
 '$phi344.0': State(pc_initial=302 nstack_initial=2),
 '$phi348.1': State(pc_initial=344 nstack_initial=1),
 '$phi422.1': State(pc_initial=344 nstack_initial=1)}
2025-05-12 23:19:07,391 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi248.0': {('$246get_iter.32',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi252.0',
                            State(pc_initial=252 nstack_initial=2))},
             '$phi252.0': {('$phi248.0',
                            State(pc_initial=248 nstack_initial=1))},
             '$phi252.1': {('$248for_iter.2',
                            State(pc_initial=248 nstack_initial=1))},
             '$phi302.0': {('$phi248.0',
                            State(pc_initial=248 nstack_initial=1))},
             '$phi302.1': {('$248for_iter.2',
                            State(pc_initial=248 nstack_initial=1))},
             '$phi344.0': {('$342get_iter.9',
                            State(pc_initial=302 nstack_initial=2)),
                           ('$phi348.0',
                            State(pc_initial=348 nstack_initial=2))},
             '$phi348.0': {('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi348.1': {('$344for_iter.2',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi422.0': {('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi422.1': {('$344for_iter.2',
                            State(pc_initial=344 nstack_initial=1))}})
2025-05-12 23:19:07,392 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi248.0': {('$246get_iter.32',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi248.0',
                            State(pc_initial=248 nstack_initial=1))},
             '$phi252.0': {('$246get_iter.32',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi252.1': {('$248for_iter.2',
                            State(pc_initial=248 nstack_initial=1))},
             '$phi302.0': {('$246get_iter.32',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi302.1': {('$248for_iter.2',
                            State(pc_initial=248 nstack_initial=1))},
             '$phi344.0': {('$342get_iter.9',
                            State(pc_initial=302 nstack_initial=2)),
                           ('$phi344.0',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi348.0': {('$342get_iter.9',
                            State(pc_initial=302 nstack_initial=2))},
             '$phi348.1': {('$344for_iter.2',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi422.0': {('$342get_iter.9',
                            State(pc_initial=302 nstack_initial=2))},
             '$phi422.1': {('$344for_iter.2',
                            State(pc_initial=344 nstack_initial=1))}})
2025-05-12 23:19:07,393 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi248.0': {('$246get_iter.32',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi252.0': {('$246get_iter.32',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi252.1': {('$248for_iter.2',
                            State(pc_initial=248 nstack_initial=1))},
             '$phi302.0': {('$246get_iter.32',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi302.1': {('$248for_iter.2',
                            State(pc_initial=248 nstack_initial=1))},
             '$phi344.0': {('$342get_iter.9',
                            State(pc_initial=302 nstack_initial=2))},
             '$phi348.0': {('$342get_iter.9',
                            State(pc_initial=302 nstack_initial=2))},
             '$phi348.1': {('$344for_iter.2',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi422.0': {('$342get_iter.9',
                            State(pc_initial=302 nstack_initial=2))},
             '$phi422.1': {('$344for_iter.2',
                            State(pc_initial=344 nstack_initial=1))}})
2025-05-12 23:19:07,394 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi248.0': {('$246get_iter.32',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi252.0': {('$246get_iter.32',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi252.1': {('$248for_iter.2',
                            State(pc_initial=248 nstack_initial=1))},
             '$phi302.0': {('$246get_iter.32',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi302.1': {('$248for_iter.2',
                            State(pc_initial=248 nstack_initial=1))},
             '$phi344.0': {('$342get_iter.9',
                            State(pc_initial=302 nstack_initial=2))},
             '$phi348.0': {('$342get_iter.9',
                            State(pc_initial=302 nstack_initial=2))},
             '$phi348.1': {('$344for_iter.2',
                            State(pc_initial=344 nstack_initial=1))},
             '$phi422.0': {('$342get_iter.9',
                            State(pc_initial=302 nstack_initial=2))},
             '$phi422.1': {('$344for_iter.2',
                            State(pc_initial=344 nstack_initial=1))}})
2025-05-12 23:19:07,395 - numba.core.byteflow - DEBUG - keep phismap: {'$phi248.0': {('$246get_iter.32', State(pc_initial=0 nstack_initial=0))},
 '$phi252.1': {('$248for_iter.2', State(pc_initial=248 nstack_initial=1))},
 '$phi344.0': {('$342get_iter.9', State(pc_initial=302 nstack_initial=2))},
 '$phi348.1': {('$344for_iter.2', State(pc_initial=344 nstack_initial=1))}}
2025-05-12 23:19:07,400 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi248.0': '$246get_iter.32'},
             State(pc_initial=248 nstack_initial=1): {'$phi252.1': '$248for_iter.2'},
             State(pc_initial=302 nstack_initial=2): {'$phi344.0': '$342get_iter.9'},
             State(pc_initial=344 nstack_initial=1): {'$phi348.1': '$344for_iter.2'}})
2025-05-12 23:19:07,401 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:07,401 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$a4.0'}), (6, {'item': '$a4.0', 'res': '$6load_attr.1'}), (26, {'res': '$b26.2'}), (28, {'item': '$b26.2', 'res': '$28load_attr.3'}), (48, {'op': '+', 'lhs': '$6load_attr.1', 'rhs': '$28load_attr.3', 'res': '$binop_add48.4'}), (52, {'value': '$binop_add48.4'}), (54, {'idx': 1, 'res': '$54load_global.5'}), (64, {'res': '$a64.7'}), (66, {'item': '$a64.7', 'res': '$66load_attr.8'}), (86, {'res': '$b86.9'}), (88, {'item': '$b86.9', 'res': '$88load_attr.10'}), (108, {'func': '$54load_global.5', 'args': ['$66load_attr.8', '$88load_attr.10'], 'kw_names': None, 'res': '$108call.11'}), (116, {'value': '$108call.11'}), (118, {'idx': 3, 'res': '$118load_global.12'}), (128, {'res': '$a128.14'}), (130, {'item': '$a128.14', 'res': '$130load_attr.15'}), (150, {'res': '$b150.16'}), (152, {'item': '$b150.16', 'res': '$152load_attr.17'}), (172, {'func': '$118load_global.12', 'args': ['$130load_attr.15', '$152load_attr.17'], 'kw_names': None, 'res': '$172call.18'}), (180, {'value': '$172call.18'}), (182, {'idx': 5, 'res': '$182load_global.19'}), (192, {'res': '$new_kind192.21'}), (194, {'res': '$new_length194.22'}), (196, {'res': '$new_ascii196.23'}), (198, {'func': '$182load_global.19', 'args': ['$new_kind192.21', '$new_length194.22', '$new_ascii196.23'], 'kw_names': None, 'res': '$198call.24'}), (206, {'value': '$198call.24'}), (208, {'idx': 6, 'res': '$208load_global.25'}), (218, {'idx': 7, 'res': '$218load_global.27'}), (228, {'res': '$a228.29'}), (230, {'func': '$218load_global.27', 'args': ['$a228.29'], 'kw_names': None, 'res': '$230call.30'}), (238, {'func': '$208load_global.25', 'args': ['$230call.30'], 'kw_names': None, 'res': '$238call.31'}), (246, {'value': '$238call.31', 'res': '$246get_iter.32'})), outgoing_phis={'$phi248.0': '$246get_iter.32'}, blockstack=(), active_try_block=None, outgoing_edgepushed={248: ('$246get_iter.32',)})
2025-05-12 23:19:07,402 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=248 nstack_initial=1):
AdaptBlockInfo(insts=((248, {'iterator': '$phi248.0', 'pair': '$248for_iter.1', 'indval': '$248for_iter.2', 'pred': '$248for_iter.3'}),), outgoing_phis={'$phi252.1': '$248for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={302: ('$phi248.0', '$248for_iter.2'), 252: ('$phi248.0', '$248for_iter.2')})
2025-05-12 23:19:07,402 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=252 nstack_initial=2):
AdaptBlockInfo(insts=((252, {'value': '$phi252.1'}), (254, {'idx': 8, 'res': '$254load_global.2'}), (264, {'res': '$result264.4'}), (266, {'res': '$i266.5'}), (268, {'idx': 9, 'res': '$268load_global.6'}), (278, {'res': '$a278.8'}), (280, {'res': '$i280.9'}), (282, {'func': '$268load_global.6', 'args': ['$a278.8', '$i280.9'], 'kw_names': None, 'res': '$282call.10'}), (290, {'func': '$254load_global.2', 'args': ['$result264.4', '$i266.5', '$282call.10'], 'kw_names': None, 'res': '$290call.11'}), (300, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={248: ('$phi252.0',)})
2025-05-12 23:19:07,403 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=302 nstack_initial=2):
AdaptBlockInfo(insts=((304, {'idx': 6, 'res': '$304load_global.2'}), (314, {'idx': 7, 'res': '$314load_global.4'}), (324, {'res': '$b324.6'}), (326, {'func': '$314load_global.4', 'args': ['$b324.6'], 'kw_names': None, 'res': '$326call.7'}), (334, {'func': '$304load_global.2', 'args': ['$326call.7'], 'kw_names': None, 'res': '$334call.8'}), (342, {'value': '$334call.8', 'res': '$342get_iter.9'})), outgoing_phis={'$phi344.0': '$342get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={344: ('$342get_iter.9',)})
2025-05-12 23:19:07,403 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=344 nstack_initial=1):
AdaptBlockInfo(insts=((344, {'iterator': '$phi344.0', 'pair': '$344for_iter.1', 'indval': '$344for_iter.2', 'pred': '$344for_iter.3'}),), outgoing_phis={'$phi348.1': '$344for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={422: ('$phi344.0', '$344for_iter.2'), 348: ('$phi344.0', '$344for_iter.2')})
2025-05-12 23:19:07,403 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=348 nstack_initial=2):
AdaptBlockInfo(insts=((348, {'value': '$phi348.1'}), (350, {'idx': 8, 'res': '$350load_global.2'}), (360, {'res': '$result360.4'}), (362, {'idx': 7, 'res': '$362load_global.5'}), (372, {'res': '$a372.7'}), (374, {'func': '$362load_global.5', 'args': ['$a372.7'], 'kw_names': None, 'res': '$374call.8'}), (382, {'res': '$j382.9'}), (384, {'op': '+', 'lhs': '$374call.8', 'rhs': '$j382.9', 'res': '$binop_add384.10'}), (388, {'idx': 9, 'res': '$388load_global.11'}), (398, {'res': '$b398.13'}), (400, {'res': '$j400.14'}), (402, {'func': '$388load_global.11', 'args': ['$b398.13', '$j400.14'], 'kw_names': None, 'res': '$402call.15'}), (410, {'func': '$350load_global.2', 'args': ['$result360.4', '$binop_add384.10', '$402call.15'], 'kw_names': None, 'res': '$410call.16'}), (420, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={344: ('$phi348.0',)})
2025-05-12 23:19:07,404 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=422 nstack_initial=2):
AdaptBlockInfo(insts=((424, {'res': '$result424.2'}), (426, {'retval': '$result424.2', 'castval': '$426return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,406 - numba.core.interpreter - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $6load_attr.1 = getattr(value=a, attr=_length) ['$6load_attr.1', 'a']
    $28load_attr.3 = getattr(value=b, attr=_length) ['$28load_attr.3', 'b']
    new_length = $6load_attr.1 + $28load_attr.3 ['$28load_attr.3', '$6load_attr.1', 'new_length']
    $54load_global.5 = global(_pick_kind: <function _pick_kind at 0x000001E8A8036980>) ['$54load_global.5']
    $66load_attr.8 = getattr(value=a, attr=_kind) ['$66load_attr.8', 'a']
    $88load_attr.10 = getattr(value=b, attr=_kind) ['$88load_attr.10', 'b']
    new_kind = call $54load_global.5($66load_attr.8, $88load_attr.10, func=$54load_global.5, args=[Var($66load_attr.8, unicode.py:1887), Var($88load_attr.10, unicode.py:1887)], kws=(), vararg=None, varkwarg=None, target=None) ['$54load_global.5', '$66load_attr.8', '$88load_attr.10', 'new_kind']
    $118load_global.12 = global(_pick_ascii: <function _pick_ascii at 0x000001E8A8036AC0>) ['$118load_global.12']
    $130load_attr.15 = getattr(value=a, attr=_is_ascii) ['$130load_attr.15', 'a']
    $152load_attr.17 = getattr(value=b, attr=_is_ascii) ['$152load_attr.17', 'b']
    new_ascii = call $118load_global.12($130load_attr.15, $152load_attr.17, func=$118load_global.12, args=[Var($130load_attr.15, unicode.py:1888), Var($152load_attr.17, unicode.py:1888)], kws=(), vararg=None, varkwarg=None, target=None) ['$118load_global.12', '$130load_attr.15', '$152load_attr.17', 'new_ascii']
    $182load_global.19 = global(_empty_string: <function _empty_string at 0x000001E8A8036480>) ['$182load_global.19']
    result = call $182load_global.19(new_kind, new_length, new_ascii, func=$182load_global.19, args=[Var(new_kind, unicode.py:1887), Var(new_length, unicode.py:1886), Var(new_ascii, unicode.py:1888)], kws=(), vararg=None, varkwarg=None, target=None) ['$182load_global.19', 'new_ascii', 'new_kind', 'new_length', 'result']
    $208load_global.25 = global(range: <class 'range'>) ['$208load_global.25']
    $218load_global.27 = global(len: <built-in function len>) ['$218load_global.27']
    $230call.30 = call $218load_global.27(a, func=$218load_global.27, args=[Var(a, unicode.py:1885)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.27', '$230call.30', 'a']
    $238call.31 = call $208load_global.25($230call.30, func=$208load_global.25, args=[Var($230call.30, unicode.py:1890)], kws=(), vararg=None, varkwarg=None, target=None) ['$208load_global.25', '$230call.30', '$238call.31']
    $246get_iter.32 = getiter(value=$238call.31) ['$238call.31', '$246get_iter.32']
    $phi248.0 = $246get_iter.32              ['$246get_iter.32', '$phi248.0']
    jump 248                                 []
label 248:
    $248for_iter.1 = iternext(value=$phi248.0) ['$248for_iter.1', '$phi248.0']
    $248for_iter.2 = pair_first(value=$248for_iter.1) ['$248for_iter.1', '$248for_iter.2']
    $248for_iter.3 = pair_second(value=$248for_iter.1) ['$248for_iter.1', '$248for_iter.3']
    $phi252.1 = $248for_iter.2               ['$248for_iter.2', '$phi252.1']
    branch $248for_iter.3, 252, 302          ['$248for_iter.3']
label 252:
    i = $phi252.1                            ['$phi252.1', 'i']
    $254load_global.2 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>) ['$254load_global.2']
    $268load_global.6 = global(_get_code_point: <function _get_code_point at 0x000001E8A80365C0>) ['$268load_global.6']
    $282call.10 = call $268load_global.6(a, i, func=$268load_global.6, args=[Var(a, unicode.py:1885), Var(i, unicode.py:1890)], kws=(), vararg=None, varkwarg=None, target=None) ['$268load_global.6', '$282call.10', 'a', 'i']
    $290call.11 = call $254load_global.2(result, i, $282call.10, func=$254load_global.2, args=[Var(result, unicode.py:1889), Var(i, unicode.py:1890), Var($282call.10, unicode.py:1891)], kws=(), vararg=None, varkwarg=None, target=None) ['$254load_global.2', '$282call.10', '$290call.11', 'i', 'result']
    jump 248                                 []
label 302:
    $304load_global.2 = global(range: <class 'range'>) ['$304load_global.2']
    $314load_global.4 = global(len: <built-in function len>) ['$314load_global.4']
    $326call.7 = call $314load_global.4(b, func=$314load_global.4, args=[Var(b, unicode.py:1885)], kws=(), vararg=None, varkwarg=None, target=None) ['$314load_global.4', '$326call.7', 'b']
    $334call.8 = call $304load_global.2($326call.7, func=$304load_global.2, args=[Var($326call.7, unicode.py:1892)], kws=(), vararg=None, varkwarg=None, target=None) ['$304load_global.2', '$326call.7', '$334call.8']
    $342get_iter.9 = getiter(value=$334call.8) ['$334call.8', '$342get_iter.9']
    $phi344.0 = $342get_iter.9               ['$342get_iter.9', '$phi344.0']
    jump 344                                 []
label 344:
    $344for_iter.1 = iternext(value=$phi344.0) ['$344for_iter.1', '$phi344.0']
    $344for_iter.2 = pair_first(value=$344for_iter.1) ['$344for_iter.1', '$344for_iter.2']
    $344for_iter.3 = pair_second(value=$344for_iter.1) ['$344for_iter.1', '$344for_iter.3']
    $phi348.1 = $344for_iter.2               ['$344for_iter.2', '$phi348.1']
    branch $344for_iter.3, 348, 422          ['$344for_iter.3']
label 348:
    j = $phi348.1                            ['$phi348.1', 'j']
    $350load_global.2 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>) ['$350load_global.2']
    $362load_global.5 = global(len: <built-in function len>) ['$362load_global.5']
    $374call.8 = call $362load_global.5(a, func=$362load_global.5, args=[Var(a, unicode.py:1885)], kws=(), vararg=None, varkwarg=None, target=None) ['$362load_global.5', '$374call.8', 'a']
    $binop_add384.10 = $374call.8 + j        ['$374call.8', '$binop_add384.10', 'j']
    $388load_global.11 = global(_get_code_point: <function _get_code_point at 0x000001E8A80365C0>) ['$388load_global.11']
    $402call.15 = call $388load_global.11(b, j, func=$388load_global.11, args=[Var(b, unicode.py:1885), Var(j, unicode.py:1892)], kws=(), vararg=None, varkwarg=None, target=None) ['$388load_global.11', '$402call.15', 'b', 'j']
    $410call.16 = call $350load_global.2(result, $binop_add384.10, $402call.15, func=$350load_global.2, args=[Var(result, unicode.py:1889), Var($binop_add384.10, unicode.py:1893), Var($402call.15, unicode.py:1893)], kws=(), vararg=None, varkwarg=None, target=None) ['$350load_global.2', '$402call.15', '$410call.16', '$binop_add384.10', 'result']
    jump 344                                 []
label 422:
    $426return_value.3 = cast(value=result)  ['$426return_value.3', 'result']
    return $426return_value.3                ['$426return_value.3']

2025-05-12 23:19:07,420 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:07,420 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8875790>
2025-05-12 23:19:07,421 - numba.core.ssa - DEBUG - on stmt: a = arg(0, name=a)
2025-05-12 23:19:07,424 - numba.core.ssa - DEBUG - on stmt: b = arg(1, name=b)
2025-05-12 23:19:07,424 - numba.core.ssa - DEBUG - on stmt: $6load_attr.1 = getattr(value=a, attr=_length)
2025-05-12 23:19:07,425 - numba.core.ssa - DEBUG - on stmt: $28load_attr.3 = getattr(value=b, attr=_length)
2025-05-12 23:19:07,425 - numba.core.ssa - DEBUG - on stmt: new_length = $6load_attr.1 + $28load_attr.3
2025-05-12 23:19:07,425 - numba.core.ssa - DEBUG - on stmt: $54load_global.5 = global(_pick_kind: <function _pick_kind at 0x000001E8A8036980>)
2025-05-12 23:19:07,425 - numba.core.ssa - DEBUG - on stmt: $66load_attr.8 = getattr(value=a, attr=_kind)
2025-05-12 23:19:07,426 - numba.core.ssa - DEBUG - on stmt: $88load_attr.10 = getattr(value=b, attr=_kind)
2025-05-12 23:19:07,426 - numba.core.ssa - DEBUG - on stmt: new_kind = call $54load_global.5($66load_attr.8, $88load_attr.10, func=$54load_global.5, args=[Var($66load_attr.8, unicode.py:1887), Var($88load_attr.10, unicode.py:1887)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,426 - numba.core.ssa - DEBUG - on stmt: $118load_global.12 = global(_pick_ascii: <function _pick_ascii at 0x000001E8A8036AC0>)
2025-05-12 23:19:07,426 - numba.core.ssa - DEBUG - on stmt: $130load_attr.15 = getattr(value=a, attr=_is_ascii)
2025-05-12 23:19:07,426 - numba.core.ssa - DEBUG - on stmt: $152load_attr.17 = getattr(value=b, attr=_is_ascii)
2025-05-12 23:19:07,427 - numba.core.ssa - DEBUG - on stmt: new_ascii = call $118load_global.12($130load_attr.15, $152load_attr.17, func=$118load_global.12, args=[Var($130load_attr.15, unicode.py:1888), Var($152load_attr.17, unicode.py:1888)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,427 - numba.core.ssa - DEBUG - on stmt: $182load_global.19 = global(_empty_string: <function _empty_string at 0x000001E8A8036480>)
2025-05-12 23:19:07,427 - numba.core.ssa - DEBUG - on stmt: result = call $182load_global.19(new_kind, new_length, new_ascii, func=$182load_global.19, args=[Var(new_kind, unicode.py:1887), Var(new_length, unicode.py:1886), Var(new_ascii, unicode.py:1888)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,428 - numba.core.ssa - DEBUG - on stmt: $208load_global.25 = global(range: <class 'range'>)
2025-05-12 23:19:07,428 - numba.core.ssa - DEBUG - on stmt: $218load_global.27 = global(len: <built-in function len>)
2025-05-12 23:19:07,428 - numba.core.ssa - DEBUG - on stmt: $230call.30 = call $218load_global.27(a, func=$218load_global.27, args=[Var(a, unicode.py:1885)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,429 - numba.core.ssa - DEBUG - on stmt: $238call.31 = call $208load_global.25($230call.30, func=$208load_global.25, args=[Var($230call.30, unicode.py:1890)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,432 - numba.core.ssa - DEBUG - on stmt: $246get_iter.32 = getiter(value=$238call.31)
2025-05-12 23:19:07,433 - numba.core.ssa - DEBUG - on stmt: $phi248.0 = $246get_iter.32
2025-05-12 23:19:07,433 - numba.core.ssa - DEBUG - on stmt: jump 248
2025-05-12 23:19:07,434 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 248
2025-05-12 23:19:07,434 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8875790>
2025-05-12 23:19:07,434 - numba.core.ssa - DEBUG - on stmt: $248for_iter.1 = iternext(value=$phi248.0)
2025-05-12 23:19:07,434 - numba.core.ssa - DEBUG - on stmt: $248for_iter.2 = pair_first(value=$248for_iter.1)
2025-05-12 23:19:07,435 - numba.core.ssa - DEBUG - on stmt: $248for_iter.3 = pair_second(value=$248for_iter.1)
2025-05-12 23:19:07,435 - numba.core.ssa - DEBUG - on stmt: $phi252.1 = $248for_iter.2
2025-05-12 23:19:07,435 - numba.core.ssa - DEBUG - on stmt: branch $248for_iter.3, 252, 302
2025-05-12 23:19:07,435 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 252
2025-05-12 23:19:07,435 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8875790>
2025-05-12 23:19:07,436 - numba.core.ssa - DEBUG - on stmt: i = $phi252.1
2025-05-12 23:19:07,436 - numba.core.ssa - DEBUG - on stmt: $254load_global.2 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:07,436 - numba.core.ssa - DEBUG - on stmt: $268load_global.6 = global(_get_code_point: <function _get_code_point at 0x000001E8A80365C0>)
2025-05-12 23:19:07,436 - numba.core.ssa - DEBUG - on stmt: $282call.10 = call $268load_global.6(a, i, func=$268load_global.6, args=[Var(a, unicode.py:1885), Var(i, unicode.py:1890)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,437 - numba.core.ssa - DEBUG - on stmt: $290call.11 = call $254load_global.2(result, i, $282call.10, func=$254load_global.2, args=[Var(result, unicode.py:1889), Var(i, unicode.py:1890), Var($282call.10, unicode.py:1891)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,437 - numba.core.ssa - DEBUG - on stmt: jump 248
2025-05-12 23:19:07,437 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 302
2025-05-12 23:19:07,437 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8875790>
2025-05-12 23:19:07,438 - numba.core.ssa - DEBUG - on stmt: $304load_global.2 = global(range: <class 'range'>)
2025-05-12 23:19:07,442 - numba.core.ssa - DEBUG - on stmt: $314load_global.4 = global(len: <built-in function len>)
2025-05-12 23:19:07,443 - numba.core.ssa - DEBUG - on stmt: $326call.7 = call $314load_global.4(b, func=$314load_global.4, args=[Var(b, unicode.py:1885)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,443 - numba.core.ssa - DEBUG - on stmt: $334call.8 = call $304load_global.2($326call.7, func=$304load_global.2, args=[Var($326call.7, unicode.py:1892)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,443 - numba.core.ssa - DEBUG - on stmt: $342get_iter.9 = getiter(value=$334call.8)
2025-05-12 23:19:07,443 - numba.core.ssa - DEBUG - on stmt: $phi344.0 = $342get_iter.9
2025-05-12 23:19:07,444 - numba.core.ssa - DEBUG - on stmt: jump 344
2025-05-12 23:19:07,444 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 344
2025-05-12 23:19:07,444 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8875790>
2025-05-12 23:19:07,445 - numba.core.ssa - DEBUG - on stmt: $344for_iter.1 = iternext(value=$phi344.0)
2025-05-12 23:19:07,445 - numba.core.ssa - DEBUG - on stmt: $344for_iter.2 = pair_first(value=$344for_iter.1)
2025-05-12 23:19:07,445 - numba.core.ssa - DEBUG - on stmt: $344for_iter.3 = pair_second(value=$344for_iter.1)
2025-05-12 23:19:07,445 - numba.core.ssa - DEBUG - on stmt: $phi348.1 = $344for_iter.2
2025-05-12 23:19:07,447 - numba.core.ssa - DEBUG - on stmt: branch $344for_iter.3, 348, 422
2025-05-12 23:19:07,448 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 348
2025-05-12 23:19:07,448 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8875790>
2025-05-12 23:19:07,449 - numba.core.ssa - DEBUG - on stmt: j = $phi348.1
2025-05-12 23:19:07,449 - numba.core.ssa - DEBUG - on stmt: $350load_global.2 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:07,449 - numba.core.ssa - DEBUG - on stmt: $362load_global.5 = global(len: <built-in function len>)
2025-05-12 23:19:07,451 - numba.core.ssa - DEBUG - on stmt: $374call.8 = call $362load_global.5(a, func=$362load_global.5, args=[Var(a, unicode.py:1885)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,451 - numba.core.ssa - DEBUG - on stmt: $binop_add384.10 = $374call.8 + j
2025-05-12 23:19:07,452 - numba.core.ssa - DEBUG - on stmt: $388load_global.11 = global(_get_code_point: <function _get_code_point at 0x000001E8A80365C0>)
2025-05-12 23:19:07,452 - numba.core.ssa - DEBUG - on stmt: $402call.15 = call $388load_global.11(b, j, func=$388load_global.11, args=[Var(b, unicode.py:1885), Var(j, unicode.py:1892)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,452 - numba.core.ssa - DEBUG - on stmt: $410call.16 = call $350load_global.2(result, $binop_add384.10, $402call.15, func=$350load_global.2, args=[Var(result, unicode.py:1889), Var($binop_add384.10, unicode.py:1893), Var($402call.15, unicode.py:1893)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,452 - numba.core.ssa - DEBUG - on stmt: jump 344
2025-05-12 23:19:07,452 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 422
2025-05-12 23:19:07,453 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8875790>
2025-05-12 23:19:07,453 - numba.core.ssa - DEBUG - on stmt: $426return_value.3 = cast(value=result)
2025-05-12 23:19:07,453 - numba.core.ssa - DEBUG - on stmt: return $426return_value.3
2025-05-12 23:19:07,453 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$118load_global.12': [(<numba.core.ir.Assign object at 0x000001E8A8874D40>,
                                     0)],
             '$130load_attr.15': [(<numba.core.ir.Assign object at 0x000001E8A88758E0>,
                                   0)],
             '$152load_attr.17': [(<numba.core.ir.Assign object at 0x000001E8A8874860>,
                                   0)],
             '$182load_global.19': [(<numba.core.ir.Assign object at 0x000001E8A88740E0>,
                                     0)],
             '$208load_global.25': [(<numba.core.ir.Assign object at 0x000001E8A88752B0>,
                                     0)],
             '$218load_global.27': [(<numba.core.ir.Assign object at 0x000001E8A88776E0>,
                                     0)],
             '$230call.30': [(<numba.core.ir.Assign object at 0x000001E8A8892F60>,
                              0)],
             '$238call.31': [(<numba.core.ir.Assign object at 0x000001E8A88915B0>,
                              0)],
             '$246get_iter.32': [(<numba.core.ir.Assign object at 0x000001E8A88913D0>,
                                  0)],
             '$248for_iter.1': [(<numba.core.ir.Assign object at 0x000001E8A8874680>,
                                 248)],
             '$248for_iter.2': [(<numba.core.ir.Assign object at 0x000001E8A8874200>,
                                 248)],
             '$248for_iter.3': [(<numba.core.ir.Assign object at 0x000001E8A8877F80>,
                                 248)],
             '$254load_global.2': [(<numba.core.ir.Assign object at 0x000001E8A8890E00>,
                                    252)],
             '$268load_global.6': [(<numba.core.ir.Assign object at 0x000001E8A8890B30>,
                                    252)],
             '$282call.10': [(<numba.core.ir.Assign object at 0x000001E8A8891D90>,
                              252)],
             '$28load_attr.3': [(<numba.core.ir.Assign object at 0x000001E8A8875520>,
                                 0)],
             '$290call.11': [(<numba.core.ir.Assign object at 0x000001E8A8891BB0>,
                              252)],
             '$304load_global.2': [(<numba.core.ir.Assign object at 0x000001E8A8891A30>,
                                    302)],
             '$314load_global.4': [(<numba.core.ir.Assign object at 0x000001E8A8891970>,
                                    302)],
             '$326call.7': [(<numba.core.ir.Assign object at 0x000001E8A8890080>,
                             302)],
             '$334call.8': [(<numba.core.ir.Assign object at 0x000001E8A8890230>,
                             302)],
             '$342get_iter.9': [(<numba.core.ir.Assign object at 0x000001E8A8890350>,
                                 302)],
             '$344for_iter.1': [(<numba.core.ir.Assign object at 0x000001E8A8891280>,
                                 344)],
             '$344for_iter.2': [(<numba.core.ir.Assign object at 0x000001E8A8893EC0>,
                                 344)],
             '$344for_iter.3': [(<numba.core.ir.Assign object at 0x000001E8A8893CB0>,
                                 344)],
             '$350load_global.2': [(<numba.core.ir.Assign object at 0x000001E8A8893260>,
                                    348)],
             '$362load_global.5': [(<numba.core.ir.Assign object at 0x000001E8A88933E0>,
                                    348)],
             '$374call.8': [(<numba.core.ir.Assign object at 0x000001E8A8875880>,
                             348)],
             '$388load_global.11': [(<numba.core.ir.Assign object at 0x000001E8A88A5A90>,
                                     348)],
             '$402call.15': [(<numba.core.ir.Assign object at 0x000001E8A8893A10>,
                              348)],
             '$410call.16': [(<numba.core.ir.Assign object at 0x000001E8A88930B0>,
                              348)],
             '$426return_value.3': [(<numba.core.ir.Assign object at 0x000001E8A8893020>,
                                     422)],
             '$54load_global.5': [(<numba.core.ir.Assign object at 0x000001E8A8875AF0>,
                                   0)],
             '$66load_attr.8': [(<numba.core.ir.Assign object at 0x000001E8A88757F0>,
                                 0)],
             '$6load_attr.1': [(<numba.core.ir.Assign object at 0x000001E8A8876D80>,
                                0)],
             '$88load_attr.10': [(<numba.core.ir.Assign object at 0x000001E8A8874740>,
                                  0)],
             '$binop_add384.10': [(<numba.core.ir.Assign object at 0x000001E8A88C08F0>,
                                   348)],
             '$phi248.0': [(<numba.core.ir.Assign object at 0x000001E8A8876E40>,
                            0)],
             '$phi252.1': [(<numba.core.ir.Assign object at 0x000001E8A88911F0>,
                            248)],
             '$phi344.0': [(<numba.core.ir.Assign object at 0x000001E8A8891F40>,
                            302)],
             '$phi348.1': [(<numba.core.ir.Assign object at 0x000001E8A8893C80>,
                            344)],
             'a': [(<numba.core.ir.Assign object at 0x000001E8A8876A20>, 0)],
             'b': [(<numba.core.ir.Assign object at 0x000001E8A8876B40>, 0)],
             'i': [(<numba.core.ir.Assign object at 0x000001E8A8891FD0>, 252)],
             'j': [(<numba.core.ir.Assign object at 0x000001E8A8893230>, 348)],
             'new_ascii': [(<numba.core.ir.Assign object at 0x000001E8A8874530>,
                            0)],
             'new_kind': [(<numba.core.ir.Assign object at 0x000001E8A8874B60>,
                           0)],
             'new_length': [(<numba.core.ir.Assign object at 0x000001E8A8876000>,
                             0)],
             'result': [(<numba.core.ir.Assign object at 0x000001E8A8875670>,
                         0)]})
2025-05-12 23:19:07,461 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8875790>
2025-05-12 23:19:07,484 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=356)
           2	RESUME(arg=0, lineno=356)
           4	LOAD_FAST(arg=0, lineno=358)
           6	LOAD_GLOBAL(arg=0, lineno=358)
          16	COMPARE_OP(arg=40, lineno=358)
          20	POP_JUMP_IF_FALSE(arg=2, lineno=358)
          22	LOAD_FAST(arg=1, lineno=359)
          24	RETURN_VALUE(arg=None, lineno=359)
>         26	LOAD_FAST(arg=0, lineno=360)
          28	LOAD_GLOBAL(arg=2, lineno=360)
          38	COMPARE_OP(arg=40, lineno=360)
          42	POP_JUMP_IF_FALSE(arg=13, lineno=360)
          44	LOAD_FAST(arg=1, lineno=361)
          46	LOAD_GLOBAL(arg=4, lineno=361)
          56	COMPARE_OP(arg=40, lineno=361)
          60	POP_JUMP_IF_FALSE(arg=2, lineno=361)
          62	LOAD_FAST(arg=1, lineno=362)
          64	RETURN_VALUE(arg=None, lineno=362)
>         66	LOAD_FAST(arg=0, lineno=364)
          68	RETURN_VALUE(arg=None, lineno=364)
>         70	LOAD_FAST(arg=0, lineno=365)
          72	LOAD_GLOBAL(arg=4, lineno=365)
          82	COMPARE_OP(arg=40, lineno=365)
          86	POP_JUMP_IF_FALSE(arg=2, lineno=365)
          88	LOAD_FAST(arg=0, lineno=366)
          90	RETURN_VALUE(arg=None, lineno=366)
>         92	LOAD_GLOBAL(arg=7, lineno=368)
         102	LOAD_CONST(arg=1, lineno=369)
         104	CALL(arg=1, lineno=368)
         112	RAISE_VARARGS(arg=1, lineno=368)
2025-05-12 23:19:07,485 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:07,485 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,486 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:07,486 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=356)
2025-05-12 23:19:07,486 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,486 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=356)
2025-05-12 23:19:07,487 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,487 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=358)
2025-05-12 23:19:07,487 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,487 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=358)
2025-05-12 23:19:07,487 - numba.core.byteflow - DEBUG - stack ['$kind14.0']
2025-05-12 23:19:07,488 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=40, lineno=358)
2025-05-12 23:19:07,488 - numba.core.byteflow - DEBUG - stack ['$kind14.0', '$6load_global.1']
2025-05-12 23:19:07,488 - numba.core.byteflow - DEBUG - dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=2, lineno=358)
2025-05-12 23:19:07,488 - numba.core.byteflow - DEBUG - stack ['$16compare_op.2']
2025-05-12 23:19:07,489 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:07,489 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
2025-05-12 23:19:07,491 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,491 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=22 nstack_initial=0)
2025-05-12 23:19:07,492 - numba.core.byteflow - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=359)
2025-05-12 23:19:07,492 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,492 - numba.core.byteflow - DEBUG - dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=359)
2025-05-12 23:19:07,492 - numba.core.byteflow - DEBUG - stack ['$kind222.0']
2025-05-12 23:19:07,493 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,493 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=26 nstack_initial=0)])
2025-05-12 23:19:07,493 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,493 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=26 nstack_initial=0)
2025-05-12 23:19:07,493 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=360)
2025-05-12 23:19:07,493 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,494 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=LOAD_GLOBAL(arg=2, lineno=360)
2025-05-12 23:19:07,494 - numba.core.byteflow - DEBUG - stack ['$kind126.0']
2025-05-12 23:19:07,494 - numba.core.byteflow - DEBUG - dispatch pc=38, inst=COMPARE_OP(arg=40, lineno=360)
2025-05-12 23:19:07,494 - numba.core.byteflow - DEBUG - stack ['$kind126.0', '$28load_global.1']
2025-05-12 23:19:07,494 - numba.core.byteflow - DEBUG - dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=13, lineno=360)
2025-05-12 23:19:07,495 - numba.core.byteflow - DEBUG - stack ['$38compare_op.2']
2025-05-12 23:19:07,495 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=70, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:07,495 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=70 nstack_initial=0)])
2025-05-12 23:19:07,495 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,497 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=44 nstack_initial=0)
2025-05-12 23:19:07,497 - numba.core.byteflow - DEBUG - dispatch pc=44, inst=LOAD_FAST(arg=1, lineno=361)
2025-05-12 23:19:07,497 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,498 - numba.core.byteflow - DEBUG - dispatch pc=46, inst=LOAD_GLOBAL(arg=4, lineno=361)
2025-05-12 23:19:07,498 - numba.core.byteflow - DEBUG - stack ['$kind244.0']
2025-05-12 23:19:07,498 - numba.core.byteflow - DEBUG - dispatch pc=56, inst=COMPARE_OP(arg=40, lineno=361)
2025-05-12 23:19:07,499 - numba.core.byteflow - DEBUG - stack ['$kind244.0', '$46load_global.1']
2025-05-12 23:19:07,499 - numba.core.byteflow - DEBUG - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=2, lineno=361)
2025-05-12 23:19:07,499 - numba.core.byteflow - DEBUG - stack ['$56compare_op.2']
2025-05-12 23:19:07,499 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:07,499 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=62 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
2025-05-12 23:19:07,500 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,500 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=70 nstack_initial=0)
2025-05-12 23:19:07,501 - numba.core.byteflow - DEBUG - dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=365)
2025-05-12 23:19:07,501 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,501 - numba.core.byteflow - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=4, lineno=365)
2025-05-12 23:19:07,501 - numba.core.byteflow - DEBUG - stack ['$kind170.0']
2025-05-12 23:19:07,502 - numba.core.byteflow - DEBUG - dispatch pc=82, inst=COMPARE_OP(arg=40, lineno=365)
2025-05-12 23:19:07,502 - numba.core.byteflow - DEBUG - stack ['$kind170.0', '$72load_global.1']
2025-05-12 23:19:07,502 - numba.core.byteflow - DEBUG - dispatch pc=86, inst=POP_JUMP_IF_FALSE(arg=2, lineno=365)
2025-05-12 23:19:07,502 - numba.core.byteflow - DEBUG - stack ['$82compare_op.2']
2025-05-12 23:19:07,503 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=88, stack=(), blockstack=(), npush=0), Edge(pc=92, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:07,503 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=66 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
2025-05-12 23:19:07,503 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,503 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=0)
2025-05-12 23:19:07,503 - numba.core.byteflow - DEBUG - dispatch pc=62, inst=LOAD_FAST(arg=1, lineno=362)
2025-05-12 23:19:07,503 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,504 - numba.core.byteflow - DEBUG - dispatch pc=64, inst=RETURN_VALUE(arg=None, lineno=362)
2025-05-12 23:19:07,504 - numba.core.byteflow - DEBUG - stack ['$kind262.0']
2025-05-12 23:19:07,504 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,505 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
2025-05-12 23:19:07,505 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,506 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=66 nstack_initial=0)
2025-05-12 23:19:07,506 - numba.core.byteflow - DEBUG - dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=364)
2025-05-12 23:19:07,506 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,508 - numba.core.byteflow - DEBUG - dispatch pc=68, inst=RETURN_VALUE(arg=None, lineno=364)
2025-05-12 23:19:07,510 - numba.core.byteflow - DEBUG - stack ['$kind166.0']
2025-05-12 23:19:07,510 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,510 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=92 nstack_initial=0)])
2025-05-12 23:19:07,510 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,510 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=88 nstack_initial=0)
2025-05-12 23:19:07,510 - numba.core.byteflow - DEBUG - dispatch pc=88, inst=LOAD_FAST(arg=0, lineno=366)
2025-05-12 23:19:07,510 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,511 - numba.core.byteflow - DEBUG - dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=366)
2025-05-12 23:19:07,511 - numba.core.byteflow - DEBUG - stack ['$kind188.0']
2025-05-12 23:19:07,511 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,511 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=92 nstack_initial=0)])
2025-05-12 23:19:07,511 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,512 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=92 nstack_initial=0)
2025-05-12 23:19:07,512 - numba.core.byteflow - DEBUG - dispatch pc=92, inst=LOAD_GLOBAL(arg=7, lineno=368)
2025-05-12 23:19:07,512 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,512 - numba.core.byteflow - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=1, lineno=369)
2025-05-12 23:19:07,512 - numba.core.byteflow - DEBUG - stack ['$null$92.1', '$92load_global.0']
2025-05-12 23:19:07,513 - numba.core.byteflow - DEBUG - dispatch pc=104, inst=CALL(arg=1, lineno=368)
2025-05-12 23:19:07,515 - numba.core.byteflow - DEBUG - stack ['$null$92.1', '$92load_global.0', '$const102.2.1']
2025-05-12 23:19:07,515 - numba.core.byteflow - DEBUG - dispatch pc=112, inst=RAISE_VARARGS(arg=1, lineno=368)
2025-05-12 23:19:07,516 - numba.core.byteflow - DEBUG - stack ['$104call.3']
2025-05-12 23:19:07,516 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,516 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:07,517 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set()})
2025-05-12 23:19:07,517 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:07,518 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:07,518 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:07,518 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:07,518 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:07,518 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:07,519 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$kind14.0'}), (6, {'idx': 0, 'res': '$6load_global.1'}), (16, {'lhs': '$kind14.0', 'rhs': '$6load_global.1', 'res': '$16compare_op.2'}), (20, {'pred': '$16compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 26: ()})
2025-05-12 23:19:07,519 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$kind222.0'}), (24, {'retval': '$kind222.0', 'castval': '$24return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,519 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$kind126.0'}), (28, {'idx': 1, 'res': '$28load_global.1'}), (38, {'lhs': '$kind126.0', 'rhs': '$28load_global.1', 'res': '$38compare_op.2'}), (42, {'pred': '$38compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 70: ()})
2025-05-12 23:19:07,519 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$kind244.0'}), (46, {'idx': 2, 'res': '$46load_global.1'}), (56, {'lhs': '$kind244.0', 'rhs': '$46load_global.1', 'res': '$56compare_op.2'}), (60, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 66: ()})
2025-05-12 23:19:07,521 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$kind262.0'}), (64, {'retval': '$kind262.0', 'castval': '$64return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,521 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$kind166.0'}), (68, {'retval': '$kind166.0', 'castval': '$68return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,522 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$kind170.0'}), (72, {'idx': 2, 'res': '$72load_global.1'}), (82, {'lhs': '$kind170.0', 'rhs': '$72load_global.1', 'res': '$82compare_op.2'}), (86, {'pred': '$82compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: (), 92: ()})
2025-05-12 23:19:07,524 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$kind188.0'}), (90, {'retval': '$kind188.0', 'castval': '$90return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,524 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'idx': 3, 'res': '$92load_global.0'}), (102, {'res': '$const102.2.1'}), (104, {'func': '$92load_global.0', 'args': ['$const102.2.1'], 'kw_names': None, 'res': '$104call.3'}), (112, {'exc': '$104call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,526 - numba.core.interpreter - DEBUG - label 0:
    kind1 = arg(0, name=kind1)               ['kind1']
    kind2 = arg(1, name=kind2)               ['kind2']
    $6load_global.1 = global(PY_UNICODE_1BYTE_KIND: 1) ['$6load_global.1']
    $16compare_op.2 = kind1 == $6load_global.1 ['$16compare_op.2', '$6load_global.1', 'kind1']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($16compare_op.2, func=bool20, args=(Var($16compare_op.2, unicode.py:358),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.2', '$20pred', 'bool20']
    branch $20pred, 22, 26                   ['$20pred']
label 22:
    $24return_value.1 = cast(value=kind2)    ['$24return_value.1', 'kind2']
    return $24return_value.1                 ['$24return_value.1']
label 26:
    $28load_global.1 = global(PY_UNICODE_2BYTE_KIND: 2) ['$28load_global.1']
    $38compare_op.2 = kind1 == $28load_global.1 ['$28load_global.1', '$38compare_op.2', 'kind1']
    bool42 = global(bool: <class 'bool'>)    ['bool42']
    $42pred = call bool42($38compare_op.2, func=bool42, args=(Var($38compare_op.2, unicode.py:360),), kws=(), vararg=None, varkwarg=None, target=None) ['$38compare_op.2', '$42pred', 'bool42']
    branch $42pred, 44, 70                   ['$42pred']
label 44:
    $46load_global.1 = global(PY_UNICODE_4BYTE_KIND: 4) ['$46load_global.1']
    $56compare_op.2 = kind2 == $46load_global.1 ['$46load_global.1', '$56compare_op.2', 'kind2']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($56compare_op.2, func=bool60, args=(Var($56compare_op.2, unicode.py:361),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$60pred', 'bool60']
    branch $60pred, 62, 66                   ['$60pred']
label 62:
    $64return_value.1 = cast(value=kind2)    ['$64return_value.1', 'kind2']
    return $64return_value.1                 ['$64return_value.1']
label 66:
    $68return_value.1 = cast(value=kind1)    ['$68return_value.1', 'kind1']
    return $68return_value.1                 ['$68return_value.1']
label 70:
    $72load_global.1 = global(PY_UNICODE_4BYTE_KIND: 4) ['$72load_global.1']
    $82compare_op.2 = kind1 == $72load_global.1 ['$72load_global.1', '$82compare_op.2', 'kind1']
    bool86 = global(bool: <class 'bool'>)    ['bool86']
    $86pred = call bool86($82compare_op.2, func=bool86, args=(Var($82compare_op.2, unicode.py:365),), kws=(), vararg=None, varkwarg=None, target=None) ['$82compare_op.2', '$86pred', 'bool86']
    branch $86pred, 88, 92                   ['$86pred']
label 88:
    $90return_value.1 = cast(value=kind1)    ['$90return_value.1', 'kind1']
    return $90return_value.1                 ['$90return_value.1']
label 92:
    $92load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$92load_global.0']
    $const102.2.1 = const(str, Unexpected unicode representation in _pick_kind) ['$const102.2.1']
    $104call.3 = call $92load_global.0($const102.2.1, func=$92load_global.0, args=[Var($const102.2.1, unicode.py:369)], kws=(), vararg=None, varkwarg=None, target=None) ['$104call.3', '$92load_global.0', '$const102.2.1']
    raise $104call.3                         ['$104call.3']

2025-05-12 23:19:07,536 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:07,537 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8853E60>
2025-05-12 23:19:07,537 - numba.core.ssa - DEBUG - on stmt: kind1 = arg(0, name=kind1)
2025-05-12 23:19:07,537 - numba.core.ssa - DEBUG - on stmt: kind2 = arg(1, name=kind2)
2025-05-12 23:19:07,538 - numba.core.ssa - DEBUG - on stmt: $6load_global.1 = global(PY_UNICODE_1BYTE_KIND: 1)
2025-05-12 23:19:07,538 - numba.core.ssa - DEBUG - on stmt: $16compare_op.2 = kind1 == $6load_global.1
2025-05-12 23:19:07,538 - numba.core.ssa - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-05-12 23:19:07,539 - numba.core.ssa - DEBUG - on stmt: $20pred = call bool20($16compare_op.2, func=bool20, args=(Var($16compare_op.2, unicode.py:358),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,540 - numba.core.ssa - DEBUG - on stmt: branch $20pred, 22, 26
2025-05-12 23:19:07,540 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 22
2025-05-12 23:19:07,540 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8853E60>
2025-05-12 23:19:07,540 - numba.core.ssa - DEBUG - on stmt: $24return_value.1 = cast(value=kind2)
2025-05-12 23:19:07,542 - numba.core.ssa - DEBUG - on stmt: return $24return_value.1
2025-05-12 23:19:07,542 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 26
2025-05-12 23:19:07,542 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8853E60>
2025-05-12 23:19:07,543 - numba.core.ssa - DEBUG - on stmt: $28load_global.1 = global(PY_UNICODE_2BYTE_KIND: 2)
2025-05-12 23:19:07,543 - numba.core.ssa - DEBUG - on stmt: $38compare_op.2 = kind1 == $28load_global.1
2025-05-12 23:19:07,543 - numba.core.ssa - DEBUG - on stmt: bool42 = global(bool: <class 'bool'>)
2025-05-12 23:19:07,544 - numba.core.ssa - DEBUG - on stmt: $42pred = call bool42($38compare_op.2, func=bool42, args=(Var($38compare_op.2, unicode.py:360),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,544 - numba.core.ssa - DEBUG - on stmt: branch $42pred, 44, 70
2025-05-12 23:19:07,544 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 44
2025-05-12 23:19:07,544 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8853E60>
2025-05-12 23:19:07,545 - numba.core.ssa - DEBUG - on stmt: $46load_global.1 = global(PY_UNICODE_4BYTE_KIND: 4)
2025-05-12 23:19:07,545 - numba.core.ssa - DEBUG - on stmt: $56compare_op.2 = kind2 == $46load_global.1
2025-05-12 23:19:07,545 - numba.core.ssa - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-05-12 23:19:07,546 - numba.core.ssa - DEBUG - on stmt: $60pred = call bool60($56compare_op.2, func=bool60, args=(Var($56compare_op.2, unicode.py:361),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,546 - numba.core.ssa - DEBUG - on stmt: branch $60pred, 62, 66
2025-05-12 23:19:07,546 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 62
2025-05-12 23:19:07,549 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8853E60>
2025-05-12 23:19:07,549 - numba.core.ssa - DEBUG - on stmt: $64return_value.1 = cast(value=kind2)
2025-05-12 23:19:07,550 - numba.core.ssa - DEBUG - on stmt: return $64return_value.1
2025-05-12 23:19:07,551 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 66
2025-05-12 23:19:07,551 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8853E60>
2025-05-12 23:19:07,551 - numba.core.ssa - DEBUG - on stmt: $68return_value.1 = cast(value=kind1)
2025-05-12 23:19:07,552 - numba.core.ssa - DEBUG - on stmt: return $68return_value.1
2025-05-12 23:19:07,552 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 70
2025-05-12 23:19:07,552 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8853E60>
2025-05-12 23:19:07,552 - numba.core.ssa - DEBUG - on stmt: $72load_global.1 = global(PY_UNICODE_4BYTE_KIND: 4)
2025-05-12 23:19:07,552 - numba.core.ssa - DEBUG - on stmt: $82compare_op.2 = kind1 == $72load_global.1
2025-05-12 23:19:07,553 - numba.core.ssa - DEBUG - on stmt: bool86 = global(bool: <class 'bool'>)
2025-05-12 23:19:07,553 - numba.core.ssa - DEBUG - on stmt: $86pred = call bool86($82compare_op.2, func=bool86, args=(Var($82compare_op.2, unicode.py:365),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,553 - numba.core.ssa - DEBUG - on stmt: branch $86pred, 88, 92
2025-05-12 23:19:07,554 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 88
2025-05-12 23:19:07,558 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8853E60>
2025-05-12 23:19:07,559 - numba.core.ssa - DEBUG - on stmt: $90return_value.1 = cast(value=kind1)
2025-05-12 23:19:07,559 - numba.core.ssa - DEBUG - on stmt: return $90return_value.1
2025-05-12 23:19:07,559 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 92
2025-05-12 23:19:07,559 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8853E60>
2025-05-12 23:19:07,561 - numba.core.ssa - DEBUG - on stmt: $92load_global.0 = global(AssertionError: <class 'AssertionError'>)
2025-05-12 23:19:07,562 - numba.core.ssa - DEBUG - on stmt: $const102.2.1 = const(str, Unexpected unicode representation in _pick_kind)
2025-05-12 23:19:07,562 - numba.core.ssa - DEBUG - on stmt: $104call.3 = call $92load_global.0($const102.2.1, func=$92load_global.0, args=[Var($const102.2.1, unicode.py:369)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,562 - numba.core.ssa - DEBUG - on stmt: <static> raise <class 'AssertionError'>('Unexpected unicode representation in _pick_kind')
2025-05-12 23:19:07,565 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$104call.3': [(<numba.core.ir.Assign object at 0x000001E8A8853F20>,
                             92)],
             '$16compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A88523F0>,
                                  0)],
             '$20pred': [(<numba.core.ir.Assign object at 0x000001E8A8852060>,
                          0)],
             '$24return_value.1': [(<numba.core.ir.Assign object at 0x000001E8A8851B20>,
                                    22)],
             '$28load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A8851DF0>,
                                   26)],
             '$38compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A8851F40>,
                                  26)],
             '$42pred': [(<numba.core.ir.Assign object at 0x000001E8A8853110>,
                          26)],
             '$46load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A8853080>,
                                   44)],
             '$56compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A88513A0>,
                                  44)],
             '$60pred': [(<numba.core.ir.Assign object at 0x000001E8A8851490>,
                          44)],
             '$64return_value.1': [(<numba.core.ir.Assign object at 0x000001E8A8850290>,
                                    62)],
             '$68return_value.1': [(<numba.core.ir.Assign object at 0x000001E8A88505C0>,
                                    66)],
             '$6load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A88529F0>,
                                  0)],
             '$72load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A8850830>,
                                   70)],
             '$82compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A8850A40>,
                                  70)],
             '$86pred': [(<numba.core.ir.Assign object at 0x000001E8A8850C80>,
                          70)],
             '$90return_value.1': [(<numba.core.ir.Assign object at 0x000001E8A8850F20>,
                                    88)],
             '$92load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A88501D0>,
                                   92)],
             '$const102.2.1': [(<numba.core.ir.Assign object at 0x000001E8A8850380>,
                                92)],
             'bool20': [(<numba.core.ir.Assign object at 0x000001E8A8851B80>,
                         0)],
             'bool42': [(<numba.core.ir.Assign object at 0x000001E8A88519A0>,
                         26)],
             'bool60': [(<numba.core.ir.Assign object at 0x000001E8A8851310>,
                         44)],
             'bool86': [(<numba.core.ir.Assign object at 0x000001E8A8850B60>,
                         70)],
             'kind1': [(<numba.core.ir.Assign object at 0x000001E8A8852BD0>,
                        0)],
             'kind2': [(<numba.core.ir.Assign object at 0x000001E8A8852E40>,
                        0)]})
2025-05-12 23:19:07,568 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8853E60>
2025-05-12 23:19:07,658 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=392)
           2	RESUME(arg=0, lineno=392)
           4	LOAD_FAST(arg=0, lineno=394)
           6	LOAD_CONST(arg=1, lineno=394)
           8	COMPARE_OP(arg=40, lineno=394)
          12	POP_JUMP_IF_FALSE(arg=26, lineno=394)
          14	LOAD_FAST(arg=1, lineno=394)
          16	LOAD_CONST(arg=1, lineno=394)
          18	COMPARE_OP(arg=40, lineno=394)
          22	POP_JUMP_IF_FALSE(arg=21, lineno=394)
          24	LOAD_GLOBAL(arg=1, lineno=395)
          34	LOAD_ATTR(arg=2, lineno=395)
          54	LOAD_CONST(arg=1, lineno=395)
          56	CALL(arg=1, lineno=395)
          64	RETURN_VALUE(arg=None, lineno=395)
>         66	LOAD_GLOBAL(arg=1, lineno=396)
          76	LOAD_ATTR(arg=2, lineno=396)
          96	LOAD_CONST(arg=2, lineno=396)
          98	CALL(arg=1, lineno=396)
         106	RETURN_VALUE(arg=None, lineno=396)
2025-05-12 23:19:07,659 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:07,659 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,659 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:07,659 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=392)
2025-05-12 23:19:07,659 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,660 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=392)
2025-05-12 23:19:07,660 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,660 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=394)
2025-05-12 23:19:07,660 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,660 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=394)
2025-05-12 23:19:07,660 - numba.core.byteflow - DEBUG - stack ['$is_ascii14.0']
2025-05-12 23:19:07,660 - numba.core.byteflow - DEBUG - dispatch pc=8, inst=COMPARE_OP(arg=40, lineno=394)
2025-05-12 23:19:07,660 - numba.core.byteflow - DEBUG - stack ['$is_ascii14.0', '$const6.1.1']
2025-05-12 23:19:07,662 - numba.core.byteflow - DEBUG - dispatch pc=12, inst=POP_JUMP_IF_FALSE(arg=26, lineno=394)
2025-05-12 23:19:07,662 - numba.core.byteflow - DEBUG - stack ['$8compare_op.2']
2025-05-12 23:19:07,662 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=14, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:07,662 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=14 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
2025-05-12 23:19:07,662 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,663 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=14 nstack_initial=0)
2025-05-12 23:19:07,663 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=394)
2025-05-12 23:19:07,663 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,663 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=394)
2025-05-12 23:19:07,664 - numba.core.byteflow - DEBUG - stack ['$is_ascii214.0']
2025-05-12 23:19:07,665 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=COMPARE_OP(arg=40, lineno=394)
2025-05-12 23:19:07,665 - numba.core.byteflow - DEBUG - stack ['$is_ascii214.0', '$const16.1.1']
2025-05-12 23:19:07,665 - numba.core.byteflow - DEBUG - dispatch pc=22, inst=POP_JUMP_IF_FALSE(arg=21, lineno=394)
2025-05-12 23:19:07,666 - numba.core.byteflow - DEBUG - stack ['$18compare_op.2']
2025-05-12 23:19:07,666 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=24, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:07,666 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=24 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
2025-05-12 23:19:07,667 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,667 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=66 nstack_initial=0)
2025-05-12 23:19:07,667 - numba.core.byteflow - DEBUG - dispatch pc=66, inst=LOAD_GLOBAL(arg=1, lineno=396)
2025-05-12 23:19:07,667 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,668 - numba.core.byteflow - DEBUG - dispatch pc=76, inst=LOAD_ATTR(arg=2, lineno=396)
2025-05-12 23:19:07,669 - numba.core.byteflow - DEBUG - stack ['$null$66.1', '$66load_global.0']
2025-05-12 23:19:07,669 - numba.core.byteflow - DEBUG - dispatch pc=96, inst=LOAD_CONST(arg=2, lineno=396)
2025-05-12 23:19:07,670 - numba.core.byteflow - DEBUG - stack ['$null$66.1', '$76load_attr.2']
2025-05-12 23:19:07,670 - numba.core.byteflow - DEBUG - dispatch pc=98, inst=CALL(arg=1, lineno=396)
2025-05-12 23:19:07,670 - numba.core.byteflow - DEBUG - stack ['$null$66.1', '$76load_attr.2', '$const96.3.2']
2025-05-12 23:19:07,670 - numba.core.byteflow - DEBUG - dispatch pc=106, inst=RETURN_VALUE(arg=None, lineno=396)
2025-05-12 23:19:07,670 - numba.core.byteflow - DEBUG - stack ['$98call.4']
2025-05-12 23:19:07,672 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,672 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0), State(pc_initial=66 nstack_initial=0)])
2025-05-12 23:19:07,672 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,672 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
2025-05-12 23:19:07,672 - numba.core.byteflow - DEBUG - dispatch pc=24, inst=LOAD_GLOBAL(arg=1, lineno=395)
2025-05-12 23:19:07,673 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,673 - numba.core.byteflow - DEBUG - dispatch pc=34, inst=LOAD_ATTR(arg=2, lineno=395)
2025-05-12 23:19:07,673 - numba.core.byteflow - DEBUG - stack ['$null$24.1', '$24load_global.0']
2025-05-12 23:19:07,673 - numba.core.byteflow - DEBUG - dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=395)
2025-05-12 23:19:07,675 - numba.core.byteflow - DEBUG - stack ['$null$24.1', '$34load_attr.2']
2025-05-12 23:19:07,676 - numba.core.byteflow - DEBUG - dispatch pc=56, inst=CALL(arg=1, lineno=395)
2025-05-12 23:19:07,676 - numba.core.byteflow - DEBUG - stack ['$null$24.1', '$34load_attr.2', '$const54.3.1']
2025-05-12 23:19:07,677 - numba.core.byteflow - DEBUG - dispatch pc=64, inst=RETURN_VALUE(arg=None, lineno=395)
2025-05-12 23:19:07,677 - numba.core.byteflow - DEBUG - stack ['$56call.4']
2025-05-12 23:19:07,677 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,677 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=66 nstack_initial=0)])
2025-05-12 23:19:07,677 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:07,678 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set()})
2025-05-12 23:19:07,678 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:07,678 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:07,678 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:07,678 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:07,679 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:07,679 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:07,679 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$is_ascii14.0'}), (6, {'res': '$const6.1.1'}), (8, {'lhs': '$is_ascii14.0', 'rhs': '$const6.1.1', 'res': '$8compare_op.2'}), (12, {'pred': '$8compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={14: (), 66: ()})
2025-05-12 23:19:07,681 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$is_ascii214.0'}), (16, {'res': '$const16.1.1'}), (18, {'lhs': '$is_ascii214.0', 'rhs': '$const16.1.1', 'res': '$18compare_op.2'}), (22, {'pred': '$18compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={24: (), 66: ()})
2025-05-12 23:19:07,681 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'idx': 0, 'res': '$24load_global.0'}), (34, {'item': '$24load_global.0', 'res': '$34load_attr.2'}), (54, {'res': '$const54.3.1'}), (56, {'func': '$34load_attr.2', 'args': ['$const54.3.1'], 'kw_names': None, 'res': '$56call.4'}), (64, {'retval': '$56call.4', 'castval': '$64return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,682 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'idx': 0, 'res': '$66load_global.0'}), (76, {'item': '$66load_global.0', 'res': '$76load_attr.2'}), (96, {'res': '$const96.3.2'}), (98, {'func': '$76load_attr.2', 'args': ['$const96.3.2'], 'kw_names': None, 'res': '$98call.4'}), (106, {'retval': '$98call.4', 'castval': '$106return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,684 - numba.core.interpreter - DEBUG - label 0:
    is_ascii1 = arg(0, name=is_ascii1)       ['is_ascii1']
    is_ascii2 = arg(1, name=is_ascii2)       ['is_ascii2']
    $const6.1.1 = const(int, 1)              ['$const6.1.1']
    $8compare_op.2 = is_ascii1 == $const6.1.1 ['$8compare_op.2', '$const6.1.1', 'is_ascii1']
    bool12 = global(bool: <class 'bool'>)    ['bool12']
    $12pred = call bool12($8compare_op.2, func=bool12, args=(Var($8compare_op.2, unicode.py:394),), kws=(), vararg=None, varkwarg=None, target=None) ['$12pred', '$8compare_op.2', 'bool12']
    branch $12pred, 14, 66                   ['$12pred']
label 14:
    $const16.1.1 = const(int, 1)             ['$const16.1.1']
    $18compare_op.2 = is_ascii2 == $const16.1.1 ['$18compare_op.2', '$const16.1.1', 'is_ascii2']
    bool22 = global(bool: <class 'bool'>)    ['bool22']
    $22pred = call bool22($18compare_op.2, func=bool22, args=(Var($18compare_op.2, unicode.py:394),), kws=(), vararg=None, varkwarg=None, target=None) ['$18compare_op.2', '$22pred', 'bool22']
    branch $22pred, 24, 66                   ['$22pred']
label 24:
    $24load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$24load_global.0']
    $34load_attr.2 = getattr(value=$24load_global.0, attr=uint32) ['$24load_global.0', '$34load_attr.2']
    $const54.3.1 = const(int, 1)             ['$const54.3.1']
    $56call.4 = call $34load_attr.2($const54.3.1, func=$34load_attr.2, args=[Var($const54.3.1, unicode.py:395)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_attr.2', '$56call.4', '$const54.3.1']
    $64return_value.5 = cast(value=$56call.4) ['$56call.4', '$64return_value.5']
    return $64return_value.5                 ['$64return_value.5']
label 66:
    $66load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numba\\core\\types\\__init__.py'>) ['$66load_global.0']
    $76load_attr.2 = getattr(value=$66load_global.0, attr=uint32) ['$66load_global.0', '$76load_attr.2']
    $const96.3.2 = const(int, 0)             ['$const96.3.2']
    $98call.4 = call $76load_attr.2($const96.3.2, func=$76load_attr.2, args=[Var($const96.3.2, unicode.py:396)], kws=(), vararg=None, varkwarg=None, target=None) ['$76load_attr.2', '$98call.4', '$const96.3.2']
    $106return_value.5 = cast(value=$98call.4) ['$106return_value.5', '$98call.4']
    return $106return_value.5                ['$106return_value.5']

2025-05-12 23:19:07,697 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:07,697 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88638F0>
2025-05-12 23:19:07,698 - numba.core.ssa - DEBUG - on stmt: is_ascii1 = arg(0, name=is_ascii1)
2025-05-12 23:19:07,700 - numba.core.ssa - DEBUG - on stmt: is_ascii2 = arg(1, name=is_ascii2)
2025-05-12 23:19:07,701 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 1)
2025-05-12 23:19:07,701 - numba.core.ssa - DEBUG - on stmt: $8compare_op.2 = is_ascii1 == $const6.1.1
2025-05-12 23:19:07,702 - numba.core.ssa - DEBUG - on stmt: bool12 = global(bool: <class 'bool'>)
2025-05-12 23:19:07,702 - numba.core.ssa - DEBUG - on stmt: $12pred = call bool12($8compare_op.2, func=bool12, args=(Var($8compare_op.2, unicode.py:394),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,702 - numba.core.ssa - DEBUG - on stmt: branch $12pred, 14, 66
2025-05-12 23:19:07,702 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 14
2025-05-12 23:19:07,703 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88638F0>
2025-05-12 23:19:07,703 - numba.core.ssa - DEBUG - on stmt: $const16.1.1 = const(int, 1)
2025-05-12 23:19:07,703 - numba.core.ssa - DEBUG - on stmt: $18compare_op.2 = is_ascii2 == $const16.1.1
2025-05-12 23:19:07,704 - numba.core.ssa - DEBUG - on stmt: bool22 = global(bool: <class 'bool'>)
2025-05-12 23:19:07,704 - numba.core.ssa - DEBUG - on stmt: $22pred = call bool22($18compare_op.2, func=bool22, args=(Var($18compare_op.2, unicode.py:394),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,704 - numba.core.ssa - DEBUG - on stmt: branch $22pred, 24, 66
2025-05-12 23:19:07,706 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 24
2025-05-12 23:19:07,706 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88638F0>
2025-05-12 23:19:07,707 - numba.core.ssa - DEBUG - on stmt: $24load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numba\\core\\types\\__init__.py'>)
2025-05-12 23:19:07,707 - numba.core.ssa - DEBUG - on stmt: $34load_attr.2 = getattr(value=$24load_global.0, attr=uint32)
2025-05-12 23:19:07,707 - numba.core.ssa - DEBUG - on stmt: $const54.3.1 = const(int, 1)
2025-05-12 23:19:07,708 - numba.core.ssa - DEBUG - on stmt: $56call.4 = call $34load_attr.2($const54.3.1, func=$34load_attr.2, args=[Var($const54.3.1, unicode.py:395)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,708 - numba.core.ssa - DEBUG - on stmt: $64return_value.5 = cast(value=$56call.4)
2025-05-12 23:19:07,708 - numba.core.ssa - DEBUG - on stmt: return $64return_value.5
2025-05-12 23:19:07,709 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 66
2025-05-12 23:19:07,709 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88638F0>
2025-05-12 23:19:07,709 - numba.core.ssa - DEBUG - on stmt: $66load_global.0 = global(types: <module 'numba.core.types' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numba\\core\\types\\__init__.py'>)
2025-05-12 23:19:07,711 - numba.core.ssa - DEBUG - on stmt: $76load_attr.2 = getattr(value=$66load_global.0, attr=uint32)
2025-05-12 23:19:07,711 - numba.core.ssa - DEBUG - on stmt: $const96.3.2 = const(int, 0)
2025-05-12 23:19:07,712 - numba.core.ssa - DEBUG - on stmt: $98call.4 = call $76load_attr.2($const96.3.2, func=$76load_attr.2, args=[Var($const96.3.2, unicode.py:396)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,712 - numba.core.ssa - DEBUG - on stmt: $106return_value.5 = cast(value=$98call.4)
2025-05-12 23:19:07,712 - numba.core.ssa - DEBUG - on stmt: return $106return_value.5
2025-05-12 23:19:07,713 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$106return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A880E300>,
                                     66)],
             '$12pred': [(<numba.core.ir.Assign object at 0x000001E8A880FD70>,
                          0)],
             '$18compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A880F4D0>,
                                  14)],
             '$22pred': [(<numba.core.ir.Assign object at 0x000001E8A880F800>,
                          14)],
             '$24load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A880F260>,
                                   24)],
             '$34load_attr.2': [(<numba.core.ir.Assign object at 0x000001E8A880F410>,
                                 24)],
             '$56call.4': [(<numba.core.ir.Assign object at 0x000001E8A880EE10>,
                            24)],
             '$64return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A880EF30>,
                                    24)],
             '$66load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A880CA70>,
                                   66)],
             '$76load_attr.2': [(<numba.core.ir.Assign object at 0x000001E8A880CB30>,
                                 66)],
             '$8compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A880FFB0>,
                                 0)],
             '$98call.4': [(<numba.core.ir.Assign object at 0x000001E8A880EB40>,
                            66)],
             '$const16.1.1': [(<numba.core.ir.Assign object at 0x000001E8A880F140>,
                               14)],
             '$const54.3.1': [(<numba.core.ir.Assign object at 0x000001E8A880E9C0>,
                               24)],
             '$const6.1.1': [(<numba.core.ir.Assign object at 0x000001E8A880E3F0>,
                              0)],
             '$const96.3.2': [(<numba.core.ir.Assign object at 0x000001E8A880EC30>,
                               66)],
             'bool12': [(<numba.core.ir.Assign object at 0x000001E8A880FDD0>,
                         0)],
             'bool22': [(<numba.core.ir.Assign object at 0x000001E8A880F980>,
                         14)],
             'is_ascii1': [(<numba.core.ir.Assign object at 0x000001E8A880C8F0>,
                            0)],
             'is_ascii2': [(<numba.core.ir.Assign object at 0x000001E8A880D520>,
                            0)]})
2025-05-12 23:19:07,714 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A88638F0>
2025-05-12 23:19:07,782 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=281)
           2	RESUME(arg=0, lineno=281)
           4	LOAD_GLOBAL(arg=1, lineno=283)
          14	LOAD_FAST(arg=0, lineno=283)
          16	CALL(arg=1, lineno=283)
          24	STORE_FAST(arg=3, lineno=283)
          26	LOAD_GLOBAL(arg=3, lineno=284)
          36	LOAD_FAST(arg=0, lineno=284)
          38	LOAD_FAST(arg=3, lineno=284)
          40	LOAD_FAST(arg=1, lineno=284)
          42	LOAD_FAST(arg=2, lineno=284)
          44	CALL(arg=4, lineno=284)
          52	STORE_FAST(arg=4, lineno=284)
          54	LOAD_GLOBAL(arg=5, lineno=285)
          64	LOAD_FAST(arg=4, lineno=285)
          66	LOAD_FAST(arg=1, lineno=285)
          68	LOAD_GLOBAL(arg=7, lineno=285)
          78	LOAD_ATTR(arg=8, lineno=285)
          98	LOAD_CONST(arg=1, lineno=285)
         100	CALL(arg=1, lineno=285)
         108	CALL(arg=3, lineno=285)
         116	POP_TOP(arg=None, lineno=285)
         118	LOAD_FAST(arg=4, lineno=286)
         120	RETURN_VALUE(arg=None, lineno=286)
2025-05-12 23:19:07,783 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:07,783 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,783 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:07,784 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=281)
2025-05-12 23:19:07,784 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,785 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=281)
2025-05-12 23:19:07,785 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,786 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=283)
2025-05-12 23:19:07,786 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,786 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=283)
2025-05-12 23:19:07,786 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:07,788 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=CALL(arg=1, lineno=283)
2025-05-12 23:19:07,788 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$kind14.2']
2025-05-12 23:19:07,788 - numba.core.byteflow - DEBUG - dispatch pc=24, inst=STORE_FAST(arg=3, lineno=283)
2025-05-12 23:19:07,788 - numba.core.byteflow - DEBUG - stack ['$16call.3']
2025-05-12 23:19:07,788 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=LOAD_GLOBAL(arg=3, lineno=284)
2025-05-12 23:19:07,789 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,789 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=284)
2025-05-12 23:19:07,790 - numba.core.byteflow - DEBUG - stack ['$null$26.5', '$26load_global.4']
2025-05-12 23:19:07,790 - numba.core.byteflow - DEBUG - dispatch pc=38, inst=LOAD_FAST(arg=3, lineno=284)
2025-05-12 23:19:07,791 - numba.core.byteflow - DEBUG - stack ['$null$26.5', '$26load_global.4', '$kind36.6']
2025-05-12 23:19:07,791 - numba.core.byteflow - DEBUG - dispatch pc=40, inst=LOAD_FAST(arg=1, lineno=284)
2025-05-12 23:19:07,792 - numba.core.byteflow - DEBUG - stack ['$null$26.5', '$26load_global.4', '$kind36.6', '$char_width38.7']
2025-05-12 23:19:07,792 - numba.core.byteflow - DEBUG - dispatch pc=42, inst=LOAD_FAST(arg=2, lineno=284)
2025-05-12 23:19:07,792 - numba.core.byteflow - DEBUG - stack ['$null$26.5', '$26load_global.4', '$kind36.6', '$char_width38.7', '$length40.8']
2025-05-12 23:19:07,793 - numba.core.byteflow - DEBUG - dispatch pc=44, inst=CALL(arg=4, lineno=284)
2025-05-12 23:19:07,793 - numba.core.byteflow - DEBUG - stack ['$null$26.5', '$26load_global.4', '$kind36.6', '$char_width38.7', '$length40.8', '$is_ascii42.9']
2025-05-12 23:19:07,793 - numba.core.byteflow - DEBUG - dispatch pc=52, inst=STORE_FAST(arg=4, lineno=284)
2025-05-12 23:19:07,795 - numba.core.byteflow - DEBUG - stack ['$44call.10']
2025-05-12 23:19:07,795 - numba.core.byteflow - DEBUG - dispatch pc=54, inst=LOAD_GLOBAL(arg=5, lineno=285)
2025-05-12 23:19:07,795 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,796 - numba.core.byteflow - DEBUG - dispatch pc=64, inst=LOAD_FAST(arg=4, lineno=285)
2025-05-12 23:19:07,796 - numba.core.byteflow - DEBUG - stack ['$null$54.12', '$54load_global.11']
2025-05-12 23:19:07,796 - numba.core.byteflow - DEBUG - dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=285)
2025-05-12 23:19:07,797 - numba.core.byteflow - DEBUG - stack ['$null$54.12', '$54load_global.11', '$s64.13']
2025-05-12 23:19:07,797 - numba.core.byteflow - DEBUG - dispatch pc=68, inst=LOAD_GLOBAL(arg=7, lineno=285)
2025-05-12 23:19:07,798 - numba.core.byteflow - DEBUG - stack ['$null$54.12', '$54load_global.11', '$s64.13', '$length66.14']
2025-05-12 23:19:07,798 - numba.core.byteflow - DEBUG - dispatch pc=78, inst=LOAD_ATTR(arg=8, lineno=285)
2025-05-12 23:19:07,798 - numba.core.byteflow - DEBUG - stack ['$null$54.12', '$54load_global.11', '$s64.13', '$length66.14', '$null$68.16', '$68load_global.15']
2025-05-12 23:19:07,798 - numba.core.byteflow - DEBUG - dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=285)
2025-05-12 23:19:07,799 - numba.core.byteflow - DEBUG - stack ['$null$54.12', '$54load_global.11', '$s64.13', '$length66.14', '$null$68.16', '$78load_attr.17']
2025-05-12 23:19:07,799 - numba.core.byteflow - DEBUG - dispatch pc=100, inst=CALL(arg=1, lineno=285)
2025-05-12 23:19:07,800 - numba.core.byteflow - DEBUG - stack ['$null$54.12', '$54load_global.11', '$s64.13', '$length66.14', '$null$68.16', '$78load_attr.17', '$const98.18.1']
2025-05-12 23:19:07,800 - numba.core.byteflow - DEBUG - dispatch pc=108, inst=CALL(arg=3, lineno=285)
2025-05-12 23:19:07,801 - numba.core.byteflow - DEBUG - stack ['$null$54.12', '$54load_global.11', '$s64.13', '$length66.14', '$100call.19']
2025-05-12 23:19:07,801 - numba.core.byteflow - DEBUG - dispatch pc=116, inst=POP_TOP(arg=None, lineno=285)
2025-05-12 23:19:07,801 - numba.core.byteflow - DEBUG - stack ['$108call.20']
2025-05-12 23:19:07,802 - numba.core.byteflow - DEBUG - dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=286)
2025-05-12 23:19:07,802 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,803 - numba.core.byteflow - DEBUG - dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=286)
2025-05-12 23:19:07,803 - numba.core.byteflow - DEBUG - stack ['$s118.21']
2025-05-12 23:19:07,803 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,804 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:07,804 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:07,805 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:07,805 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:07,806 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:07,806 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:07,806 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:07,806 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:07,807 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$kind14.2'}), (16, {'func': '$4load_global.0', 'args': ['$kind14.2'], 'kw_names': None, 'res': '$16call.3'}), (24, {'value': '$16call.3'}), (26, {'idx': 1, 'res': '$26load_global.4'}), (36, {'res': '$kind36.6'}), (38, {'res': '$char_width38.7'}), (40, {'res': '$length40.8'}), (42, {'res': '$is_ascii42.9'}), (44, {'func': '$26load_global.4', 'args': ['$kind36.6', '$char_width38.7', '$length40.8', '$is_ascii42.9'], 'kw_names': None, 'res': '$44call.10'}), (52, {'value': '$44call.10'}), (54, {'idx': 2, 'res': '$54load_global.11'}), (64, {'res': '$s64.13'}), (66, {'res': '$length66.14'}), (68, {'idx': 3, 'res': '$68load_global.15'}), (78, {'item': '$68load_global.15', 'res': '$78load_attr.17'}), (98, {'res': '$const98.18.1'}), (100, {'func': '$78load_attr.17', 'args': ['$const98.18.1'], 'kw_names': None, 'res': '$100call.19'}), (108, {'func': '$54load_global.11', 'args': ['$s64.13', '$length66.14', '$100call.19'], 'kw_names': None, 'res': '$108call.20'}), (118, {'res': '$s118.21'}), (120, {'retval': '$s118.21', 'castval': '$120return_value.22'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,810 - numba.core.interpreter - DEBUG - label 0:
    kind = arg(0, name=kind)                 ['kind']
    length = arg(1, name=length)             ['length']
    is_ascii = arg(2, name=is_ascii)         ['is_ascii']
    $4load_global.0 = global(_kind_to_byte_width: <function _kind_to_byte_width at 0x000001E8A8036C00>) ['$4load_global.0']
    char_width = call $4load_global.0(kind, func=$4load_global.0, args=[Var(kind, unicode.py:281)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.0', 'char_width', 'kind']
    $26load_global.4 = global(_malloc_string: <intrinsic _malloc_string>) ['$26load_global.4']
    s = call $26load_global.4(kind, char_width, length, is_ascii, func=$26load_global.4, args=[Var(kind, unicode.py:281), Var(char_width, unicode.py:283), Var(length, unicode.py:281), Var(is_ascii, unicode.py:281)], kws=(), vararg=None, varkwarg=None, target=None) ['$26load_global.4', 'char_width', 'is_ascii', 'kind', 'length', 's']
    $54load_global.11 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>) ['$54load_global.11']
    $68load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$68load_global.15']
    $78load_attr.17 = getattr(value=$68load_global.15, attr=uint32) ['$68load_global.15', '$78load_attr.17']
    $const98.18.1 = const(int, 0)            ['$const98.18.1']
    $100call.19 = call $78load_attr.17($const98.18.1, func=$78load_attr.17, args=[Var($const98.18.1, unicode.py:285)], kws=(), vararg=None, varkwarg=None, target=None) ['$100call.19', '$78load_attr.17', '$const98.18.1']
    $108call.20 = call $54load_global.11(s, length, $100call.19, func=$54load_global.11, args=[Var(s, unicode.py:284), Var(length, unicode.py:281), Var($100call.19, unicode.py:285)], kws=(), vararg=None, varkwarg=None, target=None) ['$100call.19', '$108call.20', '$54load_global.11', 'length', 's']
    $120return_value.22 = cast(value=s)      ['$120return_value.22', 's']
    return $120return_value.22               ['$120return_value.22']

2025-05-12 23:19:07,817 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:07,817 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88A5DF0>
2025-05-12 23:19:07,818 - numba.core.ssa - DEBUG - on stmt: kind = arg(0, name=kind)
2025-05-12 23:19:07,818 - numba.core.ssa - DEBUG - on stmt: length = arg(1, name=length)
2025-05-12 23:19:07,818 - numba.core.ssa - DEBUG - on stmt: is_ascii = arg(2, name=is_ascii)
2025-05-12 23:19:07,819 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(_kind_to_byte_width: <function _kind_to_byte_width at 0x000001E8A8036C00>)
2025-05-12 23:19:07,819 - numba.core.ssa - DEBUG - on stmt: char_width = call $4load_global.0(kind, func=$4load_global.0, args=[Var(kind, unicode.py:281)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,820 - numba.core.ssa - DEBUG - on stmt: $26load_global.4 = global(_malloc_string: <intrinsic _malloc_string>)
2025-05-12 23:19:07,820 - numba.core.ssa - DEBUG - on stmt: s = call $26load_global.4(kind, char_width, length, is_ascii, func=$26load_global.4, args=[Var(kind, unicode.py:281), Var(char_width, unicode.py:283), Var(length, unicode.py:281), Var(is_ascii, unicode.py:281)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,820 - numba.core.ssa - DEBUG - on stmt: $54load_global.11 = global(_set_code_point: <function _set_code_point at 0x000001E8A8036A20>)
2025-05-12 23:19:07,821 - numba.core.ssa - DEBUG - on stmt: $68load_global.15 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:07,821 - numba.core.ssa - DEBUG - on stmt: $78load_attr.17 = getattr(value=$68load_global.15, attr=uint32)
2025-05-12 23:19:07,822 - numba.core.ssa - DEBUG - on stmt: $const98.18.1 = const(int, 0)
2025-05-12 23:19:07,822 - numba.core.ssa - DEBUG - on stmt: $100call.19 = call $78load_attr.17($const98.18.1, func=$78load_attr.17, args=[Var($const98.18.1, unicode.py:285)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,823 - numba.core.ssa - DEBUG - on stmt: $108call.20 = call $54load_global.11(s, length, $100call.19, func=$54load_global.11, args=[Var(s, unicode.py:284), Var(length, unicode.py:281), Var($100call.19, unicode.py:285)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,823 - numba.core.ssa - DEBUG - on stmt: $120return_value.22 = cast(value=s)
2025-05-12 23:19:07,824 - numba.core.ssa - DEBUG - on stmt: return $120return_value.22
2025-05-12 23:19:07,824 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$100call.19': [(<numba.core.ir.Assign object at 0x000001E8A88A6660>,
                              0)],
             '$108call.20': [(<numba.core.ir.Assign object at 0x000001E8A88A4410>,
                              0)],
             '$120return_value.22': [(<numba.core.ir.Assign object at 0x000001E8A88A6450>,
                                      0)],
             '$26load_global.4': [(<numba.core.ir.Assign object at 0x000001E8A87684A0>,
                                   0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A876B230>,
                                  0)],
             '$54load_global.11': [(<numba.core.ir.Assign object at 0x000001E8A88A42F0>,
                                    0)],
             '$68load_global.15': [(<numba.core.ir.Assign object at 0x000001E8A88A4590>,
                                    0)],
             '$78load_attr.17': [(<numba.core.ir.Assign object at 0x000001E8A88A44A0>,
                                  0)],
             '$const98.18.1': [(<numba.core.ir.Assign object at 0x000001E8A88A4C80>,
                                0)],
             'char_width': [(<numba.core.ir.Assign object at 0x000001E8A876B860>,
                             0)],
             'is_ascii': [(<numba.core.ir.Assign object at 0x000001E8A8769910>,
                           0)],
             'kind': [(<numba.core.ir.Assign object at 0x000001E8A876ABA0>, 0)],
             'length': [(<numba.core.ir.Assign object at 0x000001E8A876AC00>,
                         0)],
             's': [(<numba.core.ir.Assign object at 0x000001E8A88A6BA0>, 0)]})
2025-05-12 23:19:07,827 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8893E30>
2025-05-12 23:19:07,835 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=400)
           2	RESUME(arg=0, lineno=400)
           4	LOAD_FAST(arg=0, lineno=402)
           6	LOAD_GLOBAL(arg=0, lineno=402)
          16	COMPARE_OP(arg=40, lineno=402)
          20	POP_JUMP_IF_FALSE(arg=1, lineno=402)
          22	RETURN_CONST(arg=1, lineno=403)
>         24	LOAD_FAST(arg=0, lineno=404)
          26	LOAD_GLOBAL(arg=2, lineno=404)
          36	COMPARE_OP(arg=40, lineno=404)
          40	POP_JUMP_IF_FALSE(arg=1, lineno=404)
          42	RETURN_CONST(arg=2, lineno=405)
>         44	LOAD_FAST(arg=0, lineno=406)
          46	LOAD_GLOBAL(arg=4, lineno=406)
          56	COMPARE_OP(arg=40, lineno=406)
          60	POP_JUMP_IF_FALSE(arg=1, lineno=406)
          62	RETURN_CONST(arg=3, lineno=407)
>         64	LOAD_GLOBAL(arg=7, lineno=409)
          74	LOAD_CONST(arg=4, lineno=409)
          76	CALL(arg=1, lineno=409)
          84	RAISE_VARARGS(arg=1, lineno=409)
2025-05-12 23:19:07,835 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:07,836 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,836 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:07,836 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=400)
2025-05-12 23:19:07,837 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,837 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=400)
2025-05-12 23:19:07,837 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,838 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=402)
2025-05-12 23:19:07,838 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,838 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_GLOBAL(arg=0, lineno=402)
2025-05-12 23:19:07,839 - numba.core.byteflow - DEBUG - stack ['$kind4.0']
2025-05-12 23:19:07,839 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=COMPARE_OP(arg=40, lineno=402)
2025-05-12 23:19:07,839 - numba.core.byteflow - DEBUG - stack ['$kind4.0', '$6load_global.1']
2025-05-12 23:19:07,841 - numba.core.byteflow - DEBUG - dispatch pc=20, inst=POP_JUMP_IF_FALSE(arg=1, lineno=402)
2025-05-12 23:19:07,841 - numba.core.byteflow - DEBUG - stack ['$16compare_op.2']
2025-05-12 23:19:07,842 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=24, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:07,842 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=24 nstack_initial=0)])
2025-05-12 23:19:07,843 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,844 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=22 nstack_initial=0)
2025-05-12 23:19:07,844 - numba.core.byteflow - DEBUG - dispatch pc=22, inst=RETURN_CONST(arg=1, lineno=403)
2025-05-12 23:19:07,844 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,845 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,845 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=24 nstack_initial=0)])
2025-05-12 23:19:07,845 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,846 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=24 nstack_initial=0)
2025-05-12 23:19:07,846 - numba.core.byteflow - DEBUG - dispatch pc=24, inst=LOAD_FAST(arg=0, lineno=404)
2025-05-12 23:19:07,846 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,847 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=LOAD_GLOBAL(arg=2, lineno=404)
2025-05-12 23:19:07,847 - numba.core.byteflow - DEBUG - stack ['$kind24.0']
2025-05-12 23:19:07,847 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=COMPARE_OP(arg=40, lineno=404)
2025-05-12 23:19:07,847 - numba.core.byteflow - DEBUG - stack ['$kind24.0', '$26load_global.1']
2025-05-12 23:19:07,847 - numba.core.byteflow - DEBUG - dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=1, lineno=404)
2025-05-12 23:19:07,848 - numba.core.byteflow - DEBUG - stack ['$36compare_op.2']
2025-05-12 23:19:07,848 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:07,848 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=44 nstack_initial=0)])
2025-05-12 23:19:07,848 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,849 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=42 nstack_initial=0)
2025-05-12 23:19:07,849 - numba.core.byteflow - DEBUG - dispatch pc=42, inst=RETURN_CONST(arg=2, lineno=405)
2025-05-12 23:19:07,850 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,850 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,852 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=44 nstack_initial=0)])
2025-05-12 23:19:07,852 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,853 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=44 nstack_initial=0)
2025-05-12 23:19:07,853 - numba.core.byteflow - DEBUG - dispatch pc=44, inst=LOAD_FAST(arg=0, lineno=406)
2025-05-12 23:19:07,853 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,853 - numba.core.byteflow - DEBUG - dispatch pc=46, inst=LOAD_GLOBAL(arg=4, lineno=406)
2025-05-12 23:19:07,854 - numba.core.byteflow - DEBUG - stack ['$kind44.0']
2025-05-12 23:19:07,854 - numba.core.byteflow - DEBUG - dispatch pc=56, inst=COMPARE_OP(arg=40, lineno=406)
2025-05-12 23:19:07,854 - numba.core.byteflow - DEBUG - stack ['$kind44.0', '$46load_global.1']
2025-05-12 23:19:07,855 - numba.core.byteflow - DEBUG - dispatch pc=60, inst=POP_JUMP_IF_FALSE(arg=1, lineno=406)
2025-05-12 23:19:07,855 - numba.core.byteflow - DEBUG - stack ['$56compare_op.2']
2025-05-12 23:19:07,855 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=64, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:07,856 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=64 nstack_initial=0)])
2025-05-12 23:19:07,856 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,856 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=62 nstack_initial=0)
2025-05-12 23:19:07,857 - numba.core.byteflow - DEBUG - dispatch pc=62, inst=RETURN_CONST(arg=3, lineno=407)
2025-05-12 23:19:07,858 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,858 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,859 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=64 nstack_initial=0)])
2025-05-12 23:19:07,859 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:07,860 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=64 nstack_initial=0)
2025-05-12 23:19:07,860 - numba.core.byteflow - DEBUG - dispatch pc=64, inst=LOAD_GLOBAL(arg=7, lineno=409)
2025-05-12 23:19:07,861 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:07,861 - numba.core.byteflow - DEBUG - dispatch pc=74, inst=LOAD_CONST(arg=4, lineno=409)
2025-05-12 23:19:07,861 - numba.core.byteflow - DEBUG - stack ['$null$64.1', '$64load_global.0']
2025-05-12 23:19:07,862 - numba.core.byteflow - DEBUG - dispatch pc=76, inst=CALL(arg=1, lineno=409)
2025-05-12 23:19:07,862 - numba.core.byteflow - DEBUG - stack ['$null$64.1', '$64load_global.0', '$const74.2.4']
2025-05-12 23:19:07,863 - numba.core.byteflow - DEBUG - dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=409)
2025-05-12 23:19:07,863 - numba.core.byteflow - DEBUG - stack ['$76call.3']
2025-05-12 23:19:07,873 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:07,874 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:07,874 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=24 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set()})
2025-05-12 23:19:07,876 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:07,878 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:07,878 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:07,878 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:07,879 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:07,880 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:07,880 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$kind4.0'}), (6, {'idx': 0, 'res': '$6load_global.1'}), (16, {'lhs': '$kind4.0', 'rhs': '$6load_global.1', 'res': '$16compare_op.2'}), (20, {'pred': '$16compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 24: ()})
2025-05-12 23:19:07,881 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'retval': '$const22.0', 'castval': '$22return_const.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,882 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=24 nstack_initial=0):
AdaptBlockInfo(insts=((24, {'res': '$kind24.0'}), (26, {'idx': 1, 'res': '$26load_global.1'}), (36, {'lhs': '$kind24.0', 'rhs': '$26load_global.1', 'res': '$36compare_op.2'}), (40, {'pred': '$36compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 44: ()})
2025-05-12 23:19:07,884 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'retval': '$const42.0', 'castval': '$42return_const.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,885 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$kind44.0'}), (46, {'idx': 2, 'res': '$46load_global.1'}), (56, {'lhs': '$kind44.0', 'rhs': '$46load_global.1', 'res': '$56compare_op.2'}), (60, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 64: ()})
2025-05-12 23:19:07,885 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'retval': '$const62.0', 'castval': '$62return_const.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,886 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'idx': 3, 'res': '$64load_global.0'}), (74, {'res': '$const74.2.4'}), (76, {'func': '$64load_global.0', 'args': ['$const74.2.4'], 'kw_names': None, 'res': '$76call.3'}), (84, {'exc': '$76call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:07,891 - numba.core.interpreter - DEBUG - label 0:
    kind = arg(0, name=kind)                 ['kind']
    $6load_global.1 = global(PY_UNICODE_1BYTE_KIND: 1) ['$6load_global.1']
    $16compare_op.2 = kind == $6load_global.1 ['$16compare_op.2', '$6load_global.1', 'kind']
    bool20 = global(bool: <class 'bool'>)    ['bool20']
    $20pred = call bool20($16compare_op.2, func=bool20, args=(Var($16compare_op.2, unicode.py:402),), kws=(), vararg=None, varkwarg=None, target=None) ['$16compare_op.2', '$20pred', 'bool20']
    branch $20pred, 22, 24                   ['$20pred']
label 22:
    $const22.0 = const(int, 1)               ['$const22.0']
    $22return_const.1 = cast(value=$const22.0) ['$22return_const.1', '$const22.0']
    return $22return_const.1                 ['$22return_const.1']
label 24:
    $26load_global.1 = global(PY_UNICODE_2BYTE_KIND: 2) ['$26load_global.1']
    $36compare_op.2 = kind == $26load_global.1 ['$26load_global.1', '$36compare_op.2', 'kind']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($36compare_op.2, func=bool40, args=(Var($36compare_op.2, unicode.py:404),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.2', '$40pred', 'bool40']
    branch $40pred, 42, 44                   ['$40pred']
label 42:
    $const42.0 = const(int, 2)               ['$const42.0']
    $42return_const.1 = cast(value=$const42.0) ['$42return_const.1', '$const42.0']
    return $42return_const.1                 ['$42return_const.1']
label 44:
    $46load_global.1 = global(PY_UNICODE_4BYTE_KIND: 4) ['$46load_global.1']
    $56compare_op.2 = kind == $46load_global.1 ['$46load_global.1', '$56compare_op.2', 'kind']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($56compare_op.2, func=bool60, args=(Var($56compare_op.2, unicode.py:406),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$60pred', 'bool60']
    branch $60pred, 62, 64                   ['$60pred']
label 62:
    $const62.0 = const(int, 4)               ['$const62.0']
    $62return_const.1 = cast(value=$const62.0) ['$62return_const.1', '$const62.0']
    return $62return_const.1                 ['$62return_const.1']
label 64:
    $64load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$64load_global.0']
    $const74.2.4 = const(str, Unexpected unicode encoding encountered) ['$const74.2.4']
    $76call.3 = call $64load_global.0($const74.2.4, func=$64load_global.0, args=[Var($const74.2.4, unicode.py:409)], kws=(), vararg=None, varkwarg=None, target=None) ['$64load_global.0', '$76call.3', '$const74.2.4']
    raise $76call.3                          ['$76call.3']

2025-05-12 23:19:07,904 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:07,905 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88A6E40>
2025-05-12 23:19:07,906 - numba.core.ssa - DEBUG - on stmt: kind = arg(0, name=kind)
2025-05-12 23:19:07,906 - numba.core.ssa - DEBUG - on stmt: $6load_global.1 = global(PY_UNICODE_1BYTE_KIND: 1)
2025-05-12 23:19:07,907 - numba.core.ssa - DEBUG - on stmt: $16compare_op.2 = kind == $6load_global.1
2025-05-12 23:19:07,908 - numba.core.ssa - DEBUG - on stmt: bool20 = global(bool: <class 'bool'>)
2025-05-12 23:19:07,911 - numba.core.ssa - DEBUG - on stmt: $20pred = call bool20($16compare_op.2, func=bool20, args=(Var($16compare_op.2, unicode.py:402),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,912 - numba.core.ssa - DEBUG - on stmt: branch $20pred, 22, 24
2025-05-12 23:19:07,912 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 22
2025-05-12 23:19:07,912 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88A6E40>
2025-05-12 23:19:07,912 - numba.core.ssa - DEBUG - on stmt: $const22.0 = const(int, 1)
2025-05-12 23:19:07,913 - numba.core.ssa - DEBUG - on stmt: $22return_const.1 = cast(value=$const22.0)
2025-05-12 23:19:07,913 - numba.core.ssa - DEBUG - on stmt: return $22return_const.1
2025-05-12 23:19:07,913 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 24
2025-05-12 23:19:07,914 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88A6E40>
2025-05-12 23:19:07,914 - numba.core.ssa - DEBUG - on stmt: $26load_global.1 = global(PY_UNICODE_2BYTE_KIND: 2)
2025-05-12 23:19:07,914 - numba.core.ssa - DEBUG - on stmt: $36compare_op.2 = kind == $26load_global.1
2025-05-12 23:19:07,915 - numba.core.ssa - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-05-12 23:19:07,915 - numba.core.ssa - DEBUG - on stmt: $40pred = call bool40($36compare_op.2, func=bool40, args=(Var($36compare_op.2, unicode.py:404),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,915 - numba.core.ssa - DEBUG - on stmt: branch $40pred, 42, 44
2025-05-12 23:19:07,916 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 42
2025-05-12 23:19:07,916 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88A6E40>
2025-05-12 23:19:07,916 - numba.core.ssa - DEBUG - on stmt: $const42.0 = const(int, 2)
2025-05-12 23:19:07,921 - numba.core.ssa - DEBUG - on stmt: $42return_const.1 = cast(value=$const42.0)
2025-05-12 23:19:07,922 - numba.core.ssa - DEBUG - on stmt: return $42return_const.1
2025-05-12 23:19:07,922 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 44
2025-05-12 23:19:07,923 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88A6E40>
2025-05-12 23:19:07,923 - numba.core.ssa - DEBUG - on stmt: $46load_global.1 = global(PY_UNICODE_4BYTE_KIND: 4)
2025-05-12 23:19:07,924 - numba.core.ssa - DEBUG - on stmt: $56compare_op.2 = kind == $46load_global.1
2025-05-12 23:19:07,924 - numba.core.ssa - DEBUG - on stmt: bool60 = global(bool: <class 'bool'>)
2025-05-12 23:19:07,925 - numba.core.ssa - DEBUG - on stmt: $60pred = call bool60($56compare_op.2, func=bool60, args=(Var($56compare_op.2, unicode.py:406),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,926 - numba.core.ssa - DEBUG - on stmt: branch $60pred, 62, 64
2025-05-12 23:19:07,927 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 62
2025-05-12 23:19:07,927 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88A6E40>
2025-05-12 23:19:07,928 - numba.core.ssa - DEBUG - on stmt: $const62.0 = const(int, 4)
2025-05-12 23:19:07,929 - numba.core.ssa - DEBUG - on stmt: $62return_const.1 = cast(value=$const62.0)
2025-05-12 23:19:07,929 - numba.core.ssa - DEBUG - on stmt: return $62return_const.1
2025-05-12 23:19:07,929 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 64
2025-05-12 23:19:07,930 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88A6E40>
2025-05-12 23:19:07,930 - numba.core.ssa - DEBUG - on stmt: $64load_global.0 = global(AssertionError: <class 'AssertionError'>)
2025-05-12 23:19:07,931 - numba.core.ssa - DEBUG - on stmt: $const74.2.4 = const(str, Unexpected unicode encoding encountered)
2025-05-12 23:19:07,931 - numba.core.ssa - DEBUG - on stmt: $76call.3 = call $64load_global.0($const74.2.4, func=$64load_global.0, args=[Var($const74.2.4, unicode.py:409)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:07,932 - numba.core.ssa - DEBUG - on stmt: <static> raise <class 'AssertionError'>('Unexpected unicode encoding encountered')
2025-05-12 23:19:07,932 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$16compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A88A66F0>,
                                  0)],
             '$20pred': [(<numba.core.ir.Assign object at 0x000001E8A88A75C0>,
                          0)],
             '$22return_const.1': [(<numba.core.ir.Assign object at 0x000001E8A88A7F80>,
                                    22)],
             '$26load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A88A7D10>,
                                   24)],
             '$36compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A88B1A30>,
                                  24)],
             '$40pred': [(<numba.core.ir.Assign object at 0x000001E8A88B2600>,
                          24)],
             '$42return_const.1': [(<numba.core.ir.Assign object at 0x000001E8A88B1130>,
                                    42)],
             '$46load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A88B2630>,
                                   44)],
             '$56compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A88B3EC0>,
                                  44)],
             '$60pred': [(<numba.core.ir.Assign object at 0x000001E8A88B0470>,
                          44)],
             '$62return_const.1': [(<numba.core.ir.Assign object at 0x000001E8A88B0740>,
                                    62)],
             '$64load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A88B0440>,
                                   64)],
             '$6load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A88A6750>,
                                  0)],
             '$76call.3': [(<numba.core.ir.Assign object at 0x000001E8A88B1460>,
                            64)],
             '$const22.0': [(<numba.core.ir.Assign object at 0x000001E8A88A7800>,
                             22)],
             '$const42.0': [(<numba.core.ir.Assign object at 0x000001E8A88B12B0>,
                             42)],
             '$const62.0': [(<numba.core.ir.Assign object at 0x000001E8A88B0530>,
                             62)],
             '$const74.2.4': [(<numba.core.ir.Assign object at 0x000001E8A88B0B30>,
                               64)],
             'bool20': [(<numba.core.ir.Assign object at 0x000001E8A88A4260>,
                         0)],
             'bool40': [(<numba.core.ir.Assign object at 0x000001E8A88B1CA0>,
                         24)],
             'bool60': [(<numba.core.ir.Assign object at 0x000001E8A88B0560>,
                         44)],
             'kind': [(<numba.core.ir.Assign object at 0x000001E8A88A6300>,
                       0)]})
2025-05-12 23:19:07,935 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A88A6E40>
2025-05-12 23:19:08,023 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=336)
           2	RESUME(arg=0, lineno=336)
           4	LOAD_FAST(arg=0, lineno=344)
           6	LOAD_ATTR(arg=0, lineno=344)
          26	LOAD_GLOBAL(arg=2, lineno=344)
          36	COMPARE_OP(arg=40, lineno=344)
          40	POP_JUMP_IF_FALSE(arg=24, lineno=344)
          42	LOAD_GLOBAL(arg=5, lineno=345)
          52	LOAD_FAST(arg=0, lineno=345)
          54	LOAD_ATTR(arg=6, lineno=345)
          74	LOAD_FAST(arg=1, lineno=345)
          76	LOAD_FAST(arg=2, lineno=345)
          78	CALL(arg=3, lineno=345)
          86	POP_TOP(arg=None, lineno=345)
          88	RETURN_CONST(arg=0, lineno=345)
>         90	LOAD_FAST(arg=0, lineno=346)
          92	LOAD_ATTR(arg=0, lineno=346)
         112	LOAD_GLOBAL(arg=8, lineno=346)
         122	COMPARE_OP(arg=40, lineno=346)
         126	POP_JUMP_IF_FALSE(arg=24, lineno=346)
         128	LOAD_GLOBAL(arg=11, lineno=347)
         138	LOAD_FAST(arg=0, lineno=347)
         140	LOAD_ATTR(arg=6, lineno=347)
         160	LOAD_FAST(arg=1, lineno=347)
         162	LOAD_FAST(arg=2, lineno=347)
         164	CALL(arg=3, lineno=347)
         172	POP_TOP(arg=None, lineno=347)
         174	RETURN_CONST(arg=0, lineno=347)
>        176	LOAD_FAST(arg=0, lineno=348)
         178	LOAD_ATTR(arg=0, lineno=348)
         198	LOAD_GLOBAL(arg=12, lineno=348)
         208	COMPARE_OP(arg=40, lineno=348)
         212	POP_JUMP_IF_FALSE(arg=24, lineno=348)
         214	LOAD_GLOBAL(arg=15, lineno=349)
         224	LOAD_FAST(arg=0, lineno=349)
         226	LOAD_ATTR(arg=6, lineno=349)
         246	LOAD_FAST(arg=1, lineno=349)
         248	LOAD_FAST(arg=2, lineno=349)
         250	CALL(arg=3, lineno=349)
         258	POP_TOP(arg=None, lineno=349)
         260	RETURN_CONST(arg=0, lineno=349)
>        262	LOAD_GLOBAL(arg=17, lineno=351)
         272	LOAD_CONST(arg=1, lineno=352)
         274	CALL(arg=1, lineno=351)
         282	RAISE_VARARGS(arg=1, lineno=351)
2025-05-12 23:19:08,024 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:08,024 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,024 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:08,025 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=336)
2025-05-12 23:19:08,025 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,025 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=336)
2025-05-12 23:19:08,026 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,026 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=344)
2025-05-12 23:19:08,026 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,027 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=344)
2025-05-12 23:19:08,027 - numba.core.byteflow - DEBUG - stack ['$a4.0']
2025-05-12 23:19:08,028 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=LOAD_GLOBAL(arg=2, lineno=344)
2025-05-12 23:19:08,029 - numba.core.byteflow - DEBUG - stack ['$6load_attr.1']
2025-05-12 23:19:08,030 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=COMPARE_OP(arg=40, lineno=344)
2025-05-12 23:19:08,030 - numba.core.byteflow - DEBUG - stack ['$6load_attr.1', '$26load_global.2']
2025-05-12 23:19:08,030 - numba.core.byteflow - DEBUG - dispatch pc=40, inst=POP_JUMP_IF_FALSE(arg=24, lineno=344)
2025-05-12 23:19:08,031 - numba.core.byteflow - DEBUG - stack ['$36compare_op.3']
2025-05-12 23:19:08,031 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=42, stack=(), blockstack=(), npush=0), Edge(pc=90, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:08,031 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=42 nstack_initial=0), State(pc_initial=90 nstack_initial=0)])
2025-05-12 23:19:08,032 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,032 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=42 nstack_initial=0)
2025-05-12 23:19:08,032 - numba.core.byteflow - DEBUG - dispatch pc=42, inst=LOAD_GLOBAL(arg=5, lineno=345)
2025-05-12 23:19:08,033 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,033 - numba.core.byteflow - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=345)
2025-05-12 23:19:08,033 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0']
2025-05-12 23:19:08,034 - numba.core.byteflow - DEBUG - dispatch pc=54, inst=LOAD_ATTR(arg=6, lineno=345)
2025-05-12 23:19:08,034 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0', '$a52.2']
2025-05-12 23:19:08,035 - numba.core.byteflow - DEBUG - dispatch pc=74, inst=LOAD_FAST(arg=1, lineno=345)
2025-05-12 23:19:08,035 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0', '$54load_attr.3']
2025-05-12 23:19:08,036 - numba.core.byteflow - DEBUG - dispatch pc=76, inst=LOAD_FAST(arg=2, lineno=345)
2025-05-12 23:19:08,036 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0', '$54load_attr.3', '$i74.4']
2025-05-12 23:19:08,036 - numba.core.byteflow - DEBUG - dispatch pc=78, inst=CALL(arg=3, lineno=345)
2025-05-12 23:19:08,037 - numba.core.byteflow - DEBUG - stack ['$null$42.1', '$42load_global.0', '$54load_attr.3', '$i74.4', '$ch76.5']
2025-05-12 23:19:08,037 - numba.core.byteflow - DEBUG - dispatch pc=86, inst=POP_TOP(arg=None, lineno=345)
2025-05-12 23:19:08,038 - numba.core.byteflow - DEBUG - stack ['$78call.6']
2025-05-12 23:19:08,038 - numba.core.byteflow - DEBUG - dispatch pc=88, inst=RETURN_CONST(arg=0, lineno=345)
2025-05-12 23:19:08,038 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,039 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,039 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=90 nstack_initial=0)])
2025-05-12 23:19:08,040 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,040 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=90 nstack_initial=0)
2025-05-12 23:19:08,041 - numba.core.byteflow - DEBUG - dispatch pc=90, inst=LOAD_FAST(arg=0, lineno=346)
2025-05-12 23:19:08,041 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,042 - numba.core.byteflow - DEBUG - dispatch pc=92, inst=LOAD_ATTR(arg=0, lineno=346)
2025-05-12 23:19:08,042 - numba.core.byteflow - DEBUG - stack ['$a90.0']
2025-05-12 23:19:08,042 - numba.core.byteflow - DEBUG - dispatch pc=112, inst=LOAD_GLOBAL(arg=8, lineno=346)
2025-05-12 23:19:08,043 - numba.core.byteflow - DEBUG - stack ['$92load_attr.1']
2025-05-12 23:19:08,043 - numba.core.byteflow - DEBUG - dispatch pc=122, inst=COMPARE_OP(arg=40, lineno=346)
2025-05-12 23:19:08,044 - numba.core.byteflow - DEBUG - stack ['$92load_attr.1', '$112load_global.2']
2025-05-12 23:19:08,044 - numba.core.byteflow - DEBUG - dispatch pc=126, inst=POP_JUMP_IF_FALSE(arg=24, lineno=346)
2025-05-12 23:19:08,045 - numba.core.byteflow - DEBUG - stack ['$122compare_op.3']
2025-05-12 23:19:08,045 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0), Edge(pc=176, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:08,045 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=176 nstack_initial=0)])
2025-05-12 23:19:08,046 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,046 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=128 nstack_initial=0)
2025-05-12 23:19:08,047 - numba.core.byteflow - DEBUG - dispatch pc=128, inst=LOAD_GLOBAL(arg=11, lineno=347)
2025-05-12 23:19:08,047 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,049 - numba.core.byteflow - DEBUG - dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=347)
2025-05-12 23:19:08,050 - numba.core.byteflow - DEBUG - stack ['$null$128.1', '$128load_global.0']
2025-05-12 23:19:08,051 - numba.core.byteflow - DEBUG - dispatch pc=140, inst=LOAD_ATTR(arg=6, lineno=347)
2025-05-12 23:19:08,051 - numba.core.byteflow - DEBUG - stack ['$null$128.1', '$128load_global.0', '$a138.2']
2025-05-12 23:19:08,052 - numba.core.byteflow - DEBUG - dispatch pc=160, inst=LOAD_FAST(arg=1, lineno=347)
2025-05-12 23:19:08,052 - numba.core.byteflow - DEBUG - stack ['$null$128.1', '$128load_global.0', '$140load_attr.3']
2025-05-12 23:19:08,053 - numba.core.byteflow - DEBUG - dispatch pc=162, inst=LOAD_FAST(arg=2, lineno=347)
2025-05-12 23:19:08,053 - numba.core.byteflow - DEBUG - stack ['$null$128.1', '$128load_global.0', '$140load_attr.3', '$i160.4']
2025-05-12 23:19:08,054 - numba.core.byteflow - DEBUG - dispatch pc=164, inst=CALL(arg=3, lineno=347)
2025-05-12 23:19:08,054 - numba.core.byteflow - DEBUG - stack ['$null$128.1', '$128load_global.0', '$140load_attr.3', '$i160.4', '$ch162.5']
2025-05-12 23:19:08,055 - numba.core.byteflow - DEBUG - dispatch pc=172, inst=POP_TOP(arg=None, lineno=347)
2025-05-12 23:19:08,055 - numba.core.byteflow - DEBUG - stack ['$164call.6']
2025-05-12 23:19:08,055 - numba.core.byteflow - DEBUG - dispatch pc=174, inst=RETURN_CONST(arg=0, lineno=347)
2025-05-12 23:19:08,056 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,056 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,056 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=176 nstack_initial=0)])
2025-05-12 23:19:08,057 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,058 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=176 nstack_initial=0)
2025-05-12 23:19:08,058 - numba.core.byteflow - DEBUG - dispatch pc=176, inst=LOAD_FAST(arg=0, lineno=348)
2025-05-12 23:19:08,060 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,061 - numba.core.byteflow - DEBUG - dispatch pc=178, inst=LOAD_ATTR(arg=0, lineno=348)
2025-05-12 23:19:08,061 - numba.core.byteflow - DEBUG - stack ['$a176.0']
2025-05-12 23:19:08,062 - numba.core.byteflow - DEBUG - dispatch pc=198, inst=LOAD_GLOBAL(arg=12, lineno=348)
2025-05-12 23:19:08,062 - numba.core.byteflow - DEBUG - stack ['$178load_attr.1']
2025-05-12 23:19:08,063 - numba.core.byteflow - DEBUG - dispatch pc=208, inst=COMPARE_OP(arg=40, lineno=348)
2025-05-12 23:19:08,063 - numba.core.byteflow - DEBUG - stack ['$178load_attr.1', '$198load_global.2']
2025-05-12 23:19:08,064 - numba.core.byteflow - DEBUG - dispatch pc=212, inst=POP_JUMP_IF_FALSE(arg=24, lineno=348)
2025-05-12 23:19:08,064 - numba.core.byteflow - DEBUG - stack ['$208compare_op.3']
2025-05-12 23:19:08,065 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=214, stack=(), blockstack=(), npush=0), Edge(pc=262, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:08,065 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=214 nstack_initial=0), State(pc_initial=262 nstack_initial=0)])
2025-05-12 23:19:08,065 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,066 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=214 nstack_initial=0)
2025-05-12 23:19:08,067 - numba.core.byteflow - DEBUG - dispatch pc=214, inst=LOAD_GLOBAL(arg=15, lineno=349)
2025-05-12 23:19:08,067 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,068 - numba.core.byteflow - DEBUG - dispatch pc=224, inst=LOAD_FAST(arg=0, lineno=349)
2025-05-12 23:19:08,068 - numba.core.byteflow - DEBUG - stack ['$null$214.1', '$214load_global.0']
2025-05-12 23:19:08,068 - numba.core.byteflow - DEBUG - dispatch pc=226, inst=LOAD_ATTR(arg=6, lineno=349)
2025-05-12 23:19:08,069 - numba.core.byteflow - DEBUG - stack ['$null$214.1', '$214load_global.0', '$a224.2']
2025-05-12 23:19:08,069 - numba.core.byteflow - DEBUG - dispatch pc=246, inst=LOAD_FAST(arg=1, lineno=349)
2025-05-12 23:19:08,069 - numba.core.byteflow - DEBUG - stack ['$null$214.1', '$214load_global.0', '$226load_attr.3']
2025-05-12 23:19:08,070 - numba.core.byteflow - DEBUG - dispatch pc=248, inst=LOAD_FAST(arg=2, lineno=349)
2025-05-12 23:19:08,070 - numba.core.byteflow - DEBUG - stack ['$null$214.1', '$214load_global.0', '$226load_attr.3', '$i246.4']
2025-05-12 23:19:08,071 - numba.core.byteflow - DEBUG - dispatch pc=250, inst=CALL(arg=3, lineno=349)
2025-05-12 23:19:08,071 - numba.core.byteflow - DEBUG - stack ['$null$214.1', '$214load_global.0', '$226load_attr.3', '$i246.4', '$ch248.5']
2025-05-12 23:19:08,071 - numba.core.byteflow - DEBUG - dispatch pc=258, inst=POP_TOP(arg=None, lineno=349)
2025-05-12 23:19:08,072 - numba.core.byteflow - DEBUG - stack ['$250call.6']
2025-05-12 23:19:08,072 - numba.core.byteflow - DEBUG - dispatch pc=260, inst=RETURN_CONST(arg=0, lineno=349)
2025-05-12 23:19:08,073 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,073 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,073 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=262 nstack_initial=0)])
2025-05-12 23:19:08,073 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,073 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=262 nstack_initial=0)
2025-05-12 23:19:08,074 - numba.core.byteflow - DEBUG - dispatch pc=262, inst=LOAD_GLOBAL(arg=17, lineno=351)
2025-05-12 23:19:08,074 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,076 - numba.core.byteflow - DEBUG - dispatch pc=272, inst=LOAD_CONST(arg=1, lineno=352)
2025-05-12 23:19:08,077 - numba.core.byteflow - DEBUG - stack ['$null$262.1', '$262load_global.0']
2025-05-12 23:19:08,077 - numba.core.byteflow - DEBUG - dispatch pc=274, inst=CALL(arg=1, lineno=351)
2025-05-12 23:19:08,077 - numba.core.byteflow - DEBUG - stack ['$null$262.1', '$262load_global.0', '$const272.2.1']
2025-05-12 23:19:08,084 - numba.core.byteflow - DEBUG - dispatch pc=282, inst=RAISE_VARARGS(arg=1, lineno=351)
2025-05-12 23:19:08,085 - numba.core.byteflow - DEBUG - stack ['$274call.3']
2025-05-12 23:19:08,086 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,087 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:08,087 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=0): set(),
             State(pc_initial=90 nstack_initial=0): set(),
             State(pc_initial=128 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=214 nstack_initial=0): set(),
             State(pc_initial=262 nstack_initial=0): set()})
2025-05-12 23:19:08,089 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:08,089 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,090 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,090 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:08,090 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:08,092 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:08,093 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$a4.0'}), (6, {'item': '$a4.0', 'res': '$6load_attr.1'}), (26, {'idx': 1, 'res': '$26load_global.2'}), (36, {'lhs': '$6load_attr.1', 'rhs': '$26load_global.2', 'res': '$36compare_op.3'}), (40, {'pred': '$36compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: (), 90: ()})
2025-05-12 23:19:08,094 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=42 nstack_initial=0):
AdaptBlockInfo(insts=((42, {'idx': 2, 'res': '$42load_global.0'}), (52, {'res': '$a52.2'}), (54, {'item': '$a52.2', 'res': '$54load_attr.3'}), (74, {'res': '$i74.4'}), (76, {'res': '$ch76.5'}), (78, {'func': '$42load_global.0', 'args': ['$54load_attr.3', '$i74.4', '$ch76.5'], 'kw_names': None, 'res': '$78call.6'}), (88, {'retval': '$const88.7', 'castval': '$88return_const.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,095 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=90 nstack_initial=0):
AdaptBlockInfo(insts=((90, {'res': '$a90.0'}), (92, {'item': '$a90.0', 'res': '$92load_attr.1'}), (112, {'idx': 4, 'res': '$112load_global.2'}), (122, {'lhs': '$92load_attr.1', 'rhs': '$112load_global.2', 'res': '$122compare_op.3'}), (126, {'pred': '$122compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: (), 176: ()})
2025-05-12 23:19:08,095 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=128 nstack_initial=0):
AdaptBlockInfo(insts=((128, {'idx': 5, 'res': '$128load_global.0'}), (138, {'res': '$a138.2'}), (140, {'item': '$a138.2', 'res': '$140load_attr.3'}), (160, {'res': '$i160.4'}), (162, {'res': '$ch162.5'}), (164, {'func': '$128load_global.0', 'args': ['$140load_attr.3', '$i160.4', '$ch162.5'], 'kw_names': None, 'res': '$164call.6'}), (174, {'retval': '$const174.7', 'castval': '$174return_const.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,095 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$a176.0'}), (178, {'item': '$a176.0', 'res': '$178load_attr.1'}), (198, {'idx': 6, 'res': '$198load_global.2'}), (208, {'lhs': '$178load_attr.1', 'rhs': '$198load_global.2', 'res': '$208compare_op.3'}), (212, {'pred': '$208compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={214: (), 262: ()})
2025-05-12 23:19:08,096 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=214 nstack_initial=0):
AdaptBlockInfo(insts=((214, {'idx': 7, 'res': '$214load_global.0'}), (224, {'res': '$a224.2'}), (226, {'item': '$a224.2', 'res': '$226load_attr.3'}), (246, {'res': '$i246.4'}), (248, {'res': '$ch248.5'}), (250, {'func': '$214load_global.0', 'args': ['$226load_attr.3', '$i246.4', '$ch248.5'], 'kw_names': None, 'res': '$250call.6'}), (260, {'retval': '$const260.7', 'castval': '$260return_const.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,097 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=262 nstack_initial=0):
AdaptBlockInfo(insts=((262, {'idx': 8, 'res': '$262load_global.0'}), (272, {'res': '$const272.2.1'}), (274, {'func': '$262load_global.0', 'args': ['$const272.2.1'], 'kw_names': None, 'res': '$274call.3'}), (282, {'exc': '$274call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,100 - numba.core.interpreter - DEBUG - label 0:
    a = arg(0, name=a)                       ['a']
    i = arg(1, name=i)                       ['i']
    ch = arg(2, name=ch)                     ['ch']
    $6load_attr.1 = getattr(value=a, attr=_kind) ['$6load_attr.1', 'a']
    $26load_global.2 = global(PY_UNICODE_1BYTE_KIND: 1) ['$26load_global.2']
    $36compare_op.3 = $6load_attr.1 == $26load_global.2 ['$26load_global.2', '$36compare_op.3', '$6load_attr.1']
    bool40 = global(bool: <class 'bool'>)    ['bool40']
    $40pred = call bool40($36compare_op.3, func=bool40, args=(Var($36compare_op.3, unicode.py:344),), kws=(), vararg=None, varkwarg=None, target=None) ['$36compare_op.3', '$40pred', 'bool40']
    branch $40pred, 42, 90                   ['$40pred']
label 42:
    $42load_global.0 = global(set_uint8: <intrinsic set_uint8>) ['$42load_global.0']
    $54load_attr.3 = getattr(value=a, attr=_data) ['$54load_attr.3', 'a']
    $78call.6 = call $42load_global.0($54load_attr.3, i, ch, func=$42load_global.0, args=[Var($54load_attr.3, unicode.py:345), Var(i, unicode.py:336), Var(ch, unicode.py:336)], kws=(), vararg=None, varkwarg=None, target=None) ['$42load_global.0', '$54load_attr.3', '$78call.6', 'ch', 'i']
    $const88.7 = const(NoneType, None)       ['$const88.7']
    $88return_const.8 = cast(value=$const88.7) ['$88return_const.8', '$const88.7']
    return $88return_const.8                 ['$88return_const.8']
label 90:
    $92load_attr.1 = getattr(value=a, attr=_kind) ['$92load_attr.1', 'a']
    $112load_global.2 = global(PY_UNICODE_2BYTE_KIND: 2) ['$112load_global.2']
    $122compare_op.3 = $92load_attr.1 == $112load_global.2 ['$112load_global.2', '$122compare_op.3', '$92load_attr.1']
    bool126 = global(bool: <class 'bool'>)   ['bool126']
    $126pred = call bool126($122compare_op.3, func=bool126, args=(Var($122compare_op.3, unicode.py:346),), kws=(), vararg=None, varkwarg=None, target=None) ['$122compare_op.3', '$126pred', 'bool126']
    branch $126pred, 128, 176                ['$126pred']
label 128:
    $128load_global.0 = global(set_uint16: <intrinsic set_uint16>) ['$128load_global.0']
    $140load_attr.3 = getattr(value=a, attr=_data) ['$140load_attr.3', 'a']
    $164call.6 = call $128load_global.0($140load_attr.3, i, ch, func=$128load_global.0, args=[Var($140load_attr.3, unicode.py:347), Var(i, unicode.py:336), Var(ch, unicode.py:336)], kws=(), vararg=None, varkwarg=None, target=None) ['$128load_global.0', '$140load_attr.3', '$164call.6', 'ch', 'i']
    $const174.7 = const(NoneType, None)      ['$const174.7']
    $174return_const.8 = cast(value=$const174.7) ['$174return_const.8', '$const174.7']
    return $174return_const.8                ['$174return_const.8']
label 176:
    $178load_attr.1 = getattr(value=a, attr=_kind) ['$178load_attr.1', 'a']
    $198load_global.2 = global(PY_UNICODE_4BYTE_KIND: 4) ['$198load_global.2']
    $208compare_op.3 = $178load_attr.1 == $198load_global.2 ['$178load_attr.1', '$198load_global.2', '$208compare_op.3']
    bool212 = global(bool: <class 'bool'>)   ['bool212']
    $212pred = call bool212($208compare_op.3, func=bool212, args=(Var($208compare_op.3, unicode.py:348),), kws=(), vararg=None, varkwarg=None, target=None) ['$208compare_op.3', '$212pred', 'bool212']
    branch $212pred, 214, 262                ['$212pred']
label 214:
    $214load_global.0 = global(set_uint32: <intrinsic set_uint32>) ['$214load_global.0']
    $226load_attr.3 = getattr(value=a, attr=_data) ['$226load_attr.3', 'a']
    $250call.6 = call $214load_global.0($226load_attr.3, i, ch, func=$214load_global.0, args=[Var($226load_attr.3, unicode.py:349), Var(i, unicode.py:336), Var(ch, unicode.py:336)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_global.0', '$226load_attr.3', '$250call.6', 'ch', 'i']
    $const260.7 = const(NoneType, None)      ['$const260.7']
    $260return_const.8 = cast(value=$const260.7) ['$260return_const.8', '$const260.7']
    return $260return_const.8                ['$260return_const.8']
label 262:
    $262load_global.0 = global(AssertionError: <class 'AssertionError'>) ['$262load_global.0']
    $const272.2.1 = const(str, Unexpected unicode representation in _set_code_point) ['$const272.2.1']
    $274call.3 = call $262load_global.0($const272.2.1, func=$262load_global.0, args=[Var($const272.2.1, unicode.py:352)], kws=(), vararg=None, varkwarg=None, target=None) ['$262load_global.0', '$274call.3', '$const272.2.1']
    raise $274call.3                         ['$274call.3']

2025-05-12 23:19:08,111 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:08,112 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A75700>
2025-05-12 23:19:08,112 - numba.core.ssa - DEBUG - on stmt: a = arg(0, name=a)
2025-05-12 23:19:08,112 - numba.core.ssa - DEBUG - on stmt: i = arg(1, name=i)
2025-05-12 23:19:08,112 - numba.core.ssa - DEBUG - on stmt: ch = arg(2, name=ch)
2025-05-12 23:19:08,112 - numba.core.ssa - DEBUG - on stmt: $6load_attr.1 = getattr(value=a, attr=_kind)
2025-05-12 23:19:08,112 - numba.core.ssa - DEBUG - on stmt: $26load_global.2 = global(PY_UNICODE_1BYTE_KIND: 1)
2025-05-12 23:19:08,112 - numba.core.ssa - DEBUG - on stmt: $36compare_op.3 = $6load_attr.1 == $26load_global.2
2025-05-12 23:19:08,112 - numba.core.ssa - DEBUG - on stmt: bool40 = global(bool: <class 'bool'>)
2025-05-12 23:19:08,113 - numba.core.ssa - DEBUG - on stmt: $40pred = call bool40($36compare_op.3, func=bool40, args=(Var($36compare_op.3, unicode.py:344),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,113 - numba.core.ssa - DEBUG - on stmt: branch $40pred, 42, 90
2025-05-12 23:19:08,113 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 42
2025-05-12 23:19:08,113 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A75700>
2025-05-12 23:19:08,113 - numba.core.ssa - DEBUG - on stmt: $42load_global.0 = global(set_uint8: <intrinsic set_uint8>)
2025-05-12 23:19:08,113 - numba.core.ssa - DEBUG - on stmt: $54load_attr.3 = getattr(value=a, attr=_data)
2025-05-12 23:19:08,113 - numba.core.ssa - DEBUG - on stmt: $78call.6 = call $42load_global.0($54load_attr.3, i, ch, func=$42load_global.0, args=[Var($54load_attr.3, unicode.py:345), Var(i, unicode.py:336), Var(ch, unicode.py:336)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,114 - numba.core.ssa - DEBUG - on stmt: $const88.7 = const(NoneType, None)
2025-05-12 23:19:08,115 - numba.core.ssa - DEBUG - on stmt: $88return_const.8 = cast(value=$const88.7)
2025-05-12 23:19:08,115 - numba.core.ssa - DEBUG - on stmt: return $88return_const.8
2025-05-12 23:19:08,115 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 90
2025-05-12 23:19:08,115 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A75700>
2025-05-12 23:19:08,116 - numba.core.ssa - DEBUG - on stmt: $92load_attr.1 = getattr(value=a, attr=_kind)
2025-05-12 23:19:08,116 - numba.core.ssa - DEBUG - on stmt: $112load_global.2 = global(PY_UNICODE_2BYTE_KIND: 2)
2025-05-12 23:19:08,116 - numba.core.ssa - DEBUG - on stmt: $122compare_op.3 = $92load_attr.1 == $112load_global.2
2025-05-12 23:19:08,116 - numba.core.ssa - DEBUG - on stmt: bool126 = global(bool: <class 'bool'>)
2025-05-12 23:19:08,116 - numba.core.ssa - DEBUG - on stmt: $126pred = call bool126($122compare_op.3, func=bool126, args=(Var($122compare_op.3, unicode.py:346),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,117 - numba.core.ssa - DEBUG - on stmt: branch $126pred, 128, 176
2025-05-12 23:19:08,117 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 128
2025-05-12 23:19:08,117 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A75700>
2025-05-12 23:19:08,117 - numba.core.ssa - DEBUG - on stmt: $128load_global.0 = global(set_uint16: <intrinsic set_uint16>)
2025-05-12 23:19:08,118 - numba.core.ssa - DEBUG - on stmt: $140load_attr.3 = getattr(value=a, attr=_data)
2025-05-12 23:19:08,118 - numba.core.ssa - DEBUG - on stmt: $164call.6 = call $128load_global.0($140load_attr.3, i, ch, func=$128load_global.0, args=[Var($140load_attr.3, unicode.py:347), Var(i, unicode.py:336), Var(ch, unicode.py:336)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,118 - numba.core.ssa - DEBUG - on stmt: $const174.7 = const(NoneType, None)
2025-05-12 23:19:08,119 - numba.core.ssa - DEBUG - on stmt: $174return_const.8 = cast(value=$const174.7)
2025-05-12 23:19:08,119 - numba.core.ssa - DEBUG - on stmt: return $174return_const.8
2025-05-12 23:19:08,120 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 176
2025-05-12 23:19:08,120 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A75700>
2025-05-12 23:19:08,120 - numba.core.ssa - DEBUG - on stmt: $178load_attr.1 = getattr(value=a, attr=_kind)
2025-05-12 23:19:08,121 - numba.core.ssa - DEBUG - on stmt: $198load_global.2 = global(PY_UNICODE_4BYTE_KIND: 4)
2025-05-12 23:19:08,121 - numba.core.ssa - DEBUG - on stmt: $208compare_op.3 = $178load_attr.1 == $198load_global.2
2025-05-12 23:19:08,122 - numba.core.ssa - DEBUG - on stmt: bool212 = global(bool: <class 'bool'>)
2025-05-12 23:19:08,122 - numba.core.ssa - DEBUG - on stmt: $212pred = call bool212($208compare_op.3, func=bool212, args=(Var($208compare_op.3, unicode.py:348),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,122 - numba.core.ssa - DEBUG - on stmt: branch $212pred, 214, 262
2025-05-12 23:19:08,122 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 214
2025-05-12 23:19:08,122 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A75700>
2025-05-12 23:19:08,123 - numba.core.ssa - DEBUG - on stmt: $214load_global.0 = global(set_uint32: <intrinsic set_uint32>)
2025-05-12 23:19:08,123 - numba.core.ssa - DEBUG - on stmt: $226load_attr.3 = getattr(value=a, attr=_data)
2025-05-12 23:19:08,124 - numba.core.ssa - DEBUG - on stmt: $250call.6 = call $214load_global.0($226load_attr.3, i, ch, func=$214load_global.0, args=[Var($226load_attr.3, unicode.py:349), Var(i, unicode.py:336), Var(ch, unicode.py:336)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,124 - numba.core.ssa - DEBUG - on stmt: $const260.7 = const(NoneType, None)
2025-05-12 23:19:08,125 - numba.core.ssa - DEBUG - on stmt: $260return_const.8 = cast(value=$const260.7)
2025-05-12 23:19:08,125 - numba.core.ssa - DEBUG - on stmt: return $260return_const.8
2025-05-12 23:19:08,125 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 262
2025-05-12 23:19:08,126 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8A75700>
2025-05-12 23:19:08,126 - numba.core.ssa - DEBUG - on stmt: $262load_global.0 = global(AssertionError: <class 'AssertionError'>)
2025-05-12 23:19:08,126 - numba.core.ssa - DEBUG - on stmt: $const272.2.1 = const(str, Unexpected unicode representation in _set_code_point)
2025-05-12 23:19:08,126 - numba.core.ssa - DEBUG - on stmt: $274call.3 = call $262load_global.0($const272.2.1, func=$262load_global.0, args=[Var($const272.2.1, unicode.py:352)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,136 - numba.core.ssa - DEBUG - on stmt: <static> raise <class 'AssertionError'>('Unexpected unicode representation in _set_code_point')
2025-05-12 23:19:08,137 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$112load_global.2': [(<numba.core.ir.Assign object at 0x000001E8A8824DD0>,
                                    90)],
             '$122compare_op.3': [(<numba.core.ir.Assign object at 0x000001E8A8825E80>,
                                   90)],
             '$126pred': [(<numba.core.ir.Assign object at 0x000001E8A8826300>,
                           90)],
             '$128load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A88267E0>,
                                    128)],
             '$140load_attr.3': [(<numba.core.ir.Assign object at 0x000001E8A8825D90>,
                                  128)],
             '$164call.6': [(<numba.core.ir.Assign object at 0x000001E8A8826F30>,
                             128)],
             '$174return_const.8': [(<numba.core.ir.Assign object at 0x000001E8A8827230>,
                                     128)],
             '$178load_attr.1': [(<numba.core.ir.Assign object at 0x000001E8A8827620>,
                                  176)],
             '$198load_global.2': [(<numba.core.ir.Assign object at 0x000001E8A8827920>,
                                    176)],
             '$208compare_op.3': [(<numba.core.ir.Assign object at 0x000001E8A88276E0>,
                                   176)],
             '$212pred': [(<numba.core.ir.Assign object at 0x000001E8A88B2180>,
                           176)],
             '$214load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A88A49B0>,
                                    214)],
             '$226load_attr.3': [(<numba.core.ir.Assign object at 0x000001E8A8A77D70>,
                                  214)],
             '$250call.6': [(<numba.core.ir.Assign object at 0x000001E8A8826FF0>,
                             214)],
             '$260return_const.8': [(<numba.core.ir.Assign object at 0x000001E8A88242C0>,
                                     214)],
             '$262load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8824110>,
                                    262)],
             '$26load_global.2': [(<numba.core.ir.Assign object at 0x000001E8A863E600>,
                                   0)],
             '$274call.3': [(<numba.core.ir.Assign object at 0x000001E8A8825EE0>,
                             262)],
             '$36compare_op.3': [(<numba.core.ir.Assign object at 0x000001E8A863CB90>,
                                  0)],
             '$40pred': [(<numba.core.ir.Assign object at 0x000001E8A8876090>,
                          0)],
             '$42load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A88770B0>,
                                   42)],
             '$54load_attr.3': [(<numba.core.ir.Assign object at 0x000001E8A88259D0>,
                                 42)],
             '$6load_attr.1': [(<numba.core.ir.Assign object at 0x000001E8A863CCB0>,
                                0)],
             '$78call.6': [(<numba.core.ir.Assign object at 0x000001E8A88245F0>,
                            42)],
             '$88return_const.8': [(<numba.core.ir.Assign object at 0x000001E8A8826720>,
                                    42)],
             '$92load_attr.1': [(<numba.core.ir.Assign object at 0x000001E8A8825730>,
                                 90)],
             '$const174.7': [(<numba.core.ir.Assign object at 0x000001E8A8827290>,
                              128)],
             '$const260.7': [(<numba.core.ir.Assign object at 0x000001E8A88242F0>,
                              214)],
             '$const272.2.1': [(<numba.core.ir.Assign object at 0x000001E8A88279E0>,
                                262)],
             '$const88.7': [(<numba.core.ir.Assign object at 0x000001E8A8824200>,
                             42)],
             'a': [(<numba.core.ir.Assign object at 0x000001E8A86377D0>, 0)],
             'bool126': [(<numba.core.ir.Assign object at 0x000001E8A8826120>,
                          90)],
             'bool212': [(<numba.core.ir.Assign object at 0x000001E8A88B1910>,
                          176)],
             'bool40': [(<numba.core.ir.Assign object at 0x000001E8A863CDD0>,
                         0)],
             'ch': [(<numba.core.ir.Assign object at 0x000001E8A8635FD0>, 0)],
             'i': [(<numba.core.ir.Assign object at 0x000001E8A8637950>, 0)]})
2025-05-12 23:19:08,141 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8A75700>
2025-05-12 23:19:08,473 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1019)
           2	RESUME(arg=0, lineno=1019)
           4	LOAD_CONST(arg=1, lineno=1020)
           6	STORE_FAST(arg=1, lineno=1020)
           8	LOAD_GLOBAL(arg=1, lineno=1021)
          18	LOAD_FAST(arg=0, lineno=1021)
          20	LOAD_FAST(arg=1, lineno=1021)
          22	CALL(arg=2, lineno=1021)
          30	LOAD_CONST(arg=2, lineno=1021)
          32	COMPARE_OP(arg=40, lineno=1021)
          36	POP_JUMP_IF_FALSE(arg=17, lineno=1021)
          38	PUSH_NULL(arg=None, lineno=1022)
          40	LOAD_GLOBAL(arg=3, lineno=1022)
          50	LOAD_FAST(arg=0, lineno=1022)
          52	LOAD_FAST(arg=1, lineno=1022)
          54	CALL(arg=2, lineno=1022)
          62	CALL(arg=0, lineno=1022)
          70	RETURN_VALUE(arg=None, lineno=1022)
>         72	LOAD_GLOBAL(arg=5, lineno=1024)
          82	LOAD_FAST(arg=0, lineno=1024)
          84	CALL(arg=1, lineno=1024)
          92	RETURN_VALUE(arg=None, lineno=1024)
2025-05-12 23:19:08,474 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:08,474 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,475 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:08,475 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1019)
2025-05-12 23:19:08,475 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,475 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=1019)
2025-05-12 23:19:08,476 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,476 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1020)
2025-05-12 23:19:08,476 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,476 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=STORE_FAST(arg=1, lineno=1020)
2025-05-12 23:19:08,476 - numba.core.byteflow - DEBUG - stack ['$const4.0.1']
2025-05-12 23:19:08,477 - numba.core.byteflow - DEBUG - dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=1021)
2025-05-12 23:19:08,477 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,477 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=1021)
2025-05-12 23:19:08,477 - numba.core.byteflow - DEBUG - stack ['$null$8.2', '$8load_global.1']
2025-05-12 23:19:08,477 - numba.core.byteflow - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=1021)
2025-05-12 23:19:08,481 - numba.core.byteflow - DEBUG - stack ['$null$8.2', '$8load_global.1', '$object18.3']
2025-05-12 23:19:08,483 - numba.core.byteflow - DEBUG - dispatch pc=22, inst=CALL(arg=2, lineno=1021)
2025-05-12 23:19:08,483 - numba.core.byteflow - DEBUG - stack ['$null$8.2', '$8load_global.1', '$object18.3', '$attr20.4']
2025-05-12 23:19:08,483 - numba.core.byteflow - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=2, lineno=1021)
2025-05-12 23:19:08,484 - numba.core.byteflow - DEBUG - stack ['$22call.5']
2025-05-12 23:19:08,484 - numba.core.byteflow - DEBUG - dispatch pc=32, inst=COMPARE_OP(arg=40, lineno=1021)
2025-05-12 23:19:08,484 - numba.core.byteflow - DEBUG - stack ['$22call.5', '$const30.6.2']
2025-05-12 23:19:08,484 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1021)
2025-05-12 23:19:08,485 - numba.core.byteflow - DEBUG - stack ['$32compare_op.7']
2025-05-12 23:19:08,485 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=38, stack=(), blockstack=(), npush=0), Edge(pc=72, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:08,485 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=72 nstack_initial=0)])
2025-05-12 23:19:08,486 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,486 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=38 nstack_initial=0)
2025-05-12 23:19:08,486 - numba.core.byteflow - DEBUG - dispatch pc=38, inst=PUSH_NULL(arg=None, lineno=1022)
2025-05-12 23:19:08,487 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,487 - numba.core.byteflow - DEBUG - dispatch pc=40, inst=LOAD_GLOBAL(arg=3, lineno=1022)
2025-05-12 23:19:08,487 - numba.core.byteflow - DEBUG - stack ['$null$38.0']
2025-05-12 23:19:08,489 - numba.core.byteflow - DEBUG - dispatch pc=50, inst=LOAD_FAST(arg=0, lineno=1022)
2025-05-12 23:19:08,492 - numba.core.byteflow - DEBUG - stack ['$null$38.0', '$null$40.2', '$40load_global.1']
2025-05-12 23:19:08,494 - numba.core.byteflow - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=1, lineno=1022)
2025-05-12 23:19:08,495 - numba.core.byteflow - DEBUG - stack ['$null$38.0', '$null$40.2', '$40load_global.1', '$object50.3']
2025-05-12 23:19:08,495 - numba.core.byteflow - DEBUG - dispatch pc=54, inst=CALL(arg=2, lineno=1022)
2025-05-12 23:19:08,497 - numba.core.byteflow - DEBUG - stack ['$null$38.0', '$null$40.2', '$40load_global.1', '$object50.3', '$attr52.4']
2025-05-12 23:19:08,497 - numba.core.byteflow - DEBUG - dispatch pc=62, inst=CALL(arg=0, lineno=1022)
2025-05-12 23:19:08,497 - numba.core.byteflow - DEBUG - stack ['$null$38.0', '$54call.5']
2025-05-12 23:19:08,498 - numba.core.byteflow - DEBUG - dispatch pc=70, inst=RETURN_VALUE(arg=None, lineno=1022)
2025-05-12 23:19:08,499 - numba.core.byteflow - DEBUG - stack ['$62call.6']
2025-05-12 23:19:08,500 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,502 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=72 nstack_initial=0)])
2025-05-12 23:19:08,503 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,503 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=72 nstack_initial=0)
2025-05-12 23:19:08,503 - numba.core.byteflow - DEBUG - dispatch pc=72, inst=LOAD_GLOBAL(arg=5, lineno=1024)
2025-05-12 23:19:08,504 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,504 - numba.core.byteflow - DEBUG - dispatch pc=82, inst=LOAD_FAST(arg=0, lineno=1024)
2025-05-12 23:19:08,504 - numba.core.byteflow - DEBUG - stack ['$null$72.1', '$72load_global.0']
2025-05-12 23:19:08,504 - numba.core.byteflow - DEBUG - dispatch pc=84, inst=CALL(arg=1, lineno=1024)
2025-05-12 23:19:08,505 - numba.core.byteflow - DEBUG - stack ['$null$72.1', '$72load_global.0', '$object82.2']
2025-05-12 23:19:08,507 - numba.core.byteflow - DEBUG - dispatch pc=92, inst=RETURN_VALUE(arg=None, lineno=1024)
2025-05-12 23:19:08,510 - numba.core.byteflow - DEBUG - stack ['$84call.3']
2025-05-12 23:19:08,511 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,512 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:08,512 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=72 nstack_initial=0): set()})
2025-05-12 23:19:08,513 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:08,513 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,513 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,517 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:08,517 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:08,518 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:08,518 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$const4.0.1'}), (6, {'value': '$const4.0.1'}), (8, {'idx': 0, 'res': '$8load_global.1'}), (18, {'res': '$object18.3'}), (20, {'res': '$attr20.4'}), (22, {'func': '$8load_global.1', 'args': ['$object18.3', '$attr20.4'], 'kw_names': None, 'res': '$22call.5'}), (30, {'res': '$const30.6.2'}), (32, {'lhs': '$22call.5', 'rhs': '$const30.6.2', 'res': '$32compare_op.7'}), (36, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={38: (), 72: ()})
2025-05-12 23:19:08,518 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {}), (40, {'idx': 1, 'res': '$40load_global.1'}), (50, {'res': '$object50.3'}), (52, {'res': '$attr52.4'}), (54, {'func': '$40load_global.1', 'args': ['$object50.3', '$attr52.4'], 'kw_names': None, 'res': '$54call.5'}), (62, {'func': '$54call.5', 'args': [], 'kw_names': None, 'res': '$62call.6'}), (70, {'retval': '$62call.6', 'castval': '$70return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,519 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=72 nstack_initial=0):
AdaptBlockInfo(insts=((72, {'idx': 2, 'res': '$72load_global.0'}), (82, {'res': '$object82.2'}), (84, {'func': '$72load_global.0', 'args': ['$object82.2'], 'kw_names': None, 'res': '$84call.3'}), (92, {'retval': '$84call.3', 'castval': '$92return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,520 - numba.core.interpreter - DEBUG - label 0:
    object = arg(0, name=object)             ['object']
    attr = const(str, __str__)               ['attr']
    $8load_global.1 = global(hasattr: <built-in function hasattr>) ['$8load_global.1']
    $22call.5 = call $8load_global.1(object, attr, func=$8load_global.1, args=[Var(object, old_builtins.py:1019), Var(attr, old_builtins.py:1020)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.5', '$8load_global.1', 'attr', 'object']
    $const30.6.2 = const(bool, True)         ['$const30.6.2']
    $32compare_op.7 = $22call.5 == $const30.6.2 ['$22call.5', '$32compare_op.7', '$const30.6.2']
    bool36 = global(bool: <class 'bool'>)    ['bool36']
    $36pred = call bool36($32compare_op.7, func=bool36, args=(Var($32compare_op.7, old_builtins.py:1021),), kws=(), vararg=None, varkwarg=None, target=None) ['$32compare_op.7', '$36pred', 'bool36']
    branch $36pred, 38, 72                   ['$36pred']
label 38:
    $40load_global.1 = global(getattr: <built-in function getattr>) ['$40load_global.1']
    $54call.5 = call $40load_global.1(object, attr, func=$40load_global.1, args=[Var(object, old_builtins.py:1019), Var(attr, old_builtins.py:1020)], kws=(), vararg=None, varkwarg=None, target=None) ['$40load_global.1', '$54call.5', 'attr', 'object']
    $62call.6 = call $54call.5(func=$54call.5, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$54call.5', '$62call.6']
    $70return_value.7 = cast(value=$62call.6) ['$62call.6', '$70return_value.7']
    return $70return_value.7                 ['$70return_value.7']
label 72:
    $72load_global.0 = global(repr: <built-in function repr>) ['$72load_global.0']
    $84call.3 = call $72load_global.0(object, func=$72load_global.0, args=[Var(object, old_builtins.py:1019)], kws=(), vararg=None, varkwarg=None, target=None) ['$72load_global.0', '$84call.3', 'object']
    $92return_value.4 = cast(value=$84call.3) ['$84call.3', '$92return_value.4']
    return $92return_value.4                 ['$92return_value.4']

2025-05-12 23:19:08,538 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:08,538 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8876AB0>
2025-05-12 23:19:08,538 - numba.core.ssa - DEBUG - on stmt: object = arg(0, name=object)
2025-05-12 23:19:08,540 - numba.core.ssa - DEBUG - on stmt: attr = const(str, __str__)
2025-05-12 23:19:08,540 - numba.core.ssa - DEBUG - on stmt: $8load_global.1 = global(hasattr: <built-in function hasattr>)
2025-05-12 23:19:08,542 - numba.core.ssa - DEBUG - on stmt: $22call.5 = call $8load_global.1(object, attr, func=$8load_global.1, args=[Var(object, old_builtins.py:1019), Var(attr, old_builtins.py:1020)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,543 - numba.core.ssa - DEBUG - on stmt: $const30.6.2 = const(bool, True)
2025-05-12 23:19:08,543 - numba.core.ssa - DEBUG - on stmt: $32compare_op.7 = $22call.5 == $const30.6.2
2025-05-12 23:19:08,544 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:08,545 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.7, func=bool36, args=(Var($32compare_op.7, old_builtins.py:1021),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,545 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 38, 72
2025-05-12 23:19:08,546 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 38
2025-05-12 23:19:08,546 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8876AB0>
2025-05-12 23:19:08,546 - numba.core.ssa - DEBUG - on stmt: $40load_global.1 = global(getattr: <built-in function getattr>)
2025-05-12 23:19:08,547 - numba.core.ssa - DEBUG - on stmt: $54call.5 = call $40load_global.1(object, attr, func=$40load_global.1, args=[Var(object, old_builtins.py:1019), Var(attr, old_builtins.py:1020)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,549 - numba.core.ssa - DEBUG - on stmt: $62call.6 = call $54call.5(func=$54call.5, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,550 - numba.core.ssa - DEBUG - on stmt: $70return_value.7 = cast(value=$62call.6)
2025-05-12 23:19:08,550 - numba.core.ssa - DEBUG - on stmt: return $70return_value.7
2025-05-12 23:19:08,551 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 72
2025-05-12 23:19:08,551 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8876AB0>
2025-05-12 23:19:08,552 - numba.core.ssa - DEBUG - on stmt: $72load_global.0 = global(repr: <built-in function repr>)
2025-05-12 23:19:08,552 - numba.core.ssa - DEBUG - on stmt: $84call.3 = call $72load_global.0(object, func=$72load_global.0, args=[Var(object, old_builtins.py:1019)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,552 - numba.core.ssa - DEBUG - on stmt: $92return_value.4 = cast(value=$84call.3)
2025-05-12 23:19:08,553 - numba.core.ssa - DEBUG - on stmt: return $92return_value.4
2025-05-12 23:19:08,553 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$22call.5': [(<numba.core.ir.Assign object at 0x000001E8A860EE10>,
                            0)],
             '$32compare_op.7': [(<numba.core.ir.Assign object at 0x000001E8A860EB70>,
                                  0)],
             '$36pred': [(<numba.core.ir.Assign object at 0x000001E8A860E8D0>,
                          0)],
             '$40load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A860E7B0>,
                                   38)],
             '$54call.5': [(<numba.core.ir.Assign object at 0x000001E8A860E480>,
                            38)],
             '$62call.6': [(<numba.core.ir.Assign object at 0x000001E8A860E300>,
                            38)],
             '$70return_value.7': [(<numba.core.ir.Assign object at 0x000001E8A860E1E0>,
                                    38)],
             '$72load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A860C6E0>,
                                   72)],
             '$84call.3': [(<numba.core.ir.Assign object at 0x000001E8A860DA90>,
                            72)],
             '$8load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A860F200>,
                                  0)],
             '$92return_value.4': [(<numba.core.ir.Assign object at 0x000001E8A860D970>,
                                    72)],
             '$const30.6.2': [(<numba.core.ir.Assign object at 0x000001E8A860ECF0>,
                               0)],
             'attr': [(<numba.core.ir.Assign object at 0x000001E8A860F440>, 0)],
             'bool36': [(<numba.core.ir.Assign object at 0x000001E8A860EA80>,
                         0)],
             'object': [(<numba.core.ir.Assign object at 0x000001E8A860F5C0>,
                         0)]})
2025-05-12 23:19:08,554 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8876AB0>
2025-05-12 23:19:08,567 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=998)
           2	RESUME(arg=0, lineno=998)
           4	LOAD_GLOBAL(arg=1, lineno=999)
          14	LOAD_FAST(arg=0, lineno=999)
          16	LOAD_FAST(arg=1, lineno=999)
          18	CALL(arg=2, lineno=999)
          26	RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:08,568 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:08,568 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,570 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:08,570 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=998)
2025-05-12 23:19:08,570 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,570 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=998)
2025-05-12 23:19:08,571 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,571 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=999)
2025-05-12 23:19:08,571 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,572 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=999)
2025-05-12 23:19:08,572 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:08,572 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=999)
2025-05-12 23:19:08,573 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:08,574 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=CALL(arg=2, lineno=999)
2025-05-12 23:19:08,575 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:08,575 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:08,576 - numba.core.byteflow - DEBUG - stack ['$18call.4']
2025-05-12 23:19:08,576 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,576 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:08,577 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:08,577 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:08,577 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,578 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,578 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:08,578 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:08,579 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:08,579 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,582 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'name', 'obj']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-05-12 23:19:08,585 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:08,586 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A860CA70>
2025-05-12 23:19:08,586 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:08,586 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:08,586 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>)
2025-05-12 23:19:08,587 - numba.core.ssa - DEBUG - on stmt: $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,587 - numba.core.ssa - DEBUG - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-05-12 23:19:08,588 - numba.core.ssa - DEBUG - on stmt: return $26return_value.5
2025-05-12 23:19:08,589 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001E8A8606ED0>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A8606DB0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A86072C0>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A8605B80>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A86075F0>, 0)]})
2025-05-12 23:19:08,590 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A860CA70>
2025-05-12 23:19:08,600 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(unicode_type, unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
        With argument(s): '(unicode_type, unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:08,621 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(unicode_type, unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
        With argument(s): '(unicode_type, unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:08,635 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=998)
           2	RESUME(arg=0, lineno=998)
           4	LOAD_GLOBAL(arg=1, lineno=999)
          14	LOAD_FAST(arg=0, lineno=999)
          16	LOAD_FAST(arg=1, lineno=999)
          18	CALL(arg=2, lineno=999)
          26	RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:08,636 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:08,636 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,636 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:08,638 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=998)
2025-05-12 23:19:08,638 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,638 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=998)
2025-05-12 23:19:08,640 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,642 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=999)
2025-05-12 23:19:08,643 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,643 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=999)
2025-05-12 23:19:08,643 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:08,644 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=999)
2025-05-12 23:19:08,644 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:08,644 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=CALL(arg=2, lineno=999)
2025-05-12 23:19:08,645 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:08,645 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:08,645 - numba.core.byteflow - DEBUG - stack ['$18call.4']
2025-05-12 23:19:08,646 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,646 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:08,650 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:08,652 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:08,652 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,653 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,653 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:08,653 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:08,653 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:08,653 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,654 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'name', 'obj']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-05-12 23:19:08,660 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:08,661 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8877950>
2025-05-12 23:19:08,661 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:08,661 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:08,662 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>)
2025-05-12 23:19:08,662 - numba.core.ssa - DEBUG - on stmt: $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,662 - numba.core.ssa - DEBUG - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-05-12 23:19:08,662 - numba.core.ssa - DEBUG - on stmt: return $26return_value.5
2025-05-12 23:19:08,663 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001E8A8621610>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A8621B50>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8621820>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A860CA40>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A860FAD0>, 0)]})
2025-05-12 23:19:08,663 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8877950>
2025-05-12 23:19:08,698 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=954)
           2	RESUME(arg=0, lineno=954)
           4	LOAD_GLOBAL(arg=1, lineno=955)
          14	LOAD_FAST(arg=0, lineno=955)
          16	LOAD_FAST(arg=1, lineno=955)
          18	LOAD_GLOBAL(arg=2, lineno=955)
          28	CALL(arg=3, lineno=955)
          36	RETURN_VALUE(arg=None, lineno=955)
2025-05-12 23:19:08,699 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:08,699 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,699 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:08,699 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=954)
2025-05-12 23:19:08,701 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,701 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=954)
2025-05-12 23:19:08,701 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,701 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=955)
2025-05-12 23:19:08,701 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,702 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=955)
2025-05-12 23:19:08,702 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:08,702 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=955)
2025-05-12 23:19:08,702 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:08,702 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=955)
2025-05-12 23:19:08,703 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:08,703 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=CALL(arg=3, lineno=955)
2025-05-12 23:19:08,703 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3', '$18load_global.4']
2025-05-12 23:19:08,703 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=955)
2025-05-12 23:19:08,703 - numba.core.byteflow - DEBUG - stack ['$28call.5']
2025-05-12 23:19:08,704 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,704 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:08,704 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:08,704 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:08,705 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,705 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,706 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:08,707 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:08,707 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:08,707 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'idx': 1, 'res': '$18load_global.4'}), (28, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3', '$18load_global.4'], 'kw_names': None, 'res': '$28call.5'}), (36, {'retval': '$28call.5', 'castval': '$36return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,708 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_getattr: <intrinsic resolve_getattr>) ['$4load_global.0']
    $18load_global.4 = global(_getattr_default: _getattr_default_type()) ['$18load_global.4']
    $28call.5 = call $4load_global.0(obj, name, $18load_global.4, func=$4load_global.0, args=[Var(obj, old_builtins.py:954), Var(name, old_builtins.py:954), Var($18load_global.4, old_builtins.py:955)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_global.4', '$28call.5', '$4load_global.0', 'name', 'obj']
    $36return_value.6 = cast(value=$28call.5) ['$28call.5', '$36return_value.6']
    return $36return_value.6                 ['$36return_value.6']

2025-05-12 23:19:08,710 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:08,710 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8827EC0>
2025-05-12 23:19:08,711 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:08,711 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:08,711 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_getattr: <intrinsic resolve_getattr>)
2025-05-12 23:19:08,712 - numba.core.ssa - DEBUG - on stmt: $18load_global.4 = global(_getattr_default: _getattr_default_type())
2025-05-12 23:19:08,712 - numba.core.ssa - DEBUG - on stmt: $28call.5 = call $4load_global.0(obj, name, $18load_global.4, func=$4load_global.0, args=[Var(obj, old_builtins.py:954), Var(name, old_builtins.py:954), Var($18load_global.4, old_builtins.py:955)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,712 - numba.core.ssa - DEBUG - on stmt: $36return_value.6 = cast(value=$28call.5)
2025-05-12 23:19:08,712 - numba.core.ssa - DEBUG - on stmt: return $36return_value.6
2025-05-12 23:19:08,712 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18load_global.4': [(<numba.core.ir.Assign object at 0x000001E8A88A6AB0>,
                                   0)],
             '$28call.5': [(<numba.core.ir.Assign object at 0x000001E8A88A53D0>,
                            0)],
             '$36return_value.6': [(<numba.core.ir.Assign object at 0x000001E8A88A6EA0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8632CC0>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A8826B10>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A8827CE0>, 0)]})
2025-05-12 23:19:08,713 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8827EC0>
2025-05-12 23:19:08,759 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2557)
           2	RESUME(arg=0, lineno=2557)
           4	LOAD_FAST(arg=0, lineno=2557)
           6	RETURN_VALUE(arg=None, lineno=2557)
2025-05-12 23:19:08,759 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:08,760 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,760 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:08,760 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2557)
2025-05-12 23:19:08,761 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,761 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=2557)
2025-05-12 23:19:08,761 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,761 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2557)
2025-05-12 23:19:08,762 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,762 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=RETURN_VALUE(arg=None, lineno=2557)
2025-05-12 23:19:08,762 - numba.core.byteflow - DEBUG - stack ['$s4.0']
2025-05-12 23:19:08,762 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,763 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:08,763 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:08,763 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:08,763 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,764 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,764 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:08,764 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:08,765 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:08,765 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$s4.0'}), (6, {'retval': '$s4.0', 'castval': '$6return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,766 - numba.core.interpreter - DEBUG - label 0:
    s = arg(0, name=s)                       ['s']
    $6return_value.1 = cast(value=s)         ['$6return_value.1', 's']
    return $6return_value.1                  ['$6return_value.1']

2025-05-12 23:19:08,768 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:08,768 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A86A1400>
2025-05-12 23:19:08,768 - numba.core.ssa - DEBUG - on stmt: s = arg(0, name=s)
2025-05-12 23:19:08,769 - numba.core.ssa - DEBUG - on stmt: $6return_value.1 = cast(value=s)
2025-05-12 23:19:08,769 - numba.core.ssa - DEBUG - on stmt: return $6return_value.1
2025-05-12 23:19:08,769 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$6return_value.1': [(<numba.core.ir.Assign object at 0x000001E8A86A1460>,
                                   0)],
             's': [(<numba.core.ir.Assign object at 0x000001E8A86A0110>, 0)]})
2025-05-12 23:19:08,769 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A86A1400>
2025-05-12 23:19:08,807 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1006)
           2	COPY_FREE_VARS(arg=1, lineno=1006)
           4	RESUME(arg=0, lineno=1006)
           6	LOAD_CONST(arg=1, lineno=1007)
           8	STORE_FAST(arg=1, lineno=1007)
          10	LOAD_GLOBAL(arg=1, lineno=1008)
          20	LOAD_FAST(arg=0, lineno=1008)
          22	LOAD_FAST(arg=1, lineno=1008)
          24	CALL(arg=2, lineno=1008)
          32	LOAD_CONST(arg=2, lineno=1008)
          34	COMPARE_OP(arg=40, lineno=1008)
          38	POP_JUMP_IF_FALSE(arg=17, lineno=1008)
          40	PUSH_NULL(arg=None, lineno=1009)
          42	LOAD_GLOBAL(arg=3, lineno=1009)
          52	LOAD_FAST(arg=0, lineno=1009)
          54	LOAD_FAST(arg=1, lineno=1009)
          56	CALL(arg=2, lineno=1009)
          64	CALL(arg=0, lineno=1009)
          72	RETURN_VALUE(arg=None, lineno=1009)
>         74	LOAD_DEREF(arg=2, lineno=1013)
          76	RETURN_VALUE(arg=None, lineno=1013)
2025-05-12 23:19:08,807 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:08,808 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,808 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:08,808 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1006)
2025-05-12 23:19:08,808 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,808 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=1006)
2025-05-12 23:19:08,809 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,809 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=RESUME(arg=0, lineno=1006)
2025-05-12 23:19:08,810 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,810 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=1007)
2025-05-12 23:19:08,810 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,811 - numba.core.byteflow - DEBUG - dispatch pc=8, inst=STORE_FAST(arg=1, lineno=1007)
2025-05-12 23:19:08,811 - numba.core.byteflow - DEBUG - stack ['$const6.0.1']
2025-05-12 23:19:08,811 - numba.core.byteflow - DEBUG - dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=1008)
2025-05-12 23:19:08,811 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,812 - numba.core.byteflow - DEBUG - dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=1008)
2025-05-12 23:19:08,812 - numba.core.byteflow - DEBUG - stack ['$null$10.2', '$10load_global.1']
2025-05-12 23:19:08,812 - numba.core.byteflow - DEBUG - dispatch pc=22, inst=LOAD_FAST(arg=1, lineno=1008)
2025-05-12 23:19:08,813 - numba.core.byteflow - DEBUG - stack ['$null$10.2', '$10load_global.1', '$obj20.3']
2025-05-12 23:19:08,813 - numba.core.byteflow - DEBUG - dispatch pc=24, inst=CALL(arg=2, lineno=1008)
2025-05-12 23:19:08,813 - numba.core.byteflow - DEBUG - stack ['$null$10.2', '$10load_global.1', '$obj20.3', '$attr22.4']
2025-05-12 23:19:08,814 - numba.core.byteflow - DEBUG - dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=1008)
2025-05-12 23:19:08,814 - numba.core.byteflow - DEBUG - stack ['$24call.5']
2025-05-12 23:19:08,814 - numba.core.byteflow - DEBUG - dispatch pc=34, inst=COMPARE_OP(arg=40, lineno=1008)
2025-05-12 23:19:08,815 - numba.core.byteflow - DEBUG - stack ['$24call.5', '$const32.6.2']
2025-05-12 23:19:08,815 - numba.core.byteflow - DEBUG - dispatch pc=38, inst=POP_JUMP_IF_FALSE(arg=17, lineno=1008)
2025-05-12 23:19:08,815 - numba.core.byteflow - DEBUG - stack ['$34compare_op.7']
2025-05-12 23:19:08,816 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=40, stack=(), blockstack=(), npush=0), Edge(pc=74, stack=(), blockstack=(), npush=0)]
2025-05-12 23:19:08,816 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=40 nstack_initial=0), State(pc_initial=74 nstack_initial=0)])
2025-05-12 23:19:08,816 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,817 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=40 nstack_initial=0)
2025-05-12 23:19:08,817 - numba.core.byteflow - DEBUG - dispatch pc=40, inst=PUSH_NULL(arg=None, lineno=1009)
2025-05-12 23:19:08,817 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,818 - numba.core.byteflow - DEBUG - dispatch pc=42, inst=LOAD_GLOBAL(arg=3, lineno=1009)
2025-05-12 23:19:08,818 - numba.core.byteflow - DEBUG - stack ['$null$40.0']
2025-05-12 23:19:08,818 - numba.core.byteflow - DEBUG - dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=1009)
2025-05-12 23:19:08,818 - numba.core.byteflow - DEBUG - stack ['$null$40.0', '$null$42.2', '$42load_global.1']
2025-05-12 23:19:08,818 - numba.core.byteflow - DEBUG - dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=1009)
2025-05-12 23:19:08,819 - numba.core.byteflow - DEBUG - stack ['$null$40.0', '$null$42.2', '$42load_global.1', '$obj52.3']
2025-05-12 23:19:08,819 - numba.core.byteflow - DEBUG - dispatch pc=56, inst=CALL(arg=2, lineno=1009)
2025-05-12 23:19:08,819 - numba.core.byteflow - DEBUG - stack ['$null$40.0', '$null$42.2', '$42load_global.1', '$obj52.3', '$attr54.4']
2025-05-12 23:19:08,819 - numba.core.byteflow - DEBUG - dispatch pc=64, inst=CALL(arg=0, lineno=1009)
2025-05-12 23:19:08,819 - numba.core.byteflow - DEBUG - stack ['$null$40.0', '$56call.5']
2025-05-12 23:19:08,819 - numba.core.byteflow - DEBUG - dispatch pc=72, inst=RETURN_VALUE(arg=None, lineno=1009)
2025-05-12 23:19:08,821 - numba.core.byteflow - DEBUG - stack ['$64call.6']
2025-05-12 23:19:08,821 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,822 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=74 nstack_initial=0)])
2025-05-12 23:19:08,822 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,822 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=74 nstack_initial=0)
2025-05-12 23:19:08,823 - numba.core.byteflow - DEBUG - dispatch pc=74, inst=LOAD_DEREF(arg=2, lineno=1013)
2025-05-12 23:19:08,824 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,824 - numba.core.byteflow - DEBUG - dispatch pc=76, inst=RETURN_VALUE(arg=None, lineno=1013)
2025-05-12 23:19:08,825 - numba.core.byteflow - DEBUG - stack ['$74load_deref.0']
2025-05-12 23:19:08,825 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,825 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:08,825 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=0): set(),
             State(pc_initial=74 nstack_initial=0): set()})
2025-05-12 23:19:08,826 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:08,826 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,826 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,827 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:08,827 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:08,827 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:08,828 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$const6.0.1'}), (8, {'value': '$const6.0.1'}), (10, {'idx': 0, 'res': '$10load_global.1'}), (20, {'res': '$obj20.3'}), (22, {'res': '$attr22.4'}), (24, {'func': '$10load_global.1', 'args': ['$obj20.3', '$attr22.4'], 'kw_names': None, 'res': '$24call.5'}), (32, {'res': '$const32.6.2'}), (34, {'lhs': '$24call.5', 'rhs': '$const32.6.2', 'res': '$34compare_op.7'}), (38, {'pred': '$34compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: (), 74: ()})
2025-05-12 23:19:08,828 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=40 nstack_initial=0):
AdaptBlockInfo(insts=((40, {}), (42, {'idx': 1, 'res': '$42load_global.1'}), (52, {'res': '$obj52.3'}), (54, {'res': '$attr54.4'}), (56, {'func': '$42load_global.1', 'args': ['$obj52.3', '$attr54.4'], 'kw_names': None, 'res': '$56call.5'}), (64, {'func': '$56call.5', 'args': [], 'kw_names': None, 'res': '$64call.6'}), (72, {'retval': '$64call.6', 'castval': '$72return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,828 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=74 nstack_initial=0):
AdaptBlockInfo(insts=((74, {'res': '$74load_deref.0'}), (76, {'retval': '$74load_deref.0', 'castval': '$76return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,829 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    attr = const(str, __repr__)              ['attr']
    $10load_global.1 = global(hasattr: <built-in function hasattr>) ['$10load_global.1']
    $24call.5 = call $10load_global.1(obj, attr, func=$10load_global.1, args=[Var(obj, old_builtins.py:1006), Var(attr, old_builtins.py:1007)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_global.1', '$24call.5', 'attr', 'obj']
    $const32.6.2 = const(bool, True)         ['$const32.6.2']
    $34compare_op.7 = $24call.5 == $const32.6.2 ['$24call.5', '$34compare_op.7', '$const32.6.2']
    bool38 = global(bool: <class 'bool'>)    ['bool38']
    $38pred = call bool38($34compare_op.7, func=bool38, args=(Var($34compare_op.7, old_builtins.py:1008),), kws=(), vararg=None, varkwarg=None, target=None) ['$34compare_op.7', '$38pred', 'bool38']
    branch $38pred, 40, 74                   ['$38pred']
label 40:
    $42load_global.1 = global(getattr: <built-in function getattr>) ['$42load_global.1']
    $56call.5 = call $42load_global.1(obj, attr, func=$42load_global.1, args=[Var(obj, old_builtins.py:1006), Var(attr, old_builtins.py:1007)], kws=(), vararg=None, varkwarg=None, target=None) ['$42load_global.1', '$56call.5', 'attr', 'obj']
    $64call.6 = call $56call.5(func=$56call.5, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$56call.5', '$64call.6']
    $72return_value.7 = cast(value=$64call.6) ['$64call.6', '$72return_value.7']
    return $72return_value.7                 ['$72return_value.7']
label 74:
    $74load_deref.0 = freevar(missing_repr_format: <object type:unicode_type>) ['$74load_deref.0']
    $76return_value.1 = cast(value=$74load_deref.0) ['$74load_deref.0', '$76return_value.1']
    return $76return_value.1                 ['$76return_value.1']

2025-05-12 23:19:08,838 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:08,839 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8863C50>
2025-05-12 23:19:08,839 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:08,840 - numba.core.ssa - DEBUG - on stmt: attr = const(str, __repr__)
2025-05-12 23:19:08,841 - numba.core.ssa - DEBUG - on stmt: $10load_global.1 = global(hasattr: <built-in function hasattr>)
2025-05-12 23:19:08,841 - numba.core.ssa - DEBUG - on stmt: $24call.5 = call $10load_global.1(obj, attr, func=$10load_global.1, args=[Var(obj, old_builtins.py:1006), Var(attr, old_builtins.py:1007)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,841 - numba.core.ssa - DEBUG - on stmt: $const32.6.2 = const(bool, True)
2025-05-12 23:19:08,842 - numba.core.ssa - DEBUG - on stmt: $34compare_op.7 = $24call.5 == $const32.6.2
2025-05-12 23:19:08,842 - numba.core.ssa - DEBUG - on stmt: bool38 = global(bool: <class 'bool'>)
2025-05-12 23:19:08,842 - numba.core.ssa - DEBUG - on stmt: $38pred = call bool38($34compare_op.7, func=bool38, args=(Var($34compare_op.7, old_builtins.py:1008),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,842 - numba.core.ssa - DEBUG - on stmt: branch $38pred, 40, 74
2025-05-12 23:19:08,843 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 40
2025-05-12 23:19:08,845 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8863C50>
2025-05-12 23:19:08,845 - numba.core.ssa - DEBUG - on stmt: $42load_global.1 = global(getattr: <built-in function getattr>)
2025-05-12 23:19:08,846 - numba.core.ssa - DEBUG - on stmt: $56call.5 = call $42load_global.1(obj, attr, func=$42load_global.1, args=[Var(obj, old_builtins.py:1006), Var(attr, old_builtins.py:1007)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,846 - numba.core.ssa - DEBUG - on stmt: $64call.6 = call $56call.5(func=$56call.5, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,846 - numba.core.ssa - DEBUG - on stmt: $72return_value.7 = cast(value=$64call.6)
2025-05-12 23:19:08,847 - numba.core.ssa - DEBUG - on stmt: return $72return_value.7
2025-05-12 23:19:08,847 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 74
2025-05-12 23:19:08,847 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8863C50>
2025-05-12 23:19:08,849 - numba.core.ssa - DEBUG - on stmt: $74load_deref.0 = freevar(missing_repr_format: <object type:unicode_type>)
2025-05-12 23:19:08,849 - numba.core.ssa - DEBUG - on stmt: $76return_value.1 = cast(value=$74load_deref.0)
2025-05-12 23:19:08,849 - numba.core.ssa - DEBUG - on stmt: return $76return_value.1
2025-05-12 23:19:08,849 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$10load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A8861A60>,
                                   0)],
             '$24call.5': [(<numba.core.ir.Assign object at 0x000001E8A88C0EC0>,
                            0)],
             '$34compare_op.7': [(<numba.core.ir.Assign object at 0x000001E8A88C3A70>,
                                  0)],
             '$38pred': [(<numba.core.ir.Assign object at 0x000001E8A88C1AF0>,
                          0)],
             '$42load_global.1': [(<numba.core.ir.Assign object at 0x000001E8A88C1CD0>,
                                   40)],
             '$56call.5': [(<numba.core.ir.Assign object at 0x000001E8A88C1DF0>,
                            40)],
             '$64call.6': [(<numba.core.ir.Assign object at 0x000001E8A88C0770>,
                            40)],
             '$72return_value.7': [(<numba.core.ir.Assign object at 0x000001E8A88C2DB0>,
                                    40)],
             '$74load_deref.0': [(<numba.core.ir.Assign object at 0x000001E8A88C2C00>,
                                  74)],
             '$76return_value.1': [(<numba.core.ir.Assign object at 0x000001E8A88C2E70>,
                                    74)],
             '$const32.6.2': [(<numba.core.ir.Assign object at 0x000001E8A88C17F0>,
                               0)],
             'attr': [(<numba.core.ir.Assign object at 0x000001E8A8860E60>, 0)],
             'bool38': [(<numba.core.ir.Assign object at 0x000001E8A88C0830>,
                         0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A88618E0>, 0)]})
2025-05-12 23:19:08,851 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8863C50>
2025-05-12 23:19:08,862 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=998)
           2	RESUME(arg=0, lineno=998)
           4	LOAD_GLOBAL(arg=1, lineno=999)
          14	LOAD_FAST(arg=0, lineno=999)
          16	LOAD_FAST(arg=1, lineno=999)
          18	CALL(arg=2, lineno=999)
          26	RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:08,862 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:08,862 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,863 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:08,863 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=998)
2025-05-12 23:19:08,863 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,863 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=998)
2025-05-12 23:19:08,863 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,863 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=999)
2025-05-12 23:19:08,864 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,864 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=999)
2025-05-12 23:19:08,865 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:08,866 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=999)
2025-05-12 23:19:08,866 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:08,866 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=CALL(arg=2, lineno=999)
2025-05-12 23:19:08,866 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:08,867 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:08,867 - numba.core.byteflow - DEBUG - stack ['$18call.4']
2025-05-12 23:19:08,868 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,868 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:08,868 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:08,868 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:08,869 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,869 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,870 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:08,870 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:08,870 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:08,870 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,871 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'name', 'obj']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-05-12 23:19:08,876 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:08,876 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A88C3B00>
2025-05-12 23:19:08,876 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:08,877 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:08,877 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>)
2025-05-12 23:19:08,877 - numba.core.ssa - DEBUG - on stmt: $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,878 - numba.core.ssa - DEBUG - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-05-12 23:19:08,878 - numba.core.ssa - DEBUG - on stmt: return $26return_value.5
2025-05-12 23:19:08,878 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001E8A87F0080>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A87F2CF0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A87F0470>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A87F1190>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A87F0D70>, 0)]})
2025-05-12 23:19:08,879 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A88C3B00>
2025-05-12 23:19:08,894 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(unicode_type, unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
        With argument(s): '(unicode_type, unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:08,912 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(unicode_type, unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
        With argument(s): '(unicode_type, unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:08,925 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=998)
           2	RESUME(arg=0, lineno=998)
           4	LOAD_GLOBAL(arg=1, lineno=999)
          14	LOAD_FAST(arg=0, lineno=999)
          16	LOAD_FAST(arg=1, lineno=999)
          18	CALL(arg=2, lineno=999)
          26	RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:08,926 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:08,926 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:08,927 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:08,927 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=998)
2025-05-12 23:19:08,927 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,928 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=998)
2025-05-12 23:19:08,928 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,928 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=999)
2025-05-12 23:19:08,929 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:08,929 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=999)
2025-05-12 23:19:08,929 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:08,930 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=999)
2025-05-12 23:19:08,931 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:08,932 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=CALL(arg=2, lineno=999)
2025-05-12 23:19:08,932 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:08,932 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:08,932 - numba.core.byteflow - DEBUG - stack ['$18call.4']
2025-05-12 23:19:08,933 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:08,933 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:08,933 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:08,934 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:08,934 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,935 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:08,935 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:08,935 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:08,936 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:08,937 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:08,937 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'name', 'obj']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-05-12 23:19:08,941 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:08,942 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A87F0AA0>
2025-05-12 23:19:08,942 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:08,943 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:08,944 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>)
2025-05-12 23:19:08,944 - numba.core.ssa - DEBUG - on stmt: $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:08,945 - numba.core.ssa - DEBUG - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-05-12 23:19:08,946 - numba.core.ssa - DEBUG - on stmt: return $26return_value.5
2025-05-12 23:19:08,948 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001E8A88C0980>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A88C3EF0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8860830>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A87F1730>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A87F27B0>, 0)]})
2025-05-12 23:19:08,960 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A87F0AA0>
2025-05-12 23:19:09,024 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=954)
           2	RESUME(arg=0, lineno=954)
           4	LOAD_GLOBAL(arg=1, lineno=955)
          14	LOAD_FAST(arg=0, lineno=955)
          16	LOAD_FAST(arg=1, lineno=955)
          18	LOAD_GLOBAL(arg=2, lineno=955)
          28	CALL(arg=3, lineno=955)
          36	RETURN_VALUE(arg=None, lineno=955)
2025-05-12 23:19:09,025 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:09,025 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:09,026 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:09,026 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=954)
2025-05-12 23:19:09,026 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:09,027 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=954)
2025-05-12 23:19:09,027 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:09,027 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=955)
2025-05-12 23:19:09,028 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:09,028 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=955)
2025-05-12 23:19:09,029 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:09,030 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=955)
2025-05-12 23:19:09,030 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:09,030 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=LOAD_GLOBAL(arg=2, lineno=955)
2025-05-12 23:19:09,031 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:09,032 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=CALL(arg=3, lineno=955)
2025-05-12 23:19:09,032 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3', '$18load_global.4']
2025-05-12 23:19:09,033 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=955)
2025-05-12 23:19:09,033 - numba.core.byteflow - DEBUG - stack ['$28call.5']
2025-05-12 23:19:09,033 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:09,034 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:09,034 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:09,035 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:09,035 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:09,035 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:09,036 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:09,036 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:09,036 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:09,037 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'idx': 1, 'res': '$18load_global.4'}), (28, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3', '$18load_global.4'], 'kw_names': None, 'res': '$28call.5'}), (36, {'retval': '$28call.5', 'castval': '$36return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:09,037 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_getattr: <intrinsic resolve_getattr>) ['$4load_global.0']
    $18load_global.4 = global(_getattr_default: _getattr_default_type()) ['$18load_global.4']
    $28call.5 = call $4load_global.0(obj, name, $18load_global.4, func=$4load_global.0, args=[Var(obj, old_builtins.py:954), Var(name, old_builtins.py:954), Var($18load_global.4, old_builtins.py:955)], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_global.4', '$28call.5', '$4load_global.0', 'name', 'obj']
    $36return_value.6 = cast(value=$28call.5) ['$28call.5', '$36return_value.6']
    return $36return_value.6                 ['$36return_value.6']

2025-05-12 23:19:09,040 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:09,040 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A883A990>
2025-05-12 23:19:09,040 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:09,041 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:09,041 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_getattr: <intrinsic resolve_getattr>)
2025-05-12 23:19:09,042 - numba.core.ssa - DEBUG - on stmt: $18load_global.4 = global(_getattr_default: _getattr_default_type())
2025-05-12 23:19:09,042 - numba.core.ssa - DEBUG - on stmt: $28call.5 = call $4load_global.0(obj, name, $18load_global.4, func=$4load_global.0, args=[Var(obj, old_builtins.py:954), Var(name, old_builtins.py:954), Var($18load_global.4, old_builtins.py:955)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:09,043 - numba.core.ssa - DEBUG - on stmt: $36return_value.6 = cast(value=$28call.5)
2025-05-12 23:19:09,043 - numba.core.ssa - DEBUG - on stmt: return $36return_value.6
2025-05-12 23:19:09,043 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18load_global.4': [(<numba.core.ir.Assign object at 0x000001E8A88391C0>,
                                   0)],
             '$28call.5': [(<numba.core.ir.Assign object at 0x000001E8A883B6B0>,
                            0)],
             '$36return_value.6': [(<numba.core.ir.Assign object at 0x000001E8A883B3B0>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8839BB0>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A8839670>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A883B260>, 0)]})
2025-05-12 23:19:09,044 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A883A990>
2025-05-12 23:19:09,108 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=2564)
           2	RESUME(arg=0, lineno=2564)
           4	LOAD_CONST(arg=1, lineno=2564)
           6	LOAD_FAST(arg=0, lineno=2564)
           8	BINARY_OP(arg=0, lineno=2564)
          12	LOAD_CONST(arg=1, lineno=2564)
          14	BINARY_OP(arg=0, lineno=2564)
          18	RETURN_VALUE(arg=None, lineno=2564)
2025-05-12 23:19:09,108 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:09,109 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:09,109 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:09,110 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=2564)
2025-05-12 23:19:09,111 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:09,111 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=2564)
2025-05-12 23:19:09,111 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:09,111 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=2564)
2025-05-12 23:19:09,111 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:09,112 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2564)
2025-05-12 23:19:09,112 - numba.core.byteflow - DEBUG - stack ['$const4.0.1']
2025-05-12 23:19:09,113 - numba.core.byteflow - DEBUG - dispatch pc=8, inst=BINARY_OP(arg=0, lineno=2564)
2025-05-12 23:19:09,113 - numba.core.byteflow - DEBUG - stack ['$const4.0.1', '$s6.1']
2025-05-12 23:19:09,114 - numba.core.byteflow - DEBUG - dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=2564)
2025-05-12 23:19:09,114 - numba.core.byteflow - DEBUG - stack ['$binop_add8.2']
2025-05-12 23:19:09,115 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=BINARY_OP(arg=0, lineno=2564)
2025-05-12 23:19:09,115 - numba.core.byteflow - DEBUG - stack ['$binop_add8.2', '$const12.3.1']
2025-05-12 23:19:09,116 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=2564)
2025-05-12 23:19:09,116 - numba.core.byteflow - DEBUG - stack ['$binop_add14.4']
2025-05-12 23:19:09,116 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:09,117 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:09,117 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:09,117 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:09,117 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:09,117 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:09,119 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:09,120 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:09,120 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:09,121 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$const4.0.1'}), (6, {'res': '$s6.1'}), (8, {'op': '+', 'lhs': '$const4.0.1', 'rhs': '$s6.1', 'res': '$binop_add8.2'}), (12, {'res': '$const12.3.1'}), (14, {'op': '+', 'lhs': '$binop_add8.2', 'rhs': '$const12.3.1', 'res': '$binop_add14.4'}), (18, {'retval': '$binop_add14.4', 'castval': '$18return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:09,122 - numba.core.interpreter - DEBUG - label 0:
    s = arg(0, name=s)                       ['s']
    $const4.0.1 = const(str, ')              ['$const4.0.1']
    $binop_add8.2 = $const4.0.1 + s          ['$binop_add8.2', '$const4.0.1', 's']
    $const12.3.1 = const(str, ')             ['$const12.3.1']
    $binop_add14.4 = $binop_add8.2 + $const12.3.1 ['$binop_add14.4', '$binop_add8.2', '$const12.3.1']
    $18return_value.5 = cast(value=$binop_add14.4) ['$18return_value.5', '$binop_add14.4']
    return $18return_value.5                 ['$18return_value.5']

2025-05-12 23:19:09,125 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:09,126 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8610D10>
2025-05-12 23:19:09,126 - numba.core.ssa - DEBUG - on stmt: s = arg(0, name=s)
2025-05-12 23:19:09,127 - numba.core.ssa - DEBUG - on stmt: $const4.0.1 = const(str, ')
2025-05-12 23:19:09,127 - numba.core.ssa - DEBUG - on stmt: $binop_add8.2 = $const4.0.1 + s
2025-05-12 23:19:09,127 - numba.core.ssa - DEBUG - on stmt: $const12.3.1 = const(str, ')
2025-05-12 23:19:09,128 - numba.core.ssa - DEBUG - on stmt: $binop_add14.4 = $binop_add8.2 + $const12.3.1
2025-05-12 23:19:09,128 - numba.core.ssa - DEBUG - on stmt: $18return_value.5 = cast(value=$binop_add14.4)
2025-05-12 23:19:09,128 - numba.core.ssa - DEBUG - on stmt: return $18return_value.5
2025-05-12 23:19:09,129 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A8610260>,
                                    0)],
             '$binop_add14.4': [(<numba.core.ir.Assign object at 0x000001E8A86108F0>,
                                 0)],
             '$binop_add8.2': [(<numba.core.ir.Assign object at 0x000001E8A86100E0>,
                                0)],
             '$const12.3.1': [(<numba.core.ir.Assign object at 0x000001E8A8610B30>,
                               0)],
             '$const4.0.1': [(<numba.core.ir.Assign object at 0x000001E8A86119D0>,
                              0)],
             's': [(<numba.core.ir.Assign object at 0x000001E8A8610410>, 0)]})
2025-05-12 23:19:09,129 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8610D10>
2025-05-12 23:19:09,355 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=998)
           2	RESUME(arg=0, lineno=998)
           4	LOAD_GLOBAL(arg=1, lineno=999)
          14	LOAD_FAST(arg=0, lineno=999)
          16	LOAD_FAST(arg=1, lineno=999)
          18	CALL(arg=2, lineno=999)
          26	RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:09,356 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:09,356 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:09,357 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:09,357 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=998)
2025-05-12 23:19:09,358 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:09,358 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=998)
2025-05-12 23:19:09,359 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:09,359 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=999)
2025-05-12 23:19:09,359 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:09,359 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=999)
2025-05-12 23:19:09,360 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:09,361 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=999)
2025-05-12 23:19:09,361 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:09,361 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=CALL(arg=2, lineno=999)
2025-05-12 23:19:09,361 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:09,363 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:09,363 - numba.core.byteflow - DEBUG - stack ['$18call.4']
2025-05-12 23:19:09,363 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:09,364 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:09,364 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:09,365 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:09,365 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:09,366 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:09,366 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:09,367 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:09,367 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:09,368 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:09,369 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'name', 'obj']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-05-12 23:19:09,371 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:09,372 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A85E4F20>
2025-05-12 23:19:09,373 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:09,373 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:09,377 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>)
2025-05-12 23:19:09,377 - numba.core.ssa - DEBUG - on stmt: $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:09,378 - numba.core.ssa - DEBUG - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-05-12 23:19:09,378 - numba.core.ssa - DEBUG - on stmt: return $26return_value.5
2025-05-12 23:19:09,378 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001E8A85E2ED0>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A85E2E70>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A85E40B0>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A85E4230>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A85E4350>, 0)]})
2025-05-12 23:19:09,379 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A85E4F20>
2025-05-12 23:19:09,398 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(unicode_type, unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
        With argument(s): '(unicode_type, unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:09,419 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(unicode_type, unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
        With argument(s): '(unicode_type, unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:09,657 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=998)
           2	RESUME(arg=0, lineno=998)
           4	LOAD_GLOBAL(arg=1, lineno=999)
          14	LOAD_FAST(arg=0, lineno=999)
          16	LOAD_FAST(arg=1, lineno=999)
          18	CALL(arg=2, lineno=999)
          26	RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:09,657 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:09,658 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:09,658 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:09,658 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=998)
2025-05-12 23:19:09,658 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:09,659 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=998)
2025-05-12 23:19:09,659 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:09,660 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=999)
2025-05-12 23:19:09,660 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:09,661 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=999)
2025-05-12 23:19:09,661 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:09,661 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=999)
2025-05-12 23:19:09,661 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2']
2025-05-12 23:19:09,662 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=CALL(arg=2, lineno=999)
2025-05-12 23:19:09,662 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$obj14.2', '$name16.3']
2025-05-12 23:19:09,663 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=999)
2025-05-12 23:19:09,663 - numba.core.byteflow - DEBUG - stack ['$18call.4']
2025-05-12 23:19:09,664 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:09,664 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:09,664 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:09,666 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:09,666 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:09,666 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:09,667 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:09,667 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:09,667 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:09,668 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$obj14.2'}), (16, {'res': '$name16.3'}), (18, {'func': '$4load_global.0', 'args': ['$obj14.2', '$name16.3'], 'kw_names': None, 'res': '$18call.4'}), (26, {'retval': '$18call.4', 'castval': '$26return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:09,672 - numba.core.interpreter - DEBUG - label 0:
    obj = arg(0, name=obj)                   ['obj']
    name = arg(1, name=name)                 ['name']
    $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>) ['$4load_global.0']
    $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None) ['$18call.4', '$4load_global.0', 'name', 'obj']
    $26return_value.5 = cast(value=$18call.4) ['$18call.4', '$26return_value.5']
    return $26return_value.5                 ['$26return_value.5']

2025-05-12 23:19:09,675 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:09,676 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A877B0B0>
2025-05-12 23:19:09,677 - numba.core.ssa - DEBUG - on stmt: obj = arg(0, name=obj)
2025-05-12 23:19:09,677 - numba.core.ssa - DEBUG - on stmt: name = arg(1, name=name)
2025-05-12 23:19:09,678 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(resolve_hasattr: <intrinsic resolve_hasattr>)
2025-05-12 23:19:09,678 - numba.core.ssa - DEBUG - on stmt: $18call.4 = call $4load_global.0(obj, name, func=$4load_global.0, args=[Var(obj, old_builtins.py:998), Var(name, old_builtins.py:998)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:09,678 - numba.core.ssa - DEBUG - on stmt: $26return_value.5 = cast(value=$18call.4)
2025-05-12 23:19:09,678 - numba.core.ssa - DEBUG - on stmt: return $26return_value.5
2025-05-12 23:19:09,679 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$18call.4': [(<numba.core.ir.Assign object at 0x000001E8A8B98770>,
                            0)],
             '$26return_value.5': [(<numba.core.ir.Assign object at 0x000001E8A8B98980>,
                                    0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8B99220>,
                                  0)],
             'name': [(<numba.core.ir.Assign object at 0x000001E8A8B980B0>, 0)],
             'obj': [(<numba.core.ir.Assign object at 0x000001E8A8B98C80>, 0)]})
2025-05-12 23:19:09,680 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A877B0B0>
2025-05-12 23:19:09,699 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(unicode_type, unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
        With argument(s): '(unicode_type, unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:09,720 - numba.core.typeinfer - DEBUG - captured error
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\lowering.py", line 511, in lower_inst
    impl = self.context.get_function('static_setitem', signature)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 556, in get_function
    return self.get_function(fn, sig, _firstcall=False)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\base.py", line 558, in get_function
    raise NotImplementedError("No definition for lowering %s%s" % (key, sig))
NotImplementedError: No definition for lowering static_setitem(Array(bool, 1, 'A', False, aligned=True), slice<a:b>, Array(bool, 1, 'A', False, aligned=True)) -> none

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 160, in propagate
    constraint(typeinfer)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 566, in __call__
    self.resolve(typeinfer, typevars, fnty)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 589, in resolve
    sig = typeinfer.resolve_call(fnty, pos_args, kw_args)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typeinfer.py", line 1560, in resolve_call
    return self.context.resolve_function_type(fnty, pos_args, kw_args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 212, in resolve_function_type
    raise last_exception
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 195, in resolve_function_type
    res = self._resolve_user_function_type(func, args, kws)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\typing\context.py", line 247, in _resolve_user_function_type
    return func.get_call_type(self, args, kws)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 329, in get_call_type
    failures.raise_error()
  File "C:\Users\nolan\miniforge3\Lib\site-packages\numba\core\types\functions.py", line 227, in raise_error
    raise errors.TypingError(self.format())
numba.core.errors.TypingError: [1m[1m[1mNo implementation of function Function(<intrinsic resolve_hasattr>) found for signature:
 
 >>> resolve_hasattr(unicode_type, unicode_type)
 
There are 2 candidate implementations:
[1m      - Of which 2 did not match due to:
      Intrinsic in function 'resolve_hasattr': File: numba\cpython\old_builtins.py: Line 970.
        With argument(s): '(unicode_type, unicode_type)':[0m
[1m       Rejected as the implementation raised a specific error:
         RequireLiteralValue: [1margument 'name' must be a literal string[0m[0m
  raised from C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py:973
[0m
[0m[1mDuring: resolving callee type: Function(<intrinsic resolve_hasattr>)[0m
[0m[1mDuring: typing of call at C:\Users\nolan\miniforge3\Lib\site-packages\numba\cpython\old_builtins.py (999)
[0m
2025-05-12 23:19:10,482 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1154)
           2	RESUME(arg=0, lineno=1154)
           4	LOAD_GLOBAL(arg=1, lineno=1170)
          14	LOAD_FAST(arg=0, lineno=1170)
          16	LOAD_FAST(arg=1, lineno=1170)
          18	LOAD_FAST(arg=2, lineno=1170)
          20	CALL(arg=3, lineno=1170)
          28	LOAD_FAST(arg=3, lineno=1170)
          30	LOAD_CONST(arg=1, lineno=1170)
          32	LOAD_CONST(arg=1, lineno=1170)
          34	STORE_SLICE(arg=None, lineno=1170)
          36	RETURN_CONST(arg=1, lineno=1170)
2025-05-12 23:19:10,483 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:10,483 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:10,483 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:10,483 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1154)
2025-05-12 23:19:10,484 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:10,484 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=1154)
2025-05-12 23:19:10,485 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:10,485 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=1170)
2025-05-12 23:19:10,486 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:10,486 - numba.core.byteflow - DEBUG - dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=1170)
2025-05-12 23:19:10,487 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0']
2025-05-12 23:19:10,487 - numba.core.byteflow - DEBUG - dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=1170)
2025-05-12 23:19:10,487 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$x14.2']
2025-05-12 23:19:10,489 - numba.core.byteflow - DEBUG - dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=1170)
2025-05-12 23:19:10,491 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$x14.2', '$threshold16.3']
2025-05-12 23:19:10,492 - numba.core.byteflow - DEBUG - dispatch pc=20, inst=CALL(arg=3, lineno=1170)
2025-05-12 23:19:10,493 - numba.core.byteflow - DEBUG - stack ['$null$4.1', '$4load_global.0', '$x14.2', '$threshold16.3', '$zero_pos18.4']
2025-05-12 23:19:10,496 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=LOAD_FAST(arg=3, lineno=1170)
2025-05-12 23:19:10,499 - numba.core.byteflow - DEBUG - stack ['$20call.5']
2025-05-12 23:19:10,500 - numba.core.byteflow - DEBUG - dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1170)
2025-05-12 23:19:10,502 - numba.core.byteflow - DEBUG - stack ['$20call.5', '$y28.6']
2025-05-12 23:19:10,503 - numba.core.byteflow - DEBUG - dispatch pc=32, inst=LOAD_CONST(arg=1, lineno=1170)
2025-05-12 23:19:10,503 - numba.core.byteflow - DEBUG - stack ['$20call.5', '$y28.6', '$const30.7.1']
2025-05-12 23:19:10,503 - numba.core.byteflow - DEBUG - dispatch pc=34, inst=STORE_SLICE(arg=None, lineno=1170)
2025-05-12 23:19:10,504 - numba.core.byteflow - DEBUG - stack ['$20call.5', '$y28.6', '$const30.7.1', '$const32.8.1']
2025-05-12 23:19:10,509 - numba.core.byteflow - DEBUG - dispatch pc=36, inst=RETURN_CONST(arg=1, lineno=1170)
2025-05-12 23:19:10,510 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:10,510 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:10,511 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:10,511 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2025-05-12 23:19:10,512 - numba.core.byteflow - DEBUG - defmap: {}
2025-05-12 23:19:10,512 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:10,512 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>, {})
2025-05-12 23:19:10,513 - numba.core.byteflow - DEBUG - keep phismap: {}
2025-05-12 23:19:10,518 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>, {})
2025-05-12 23:19:10,518 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:10,519 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$x14.2'}), (16, {'res': '$threshold16.3'}), (18, {'res': '$zero_pos18.4'}), (20, {'func': '$4load_global.0', 'args': ['$x14.2', '$threshold16.3', '$zero_pos18.4'], 'kw_names': None, 'res': '$20call.5'}), (28, {'res': '$y28.6'}), (30, {'res': '$const30.7.1'}), (32, {'res': '$const32.8.1'}), (34, {'start': '$const30.7.1', 'end': '$const32.8.1', 'container': '$y28.6', 'value': '$20call.5', 'res': '$34store_slice.10', 'slicevar': '$34store_slice.9'}), (36, {'retval': '$const36.11', 'castval': '$36return_const.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:10,520 - numba.core.interpreter - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    y = arg(3, name=y)                       ['y']
    $4load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x000001E8A6703A40>) ['$4load_global.0']
    $20call.5 = call $4load_global.0(x, threshold, zero_pos, func=$4load_global.0, args=[Var(x, audio.py:1154), Var(threshold, audio.py:1154), Var(zero_pos, audio.py:1154)], kws=(), vararg=None, varkwarg=None, target=None) ['$20call.5', '$4load_global.0', 'threshold', 'x', 'zero_pos']
    $const30.7.1 = const(NoneType, None)     ['$const30.7.1']
    $const32.8.1 = const(NoneType, None)     ['$const32.8.1']
    $34store_slice.9 = global(slice: <class 'slice'>) ['$34store_slice.9']
    $34store_slice.10 = call $34store_slice.9($const30.7.1, $const32.8.1, func=$34store_slice.9, args=(Var($const30.7.1, audio.py:1170), Var($const32.8.1, audio.py:1170)), kws=(), vararg=None, varkwarg=None, target=None) ['$34store_slice.10', '$34store_slice.9', '$const30.7.1', '$const32.8.1']
    y[$34store_slice.10] = $20call.5         ['$20call.5', '$34store_slice.10', 'y']
    $const36.11 = const(NoneType, None)      ['$const36.11']
    $36return_const.12 = cast(value=$const36.11) ['$36return_const.12', '$const36.11']
    return $36return_const.12                ['$36return_const.12']

2025-05-12 23:19:10,544 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:10,545 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8AC5EB0>
2025-05-12 23:19:10,545 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:10,545 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:10,546 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:10,546 - numba.core.ssa - DEBUG - on stmt: y = arg(3, name=y)
2025-05-12 23:19:10,547 - numba.core.ssa - DEBUG - on stmt: $4load_global.0 = global(_zc_stencil: <numba.stencils.stencil.StencilFunc object at 0x000001E8A6703A40>)
2025-05-12 23:19:10,547 - numba.core.ssa - DEBUG - on stmt: $20call.5 = call $4load_global.0(x, threshold, zero_pos, func=$4load_global.0, args=[Var(x, audio.py:1154), Var(threshold, audio.py:1154), Var(zero_pos, audio.py:1154)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,547 - numba.core.ssa - DEBUG - on stmt: $const30.7.1 = const(NoneType, None)
2025-05-12 23:19:10,550 - numba.core.ssa - DEBUG - on stmt: $const32.8.1 = const(NoneType, None)
2025-05-12 23:19:10,551 - numba.core.ssa - DEBUG - on stmt: $34store_slice.9 = global(slice: <class 'slice'>)
2025-05-12 23:19:10,552 - numba.core.ssa - DEBUG - on stmt: $34store_slice.10 = call $34store_slice.9($const30.7.1, $const32.8.1, func=$34store_slice.9, args=(Var($const30.7.1, audio.py:1170), Var($const32.8.1, audio.py:1170)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,553 - numba.core.ssa - DEBUG - on stmt: y[slice(None, None, None)] = $20call.5
2025-05-12 23:19:10,554 - numba.core.ssa - DEBUG - on stmt: $const36.11 = const(NoneType, None)
2025-05-12 23:19:10,554 - numba.core.ssa - DEBUG - on stmt: $36return_const.12 = cast(value=$const36.11)
2025-05-12 23:19:10,555 - numba.core.ssa - DEBUG - on stmt: return $36return_const.12
2025-05-12 23:19:10,559 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$20call.5': [(<numba.core.ir.Assign object at 0x000001E8A8AC67B0>,
                            0)],
             '$34store_slice.10': [(<numba.core.ir.Assign object at 0x000001E8A8AC5460>,
                                    0)],
             '$34store_slice.9': [(<numba.core.ir.Assign object at 0x000001E8A8AC5280>,
                                   0)],
             '$36return_const.12': [(<numba.core.ir.Assign object at 0x000001E8A8AC56A0>,
                                     0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8AC6D50>,
                                  0)],
             '$const30.7.1': [(<numba.core.ir.Assign object at 0x000001E8A8AC5040>,
                               0)],
             '$const32.8.1': [(<numba.core.ir.Assign object at 0x000001E8A8AC5190>,
                               0)],
             '$const36.11': [(<numba.core.ir.Assign object at 0x000001E8A8AC5550>,
                              0)],
             'threshold': [(<numba.core.ir.Assign object at 0x000001E8A8AC6E40>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x000001E8A8AC6F90>, 0)],
             'y': [(<numba.core.ir.Assign object at 0x000001E8A8AC69F0>, 0)],
             'zero_pos': [(<numba.core.ir.Assign object at 0x000001E8A8AC6FF0>,
                           0)]})
2025-05-12 23:19:10,560 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8B27EF0>
2025-05-12 23:19:10,657 - numba.core.byteflow - DEBUG - bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2)
           6	LOAD_ATTR(arg=0, lineno=2)
          26	STORE_FAST(arg=3, lineno=2)
          28	LOAD_GLOBAL(arg=2, lineno=3)
          38	LOAD_ATTR(arg=5, lineno=3)
          58	LOAD_FAST(arg=3, lineno=3)
          60	LOAD_GLOBAL(arg=2, lineno=3)
          70	LOAD_ATTR(arg=6, lineno=3)
          90	KW_NAMES(arg=1, lineno=3)
          92	CALL(arg=2, lineno=3)
         100	STORE_FAST(arg=4, lineno=3)
         102	LOAD_CONST(arg=2, lineno=4)
         104	LOAD_FAST(arg=4, lineno=4)
         106	LOAD_CONST(arg=0, lineno=4)
         108	LOAD_CONST(arg=3, lineno=4)
         110	STORE_SLICE(arg=None, lineno=4)
         112	LOAD_CONST(arg=2, lineno=5)
         114	LOAD_FAST(arg=4, lineno=5)
         116	LOAD_CONST(arg=2, lineno=5)
         118	LOAD_CONST(arg=0, lineno=5)
         120	STORE_SLICE(arg=None, lineno=5)
         122	LOAD_GLOBAL(arg=9, lineno=6)
         132	LOAD_GLOBAL(arg=11, lineno=6)
         142	LOAD_CONST(arg=2, lineno=6)
         144	LOAD_CONST(arg=4, lineno=6)
         146	CALL(arg=2, lineno=6)
         154	UNARY_NEGATIVE(arg=None, lineno=6)
         156	LOAD_FAST(arg=3, lineno=6)
         158	LOAD_CONST(arg=2, lineno=6)
         160	BINARY_SUBSCR(arg=None, lineno=6)
         164	LOAD_GLOBAL(arg=13, lineno=6)
         174	LOAD_CONST(arg=2, lineno=6)
         176	LOAD_CONST(arg=2, lineno=6)
         178	CALL(arg=2, lineno=6)
         186	BINARY_OP(arg=10, lineno=6)
         190	CALL(arg=2, lineno=6)
         198	GET_ITER(arg=None, lineno=6)
>        200	FOR_ITER(arg=4, lineno=6)
         204	STORE_FAST(arg=5, lineno=6)
         206	LOAD_CONST(arg=2, lineno=7)
         208	STORE_FAST(arg=6, lineno=7)
         210	JUMP_BACKWARD(arg=6, lineno=7)
>        212	END_FOR(arg=None, lineno=6)
         214	LOAD_FAST(arg=4, lineno=8)
         216	RETURN_VALUE(arg=None, lineno=8)
2025-05-12 23:19:10,658 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=0 nstack_initial=0)])
2025-05-12 23:19:10,659 - numba.core.byteflow - DEBUG - stack: []
2025-05-12 23:19:10,660 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=0 nstack_initial=0)
2025-05-12 23:19:10,660 - numba.core.byteflow - DEBUG - dispatch pc=0, inst=NOP(arg=None, lineno=1)
2025-05-12 23:19:10,661 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:10,661 - numba.core.byteflow - DEBUG - dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2025-05-12 23:19:10,662 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:10,662 - numba.core.byteflow - DEBUG - dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2)
2025-05-12 23:19:10,662 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:10,663 - numba.core.byteflow - DEBUG - dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=2)
2025-05-12 23:19:10,663 - numba.core.byteflow - DEBUG - stack ['$x4.0']
2025-05-12 23:19:10,664 - numba.core.byteflow - DEBUG - dispatch pc=26, inst=STORE_FAST(arg=3, lineno=2)
2025-05-12 23:19:10,665 - numba.core.byteflow - DEBUG - stack ['$6load_attr.1']
2025-05-12 23:19:10,665 - numba.core.byteflow - DEBUG - dispatch pc=28, inst=LOAD_GLOBAL(arg=2, lineno=3)
2025-05-12 23:19:10,665 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:10,666 - numba.core.byteflow - DEBUG - dispatch pc=38, inst=LOAD_ATTR(arg=5, lineno=3)
2025-05-12 23:19:10,666 - numba.core.byteflow - DEBUG - stack ['$28load_global.2']
2025-05-12 23:19:10,667 - numba.core.byteflow - DEBUG - dispatch pc=58, inst=LOAD_FAST(arg=3, lineno=3)
2025-05-12 23:19:10,667 - numba.core.byteflow - DEBUG - stack ['$null$38.4', '$38load_attr.3']
2025-05-12 23:19:10,668 - numba.core.byteflow - DEBUG - dispatch pc=60, inst=LOAD_GLOBAL(arg=2, lineno=3)
2025-05-12 23:19:10,668 - numba.core.byteflow - DEBUG - stack ['$null$38.4', '$38load_attr.3', '$full_shape058.5']
2025-05-12 23:19:10,668 - numba.core.byteflow - DEBUG - dispatch pc=70, inst=LOAD_ATTR(arg=6, lineno=3)
2025-05-12 23:19:10,669 - numba.core.byteflow - DEBUG - stack ['$null$38.4', '$38load_attr.3', '$full_shape058.5', '$60load_global.6']
2025-05-12 23:19:10,669 - numba.core.byteflow - DEBUG - dispatch pc=90, inst=KW_NAMES(arg=1, lineno=3)
2025-05-12 23:19:10,669 - numba.core.byteflow - DEBUG - stack ['$null$38.4', '$38load_attr.3', '$full_shape058.5', '$70load_attr.7']
2025-05-12 23:19:10,671 - numba.core.byteflow - DEBUG - dispatch pc=92, inst=CALL(arg=2, lineno=3)
2025-05-12 23:19:10,671 - numba.core.byteflow - DEBUG - stack ['$null$38.4', '$38load_attr.3', '$full_shape058.5', '$70load_attr.7']
2025-05-12 23:19:10,672 - numba.core.byteflow - DEBUG - dispatch pc=100, inst=STORE_FAST(arg=4, lineno=3)
2025-05-12 23:19:10,672 - numba.core.byteflow - DEBUG - stack ['$92call.8']
2025-05-12 23:19:10,672 - numba.core.byteflow - DEBUG - dispatch pc=102, inst=LOAD_CONST(arg=2, lineno=4)
2025-05-12 23:19:10,673 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:10,673 - numba.core.byteflow - DEBUG - dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=4)
2025-05-12 23:19:10,673 - numba.core.byteflow - DEBUG - stack ['$const102.9.2']
2025-05-12 23:19:10,674 - numba.core.byteflow - DEBUG - dispatch pc=106, inst=LOAD_CONST(arg=0, lineno=4)
2025-05-12 23:19:10,674 - numba.core.byteflow - DEBUG - stack ['$const102.9.2', '$out0104.10']
2025-05-12 23:19:10,675 - numba.core.byteflow - DEBUG - dispatch pc=108, inst=LOAD_CONST(arg=3, lineno=4)
2025-05-12 23:19:10,675 - numba.core.byteflow - DEBUG - stack ['$const102.9.2', '$out0104.10', '$const106.11.0']
2025-05-12 23:19:10,676 - numba.core.byteflow - DEBUG - dispatch pc=110, inst=STORE_SLICE(arg=None, lineno=4)
2025-05-12 23:19:10,677 - numba.core.byteflow - DEBUG - stack ['$const102.9.2', '$out0104.10', '$const106.11.0', '$const108.12.3']
2025-05-12 23:19:10,677 - numba.core.byteflow - DEBUG - dispatch pc=112, inst=LOAD_CONST(arg=2, lineno=5)
2025-05-12 23:19:10,678 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:10,678 - numba.core.byteflow - DEBUG - dispatch pc=114, inst=LOAD_FAST(arg=4, lineno=5)
2025-05-12 23:19:10,679 - numba.core.byteflow - DEBUG - stack ['$const112.15.2']
2025-05-12 23:19:10,679 - numba.core.byteflow - DEBUG - dispatch pc=116, inst=LOAD_CONST(arg=2, lineno=5)
2025-05-12 23:19:10,679 - numba.core.byteflow - DEBUG - stack ['$const112.15.2', '$out0114.16']
2025-05-12 23:19:10,680 - numba.core.byteflow - DEBUG - dispatch pc=118, inst=LOAD_CONST(arg=0, lineno=5)
2025-05-12 23:19:10,681 - numba.core.byteflow - DEBUG - stack ['$const112.15.2', '$out0114.16', '$const116.17.2']
2025-05-12 23:19:10,681 - numba.core.byteflow - DEBUG - dispatch pc=120, inst=STORE_SLICE(arg=None, lineno=5)
2025-05-12 23:19:10,682 - numba.core.byteflow - DEBUG - stack ['$const112.15.2', '$out0114.16', '$const116.17.2', '$const118.18.0']
2025-05-12 23:19:10,683 - numba.core.byteflow - DEBUG - dispatch pc=122, inst=LOAD_GLOBAL(arg=9, lineno=6)
2025-05-12 23:19:10,684 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:10,684 - numba.core.byteflow - DEBUG - dispatch pc=132, inst=LOAD_GLOBAL(arg=11, lineno=6)
2025-05-12 23:19:10,685 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21']
2025-05-12 23:19:10,685 - numba.core.byteflow - DEBUG - dispatch pc=142, inst=LOAD_CONST(arg=2, lineno=6)
2025-05-12 23:19:10,686 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$null$132.24', '$132load_global.23']
2025-05-12 23:19:10,687 - numba.core.byteflow - DEBUG - dispatch pc=144, inst=LOAD_CONST(arg=4, lineno=6)
2025-05-12 23:19:10,687 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$null$132.24', '$132load_global.23', '$const142.25.2']
2025-05-12 23:19:10,688 - numba.core.byteflow - DEBUG - dispatch pc=146, inst=CALL(arg=2, lineno=6)
2025-05-12 23:19:10,688 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$null$132.24', '$132load_global.23', '$const142.25.2', '$const144.26.4']
2025-05-12 23:19:10,689 - numba.core.byteflow - DEBUG - dispatch pc=154, inst=UNARY_NEGATIVE(arg=None, lineno=6)
2025-05-12 23:19:10,690 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$146call.27']
2025-05-12 23:19:10,690 - numba.core.byteflow - DEBUG - dispatch pc=156, inst=LOAD_FAST(arg=3, lineno=6)
2025-05-12 23:19:10,691 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28']
2025-05-12 23:19:10,692 - numba.core.byteflow - DEBUG - dispatch pc=158, inst=LOAD_CONST(arg=2, lineno=6)
2025-05-12 23:19:10,693 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$full_shape0156.29']
2025-05-12 23:19:10,694 - numba.core.byteflow - DEBUG - dispatch pc=160, inst=BINARY_SUBSCR(arg=None, lineno=6)
2025-05-12 23:19:10,694 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$full_shape0156.29', '$const158.30.2']
2025-05-12 23:19:10,694 - numba.core.byteflow - DEBUG - dispatch pc=164, inst=LOAD_GLOBAL(arg=13, lineno=6)
2025-05-12 23:19:10,695 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$160binary_subscr.31']
2025-05-12 23:19:10,697 - numba.core.byteflow - DEBUG - dispatch pc=174, inst=LOAD_CONST(arg=2, lineno=6)
2025-05-12 23:19:10,697 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$160binary_subscr.31', '$null$164.33', '$164load_global.32']
2025-05-12 23:19:10,698 - numba.core.byteflow - DEBUG - dispatch pc=176, inst=LOAD_CONST(arg=2, lineno=6)
2025-05-12 23:19:10,698 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$160binary_subscr.31', '$null$164.33', '$164load_global.32', '$const174.34.2']
2025-05-12 23:19:10,699 - numba.core.byteflow - DEBUG - dispatch pc=178, inst=CALL(arg=2, lineno=6)
2025-05-12 23:19:10,699 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$160binary_subscr.31', '$null$164.33', '$164load_global.32', '$const174.34.2', '$const176.35.2']
2025-05-12 23:19:10,701 - numba.core.byteflow - DEBUG - dispatch pc=186, inst=BINARY_OP(arg=10, lineno=6)
2025-05-12 23:19:10,701 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$160binary_subscr.31', '$178call.36']
2025-05-12 23:19:10,702 - numba.core.byteflow - DEBUG - dispatch pc=190, inst=CALL(arg=2, lineno=6)
2025-05-12 23:19:10,703 - numba.core.byteflow - DEBUG - stack ['$null$122.22', '$122load_global.21', '$154unary_negative.28', '$binop_sub186.37']
2025-05-12 23:19:10,704 - numba.core.byteflow - DEBUG - dispatch pc=198, inst=GET_ITER(arg=None, lineno=6)
2025-05-12 23:19:10,705 - numba.core.byteflow - DEBUG - stack ['$190call.38']
2025-05-12 23:19:10,705 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=200, stack=('$198get_iter.39',), blockstack=(), npush=0)]
2025-05-12 23:19:10,706 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=200 nstack_initial=1)])
2025-05-12 23:19:10,706 - numba.core.byteflow - DEBUG - stack: ['$phi200.0']
2025-05-12 23:19:10,707 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=200 nstack_initial=1)
2025-05-12 23:19:10,707 - numba.core.byteflow - DEBUG - dispatch pc=200, inst=FOR_ITER(arg=4, lineno=6)
2025-05-12 23:19:10,707 - numba.core.byteflow - DEBUG - stack ['$phi200.0']
2025-05-12 23:19:10,708 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=212, stack=('$phi200.0', '$200for_iter.2'), blockstack=(), npush=0), Edge(pc=204, stack=('$phi200.0', '$200for_iter.2'), blockstack=(), npush=0)]
2025-05-12 23:19:10,710 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=212 nstack_initial=2), State(pc_initial=204 nstack_initial=2)])
2025-05-12 23:19:10,711 - numba.core.byteflow - DEBUG - stack: ['$phi212.0', '$phi212.1']
2025-05-12 23:19:10,711 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=212 nstack_initial=2)
2025-05-12 23:19:10,711 - numba.core.byteflow - DEBUG - dispatch pc=212, inst=END_FOR(arg=None, lineno=6)
2025-05-12 23:19:10,712 - numba.core.byteflow - DEBUG - stack ['$phi212.0', '$phi212.1']
2025-05-12 23:19:10,712 - numba.core.byteflow - DEBUG - dispatch pc=214, inst=LOAD_FAST(arg=4, lineno=8)
2025-05-12 23:19:10,712 - numba.core.byteflow - DEBUG - stack []
2025-05-12 23:19:10,712 - numba.core.byteflow - DEBUG - dispatch pc=216, inst=RETURN_VALUE(arg=None, lineno=8)
2025-05-12 23:19:10,713 - numba.core.byteflow - DEBUG - stack ['$out0214.2']
2025-05-12 23:19:10,713 - numba.core.byteflow - DEBUG - end state. edges=[]
2025-05-12 23:19:10,713 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=204 nstack_initial=2)])
2025-05-12 23:19:10,714 - numba.core.byteflow - DEBUG - stack: ['$phi204.0', '$phi204.1']
2025-05-12 23:19:10,714 - numba.core.byteflow - DEBUG - state.pc_initial: State(pc_initial=204 nstack_initial=2)
2025-05-12 23:19:10,715 - numba.core.byteflow - DEBUG - dispatch pc=204, inst=STORE_FAST(arg=5, lineno=6)
2025-05-12 23:19:10,715 - numba.core.byteflow - DEBUG - stack ['$phi204.0', '$phi204.1']
2025-05-12 23:19:10,717 - numba.core.byteflow - DEBUG - dispatch pc=206, inst=LOAD_CONST(arg=2, lineno=7)
2025-05-12 23:19:10,718 - numba.core.byteflow - DEBUG - stack ['$phi204.0']
2025-05-12 23:19:10,718 - numba.core.byteflow - DEBUG - dispatch pc=208, inst=STORE_FAST(arg=6, lineno=7)
2025-05-12 23:19:10,718 - numba.core.byteflow - DEBUG - stack ['$phi204.0', '$const206.2.2']
2025-05-12 23:19:10,718 - numba.core.byteflow - DEBUG - dispatch pc=210, inst=JUMP_BACKWARD(arg=6, lineno=7)
2025-05-12 23:19:10,718 - numba.core.byteflow - DEBUG - stack ['$phi204.0']
2025-05-12 23:19:10,719 - numba.core.byteflow - DEBUG - end state. edges=[Edge(pc=200, stack=('$phi204.0',), blockstack=(), npush=0)]
2025-05-12 23:19:10,719 - numba.core.byteflow - DEBUG - pending: deque([State(pc_initial=200 nstack_initial=1)])
2025-05-12 23:19:10,720 - numba.core.byteflow - DEBUG - -------------------------Prune PHIs-------------------------
2025-05-12 23:19:10,721 - numba.core.byteflow - DEBUG - Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=200 nstack_initial=1): {'$phi200.0'},
             State(pc_initial=204 nstack_initial=2): {'$phi204.1'},
             State(pc_initial=212 nstack_initial=2): set()})
2025-05-12 23:19:10,723 - numba.core.byteflow - DEBUG - defmap: {'$phi200.0': State(pc_initial=0 nstack_initial=0),
 '$phi204.1': State(pc_initial=200 nstack_initial=1),
 '$phi212.1': State(pc_initial=200 nstack_initial=1)}
2025-05-12 23:19:10,724 - numba.core.byteflow - DEBUG - phismap: defaultdict(<class 'set'>,
            {'$phi200.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi204.0',
                            State(pc_initial=204 nstack_initial=2))},
             '$phi204.0': {('$phi200.0',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi204.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi212.0': {('$phi200.0',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi212.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))}})
2025-05-12 23:19:10,725 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi200.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi200.0',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi204.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi212.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi212.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))}})
2025-05-12 23:19:10,726 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi200.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi212.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi212.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))}})
2025-05-12 23:19:10,726 - numba.core.byteflow - DEBUG - changing phismap: defaultdict(<class 'set'>,
            {'$phi200.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi204.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))},
             '$phi212.0': {('$198get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi212.1': {('$200for_iter.2',
                            State(pc_initial=200 nstack_initial=1))}})
2025-05-12 23:19:10,728 - numba.core.byteflow - DEBUG - keep phismap: {'$phi200.0': {('$198get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi204.1': {('$200for_iter.2', State(pc_initial=200 nstack_initial=1))}}
2025-05-12 23:19:10,728 - numba.core.byteflow - DEBUG - new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi200.0': '$198get_iter.39'},
             State(pc_initial=200 nstack_initial=1): {'$phi204.1': '$200for_iter.2'}})
2025-05-12 23:19:10,730 - numba.core.byteflow - DEBUG - ----------------------DONE Prune PHIs-----------------------
2025-05-12 23:19:10,730 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$x4.0'}), (6, {'item': '$x4.0', 'res': '$6load_attr.1'}), (26, {'value': '$6load_attr.1'}), (28, {'idx': 1, 'res': '$28load_global.2'}), (38, {'item': '$28load_global.2', 'res': '$38load_attr.3'}), (58, {'res': '$full_shape058.5'}), (60, {'idx': 1, 'res': '$60load_global.6'}), (70, {'item': '$60load_global.6', 'res': '$70load_attr.7'}), (92, {'func': '$38load_attr.3', 'args': ['$full_shape058.5', '$70load_attr.7'], 'kw_names': 1, 'res': '$92call.8'}), (100, {'value': '$92call.8'}), (102, {'res': '$const102.9.2'}), (104, {'res': '$out0104.10'}), (106, {'res': '$const106.11.0'}), (108, {'res': '$const108.12.3'}), (110, {'start': '$const106.11.0', 'end': '$const108.12.3', 'container': '$out0104.10', 'value': '$const102.9.2', 'res': '$110store_slice.14', 'slicevar': '$110store_slice.13'}), (112, {'res': '$const112.15.2'}), (114, {'res': '$out0114.16'}), (116, {'res': '$const116.17.2'}), (118, {'res': '$const118.18.0'}), (120, {'start': '$const116.17.2', 'end': '$const118.18.0', 'container': '$out0114.16', 'value': '$const112.15.2', 'res': '$120store_slice.20', 'slicevar': '$120store_slice.19'}), (122, {'idx': 4, 'res': '$122load_global.21'}), (132, {'idx': 5, 'res': '$132load_global.23'}), (142, {'res': '$const142.25.2'}), (144, {'res': '$const144.26.4'}), (146, {'func': '$132load_global.23', 'args': ['$const142.25.2', '$const144.26.4'], 'kw_names': None, 'res': '$146call.27'}), (154, {'value': '$146call.27', 'res': '$154unary_negative.28'}), (156, {'res': '$full_shape0156.29'}), (158, {'res': '$const158.30.2'}), (160, {'index': '$const158.30.2', 'target': '$full_shape0156.29', 'res': '$160binary_subscr.31'}), (164, {'idx': 6, 'res': '$164load_global.32'}), (174, {'res': '$const174.34.2'}), (176, {'res': '$const176.35.2'}), (178, {'func': '$164load_global.32', 'args': ['$const174.34.2', '$const176.35.2'], 'kw_names': None, 'res': '$178call.36'}), (186, {'op': '-', 'lhs': '$160binary_subscr.31', 'rhs': '$178call.36', 'res': '$binop_sub186.37'}), (190, {'func': '$122load_global.21', 'args': ['$154unary_negative.28', '$binop_sub186.37'], 'kw_names': None, 'res': '$190call.38'}), (198, {'value': '$190call.38', 'res': '$198get_iter.39'})), outgoing_phis={'$phi200.0': '$198get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={200: ('$198get_iter.39',)})
2025-05-12 23:19:10,732 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=200 nstack_initial=1):
AdaptBlockInfo(insts=((200, {'iterator': '$phi200.0', 'pair': '$200for_iter.1', 'indval': '$200for_iter.2', 'pred': '$200for_iter.3'}),), outgoing_phis={'$phi204.1': '$200for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={212: ('$phi200.0', '$200for_iter.2'), 204: ('$phi200.0', '$200for_iter.2')})
2025-05-12 23:19:10,732 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=204 nstack_initial=2):
AdaptBlockInfo(insts=((204, {'value': '$phi204.1'}), (206, {'res': '$const206.2.2'}), (208, {'value': '$const206.2.2'}), (210, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={200: ('$phi204.0',)})
2025-05-12 23:19:10,733 - numba.core.byteflow - DEBUG - block_infos State(pc_initial=212 nstack_initial=2):
AdaptBlockInfo(insts=((214, {'res': '$out0214.2'}), (216, {'retval': '$out0214.2', 'castval': '$216return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2025-05-12 23:19:10,736 - numba.core.interpreter - DEBUG - label 0:
    x = arg(0, name=x)                       ['x']
    threshold = arg(1, name=threshold)       ['threshold']
    zero_pos = arg(2, name=zero_pos)         ['zero_pos']
    full_shape0 = getattr(value=x, attr=shape) ['full_shape0', 'x']
    $28load_global.2 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$28load_global.2']
    $38load_attr.3 = getattr(value=$28load_global.2, attr=empty) ['$28load_global.2', '$38load_attr.3']
    $60load_global.6 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>) ['$60load_global.6']
    $70load_attr.7 = getattr(value=$60load_global.6, attr=bool) ['$60load_global.6', '$70load_attr.7']
    out0 = call $38load_attr.3(full_shape0, func=$38load_attr.3, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7, <string>:3))], vararg=None, varkwarg=None, target=None) ['$38load_attr.3', '$70load_attr.7', 'full_shape0', 'out0']
    $const102.9.2 = const(int, 0)            ['$const102.9.2']
    $const106.11.0 = const(NoneType, None)   ['$const106.11.0']
    $const108.12.3 = const(int, 1)           ['$const108.12.3']
    $110store_slice.13 = global(slice: <class 'slice'>) ['$110store_slice.13']
    $110store_slice.14 = call $110store_slice.13($const106.11.0, $const108.12.3, func=$110store_slice.13, args=(Var($const106.11.0, <string>:4), Var($const108.12.3, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None) ['$110store_slice.13', '$110store_slice.14', '$const106.11.0', '$const108.12.3']
    out0[$110store_slice.14] = $const102.9.2 ['$110store_slice.14', '$const102.9.2', 'out0']
    $const112.15.2 = const(int, 0)           ['$const112.15.2']
    $const116.17.2 = const(int, 0)           ['$const116.17.2']
    $const118.18.0 = const(NoneType, None)   ['$const118.18.0']
    $120store_slice.19 = global(slice: <class 'slice'>) ['$120store_slice.19']
    $120store_slice.20 = call $120store_slice.19($const116.17.2, $const118.18.0, func=$120store_slice.19, args=(Var($const116.17.2, <string>:5), Var($const118.18.0, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None) ['$120store_slice.19', '$120store_slice.20', '$const116.17.2', '$const118.18.0']
    out0[$120store_slice.20] = $const112.15.2 ['$120store_slice.20', '$const112.15.2', 'out0']
    $122load_global.21 = global(range: <class 'range'>) ['$122load_global.21']
    $132load_global.23 = global(min: <built-in function min>) ['$132load_global.23']
    $const142.25.2 = const(int, 0)           ['$const142.25.2']
    $const144.26.4 = const(int, -1)          ['$const144.26.4']
    $146call.27 = call $132load_global.23($const142.25.2, $const144.26.4, func=$132load_global.23, args=[Var($const142.25.2, <string>:6), Var($const144.26.4, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$132load_global.23', '$146call.27', '$const142.25.2', '$const144.26.4']
    $154unary_negative.28 = unary(fn=<built-in function neg>, value=$146call.27) ['$146call.27', '$154unary_negative.28']
    $const158.30.2 = const(int, 0)           ['$const158.30.2']
    $160binary_subscr.31 = getitem(value=full_shape0, index=$const158.30.2, fn=<built-in function getitem>) ['$160binary_subscr.31', '$const158.30.2', 'full_shape0']
    $164load_global.32 = global(max: <built-in function max>) ['$164load_global.32']
    $const174.34.2 = const(int, 0)           ['$const174.34.2']
    $const176.35.2 = const(int, 0)           ['$const176.35.2']
    $178call.36 = call $164load_global.32($const174.34.2, $const176.35.2, func=$164load_global.32, args=[Var($const174.34.2, <string>:6), Var($const176.35.2, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$164load_global.32', '$178call.36', '$const174.34.2', '$const176.35.2']
    $binop_sub186.37 = $160binary_subscr.31 - $178call.36 ['$160binary_subscr.31', '$178call.36', '$binop_sub186.37']
    $190call.38 = call $122load_global.21($154unary_negative.28, $binop_sub186.37, func=$122load_global.21, args=[Var($154unary_negative.28, <string>:6), Var($binop_sub186.37, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.21', '$154unary_negative.28', '$190call.38', '$binop_sub186.37']
    $198get_iter.39 = getiter(value=$190call.38) ['$190call.38', '$198get_iter.39']
    $phi200.0 = $198get_iter.39              ['$198get_iter.39', '$phi200.0']
    jump 200                                 []
label 200:
    $200for_iter.1 = iternext(value=$phi200.0) ['$200for_iter.1', '$phi200.0']
    $200for_iter.2 = pair_first(value=$200for_iter.1) ['$200for_iter.1', '$200for_iter.2']
    $200for_iter.3 = pair_second(value=$200for_iter.1) ['$200for_iter.1', '$200for_iter.3']
    $phi204.1 = $200for_iter.2               ['$200for_iter.2', '$phi204.1']
    branch $200for_iter.3, 204, 212          ['$200for_iter.3']
label 204:
    index00 = $phi204.1                      ['$phi204.1', 'index00']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 200                                 []
label 212:
    $216return_value.3 = cast(value=out0)    ['$216return_value.3', 'out0']
    return $216return_value.3                ['$216return_value.3']

2025-05-12 23:19:10,798 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 0
2025-05-12 23:19:10,798 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,798 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:10,799 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:10,799 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:10,799 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:10,800 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,800 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:10,800 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,801 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:10,801 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,801 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:10,802 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:10,802 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:10,803 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:10,803 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,804 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:10,805 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:10,805 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:10,805 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:10,807 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:10,808 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,808 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:10,808 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:10,808 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:10,809 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:10,810 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:10,810 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,810 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:10,811 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:10,811 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:10,811 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:10,812 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:10,812 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:10,812 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,814 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:10,814 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,815 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:10,815 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:10,815 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:10,815 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 200
2025-05-12 23:19:10,815 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,816 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:10,816 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:10,816 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:10,816 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:10,817 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:10,817 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 204
2025-05-12 23:19:10,817 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,818 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:10,818 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:10,819 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 396
2025-05-12 23:19:10,820 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,820 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:10,821 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:10,821 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 212
2025-05-12 23:19:10,822 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,822 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:10,822 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:10,823 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:10,823 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:10,824 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:10,824 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,824 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,825 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:10,826 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:10,826 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 213
2025-05-12 23:19:10,827 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,827 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:10,828 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,828 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,828 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:10,828 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 243
2025-05-12 23:19:10,828 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,829 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:10,829 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 253
2025-05-12 23:19:10,829 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,830 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:10,830 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 251
2025-05-12 23:19:10,831 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,831 - numba.core.ssa - DEBUG - on stmt: x0 = const(int, 0)
2025-05-12 23:19:10,832 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:10,832 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 257
2025-05-12 23:19:10,832 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,832 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:10,832 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const50.1.2 + index00
2025-05-12 23:19:10,833 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:10,833 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:10,833 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:10,833 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,833 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,834 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:10,834 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:10,834 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 261
2025-05-12 23:19:10,835 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,835 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:10,836 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,836 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,837 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:10,837 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 287
2025-05-12 23:19:10,837 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,838 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:10,838 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 297
2025-05-12 23:19:10,838 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,839 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:10,840 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 295
2025-05-12 23:19:10,840 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,841 - numba.core.ssa - DEBUG - on stmt: x1 = const(int, 0)
2025-05-12 23:19:10,842 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:10,842 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 301
2025-05-12 23:19:10,842 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,843 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,843 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,843 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:10,844 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 305
2025-05-12 23:19:10,845 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,845 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,846 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:10,846 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0, func=$106load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,847 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,847 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:10,848 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,848 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:10,849 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:10,849 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:10,849 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:10,850 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 309
2025-05-12 23:19:10,851 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,852 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,852 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:10,853 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0, func=$192load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,854 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,855 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:10,855 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,856 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:10,857 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:10,857 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:10,858 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:10,858 - numba.core.ssa - DEBUG - ==== SSA block analysis pass on 395
2025-05-12 23:19:10,858 - numba.core.ssa - DEBUG - Running <numba.core.ssa._GatherDefsHandler object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,859 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:10,860 - numba.core.ssa - DEBUG - defs defaultdict(<class 'list'>,
            {'$106load_attr.2': [(<numba.core.ir.Assign object at 0x000001E8A8C5F1D0>,
                                  305)],
             '$110store_slice.13.1': [(<numba.core.ir.Assign object at 0x000001E8A8C80BC0>,
                                       0)],
             '$110store_slice.14.1': [(<numba.core.ir.Assign object at 0x000001E8A8C80CE0>,
                                       0)],
             '$120store_slice.19.1': [(<numba.core.ir.Assign object at 0x000001E8A8C81340>,
                                       0)],
             '$120store_slice.20.1': [(<numba.core.ir.Assign object at 0x000001E8A8C81460>,
                                       0)],
             '$122load_global.21.1': [(<numba.core.ir.Assign object at 0x000001E8A8C815E0>,
                                       0)],
             '$128call.4': [(<numba.core.ir.Assign object at 0x000001E8A8BD8E90>,
                             305)],
             '$132load_global.23.1': [(<numba.core.ir.Assign object at 0x000001E8A8C81730>,
                                       0)],
             '$136load_global.5': [(<numba.core.ir.Assign object at 0x000001E8A8BD9070>,
                                    305)],
             '$146call.27.1': [(<numba.core.ir.Assign object at 0x000001E8A8C81B80>,
                                0)],
             '$146load_attr.7': [(<numba.core.ir.Assign object at 0x000001E8A8C60410>,
                                  305)],
             '$154unary_negative.28.1': [(<numba.core.ir.Assign object at 0x000001E8A8C81CA0>,
                                          0)],
             '$160binary_subscr.31.1': [(<numba.core.ir.Assign object at 0x000001E8A8C82060>,
                                         0)],
             '$164load_global.32.1': [(<numba.core.ir.Assign object at 0x000001E8A8C82180>,
                                       0)],
             '$168call.9': [(<numba.core.ir.Assign object at 0x000001E8A8C61CD0>,
                             305)],
             '$16unary_negative.4': [(<numba.core.ir.Assign object at 0x000001E8A8A152E0>,
                                      212)],
             '$176compare_op.10': [(<numba.core.ir.Assign object at 0x000001E8A8C61EB0>,
                                    305)],
             '$178call.36.1': [(<numba.core.ir.Assign object at 0x000001E8A8C825D0>,
                                0)],
             '$180return_value.11': [(<numba.core.ir.Assign object at 0x000001E8A8C63890>,
                                      305)],
             '$182load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8C6B7D0>,
                                    309)],
             '$190call.38.1': [(<numba.core.ir.Assign object at 0x000001E8A8C82870>,
                                0)],
             '$192load_attr.2': [(<numba.core.ir.Assign object at 0x000001E8A8C6BB60>,
                                  309)],
             '$198get_iter.39.1': [(<numba.core.ir.Assign object at 0x000001E8A8C82990>,
                                    0)],
             '$200for_iter.1.1': [(<numba.core.ir.Assign object at 0x000001E8A8C829F0>,
                                   200)],
             '$200for_iter.2.1': [(<numba.core.ir.Assign object at 0x000001E8A8C82B10>,
                                   200)],
             '$200for_iter.3.1': [(<numba.core.ir.Assign object at 0x000001E8A8C82C30>,
                                   200)],
             '$214call.4': [(<numba.core.ir.Assign object at 0x000001E8A8C71700>,
                             309)],
             '$216return_value.3.1': [(<numba.core.ir.Assign object at 0x000001E8A8C83380>,
                                       396)],
             '$222load_global.5': [(<numba.core.ir.Assign object at 0x000001E8A8C718E0>,
                                    309)],
             '$232load_attr.7': [(<numba.core.ir.Assign object at 0x000001E8A8C74C80>,
                                  309)],
             '$24compare_op.6': [(<numba.core.ir.Assign object at 0x000001E8A8A15400>,
                                  212)],
             '$254call.9': [(<numba.core.ir.Assign object at 0x000001E8A8C76540>,
                             309)],
             '$262compare_op.10': [(<numba.core.ir.Assign object at 0x000001E8A8C76720>,
                                    309)],
             '$266return_value.11': [(<numba.core.ir.Assign object at 0x000001E8A8C77FB0>,
                                      309)],
             '$28load_global.2.1': [(<numba.core.ir.Assign object at 0x000001E8A8C7FE00>,
                                     0)],
             '$28pred': [(<numba.core.ir.Assign object at 0x000001E8A8A0C680>,
                          212)],
             '$32compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A8AF7AA0>,
                                  213)],
             '$36pred': [(<numba.core.ir.Assign object at 0x000001E8A8C19E50>,
                          213)],
             '$38load_attr.3.1': [(<numba.core.ir.Assign object at 0x000001E8A8C7FF50>,
                                   0)],
             '$60load_global.6.1': [(<numba.core.ir.Assign object at 0x000001E8A8C801D0>,
                                     0)],
             '$60unary_negative.4': [(<numba.core.ir.Assign object at 0x000001E8A8C47110>,
                                      257)],
             '$68compare_op.6': [(<numba.core.ir.Assign object at 0x000001E8A8C472F0>,
                                  257)],
             '$70load_attr.7.1': [(<numba.core.ir.Assign object at 0x000001E8A8C80320>,
                                   0)],
             '$72pred': [(<numba.core.ir.Assign object at 0x000001E8A8C4C0E0>,
                          257)],
             '$76compare_op.2': [(<numba.core.ir.Assign object at 0x000001E8A8C50E00>,
                                  261)],
             '$80pred': [(<numba.core.ir.Assign object at 0x000001E8A8C55D90>,
                          261)],
             '$94pred': [(<numba.core.ir.Assign object at 0x000001E8A85DCDA0>,
                          301)],
             '$96load_global.0': [(<numba.core.ir.Assign object at 0x000001E8A8C5EED0>,
                                   305)],
             '$binop_sub186.37.1': [(<numba.core.ir.Assign object at 0x000001E8A8C82720>,
                                     0)],
             '$const102.9.2.1': [(<numba.core.ir.Assign object at 0x000001E8A8C806E0>,
                                  0)],
             '$const106.11.0.1': [(<numba.core.ir.Assign object at 0x000001E8A8C80920>,
                                   0)],
             '$const108.12.3.1': [(<numba.core.ir.Assign object at 0x000001E8A8C80A70>,
                                   0)],
             '$const112.15.2.1': [(<numba.core.ir.Assign object at 0x000001E8A8C80E60>,
                                   0)],
             '$const116.17.2.1': [(<numba.core.ir.Assign object at 0x000001E8A8C810A0>,
                                   0)],
             '$const118.18.0.1': [(<numba.core.ir.Assign object at 0x000001E8A8C811F0>,
                                   0)],
             '$const142.25.2.1': [(<numba.core.ir.Assign object at 0x000001E8A8C81880>,
                                   0)],
             '$const144.26.4.1': [(<numba.core.ir.Assign object at 0x000001E8A8C819D0>,
                                   0)],
             '$const158.30.2.1': [(<numba.core.ir.Assign object at 0x000001E8A8C81EE0>,
                                   0)],
             '$const174.34.2.1': [(<numba.core.ir.Assign object at 0x000001E8A8C822D0>,
                                   0)],
             '$const176.35.2.1': [(<numba.core.ir.Assign object at 0x000001E8A8C82420>,
                                   0)],
             '$const50.1.2': [(<numba.core.ir.Assign object at 0x000001E8A8C3FA10>,
                               257)],
             '$const6.1.1': [(<numba.core.ir.Assign object at 0x000001E8A88DC800>,
                              212)],
             '$phi200.0.1': [(<numba.core.ir.Assign object at 0x000001E8A8C7FCB0>,
                              0)],
             '$phi204.1.1': [(<numba.core.ir.Assign object at 0x000001E8A8C82CF0>,
                              200)],
             '$phi30.0': [(<numba.core.ir.Assign object at 0x000001E8A8A2AC30>,
                           212)],
             '$phi74.0': [(<numba.core.ir.Assign object at 0x000001E8A8C4D9A0>,
                           257)],
             'bool28': [(<numba.core.ir.Assign object at 0x000001E8A8A14E00>,
                         212)],
             'bool36': [(<numba.core.ir.Assign object at 0x000001E8A8ADCE30>,
                         213)],
             'bool72': [(<numba.core.ir.Assign object at 0x000001E8A8C48D10>,
                         257)],
             'bool80': [(<numba.core.ir.Assign object at 0x000001E8A8C52690>,
                         261)],
             'bool94': [(<numba.core.ir.Assign object at 0x000001E8A8BBE7E0>,
                         301)],
             'full_shape0': [(<numba.core.ir.Assign object at 0x000001E8A8C7FBC0>,
                              0)],
             'index00': [(<numba.core.ir.Assign object at 0x000001E8A8C82EA0>,
                          204)],
             'out0': [(<numba.core.ir.Assign object at 0x000001E8A8C804D0>, 0)],
             'stencil_index': [(<numba.core.ir.Assign object at 0x000001E8A8C7EC60>,
                                212),
                               (<numba.core.ir.Assign object at 0x000001E8A8C7EE10>,
                                257)],
             'threshold': [(<numba.core.ir.Assign object at 0x000001E8A8C7F830>,
                            0)],
             'x': [(<numba.core.ir.Assign object at 0x000001E8A8C7F710>, 0)],
             'x0': [(<numba.core.ir.Assign object at 0x000001E8A8C7ED20>, 212),
                    (<numba.core.ir.Assign object at 0x000001E8A8C3DEE0>, 251)],
             'x1': [(<numba.core.ir.Assign object at 0x000001E8A8C7EED0>, 257),
                    (<numba.core.ir.Assign object at 0x000001E8A8B252B0>, 295)],
             'zero_pos': [(<numba.core.ir.Assign object at 0x000001E8A8C7F950>,
                           0)]})
2025-05-12 23:19:10,867 - numba.core.ssa - DEBUG - SSA violators <numba.core.utils.OrderedSet object at 0x000001E8A8C86CF0>
2025-05-12 23:19:10,868 - numba.core.ssa - DEBUG - Fix SSA violator on var stencil_index
2025-05-12 23:19:10,869 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:10,869 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,870 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:10,871 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:10,871 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:10,872 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:10,872 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,873 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:10,873 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,874 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:10,874 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,875 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:10,876 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:10,876 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:10,877 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:10,877 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,878 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:10,878 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:10,879 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:10,880 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:10,880 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:10,881 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,882 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:10,882 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:10,883 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:10,883 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:10,884 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:10,884 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,885 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:10,886 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:10,886 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:10,887 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:10,887 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:10,887 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:10,888 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,888 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:10,889 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,889 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:10,890 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:10,891 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:10,891 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 200
2025-05-12 23:19:10,891 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,892 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:10,892 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:10,893 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:10,893 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:10,894 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:10,894 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 204
2025-05-12 23:19:10,894 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,895 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:10,895 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:10,895 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 396
2025-05-12 23:19:10,896 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,897 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:10,897 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:10,897 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 212
2025-05-12 23:19:10,898 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,899 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:10,899 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:10,900 - numba.core.ssa - DEBUG - first assign: stencil_index
2025-05-12 23:19:10,900 - numba.core.ssa - DEBUG - replaced with: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:10,901 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:10,901 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:10,902 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:10,903 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,903 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,904 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:10,904 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:10,904 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 213
2025-05-12 23:19:10,904 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,905 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:10,905 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,906 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,907 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:10,907 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 243
2025-05-12 23:19:10,907 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,907 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:10,908 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 253
2025-05-12 23:19:10,908 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,908 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:10,908 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 251
2025-05-12 23:19:10,908 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,909 - numba.core.ssa - DEBUG - on stmt: x0 = const(int, 0)
2025-05-12 23:19:10,909 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:10,909 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 257
2025-05-12 23:19:10,909 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,910 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:10,910 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const50.1.2 + index00
2025-05-12 23:19:10,911 - numba.core.ssa - DEBUG - replaced with: stencil_index.1 = $const50.1.2 + index00
2025-05-12 23:19:10,912 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:10,912 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:10,913 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:10,913 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,914 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,915 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:10,915 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:10,916 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 261
2025-05-12 23:19:10,917 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,917 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:10,918 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,918 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,919 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:10,920 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 287
2025-05-12 23:19:10,920 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,921 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:10,921 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 297
2025-05-12 23:19:10,922 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,923 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:10,923 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 295
2025-05-12 23:19:10,924 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,924 - numba.core.ssa - DEBUG - on stmt: x1 = const(int, 0)
2025-05-12 23:19:10,925 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:10,926 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 301
2025-05-12 23:19:10,926 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,927 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,928 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,928 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:10,929 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 305
2025-05-12 23:19:10,929 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,929 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,929 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:10,929 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0, func=$106load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,929 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,929 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:10,929 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,930 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:10,930 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:10,931 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:10,931 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:10,931 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 309
2025-05-12 23:19:10,932 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,932 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,932 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:10,932 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0, func=$192load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,933 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,933 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:10,934 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,934 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:10,934 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:10,935 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:10,935 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:10,935 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 395
2025-05-12 23:19:10,935 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C87290>
2025-05-12 23:19:10,936 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:10,936 - numba.core.ssa - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {212: [<numba.core.ir.Assign object at 0x000001E8A8C873E0>],
             257: [<numba.core.ir.Assign object at 0x000001E8A8C87D70>]})
2025-05-12 23:19:10,936 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:10,936 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,936 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:10,937 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:10,937 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:10,937 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:10,937 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,937 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:10,937 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,937 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:10,937 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,939 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:10,940 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:10,940 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:10,941 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:10,941 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,942 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:10,942 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:10,943 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:10,943 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:10,944 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:10,944 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,945 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:10,945 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:10,945 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:10,945 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:10,946 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:10,946 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,946 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:10,947 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:10,948 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:10,948 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:10,948 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:10,950 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:10,950 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,951 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:10,951 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,952 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:10,952 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:10,953 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:10,954 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 200
2025-05-12 23:19:10,955 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,955 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:10,956 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:10,956 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:10,957 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:10,957 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:10,958 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 204
2025-05-12 23:19:10,958 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,958 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:10,959 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:10,959 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 396
2025-05-12 23:19:10,960 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,960 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:10,960 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:10,961 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 212
2025-05-12 23:19:10,961 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,962 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:10,962 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:10,962 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:10,963 - numba.core.ssa - DEBUG - find_def var='stencil_index' stmt=x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:10,964 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:10,964 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:10,965 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,965 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,966 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:10,966 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:10,967 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 213
2025-05-12 23:19:10,968 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,968 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:10,969 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,970 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,970 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:10,970 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 243
2025-05-12 23:19:10,971 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,971 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:10,971 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 253
2025-05-12 23:19:10,972 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,972 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:10,973 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 251
2025-05-12 23:19:10,974 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,974 - numba.core.ssa - DEBUG - on stmt: x0 = const(int, 0)
2025-05-12 23:19:10,974 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:10,975 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 257
2025-05-12 23:19:10,975 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,975 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:10,976 - numba.core.ssa - DEBUG - on stmt: stencil_index.1 = $const50.1.2 + index00
2025-05-12 23:19:10,976 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:10,976 - numba.core.ssa - DEBUG - find_def var='stencil_index' stmt=x1 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:10,977 - numba.core.ssa - DEBUG - replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:10,977 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:10,977 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:10,978 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,979 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,979 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:10,980 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:10,980 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 261
2025-05-12 23:19:10,980 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,981 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:10,981 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,981 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,981 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:10,983 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 287
2025-05-12 23:19:10,983 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,983 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:10,983 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 297
2025-05-12 23:19:10,984 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,984 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:10,984 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 295
2025-05-12 23:19:10,986 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,986 - numba.core.ssa - DEBUG - on stmt: x1 = const(int, 0)
2025-05-12 23:19:10,987 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:10,987 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 301
2025-05-12 23:19:10,987 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,988 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:10,990 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,990 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:10,990 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 305
2025-05-12 23:19:10,991 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,991 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,992 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:10,992 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0, func=$106load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,993 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,994 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:10,994 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,995 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:10,995 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:10,996 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:10,996 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:10,997 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 309
2025-05-12 23:19:10,997 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:10,998 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,998 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:10,998 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0, func=$192load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:10,999 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:10,999 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:11,000 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,001 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:11,001 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:11,002 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:11,002 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:11,003 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 395
2025-05-12 23:19:11,003 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C87290>
2025-05-12 23:19:11,004 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:11,004 - numba.core.ssa - DEBUG - Fix SSA violator on var x0
2025-05-12 23:19:11,004 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:11,005 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,005 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:11,006 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:11,006 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:11,007 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:11,007 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,008 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:11,009 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,010 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:11,010 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,011 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:11,012 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:11,012 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:11,013 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:11,014 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,015 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:11,015 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:11,016 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:11,017 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:11,017 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:11,018 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,018 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:11,020 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:11,020 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:11,020 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:11,021 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:11,021 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,022 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:11,022 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:11,023 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:11,023 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:11,024 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:11,024 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:11,025 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,025 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:11,026 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,027 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:11,027 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:11,028 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:11,029 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 200
2025-05-12 23:19:11,029 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,030 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:11,030 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:11,031 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:11,032 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:11,032 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:11,033 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 204
2025-05-12 23:19:11,033 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,034 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:11,034 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:11,035 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 396
2025-05-12 23:19:11,036 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,036 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:11,037 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:11,038 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 212
2025-05-12 23:19:11,038 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,039 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:11,040 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:11,040 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:11,041 - numba.core.ssa - DEBUG - first assign: x0
2025-05-12 23:19:11,042 - numba.core.ssa - DEBUG - replaced with: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:11,043 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:11,043 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:11,044 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,044 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,045 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:11,046 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:11,046 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 213
2025-05-12 23:19:11,047 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,048 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:11,048 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,048 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,050 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:11,050 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 243
2025-05-12 23:19:11,050 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,050 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:11,051 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 253
2025-05-12 23:19:11,051 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,052 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:11,052 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 251
2025-05-12 23:19:11,053 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,054 - numba.core.ssa - DEBUG - on stmt: x0 = const(int, 0)
2025-05-12 23:19:11,054 - numba.core.ssa - DEBUG - replaced with: x0.1 = const(int, 0)
2025-05-12 23:19:11,055 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:11,055 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 257
2025-05-12 23:19:11,056 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,056 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:11,057 - numba.core.ssa - DEBUG - on stmt: stencil_index.1 = $const50.1.2 + index00
2025-05-12 23:19:11,057 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:11,058 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:11,058 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:11,059 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,059 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,060 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:11,061 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:11,063 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 261
2025-05-12 23:19:11,063 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,064 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:11,065 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,065 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,066 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:11,067 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 287
2025-05-12 23:19:11,068 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,068 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:11,068 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 297
2025-05-12 23:19:11,068 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,069 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:11,069 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 295
2025-05-12 23:19:11,069 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,071 - numba.core.ssa - DEBUG - on stmt: x1 = const(int, 0)
2025-05-12 23:19:11,071 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:11,072 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 301
2025-05-12 23:19:11,072 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,073 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,073 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,074 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:11,075 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 305
2025-05-12 23:19:11,075 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,075 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,076 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:11,076 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0, func=$106load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,077 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,077 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:11,078 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,078 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:11,079 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:11,080 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:11,080 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:11,081 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 309
2025-05-12 23:19:11,081 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,082 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,082 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:11,083 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0, func=$192load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,083 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,084 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:11,084 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,085 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:11,085 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:11,085 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:11,086 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:11,086 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 395
2025-05-12 23:19:11,087 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C873B0>
2025-05-12 23:19:11,087 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:11,088 - numba.core.ssa - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {212: [<numba.core.ir.Assign object at 0x000001E8A8C87F80>],
             251: [<numba.core.ir.Assign object at 0x000001E8A8C86630>]})
2025-05-12 23:19:11,088 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:11,089 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,090 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:11,090 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:11,091 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:11,091 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:11,091 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,092 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:11,092 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,093 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:11,093 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,094 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:11,094 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:11,095 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:11,095 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:11,096 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,096 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:11,097 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:11,097 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:11,098 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:11,098 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:11,098 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,099 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:11,100 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:11,100 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:11,101 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:11,101 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:11,101 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,102 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:11,102 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:11,102 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:11,102 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:11,103 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:11,103 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:11,103 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,104 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:11,104 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,105 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:11,105 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:11,105 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:11,106 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 200
2025-05-12 23:19:11,106 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,106 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:11,107 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:11,108 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:11,108 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:11,108 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:11,109 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 204
2025-05-12 23:19:11,109 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,109 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:11,111 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:11,111 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 396
2025-05-12 23:19:11,111 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,111 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:11,113 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:11,113 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 212
2025-05-12 23:19:11,114 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,114 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:11,115 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:11,115 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:11,116 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:11,116 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:11,116 - numba.core.ssa - DEBUG - find_def var='x0' stmt=$24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:11,117 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,117 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,117 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:11,117 - numba.core.ssa - DEBUG - find_def var='x0' stmt=$phi30.0 = x0
2025-05-12 23:19:11,117 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:11,119 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 213
2025-05-12 23:19:11,119 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,120 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:11,120 - numba.core.ssa - DEBUG - find_def var='x0' stmt=$32compare_op.2 = x0 <= threshold
2025-05-12 23:19:11,121 - numba.core.ssa - DEBUG - find_def_from_top label 213
2025-05-12 23:19:11,121 - numba.core.ssa - DEBUG - idom 212 from label 213
2025-05-12 23:19:11,122 - numba.core.ssa - DEBUG - find_def_from_bottom label 212
2025-05-12 23:19:11,122 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,123 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,124 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:11,124 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 243
2025-05-12 23:19:11,124 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,125 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:11,125 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 253
2025-05-12 23:19:11,125 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,126 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:11,126 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 251
2025-05-12 23:19:11,127 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,128 - numba.core.ssa - DEBUG - on stmt: x0.1 = const(int, 0)
2025-05-12 23:19:11,128 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:11,129 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 257
2025-05-12 23:19:11,130 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,130 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:11,131 - numba.core.ssa - DEBUG - on stmt: stencil_index.1 = $const50.1.2 + index00
2025-05-12 23:19:11,132 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:11,132 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:11,133 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:11,133 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,134 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,134 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:11,135 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:11,135 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 261
2025-05-12 23:19:11,136 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,136 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:11,137 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,137 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,138 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:11,138 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 287
2025-05-12 23:19:11,138 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,138 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:11,139 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 297
2025-05-12 23:19:11,139 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,140 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:11,140 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 295
2025-05-12 23:19:11,140 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,142 - numba.core.ssa - DEBUG - on stmt: x1 = const(int, 0)
2025-05-12 23:19:11,142 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:11,143 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 301
2025-05-12 23:19:11,143 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,144 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,144 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,145 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:11,145 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 305
2025-05-12 23:19:11,145 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,145 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,146 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:11,146 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0, func=$106load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,147 - numba.core.ssa - DEBUG - find_def var='x0' stmt=$128call.4 = call $106load_attr.2(x0, func=$106load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,147 - numba.core.ssa - DEBUG - find_def_from_top label 305
2025-05-12 23:19:11,147 - numba.core.ssa - DEBUG - idom 301 from label 305
2025-05-12 23:19:11,149 - numba.core.ssa - DEBUG - find_def_from_bottom label 301
2025-05-12 23:19:11,149 - numba.core.ssa - DEBUG - find_def_from_top label 301
2025-05-12 23:19:11,150 - numba.core.ssa - DEBUG - idom 257 from label 301
2025-05-12 23:19:11,150 - numba.core.ssa - DEBUG - find_def_from_bottom label 257
2025-05-12 23:19:11,150 - numba.core.ssa - DEBUG - find_def_from_top label 257
2025-05-12 23:19:11,151 - numba.core.ssa - DEBUG - insert phi node x0.2 = phi(incoming_values=[], incoming_blocks=[]) at 257
2025-05-12 23:19:11,151 - numba.core.ssa - DEBUG - find_def_from_bottom label 253
2025-05-12 23:19:11,152 - numba.core.ssa - DEBUG - find_def_from_top label 253
2025-05-12 23:19:11,152 - numba.core.ssa - DEBUG - idom 212 from label 253
2025-05-12 23:19:11,153 - numba.core.ssa - DEBUG - find_def_from_bottom label 212
2025-05-12 23:19:11,153 - numba.core.ssa - DEBUG - incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:11,154 - numba.core.ssa - DEBUG - find_def_from_bottom label 251
2025-05-12 23:19:11,154 - numba.core.ssa - DEBUG - incoming_def x0.1 = const(int, 0)
2025-05-12 23:19:11,155 - numba.core.ssa - DEBUG - find_def_from_bottom label 213
2025-05-12 23:19:11,155 - numba.core.ssa - DEBUG - find_def_from_top label 213
2025-05-12 23:19:11,155 - numba.core.ssa - DEBUG - idom 212 from label 213
2025-05-12 23:19:11,156 - numba.core.ssa - DEBUG - find_def_from_bottom label 212
2025-05-12 23:19:11,156 - numba.core.ssa - DEBUG - incoming_def x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:11,157 - numba.core.ssa - DEBUG - replaced with: $128call.4 = call $106load_attr.2(x0.2, func=$106load_attr.2, args=[Var(x0.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,158 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,158 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:11,159 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,160 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:11,160 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:11,161 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:11,161 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:11,162 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 309
2025-05-12 23:19:11,163 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,163 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,163 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:11,163 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0, func=$192load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,165 - numba.core.ssa - DEBUG - find_def var='x0' stmt=$214call.4 = call $192load_attr.2(x0, func=$192load_attr.2, args=[Var(x0, audio.py:1140)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,166 - numba.core.ssa - DEBUG - find_def_from_top label 309
2025-05-12 23:19:11,166 - numba.core.ssa - DEBUG - idom 301 from label 309
2025-05-12 23:19:11,166 - numba.core.ssa - DEBUG - find_def_from_bottom label 301
2025-05-12 23:19:11,166 - numba.core.ssa - DEBUG - find_def_from_top label 301
2025-05-12 23:19:11,167 - numba.core.ssa - DEBUG - idom 257 from label 301
2025-05-12 23:19:11,167 - numba.core.ssa - DEBUG - find_def_from_bottom label 257
2025-05-12 23:19:11,167 - numba.core.ssa - DEBUG - replaced with: $214call.4 = call $192load_attr.2(x0.2, func=$192load_attr.2, args=[Var(x0.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,169 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,169 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:11,170 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,170 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:11,171 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:11,172 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:11,172 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:11,173 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 395
2025-05-12 23:19:11,173 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,174 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:11,174 - numba.core.ssa - DEBUG - Fix SSA violator on var x1
2025-05-12 23:19:11,175 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:11,175 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,176 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:11,176 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:11,177 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:11,177 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:11,177 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,178 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:11,178 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,178 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:11,178 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,179 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:11,179 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:11,180 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:11,180 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:11,180 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,181 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:11,181 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:11,181 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:11,182 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:11,182 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:11,183 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,183 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:11,184 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:11,184 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:11,185 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:11,185 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:11,185 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,186 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:11,186 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:11,186 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:11,186 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:11,187 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:11,187 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:11,187 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,188 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:11,189 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,190 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:11,190 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:11,191 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:11,191 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 200
2025-05-12 23:19:11,192 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,192 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:11,192 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:11,193 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:11,193 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:11,193 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:11,194 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 204
2025-05-12 23:19:11,194 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,194 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:11,195 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:11,195 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 396
2025-05-12 23:19:11,195 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,196 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:11,196 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:11,196 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 212
2025-05-12 23:19:11,197 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,197 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:11,198 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:11,198 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:11,199 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:11,199 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:11,200 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,200 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,200 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:11,201 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:11,201 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 213
2025-05-12 23:19:11,201 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,201 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:11,202 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,202 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,202 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:11,202 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 243
2025-05-12 23:19:11,203 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,203 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:11,203 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 253
2025-05-12 23:19:11,204 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,204 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:11,204 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 251
2025-05-12 23:19:11,204 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,204 - numba.core.ssa - DEBUG - on stmt: x0.1 = const(int, 0)
2025-05-12 23:19:11,205 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:11,205 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 257
2025-05-12 23:19:11,205 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,206 - numba.core.ssa - DEBUG - on stmt: x0.2 = phi(incoming_values=[Var(x0, audio.py:1140), Var(x0.1, audio.py:1142), Var(x0, audio.py:1140)], incoming_blocks=[253, 251, 213])
2025-05-12 23:19:11,206 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:11,207 - numba.core.ssa - DEBUG - on stmt: stencil_index.1 = $const50.1.2 + index00
2025-05-12 23:19:11,207 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:11,207 - numba.core.ssa - DEBUG - first assign: x1
2025-05-12 23:19:11,207 - numba.core.ssa - DEBUG - replaced with: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:11,208 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:11,208 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:11,208 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,208 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,209 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:11,209 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:11,209 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 261
2025-05-12 23:19:11,210 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,210 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:11,210 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,211 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,211 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:11,212 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 287
2025-05-12 23:19:11,212 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,212 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:11,212 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 297
2025-05-12 23:19:11,212 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,212 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:11,213 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 295
2025-05-12 23:19:11,213 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,214 - numba.core.ssa - DEBUG - on stmt: x1 = const(int, 0)
2025-05-12 23:19:11,214 - numba.core.ssa - DEBUG - replaced with: x1.1 = const(int, 0)
2025-05-12 23:19:11,214 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:11,215 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 301
2025-05-12 23:19:11,215 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,215 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,215 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,216 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:11,216 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 305
2025-05-12 23:19:11,216 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,216 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,217 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:11,217 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0.2, func=$106load_attr.2, args=[Var(x0.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,217 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,217 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:11,218 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,218 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:11,219 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:11,219 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:11,220 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:11,220 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 309
2025-05-12 23:19:11,220 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,221 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,221 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:11,221 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0.2, func=$192load_attr.2, args=[Var(x0.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,222 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,222 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:11,222 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,223 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:11,223 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:11,223 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:11,224 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:11,224 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 395
2025-05-12 23:19:11,224 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FreshVarHandler object at 0x000001E8A8C7F320>
2025-05-12 23:19:11,225 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:11,225 - numba.core.ssa - DEBUG - Replaced assignments: defaultdict(<class 'list'>,
            {257: [<numba.core.ir.Assign object at 0x000001E8A8C85FA0>],
             295: [<numba.core.ir.Assign object at 0x000001E8A8C87500>]})
2025-05-12 23:19:11,226 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 0
2025-05-12 23:19:11,226 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,226 - numba.core.ssa - DEBUG - on stmt: x = arg(0, name=x)
2025-05-12 23:19:11,227 - numba.core.ssa - DEBUG - on stmt: threshold = arg(1, name=threshold)
2025-05-12 23:19:11,227 - numba.core.ssa - DEBUG - on stmt: zero_pos = arg(2, name=zero_pos)
2025-05-12 23:19:11,228 - numba.core.ssa - DEBUG - on stmt: full_shape0 = getattr(value=x, attr=shape)
2025-05-12 23:19:11,228 - numba.core.ssa - DEBUG - on stmt: $28load_global.2.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,229 - numba.core.ssa - DEBUG - on stmt: $38load_attr.3.1 = getattr(value=$28load_global.2.1, attr=empty)
2025-05-12 23:19:11,230 - numba.core.ssa - DEBUG - on stmt: $60load_global.6.1 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,231 - numba.core.ssa - DEBUG - on stmt: $70load_attr.7.1 = getattr(value=$60load_global.6.1, attr=bool)
2025-05-12 23:19:11,231 - numba.core.ssa - DEBUG - on stmt: out0 = call $38load_attr.3.1(full_shape0, func=$38load_attr.3.1, args=[Var(full_shape0, <string>:2)], kws=[('dtype', Var($70load_attr.7.1, <string>:3))], vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,232 - numba.core.ssa - DEBUG - on stmt: $const102.9.2.1 = const(int, 0)
2025-05-12 23:19:11,232 - numba.core.ssa - DEBUG - on stmt: $const106.11.0.1 = const(NoneType, None)
2025-05-12 23:19:11,232 - numba.core.ssa - DEBUG - on stmt: $const108.12.3.1 = const(int, 1)
2025-05-12 23:19:11,233 - numba.core.ssa - DEBUG - on stmt: $110store_slice.13.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:11,233 - numba.core.ssa - DEBUG - on stmt: $110store_slice.14.1 = call $110store_slice.13.1($const106.11.0.1, $const108.12.3.1, func=$110store_slice.13.1, args=(Var($const106.11.0.1, <string>:4), Var($const108.12.3.1, <string>:4)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,233 - numba.core.ssa - DEBUG - on stmt: out0[$110store_slice.14.1] = $const102.9.2.1
2025-05-12 23:19:11,234 - numba.core.ssa - DEBUG - on stmt: $const112.15.2.1 = const(int, 0)
2025-05-12 23:19:11,234 - numba.core.ssa - DEBUG - on stmt: $const116.17.2.1 = const(int, 0)
2025-05-12 23:19:11,234 - numba.core.ssa - DEBUG - on stmt: $const118.18.0.1 = const(NoneType, None)
2025-05-12 23:19:11,235 - numba.core.ssa - DEBUG - on stmt: $120store_slice.19.1 = global(slice: <class 'slice'>)
2025-05-12 23:19:11,235 - numba.core.ssa - DEBUG - on stmt: $120store_slice.20.1 = call $120store_slice.19.1($const116.17.2.1, $const118.18.0.1, func=$120store_slice.19.1, args=(Var($const116.17.2.1, <string>:5), Var($const118.18.0.1, <string>:5)), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,236 - numba.core.ssa - DEBUG - on stmt: out0[$120store_slice.20.1] = $const112.15.2.1
2025-05-12 23:19:11,236 - numba.core.ssa - DEBUG - on stmt: $122load_global.21.1 = global(range: <class 'range'>)
2025-05-12 23:19:11,237 - numba.core.ssa - DEBUG - on stmt: $132load_global.23.1 = global(min: <built-in function min>)
2025-05-12 23:19:11,237 - numba.core.ssa - DEBUG - on stmt: $const142.25.2.1 = const(int, 0)
2025-05-12 23:19:11,237 - numba.core.ssa - DEBUG - on stmt: $const144.26.4.1 = const(int, -1)
2025-05-12 23:19:11,237 - numba.core.ssa - DEBUG - on stmt: $146call.27.1 = call $132load_global.23.1($const142.25.2.1, $const144.26.4.1, func=$132load_global.23.1, args=[Var($const142.25.2.1, <string>:6), Var($const144.26.4.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,238 - numba.core.ssa - DEBUG - on stmt: $154unary_negative.28.1 = unary(fn=<built-in function neg>, value=$146call.27.1)
2025-05-12 23:19:11,238 - numba.core.ssa - DEBUG - on stmt: $const158.30.2.1 = const(int, 0)
2025-05-12 23:19:11,238 - numba.core.ssa - DEBUG - on stmt: $160binary_subscr.31.1 = getitem(value=full_shape0, index=$const158.30.2.1, fn=<built-in function getitem>)
2025-05-12 23:19:11,238 - numba.core.ssa - DEBUG - on stmt: $164load_global.32.1 = global(max: <built-in function max>)
2025-05-12 23:19:11,239 - numba.core.ssa - DEBUG - on stmt: $const174.34.2.1 = const(int, 0)
2025-05-12 23:19:11,239 - numba.core.ssa - DEBUG - on stmt: $const176.35.2.1 = const(int, 0)
2025-05-12 23:19:11,239 - numba.core.ssa - DEBUG - on stmt: $178call.36.1 = call $164load_global.32.1($const174.34.2.1, $const176.35.2.1, func=$164load_global.32.1, args=[Var($const174.34.2.1, <string>:6), Var($const176.35.2.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,241 - numba.core.ssa - DEBUG - on stmt: $binop_sub186.37.1 = $160binary_subscr.31.1 - $178call.36.1
2025-05-12 23:19:11,241 - numba.core.ssa - DEBUG - on stmt: $190call.38.1 = call $122load_global.21.1($154unary_negative.28.1, $binop_sub186.37.1, func=$122load_global.21.1, args=[Var($154unary_negative.28.1, <string>:6), Var($binop_sub186.37.1, <string>:6)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,241 - numba.core.ssa - DEBUG - on stmt: $198get_iter.39.1 = getiter(value=$190call.38.1)
2025-05-12 23:19:11,241 - numba.core.ssa - DEBUG - on stmt: $phi200.0.1 = $198get_iter.39.1
2025-05-12 23:19:11,242 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:11,242 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 200
2025-05-12 23:19:11,242 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,242 - numba.core.ssa - DEBUG - on stmt: $200for_iter.1.1 = iternext(value=$phi200.0.1)
2025-05-12 23:19:11,243 - numba.core.ssa - DEBUG - on stmt: $200for_iter.2.1 = pair_first(value=$200for_iter.1.1)
2025-05-12 23:19:11,243 - numba.core.ssa - DEBUG - on stmt: $200for_iter.3.1 = pair_second(value=$200for_iter.1.1)
2025-05-12 23:19:11,243 - numba.core.ssa - DEBUG - on stmt: $phi204.1.1 = $200for_iter.2.1
2025-05-12 23:19:11,243 - numba.core.ssa - DEBUG - on stmt: branch $200for_iter.3.1, 204, 396
2025-05-12 23:19:11,244 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 204
2025-05-12 23:19:11,244 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,245 - numba.core.ssa - DEBUG - on stmt: index00 = $phi204.1.1
2025-05-12 23:19:11,245 - numba.core.ssa - DEBUG - on stmt: jump 212
2025-05-12 23:19:11,246 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 396
2025-05-12 23:19:11,246 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,247 - numba.core.ssa - DEBUG - on stmt: $216return_value.3.1 = cast(value=out0)
2025-05-12 23:19:11,247 - numba.core.ssa - DEBUG - on stmt: return $216return_value.3.1
2025-05-12 23:19:11,247 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 212
2025-05-12 23:19:11,247 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,249 - numba.core.ssa - DEBUG - on stmt: $const6.1.1 = const(int, 0)
2025-05-12 23:19:11,249 - numba.core.ssa - DEBUG - on stmt: stencil_index = $const6.1.1 + index00
2025-05-12 23:19:11,249 - numba.core.ssa - DEBUG - on stmt: x0 = getitem(value=x, index=stencil_index, fn=<built-in function getitem>)
2025-05-12 23:19:11,249 - numba.core.ssa - DEBUG - on stmt: $16unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:11,250 - numba.core.ssa - DEBUG - on stmt: $24compare_op.6 = $16unary_negative.4 <= x0
2025-05-12 23:19:11,250 - numba.core.ssa - DEBUG - on stmt: bool28 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,250 - numba.core.ssa - DEBUG - on stmt: $28pred = call bool28($24compare_op.6, func=bool28, args=(Var($24compare_op.6, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,251 - numba.core.ssa - DEBUG - on stmt: $phi30.0 = x0
2025-05-12 23:19:11,251 - numba.core.ssa - DEBUG - on stmt: branch $28pred, 213, 253
2025-05-12 23:19:11,251 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 213
2025-05-12 23:19:11,252 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,252 - numba.core.ssa - DEBUG - on stmt: $32compare_op.2 = x0 <= threshold
2025-05-12 23:19:11,253 - numba.core.ssa - DEBUG - on stmt: bool36 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,253 - numba.core.ssa - DEBUG - on stmt: $36pred = call bool36($32compare_op.2, func=bool36, args=(Var($32compare_op.2, audio.py:1141),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,253 - numba.core.ssa - DEBUG - on stmt: branch $36pred, 243, 257
2025-05-12 23:19:11,254 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 243
2025-05-12 23:19:11,254 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,254 - numba.core.ssa - DEBUG - on stmt: jump 251
2025-05-12 23:19:11,254 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 253
2025-05-12 23:19:11,255 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,255 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:11,256 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 251
2025-05-12 23:19:11,256 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,257 - numba.core.ssa - DEBUG - on stmt: x0.1 = const(int, 0)
2025-05-12 23:19:11,257 - numba.core.ssa - DEBUG - on stmt: jump 257
2025-05-12 23:19:11,257 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 257
2025-05-12 23:19:11,257 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,257 - numba.core.ssa - DEBUG - on stmt: x0.2 = phi(incoming_values=[Var(x0, audio.py:1140), Var(x0.1, audio.py:1142), Var(x0, audio.py:1140)], incoming_blocks=[253, 251, 213])
2025-05-12 23:19:11,258 - numba.core.ssa - DEBUG - on stmt: $const50.1.2 = const(int, -1)
2025-05-12 23:19:11,258 - numba.core.ssa - DEBUG - on stmt: stencil_index.1 = $const50.1.2 + index00
2025-05-12 23:19:11,258 - numba.core.ssa - DEBUG - on stmt: x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:11,258 - numba.core.ssa - DEBUG - on stmt: $60unary_negative.4 = unary(fn=<built-in function neg>, value=threshold)
2025-05-12 23:19:11,259 - numba.core.ssa - DEBUG - on stmt: $68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:11,259 - numba.core.ssa - DEBUG - find_def var='x1' stmt=$68compare_op.6 = $60unary_negative.4 <= x1
2025-05-12 23:19:11,259 - numba.core.ssa - DEBUG - on stmt: bool72 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,259 - numba.core.ssa - DEBUG - on stmt: $72pred = call bool72($68compare_op.6, func=bool72, args=(Var($68compare_op.6, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,259 - numba.core.ssa - DEBUG - on stmt: $phi74.0 = x1
2025-05-12 23:19:11,261 - numba.core.ssa - DEBUG - find_def var='x1' stmt=$phi74.0 = x1
2025-05-12 23:19:11,261 - numba.core.ssa - DEBUG - on stmt: branch $72pred, 261, 297
2025-05-12 23:19:11,261 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 261
2025-05-12 23:19:11,261 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,262 - numba.core.ssa - DEBUG - on stmt: $76compare_op.2 = x1 <= threshold
2025-05-12 23:19:11,262 - numba.core.ssa - DEBUG - find_def var='x1' stmt=$76compare_op.2 = x1 <= threshold
2025-05-12 23:19:11,262 - numba.core.ssa - DEBUG - find_def_from_top label 261
2025-05-12 23:19:11,263 - numba.core.ssa - DEBUG - idom 257 from label 261
2025-05-12 23:19:11,263 - numba.core.ssa - DEBUG - find_def_from_bottom label 257
2025-05-12 23:19:11,263 - numba.core.ssa - DEBUG - on stmt: bool80 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,263 - numba.core.ssa - DEBUG - on stmt: $80pred = call bool80($76compare_op.2, func=bool80, args=(Var($76compare_op.2, audio.py:1145),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,263 - numba.core.ssa - DEBUG - on stmt: branch $80pred, 287, 301
2025-05-12 23:19:11,264 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 287
2025-05-12 23:19:11,264 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,265 - numba.core.ssa - DEBUG - on stmt: jump 295
2025-05-12 23:19:11,265 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 297
2025-05-12 23:19:11,265 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,265 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:11,266 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 295
2025-05-12 23:19:11,266 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,266 - numba.core.ssa - DEBUG - on stmt: x1.1 = const(int, 0)
2025-05-12 23:19:11,267 - numba.core.ssa - DEBUG - on stmt: jump 301
2025-05-12 23:19:11,267 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 301
2025-05-12 23:19:11,267 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,267 - numba.core.ssa - DEBUG - on stmt: bool94 = global(bool: <class 'bool'>)
2025-05-12 23:19:11,268 - numba.core.ssa - DEBUG - on stmt: $94pred = call bool94(zero_pos, func=bool94, args=(Var(zero_pos, audio.py:1137),), kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,268 - numba.core.ssa - DEBUG - on stmt: branch $94pred, 305, 309
2025-05-12 23:19:11,269 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 305
2025-05-12 23:19:11,269 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,270 - numba.core.ssa - DEBUG - on stmt: $96load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,270 - numba.core.ssa - DEBUG - on stmt: $106load_attr.2 = getattr(value=$96load_global.0, attr=signbit)
2025-05-12 23:19:11,270 - numba.core.ssa - DEBUG - on stmt: $128call.4 = call $106load_attr.2(x0.2, func=$106load_attr.2, args=[Var(x0.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,271 - numba.core.ssa - DEBUG - on stmt: $136load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,271 - numba.core.ssa - DEBUG - on stmt: $146load_attr.7 = getattr(value=$136load_global.5, attr=signbit)
2025-05-12 23:19:11,272 - numba.core.ssa - DEBUG - on stmt: $168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,273 - numba.core.ssa - DEBUG - find_def var='x1' stmt=$168call.9 = call $146load_attr.7(x1, func=$146load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,273 - numba.core.ssa - DEBUG - find_def_from_top label 305
2025-05-12 23:19:11,274 - numba.core.ssa - DEBUG - idom 301 from label 305
2025-05-12 23:19:11,274 - numba.core.ssa - DEBUG - find_def_from_bottom label 301
2025-05-12 23:19:11,275 - numba.core.ssa - DEBUG - find_def_from_top label 301
2025-05-12 23:19:11,275 - numba.core.ssa - DEBUG - insert phi node x1.2 = phi(incoming_values=[], incoming_blocks=[]) at 301
2025-05-12 23:19:11,275 - numba.core.ssa - DEBUG - find_def_from_bottom label 297
2025-05-12 23:19:11,276 - numba.core.ssa - DEBUG - find_def_from_top label 297
2025-05-12 23:19:11,276 - numba.core.ssa - DEBUG - idom 257 from label 297
2025-05-12 23:19:11,277 - numba.core.ssa - DEBUG - find_def_from_bottom label 257
2025-05-12 23:19:11,277 - numba.core.ssa - DEBUG - incoming_def x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:11,277 - numba.core.ssa - DEBUG - find_def_from_bottom label 261
2025-05-12 23:19:11,278 - numba.core.ssa - DEBUG - find_def_from_top label 261
2025-05-12 23:19:11,278 - numba.core.ssa - DEBUG - idom 257 from label 261
2025-05-12 23:19:11,278 - numba.core.ssa - DEBUG - find_def_from_bottom label 257
2025-05-12 23:19:11,279 - numba.core.ssa - DEBUG - incoming_def x1 = getitem(value=x, index=stencil_index.1, fn=<built-in function getitem>)
2025-05-12 23:19:11,279 - numba.core.ssa - DEBUG - find_def_from_bottom label 295
2025-05-12 23:19:11,279 - numba.core.ssa - DEBUG - incoming_def x1.1 = const(int, 0)
2025-05-12 23:19:11,280 - numba.core.ssa - DEBUG - replaced with: $168call.9 = call $146load_attr.7(x1.2, func=$146load_attr.7, args=[Var(x1.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,280 - numba.core.ssa - DEBUG - on stmt: $176compare_op.10 = $128call.4 != $168call.9
2025-05-12 23:19:11,281 - numba.core.ssa - DEBUG - on stmt: $180return_value.11 = cast(value=$176compare_op.10)
2025-05-12 23:19:11,281 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $180return_value.11
2025-05-12 23:19:11,282 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:11,282 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 309
2025-05-12 23:19:11,283 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,283 - numba.core.ssa - DEBUG - on stmt: $182load_global.0 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,284 - numba.core.ssa - DEBUG - on stmt: $192load_attr.2 = getattr(value=$182load_global.0, attr=sign)
2025-05-12 23:19:11,284 - numba.core.ssa - DEBUG - on stmt: $214call.4 = call $192load_attr.2(x0.2, func=$192load_attr.2, args=[Var(x0.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,285 - numba.core.ssa - DEBUG - on stmt: $222load_global.5 = global(np: <module 'numpy' from 'C:\\Users\\nolan\\miniforge3\\Lib\\site-packages\\numpy\\__init__.py'>)
2025-05-12 23:19:11,285 - numba.core.ssa - DEBUG - on stmt: $232load_attr.7 = getattr(value=$222load_global.5, attr=sign)
2025-05-12 23:19:11,285 - numba.core.ssa - DEBUG - on stmt: $254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,286 - numba.core.ssa - DEBUG - find_def var='x1' stmt=$254call.9 = call $232load_attr.7(x1, func=$232load_attr.7, args=[Var(x1, audio.py:1144)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,287 - numba.core.ssa - DEBUG - find_def_from_top label 309
2025-05-12 23:19:11,287 - numba.core.ssa - DEBUG - idom 301 from label 309
2025-05-12 23:19:11,287 - numba.core.ssa - DEBUG - find_def_from_bottom label 301
2025-05-12 23:19:11,288 - numba.core.ssa - DEBUG - replaced with: $254call.9 = call $232load_attr.7(x1.2, func=$232load_attr.7, args=[Var(x1.2, audio.py:1149)], kws=(), vararg=None, varkwarg=None, target=None)
2025-05-12 23:19:11,288 - numba.core.ssa - DEBUG - on stmt: $262compare_op.10 = $214call.4 != $254call.9
2025-05-12 23:19:11,289 - numba.core.ssa - DEBUG - on stmt: $266return_value.11 = cast(value=$262compare_op.10)
2025-05-12 23:19:11,290 - numba.core.ssa - DEBUG - on stmt: out0[index00] = $266return_value.11
2025-05-12 23:19:11,290 - numba.core.ssa - DEBUG - on stmt: jump 395
2025-05-12 23:19:11,291 - numba.core.ssa - DEBUG - ==== SSA block rewrite pass on 395
2025-05-12 23:19:11,291 - numba.core.ssa - DEBUG - Running <numba.core.ssa._FixSSAVars object at 0x000001E8A8875190>
2025-05-12 23:19:11,292 - numba.core.ssa - DEBUG - on stmt: jump 200
2025-05-12 23:19:12,892 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: 
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\librosa\core\audio.py", line 176, in load
    y, sr_native = __soundfile_load(path, offset, duration, dtype)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\librosa\core\audio.py", line 209, in __soundfile_load
    context = sf.SoundFile(path)
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\soundfile.py", line 690, in __init__
    self._file = self._open(file, mode_int, closefd)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\soundfile.py", line 1265, in _open
    raise LibsndfileError(err, prefix="Error opening {0!r}: ".format(self.name))
soundfile.LibsndfileError: Error opening 'downloads\\Lovely_Day.mp3': File does not exist or is not a regular file (possibly a pipe?).

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1857, in generate_video
    melody_notes = audio_manager.extract_melody(audio_file)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\Desktop\tiktok_test\TikTokAudioManager.py", line 42, in extract_melody
    y, sr = librosa.load(audio_file)
            ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\librosa\core\audio.py", line 184, in load
    y, sr_native = __audioread_load(path, offset, duration, dtype)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\decorator.py", line 235, in fun
    return caller(func, *(extras + args), **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\librosa\util\decorators.py", line 63, in __wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\librosa\core\audio.py", line 240, in __audioread_load
    reader = audioread.audio_open(path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\audioread\__init__.py", line 132, in audio_open
    raise NoBackendError()
audioread.exceptions.NoBackendError
2025-05-12 23:19:31,790 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:19:31,797 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:19:31,798 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:19:31,798 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:19:31,798 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:19:45,893 - TikSimPro - INFO - Analyse des tendances en cours...
2025-05-12 23:19:45,893 - TikSimPro - INFO - Récupération des hashtags tendance...
2025-05-12 23:19:58,566 - TikSimPro - ERROR - Erreur lors de la récupération des hashtags: [Errno 2] No such file or directory: 'tiktok_data\\trending_hashtags.json'
2025-05-12 23:19:58,567 - TikSimPro - INFO - Recherche des musiques TikTok tendance via YouTube...
2025-05-12 23:20:00,133 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:20:00,204 - TikSimPro - ERROR - Erreur récupération musique: [Errno 2] No such file or directory: 'tiktok_data\\popular_songs.json'
2025-05-12 23:20:00,207 - TikSimPro - ERROR - Erreur lors de l'analyse des tendances: [Errno 2] No such file or directory: 'tiktok_data\\trends.json'
2025-05-12 23:20:00,208 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:20:00,209 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:20:00,209 - TikSimPro - INFO - Fréquence des beats définie: 1.5s
2025-05-12 23:20:00,212 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: 'popular_music'
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1851, in generate_video
    popular_song = trend_analysis["popular_music"][0]  # Exemple : "STAY - Justin Bieber"
                   ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
KeyError: 'popular_music'
2025-05-12 23:21:29,226 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:21:29,235 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:21:29,235 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:21:29,236 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:21:29,236 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:21:31,241 - TikSimPro - INFO - Analyse des tendances en cours...
2025-05-12 23:21:31,242 - TikSimPro - INFO - Récupération des hashtags tendance...
2025-05-12 23:21:43,266 - TikSimPro - INFO - Récupéré 15 hashtags tendance
2025-05-12 23:21:43,270 - TikSimPro - INFO - Recherche des musiques TikTok tendance via YouTube...
2025-05-12 23:21:44,611 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:21:44,692 - TikSimPro - INFO - 20 musiques trouvées via YouTube Search
2025-05-12 23:21:44,707 - TikSimPro - INFO - Analyse des tendances terminée
2025-05-12 23:21:44,709 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:21:44,710 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:21:44,710 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:21:45,819 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:23:13,487 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [Errno 2] No such file or directory: 'downloads\\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3'
Traceback (most recent call last):
  File "C:\Users\nolan\miniforge3\Lib\site-packages\librosa\core\audio.py", line 176, in load
    y, sr_native = __soundfile_load(path, offset, duration, dtype)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\librosa\core\audio.py", line 209, in __soundfile_load
    context = sf.SoundFile(path)
              ^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\soundfile.py", line 690, in __init__
    self._file = self._open(file, mode_int, closefd)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\soundfile.py", line 1265, in _open
    raise LibsndfileError(err, prefix="Error opening {0!r}: ".format(self.name))
soundfile.LibsndfileError: Error opening 'downloads\\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3': System error.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1857, in generate_video
    melody_notes = audio_manager.extract_melody(audio_file)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\Desktop\tiktok_test\TikTokAudioManager.py", line 42, in extract_melody
    y, sr = librosa.load(audio_file)
            ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\librosa\core\audio.py", line 184, in load
    y, sr_native = __audioread_load(path, offset, duration, dtype)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\decorator.py", line 235, in fun
    return caller(func, *(extras + args), **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\librosa\util\decorators.py", line 63, in __wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\librosa\core\audio.py", line 240, in __audioread_load
    reader = audioread.audio_open(path)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\audioread\__init__.py", line 127, in audio_open
    return BackendClass(path)
           ^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\audioread\rawread.py", line 59, in __init__
    self._fh = open(filename, 'rb')
               ^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'downloads\\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3'
2025-05-12 23:24:32,786 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:24:32,792 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:24:32,793 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:24:32,793 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:24:32,793 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:24:34,738 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:24:34,738 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:24:34,738 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:24:34,757 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:24:36,049 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:24:36,105 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:25:40,002 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3
2025-05-12 23:25:40,004 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3
2025-05-12 23:26:18,348 - TikTokAudioManager - INFO - Nombre de notes extraites : 345462
2025-05-12 23:26:18,631 - TikSimPro - INFO - Mélodie définie: 345462 notes
2025-05-12 23:26:18,632 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 23:26:18,768 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 23:26:18,771 - TikSimPro - INFO - Physique initialisée
2025-05-12 23:26:18,771 - TikSimPro - INFO - Génération des sons...
2025-05-12 23:26:18,774 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-12 23:26:18,774 - TikSimPro - INFO - Génération de 3600 frames...
2025-05-12 23:26:22,153 - TikSimPro - INFO - Progression: 60/3600 frames (1.7%, ETA: 199.4s)
2025-05-12 23:26:25,668 - TikSimPro - INFO - Progression: 120/3600 frames (3.3%, ETA: 199.9s)
2025-05-12 23:26:28,939 - TikSimPro - INFO - Progression: 180/3600 frames (5.0%, ETA: 193.1s)
2025-05-12 23:26:32,218 - TikSimPro - INFO - Progression: 240/3600 frames (6.7%, ETA: 188.2s)
2025-05-12 23:26:35,568 - TikSimPro - INFO - Progression: 300/3600 frames (8.3%, ETA: 184.7s)
2025-05-12 23:26:38,844 - TikSimPro - INFO - Progression: 360/3600 frames (10.0%, ETA: 180.6s)
2025-05-12 23:26:42,260 - TikSimPro - INFO - Progression: 420/3600 frames (11.7%, ETA: 177.8s)
2025-05-12 23:26:45,714 - TikSimPro - INFO - Progression: 480/3600 frames (13.3%, ETA: 175.1s)
2025-05-12 23:26:49,247 - TikSimPro - INFO - Progression: 540/3600 frames (15.0%, ETA: 172.7s)
2025-05-12 23:26:52,607 - TikSimPro - INFO - Progression: 600/3600 frames (16.7%, ETA: 169.2s)
2025-05-12 23:26:55,900 - TikSimPro - INFO - Progression: 660/3600 frames (18.3%, ETA: 165.4s)
2025-05-12 23:26:59,356 - TikSimPro - INFO - Progression: 720/3600 frames (20.0%, ETA: 162.3s)
2025-05-12 23:27:02,667 - TikSimPro - INFO - Progression: 780/3600 frames (21.7%, ETA: 158.7s)
2025-05-12 23:27:05,984 - TikSimPro - INFO - Progression: 840/3600 frames (23.3%, ETA: 155.1s)
2025-05-12 23:27:09,298 - TikSimPro - INFO - Progression: 900/3600 frames (25.0%, ETA: 151.6s)
2025-05-12 23:27:12,573 - TikSimPro - INFO - Progression: 960/3600 frames (26.7%, ETA: 147.9s)
2025-05-12 23:27:15,907 - TikSimPro - INFO - Progression: 1020/3600 frames (28.3%, ETA: 144.5s)
2025-05-12 23:27:19,445 - TikSimPro - INFO - Progression: 1080/3600 frames (30.0%, ETA: 141.6s)
2025-05-12 23:27:22,886 - TikSimPro - INFO - Progression: 1140/3600 frames (31.7%, ETA: 138.3s)
2025-05-12 23:27:26,407 - TikSimPro - INFO - Progression: 1200/3600 frames (33.3%, ETA: 135.3s)
2025-05-12 23:27:29,945 - TikSimPro - INFO - Progression: 1260/3600 frames (35.0%, ETA: 132.2s)
2025-05-12 23:27:33,436 - TikSimPro - INFO - Progression: 1320/3600 frames (36.7%, ETA: 129.0s)
2025-05-12 23:27:37,006 - TikSimPro - INFO - Progression: 1380/3600 frames (38.3%, ETA: 125.9s)
2025-05-12 23:27:40,512 - TikSimPro - INFO - Progression: 1440/3600 frames (40.0%, ETA: 122.6s)
2025-05-12 23:27:44,089 - TikSimPro - INFO - Progression: 1500/3600 frames (41.7%, ETA: 119.4s)
2025-05-12 23:27:47,679 - TikSimPro - INFO - Progression: 1560/3600 frames (43.3%, ETA: 116.3s)
2025-05-12 23:27:51,244 - TikSimPro - INFO - Progression: 1620/3600 frames (45.0%, ETA: 113.0s)
2025-05-12 23:27:54,816 - TikSimPro - INFO - Progression: 1680/3600 frames (46.7%, ETA: 109.8s)
2025-05-12 23:27:58,373 - TikSimPro - INFO - Progression: 1740/3600 frames (48.3%, ETA: 106.5s)
2025-05-12 23:28:01,845 - TikSimPro - INFO - Progression: 1800/3600 frames (50.0%, ETA: 103.1s)
2025-05-12 23:28:05,389 - TikSimPro - INFO - Progression: 1860/3600 frames (51.7%, ETA: 99.7s)
2025-05-12 23:28:08,933 - TikSimPro - INFO - Progression: 1920/3600 frames (53.3%, ETA: 96.4s)
2025-05-12 23:28:12,546 - TikSimPro - INFO - Progression: 1980/3600 frames (55.0%, ETA: 93.1s)
2025-05-12 23:28:16,035 - TikSimPro - INFO - Progression: 2040/3600 frames (56.7%, ETA: 89.7s)
2025-05-12 23:28:19,505 - TikSimPro - INFO - Progression: 2100/3600 frames (58.3%, ETA: 86.2s)
2025-05-12 23:28:23,045 - TikSimPro - INFO - Progression: 2160/3600 frames (60.0%, ETA: 82.8s)
2025-05-12 23:28:26,519 - TikSimPro - INFO - Progression: 2220/3600 frames (61.7%, ETA: 79.4s)
2025-05-12 23:28:30,026 - TikSimPro - INFO - Progression: 2280/3600 frames (63.3%, ETA: 76.0s)
2025-05-12 23:28:33,570 - TikSimPro - INFO - Progression: 2340/3600 frames (65.0%, ETA: 72.6s)
2025-05-12 23:28:37,074 - TikSimPro - INFO - Progression: 2400/3600 frames (66.7%, ETA: 69.2s)
2025-05-12 23:28:40,611 - TikSimPro - INFO - Progression: 2460/3600 frames (68.3%, ETA: 65.7s)
2025-05-12 23:28:44,201 - TikSimPro - INFO - Progression: 2520/3600 frames (70.0%, ETA: 62.3s)
2025-05-12 23:28:47,801 - TikSimPro - INFO - Progression: 2580/3600 frames (71.7%, ETA: 58.9s)
2025-05-12 23:28:51,407 - TikSimPro - INFO - Progression: 2640/3600 frames (73.3%, ETA: 55.5s)
2025-05-12 23:28:54,925 - TikSimPro - INFO - Progression: 2700/3600 frames (75.0%, ETA: 52.1s)
2025-05-12 23:28:58,893 - TikSimPro - INFO - Progression: 2760/3600 frames (76.7%, ETA: 48.7s)
2025-05-12 23:29:02,972 - TikSimPro - INFO - Progression: 2820/3600 frames (78.3%, ETA: 45.4s)
2025-05-12 23:29:06,742 - TikSimPro - INFO - Progression: 2880/3600 frames (80.0%, ETA: 42.0s)
2025-05-12 23:29:10,362 - TikSimPro - INFO - Progression: 2940/3600 frames (81.7%, ETA: 38.5s)
2025-05-12 23:29:13,889 - TikSimPro - INFO - Progression: 3000/3600 frames (83.3%, ETA: 35.0s)
2025-05-12 23:29:17,832 - TikSimPro - INFO - Progression: 3060/3600 frames (85.0%, ETA: 31.6s)
2025-05-12 23:29:22,198 - TikSimPro - INFO - Progression: 3120/3600 frames (86.7%, ETA: 28.2s)
2025-05-12 23:29:25,853 - TikSimPro - INFO - Progression: 3180/3600 frames (88.3%, ETA: 24.7s)
2025-05-12 23:29:29,925 - TikSimPro - INFO - Progression: 3240/3600 frames (90.0%, ETA: 21.2s)
2025-05-12 23:29:33,737 - TikSimPro - INFO - Progression: 3300/3600 frames (91.7%, ETA: 17.7s)
2025-05-12 23:29:37,706 - TikSimPro - INFO - Progression: 3360/3600 frames (93.3%, ETA: 14.2s)
2025-05-12 23:29:41,612 - TikSimPro - INFO - Progression: 3420/3600 frames (95.0%, ETA: 10.7s)
2025-05-12 23:29:45,595 - TikSimPro - INFO - Progression: 3480/3600 frames (96.7%, ETA: 7.1s)
2025-05-12 23:29:49,715 - TikSimPro - INFO - Progression: 3540/3600 frames (98.3%, ETA: 3.6s)
2025-05-12 23:29:53,372 - TikSimPro - INFO - Progression: 3599/3600 frames (100.0%, ETA: 0.1s)
2025-05-12 23:29:53,432 - TikSimPro - INFO - Progression: 3600/3600 frames (100.0%, ETA: 0.0s)
2025-05-12 23:29:53,469 - TikSimPro - INFO - Simulation terminée
2025-05-12 23:29:53,469 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-12 23:29:53,469 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-12 23:30:36,045 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747085074.mp4
2025-05-12 23:30:36,233 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: multiple values for argument 'font'
2025-05-12 23:30:36,387 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: multiple values for argument 'font'
2025-05-12 23:30:36,407 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747085074_enhanced.mp4
2025-05-12 23:30:36,408 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747085074_enhanced.mp4
2025-05-12 23:33:34,591 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:33:34,595 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:33:34,595 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:33:34,596 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:33:34,596 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:33:36,947 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:33:36,947 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:33:36,947 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:33:36,950 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:33:38,508 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:33:38,590 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:34:41,321 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3
2025-05-12 23:34:41,323 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3
2025-05-12 23:35:06,732 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:35:06,737 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:35:06,738 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:35:06,738 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:35:06,738 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:35:12,168 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:35:12,169 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:35:12,170 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:35:12,171 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:35:13,394 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:35:13,462 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:36:10,214 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3
2025-05-12 23:36:10,216 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3
2025-05-12 23:36:34,728 - TikTokAudioManager - INFO - Nombre de notes extraites : 345462
2025-05-12 23:36:34,890 - TikSimPro - INFO - Mélodie définie: 345462 notes
2025-05-12 23:36:34,890 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 23:36:35,014 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 23:36:35,018 - TikSimPro - INFO - Physique initialisée
2025-05-12 23:36:35,018 - TikSimPro - INFO - Génération des sons...
2025-05-12 23:36:35,020 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-12 23:36:35,020 - TikSimPro - INFO - Génération de 3600 frames...
2025-05-12 23:36:38,139 - TikSimPro - INFO - Progression: 60/3600 frames (1.7%, ETA: 184.0s)
2025-05-12 23:36:41,264 - TikSimPro - INFO - Progression: 120/3600 frames (3.3%, ETA: 181.1s)
2025-05-12 23:36:44,446 - TikSimPro - INFO - Progression: 180/3600 frames (5.0%, ETA: 179.1s)
2025-05-12 23:36:47,631 - TikSimPro - INFO - Progression: 240/3600 frames (6.7%, ETA: 176.6s)
2025-05-12 23:36:50,840 - TikSimPro - INFO - Progression: 300/3600 frames (8.3%, ETA: 174.0s)
2025-05-12 23:36:54,158 - TikSimPro - INFO - Progression: 360/3600 frames (10.0%, ETA: 172.2s)
2025-05-12 23:36:57,251 - TikSimPro - INFO - Progression: 420/3600 frames (11.7%, ETA: 168.3s)
2025-05-12 23:37:00,315 - TikSimPro - INFO - Progression: 480/3600 frames (13.3%, ETA: 164.4s)
2025-05-12 23:37:03,665 - TikSimPro - INFO - Progression: 540/3600 frames (15.0%, ETA: 162.3s)
2025-05-12 23:37:07,427 - TikSimPro - INFO - Progression: 600/3600 frames (16.7%, ETA: 162.0s)
2025-05-12 23:37:11,013 - TikSimPro - INFO - Progression: 660/3600 frames (18.3%, ETA: 160.3s)
2025-05-12 23:37:14,434 - TikSimPro - INFO - Progression: 720/3600 frames (20.0%, ETA: 157.7s)
2025-05-12 23:37:17,826 - TikSimPro - INFO - Progression: 780/3600 frames (21.7%, ETA: 154.8s)
2025-05-12 23:37:21,116 - TikSimPro - INFO - Progression: 840/3600 frames (23.3%, ETA: 151.5s)
2025-05-12 23:37:24,338 - TikSimPro - INFO - Progression: 900/3600 frames (25.0%, ETA: 148.0s)
2025-05-12 23:37:27,602 - TikSimPro - INFO - Progression: 960/3600 frames (26.7%, ETA: 144.6s)
2025-05-12 23:37:30,800 - TikSimPro - INFO - Progression: 1020/3600 frames (28.3%, ETA: 141.1s)
2025-05-12 23:37:34,088 - TikSimPro - INFO - Progression: 1080/3600 frames (30.0%, ETA: 137.8s)
2025-05-12 23:37:37,386 - TikSimPro - INFO - Progression: 1140/3600 frames (31.7%, ETA: 134.6s)
2025-05-12 23:37:40,672 - TikSimPro - INFO - Progression: 1200/3600 frames (33.3%, ETA: 131.3s)
2025-05-12 23:37:43,965 - TikSimPro - INFO - Progression: 1260/3600 frames (35.0%, ETA: 128.0s)
2025-05-12 23:37:47,228 - TikSimPro - INFO - Progression: 1320/3600 frames (36.7%, ETA: 124.7s)
2025-05-12 23:37:50,475 - TikSimPro - INFO - Progression: 1380/3600 frames (38.3%, ETA: 121.4s)
2025-05-12 23:37:53,832 - TikSimPro - INFO - Progression: 1440/3600 frames (40.0%, ETA: 118.2s)
2025-05-12 23:37:57,177 - TikSimPro - INFO - Progression: 1500/3600 frames (41.7%, ETA: 115.0s)
2025-05-12 23:38:00,486 - TikSimPro - INFO - Progression: 1560/3600 frames (43.3%, ETA: 111.8s)
2025-05-12 23:38:03,862 - TikSimPro - INFO - Progression: 1620/3600 frames (45.0%, ETA: 108.6s)
2025-05-12 23:38:07,222 - TikSimPro - INFO - Progression: 1680/3600 frames (46.7%, ETA: 105.4s)
2025-05-12 23:38:10,562 - TikSimPro - INFO - Progression: 1740/3600 frames (48.3%, ETA: 102.1s)
2025-05-12 23:38:13,814 - TikSimPro - INFO - Progression: 1800/3600 frames (50.0%, ETA: 98.8s)
2025-05-12 23:38:17,088 - TikSimPro - INFO - Progression: 1860/3600 frames (51.7%, ETA: 95.5s)
2025-05-12 23:38:20,407 - TikSimPro - INFO - Progression: 1920/3600 frames (53.3%, ETA: 92.2s)
2025-05-12 23:38:23,791 - TikSimPro - INFO - Progression: 1980/3600 frames (55.0%, ETA: 89.0s)
2025-05-12 23:38:27,060 - TikSimPro - INFO - Progression: 2040/3600 frames (56.7%, ETA: 85.7s)
2025-05-12 23:38:30,413 - TikSimPro - INFO - Progression: 2100/3600 frames (58.3%, ETA: 82.4s)
2025-05-12 23:38:33,700 - TikSimPro - INFO - Progression: 2160/3600 frames (60.0%, ETA: 79.1s)
2025-05-12 23:38:37,091 - TikSimPro - INFO - Progression: 2220/3600 frames (61.7%, ETA: 75.9s)
2025-05-12 23:38:40,583 - TikSimPro - INFO - Progression: 2280/3600 frames (63.3%, ETA: 72.7s)
2025-05-12 23:38:44,131 - TikSimPro - INFO - Progression: 2340/3600 frames (65.0%, ETA: 69.5s)
2025-05-12 23:38:47,597 - TikSimPro - INFO - Progression: 2400/3600 frames (66.7%, ETA: 66.3s)
2025-05-12 23:38:51,159 - TikSimPro - INFO - Progression: 2460/3600 frames (68.3%, ETA: 63.1s)
2025-05-12 23:38:54,652 - TikSimPro - INFO - Progression: 2520/3600 frames (70.0%, ETA: 59.8s)
2025-05-12 23:38:58,086 - TikSimPro - INFO - Progression: 2580/3600 frames (71.7%, ETA: 56.6s)
2025-05-12 23:39:01,515 - TikSimPro - INFO - Progression: 2640/3600 frames (73.3%, ETA: 53.3s)
2025-05-12 23:39:04,990 - TikSimPro - INFO - Progression: 2700/3600 frames (75.0%, ETA: 50.0s)
2025-05-12 23:39:08,499 - TikSimPro - INFO - Progression: 2760/3600 frames (76.7%, ETA: 46.7s)
2025-05-12 23:39:11,946 - TikSimPro - INFO - Progression: 2820/3600 frames (78.3%, ETA: 43.4s)
2025-05-12 23:39:15,500 - TikSimPro - INFO - Progression: 2880/3600 frames (80.0%, ETA: 40.1s)
2025-05-12 23:39:19,029 - TikSimPro - INFO - Progression: 2940/3600 frames (81.7%, ETA: 36.8s)
2025-05-12 23:39:22,605 - TikSimPro - INFO - Progression: 3000/3600 frames (83.3%, ETA: 33.5s)
2025-05-12 23:39:26,071 - TikSimPro - INFO - Progression: 3060/3600 frames (85.0%, ETA: 30.2s)
2025-05-12 23:39:29,512 - TikSimPro - INFO - Progression: 3120/3600 frames (86.7%, ETA: 26.8s)
2025-05-12 23:39:32,960 - TikSimPro - INFO - Progression: 3180/3600 frames (88.3%, ETA: 23.5s)
2025-05-12 23:39:36,387 - TikSimPro - INFO - Progression: 3240/3600 frames (90.0%, ETA: 20.2s)
2025-05-12 23:39:39,860 - TikSimPro - INFO - Progression: 3300/3600 frames (91.7%, ETA: 16.8s)
2025-05-12 23:39:43,241 - TikSimPro - INFO - Progression: 3360/3600 frames (93.3%, ETA: 13.4s)
2025-05-12 23:39:46,643 - TikSimPro - INFO - Progression: 3420/3600 frames (95.0%, ETA: 10.1s)
2025-05-12 23:39:50,079 - TikSimPro - INFO - Progression: 3480/3600 frames (96.7%, ETA: 6.7s)
2025-05-12 23:39:53,599 - TikSimPro - INFO - Progression: 3540/3600 frames (98.3%, ETA: 3.4s)
2025-05-12 23:39:56,965 - TikSimPro - INFO - Progression: 3599/3600 frames (100.0%, ETA: 0.1s)
2025-05-12 23:39:57,025 - TikSimPro - INFO - Progression: 3600/3600 frames (100.0%, ETA: 0.0s)
2025-05-12 23:39:57,060 - TikSimPro - INFO - Simulation terminée
2025-05-12 23:39:57,060 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-12 23:39:57,061 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-12 23:40:37,558 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747085712.mp4
2025-05-12 23:40:37,720 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: multiple values for argument 'font'
2025-05-12 23:40:37,886 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: multiple values for argument 'font'
2025-05-12 23:40:37,902 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747085712_enhanced.mp4
2025-05-12 23:40:37,903 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747085712_enhanced.mp4
2025-05-12 23:43:22,165 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:43:22,170 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:43:22,170 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:43:22,170 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:43:22,170 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:43:22,171 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:43:22,171 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:43:22,171 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:43:22,172 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:43:23,367 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:43:23,424 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:44:26,913 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3
2025-05-12 23:44:26,914 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3
2025-05-12 23:44:53,382 - TikTokAudioManager - INFO - Nombre de notes extraites : 345462
2025-05-12 23:44:53,584 - TikSimPro - INFO - Mélodie définie: 345462 notes
2025-05-12 23:44:53,585 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 23:44:53,737 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 23:44:53,741 - TikSimPro - INFO - Physique initialisée
2025-05-12 23:44:53,741 - TikSimPro - INFO - Génération des sons...
2025-05-12 23:44:53,743 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-12 23:44:53,743 - TikSimPro - INFO - Génération de 3600 frames...
2025-05-12 23:44:57,749 - TikSimPro - INFO - Progression: 60/3600 frames (1.7%, ETA: 236.4s)
2025-05-12 23:45:01,746 - TikSimPro - INFO - Progression: 120/3600 frames (3.3%, ETA: 232.1s)
2025-05-12 23:45:05,620 - TikSimPro - INFO - Progression: 180/3600 frames (5.0%, ETA: 225.7s)
2025-05-12 23:45:10,267 - TikSimPro - INFO - Progression: 240/3600 frames (6.7%, ETA: 231.3s)
2025-05-12 23:45:14,716 - TikSimPro - INFO - Progression: 300/3600 frames (8.3%, ETA: 230.7s)
2025-05-12 23:45:18,771 - TikSimPro - INFO - Progression: 360/3600 frames (10.0%, ETA: 225.3s)
2025-05-12 23:45:22,761 - TikSimPro - INFO - Progression: 420/3600 frames (11.7%, ETA: 219.7s)
2025-05-12 23:45:26,364 - TikSimPro - INFO - Progression: 480/3600 frames (13.3%, ETA: 212.0s)
2025-05-12 23:45:30,775 - TikSimPro - INFO - Progression: 540/3600 frames (15.0%, ETA: 209.8s)
2025-05-12 23:45:34,898 - TikSimPro - INFO - Progression: 600/3600 frames (16.7%, ETA: 205.8s)
2025-05-12 23:45:38,862 - TikSimPro - INFO - Progression: 660/3600 frames (18.3%, ETA: 201.0s)
2025-05-12 23:45:44,763 - TikSimPro - INFO - Progression: 720/3600 frames (20.0%, ETA: 204.1s)
2025-05-12 23:45:50,056 - TikSimPro - INFO - Progression: 780/3600 frames (21.7%, ETA: 203.6s)
2025-05-12 23:45:54,178 - TikSimPro - INFO - Progression: 840/3600 frames (23.3%, ETA: 198.6s)
2025-05-12 23:45:58,244 - TikSimPro - INFO - Progression: 900/3600 frames (25.0%, ETA: 193.5s)
2025-05-12 23:46:02,610 - TikSimPro - INFO - Progression: 960/3600 frames (26.7%, ETA: 189.4s)
2025-05-12 23:46:07,029 - TikSimPro - INFO - Progression: 1020/3600 frames (28.3%, ETA: 185.4s)
2025-05-12 23:46:11,280 - TikSimPro - INFO - Progression: 1080/3600 frames (30.0%, ETA: 180.9s)
2025-05-12 23:46:14,793 - TikSimPro - INFO - Progression: 1140/3600 frames (31.7%, ETA: 174.9s)
2025-05-12 23:46:18,448 - TikSimPro - INFO - Progression: 1200/3600 frames (33.3%, ETA: 169.4s)
2025-05-12 23:46:21,906 - TikSimPro - INFO - Progression: 1260/3600 frames (35.0%, ETA: 163.7s)
2025-05-12 23:46:25,426 - TikSimPro - INFO - Progression: 1320/3600 frames (36.7%, ETA: 158.4s)
2025-05-12 23:46:29,584 - TikSimPro - INFO - Progression: 1380/3600 frames (38.3%, ETA: 154.2s)
2025-05-12 23:46:33,705 - TikSimPro - INFO - Progression: 1440/3600 frames (40.0%, ETA: 149.9s)
2025-05-12 23:46:37,759 - TikSimPro - INFO - Progression: 1500/3600 frames (41.7%, ETA: 145.6s)
2025-05-12 23:46:41,693 - TikSimPro - INFO - Progression: 1560/3600 frames (43.3%, ETA: 141.2s)
2025-05-12 23:46:45,613 - TikSimPro - INFO - Progression: 1620/3600 frames (45.0%, ETA: 136.7s)
2025-05-12 23:46:49,909 - TikSimPro - INFO - Progression: 1680/3600 frames (46.7%, ETA: 132.8s)
2025-05-12 23:46:54,234 - TikSimPro - INFO - Progression: 1740/3600 frames (48.3%, ETA: 128.8s)
2025-05-12 23:46:58,202 - TikSimPro - INFO - Progression: 1800/3600 frames (50.0%, ETA: 124.5s)
2025-05-12 23:47:02,696 - TikSimPro - INFO - Progression: 1860/3600 frames (51.7%, ETA: 120.6s)
2025-05-12 23:47:06,448 - TikSimPro - INFO - Progression: 1920/3600 frames (53.3%, ETA: 116.1s)
2025-05-12 23:47:10,704 - TikSimPro - INFO - Progression: 1980/3600 frames (55.0%, ETA: 112.1s)
2025-05-12 23:47:14,849 - TikSimPro - INFO - Progression: 2040/3600 frames (56.7%, ETA: 107.9s)
2025-05-12 23:49:00,378 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:49:00,383 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:49:00,383 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:49:00,383 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:49:00,384 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:49:00,384 - TikSimPro - INFO - Frames total a generer: 3600
2025-05-12 23:49:00,385 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-12 23:49:00,385 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:49:00,385 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:49:00,385 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:49:00,387 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:49:01,768 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:49:01,858 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:49:06,124 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:49:06,129 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:49:06,129 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:49:06,129 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:49:06,129 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:49:06,130 - TikSimPro - INFO - Frames total a generer: 3600
2025-05-12 23:49:06,130 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-12 23:49:06,130 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:49:06,130 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:49:06,130 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:49:06,133 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:49:07,303 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:49:07,362 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:49:16,634 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:49:16,642 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:49:16,642 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:49:16,643 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:49:16,643 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:49:16,644 - TikSimPro - INFO - Frames total a generer: 3600
2025-05-12 23:49:16,646 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-12 23:49:16,646 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:49:16,647 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:49:16,647 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:49:16,650 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:49:17,892 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:49:17,946 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:49:34,601 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:49:34,606 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:49:34,606 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:49:34,607 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:49:34,607 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:49:34,607 - TikSimPro - INFO - Frames total a generer: 3600
2025-05-12 23:49:34,608 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-12 23:49:34,608 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:49:34,608 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:49:34,608 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:49:34,609 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:49:35,722 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:49:35,779 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:49:49,312 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:49:49,317 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:49:49,317 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:49:49,317 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:49:49,317 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:49:49,318 - TikSimPro - INFO - Frames total a generer: 3600
2025-05-12 23:49:49,318 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-12 23:49:49,318 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:49:49,318 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:49:49,318 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:49:49,319 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:49:50,553 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:49:50,603 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:50:43,234 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:50:43,239 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:50:43,239 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:50:43,239 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:50:43,239 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:50:43,240 - TikSimPro - INFO - Frames total a generer: 3600
2025-05-12 23:50:43,240 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-12 23:50:43,240 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:50:43,241 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:50:43,241 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:50:43,242 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:50:44,359 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:50:44,413 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:50:58,593 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:50:58,598 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:50:58,598 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:50:58,598 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:50:58,599 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:50:58,599 - TikSimPro - INFO - Frames total a generer: 3600
2025-05-12 23:50:58,599 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-12 23:50:58,600 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:50:58,600 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:50:58,600 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:50:58,602 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:52:10,270 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:52:10,275 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:52:10,275 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:52:10,276 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:52:10,276 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:52:10,276 - TikSimPro - INFO - Frames total a generer: 3600
2025-05-12 23:52:10,277 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-12 23:52:10,277 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:52:10,277 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:52:10,278 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:52:10,279 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:52:11,370 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:52:11,426 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:53:09,284 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:53:09,289 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:53:09,289 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:53:09,290 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:53:09,290 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:53:09,290 - TikSimPro - INFO - Frames total a generer: 3600
2025-05-12 23:53:09,291 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-12 23:53:09,291 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:53:09,291 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:53:09,291 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:53:09,292 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:53:27,415 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:53:27,421 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:53:27,421 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:53:27,422 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:53:27,423 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:53:27,423 - TikSimPro - INFO - Frames total a generer: 3600
2025-05-12 23:53:27,425 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-12 23:53:27,425 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 60s
2025-05-12 23:53:27,426 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:53:27,426 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:53:27,427 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:53:28,729 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:53:28,802 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:54:01,814 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:54:01,820 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:54:01,820 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:54:01,821 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:54:01,821 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:54:01,821 - TikSimPro - INFO - Frames total a generer: 120
2025-05-12 23:54:01,822 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-12 23:54:01,822 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-12 23:54:01,822 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:54:01,822 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:54:01,823 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:54:02,812 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:54:02,851 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:54:54,516 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3
2025-05-12 23:54:54,518 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3
2025-05-12 23:55:21,406 - TikTokAudioManager - INFO - Nombre de notes extraites : 345462
2025-05-12 23:55:21,621 - TikSimPro - INFO - Mélodie définie: 345462 notes
2025-05-12 23:55:21,621 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 23:55:21,759 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 23:55:21,762 - TikSimPro - INFO - Physique initialisée
2025-05-12 23:55:21,762 - TikSimPro - INFO - Génération des sons...
2025-05-12 23:55:21,764 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-12 23:55:21,764 - TikSimPro - INFO - Génération de 120 frames...
2025-05-12 23:55:25,689 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.9s)
2025-05-12 23:55:29,259 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-12 23:55:29,324 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-12 23:55:29,360 - TikSimPro - INFO - Simulation terminée
2025-05-12 23:55:29,360 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-12 23:55:29,360 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-12 23:56:05,436 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747086841.mp4
2025-05-12 23:56:05,437 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-12 23:56:05,437 - TikSimPro - ERROR - Erreur lecture C:\Users\nolan\Desktop\tiktok_test\temp\sounds\explosion_medium.wav: name 'wavfile' is not defined
2025-05-12 23:56:05,438 - TikSimPro - ERROR - Erreur lecture C:\Users\nolan\Desktop\tiktok_test\temp\sounds\explosion_medium.wav: name 'wavfile' is not defined
2025-05-12 23:56:05,438 - TikSimPro - ERROR - Erreur lecture C:\Users\nolan\Desktop\tiktok_test\temp\sounds\explosion_medium.wav: name 'wavfile' is not defined
2025-05-12 23:56:05,438 - TikSimPro - ERROR - Erreur lecture C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_3_oct1.wav: name 'wavfile' is not defined
2025-05-12 23:56:05,439 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: name 'wavfile' is not defined
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1955, in generate_video
    audio_file = simulation.render_audio_from_events(f"videos/tiktok_audio_{timestamp}.wav")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 669, in render_audio_from_events
    wavfile.write(output_file, sample_rate, audio_output)
    ^^^^^^^
NameError: name 'wavfile' is not defined
2025-05-12 23:58:32,379 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-12 23:58:32,384 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-12 23:58:32,385 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-12 23:58:32,385 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-12 23:58:32,385 - TikSimPro - INFO - Configuration mise à jour
2025-05-12 23:58:32,386 - TikSimPro - INFO - Frames total a generer: 120
2025-05-12 23:58:32,388 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-12 23:58:32,388 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-12 23:58:32,389 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-12 23:58:32,389 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-12 23:58:32,391 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-12 23:58:33,677 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-12 23:58:33,738 - TikTokAudioManager - INFO - Vidéo trouvée : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits) (https://www.youtube.com/watch?v=U0ZoqmyGJo8)
2025-05-12 23:59:31,019 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3
2025-05-12 23:59:31,021 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Top_hits_2024_playlist__~_Trending_music_2024_~_Best_songs_2024_updated_weekly_(Playlist_Hits).mp3
2025-05-12 23:59:55,274 - TikTokAudioManager - INFO - Nombre de notes extraites : 345462
2025-05-12 23:59:55,449 - TikSimPro - INFO - Mélodie définie: 345462 notes
2025-05-12 23:59:55,449 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-12 23:59:55,570 - TikSimPro - INFO - Initialisation de la physique...
2025-05-12 23:59:55,571 - TikSimPro - INFO - Physique initialisée
2025-05-12 23:59:55,571 - TikSimPro - INFO - Génération des sons...
2025-05-12 23:59:55,679 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: 'NoneType' object has no attribute 'write'
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1950, in generate_video
    simulation.run_simulation()
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1275, in run_simulation
    self.generate_sounds()
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 515, in generate_sounds
    wf.writeframes(stereo_samples.tobytes())
  File "C:\Users\nolan\miniforge3\Lib\wave.py", line 576, in writeframes
    self.writeframesraw(data)
  File "C:\Users\nolan\miniforge3\Lib\wave.py", line 571, in writeframesraw
    self._file.write(data)
    ^^^^^^^^^^^^^^^^
AttributeError: 'NoneType' object has no attribute 'write'
2025-05-13 00:01:09,444 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-13 00:01:09,450 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:01:09,450 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:01:09,450 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:01:09,451 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:01:09,451 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:01:09,452 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:01:09,453 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:01:09,453 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:01:09,453 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:01:09,454 - TikTokAudioManager - INFO - Recherche sur YouTube : Top hits 2024 playlist  ~ Trending music 2024 ~ Best songs 2024 updated weekly (Playlist Hits)
2025-05-13 00:01:19,815 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-13 00:01:19,819 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:01:19,819 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:01:19,821 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:01:19,821 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:01:19,821 - TikSimPro - INFO - Analyse des tendances en cours...
2025-05-13 00:01:19,821 - TikSimPro - INFO - Récupération des hashtags tendance...
2025-05-13 00:01:31,672 - TikSimPro - INFO - Récupéré 15 hashtags tendance
2025-05-13 00:01:31,673 - TikSimPro - INFO - Recherche des musiques TikTok tendance via YouTube...
2025-05-13 00:01:32,657 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:01:32,711 - TikSimPro - INFO - 19 musiques trouvées via YouTube Search
2025-05-13 00:01:32,715 - TikSimPro - INFO - Analyse des tendances terminée
2025-05-13 00:01:32,715 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:01:32,718 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:01:32,718 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:01:32,718 - TikSimPro - INFO - Palette de couleurs définie: ['#F9C5D5', '#FED8B1', '#D8B4F8', '#B1AFFF']
2025-05-13 00:01:32,719 - TikSimPro - INFO - Fréquence des beats définie: 0.5s
2025-05-13 00:01:32,720 - TikTokAudioManager - INFO - Recherche sur YouTube : Top songs 2025 playlist ~ Trending tiktok songs 2025 ~ Best tiktok songs 2025 to add your playlist
2025-05-13 00:01:33,641 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:01:33,695 - TikTokAudioManager - INFO - Vidéo trouvée : Top songs 2025 playlist ~ Trending tiktok songs 2025 ~ Best tiktok songs 2025 to add your playlist (https://www.youtube.com/watch?v=7WmfeJmDSxU)
2025-05-13 00:03:05,459 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Top_songs_2025_playlist_~_Trending_tiktok_songs_2025_~_Best_tiktok_songs_2025_to_add_your_playlist.mp3
2025-05-13 00:03:05,463 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Top_songs_2025_playlist_~_Trending_tiktok_songs_2025_~_Best_tiktok_songs_2025_to_add_your_playlist.mp3
2025-05-13 00:03:47,249 - TikTokAudioManager - INFO - Nombre de notes extraites : 509481
2025-05-13 00:03:47,608 - TikSimPro - INFO - Mélodie définie: 509481 notes
2025-05-13 00:03:47,608 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:03:47,746 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:03:47,752 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:03:47,752 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:03:50,456 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:03:50,456 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:03:54,490 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 4.0s)
2025-05-13 00:03:58,218 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:03:58,290 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:03:58,326 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:03:58,327 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:03:58,328 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:04:00,248 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747087292.mp4
2025-05-13 00:04:00,248 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:04:00,257 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 00:04:00,259 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747087292.wav
2025-05-13 00:04:00,503 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: multiple values for argument 'font'
2025-05-13 00:04:00,684 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: multiple values for argument 'font'
2025-05-13 00:04:00,694 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747087292_enhanced.mp4
2025-05-13 00:04:00,696 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747087292_enhanced.mp4
2025-05-13 00:07:06,780 - TikSimPro - ERROR - Erreur non gérée: type object 'TikTokApi' has no attribute 'get_instance'
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1927, in <module>
    automator = TikTokAutomator()
                ^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1667, in __init__
    self.scraper = TikTokScraper()
                   ^^^^^^^^^^^^^^^
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 54, in __init__
    self.api = TikTokApi.get_instance()
               ^^^^^^^^^^^^^^^^^^^^^^
AttributeError: type object 'TikTokApi' has no attribute 'get_instance'
2025-05-13 00:07:31,839 - TikSimPro - INFO - TikTok Scraper initialisé
2025-05-13 00:07:31,846 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:07:31,846 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:07:31,846 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:07:31,847 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:07:31,847 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: 'TikTokScraper' object has no attribute 'get_trend_analysis'
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1705, in generate_video
    trend_analysis = self.scraper.get_trend_analysis()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'TikTokScraper' object has no attribute 'get_trend_analysis'
2025-05-13 00:08:44,844 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:08:44,849 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:08:44,850 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:08:44,850 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:08:44,850 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:08:44,850 - TikSimPro - INFO - Analyse des tendances TikTok en cours...
2025-05-13 00:08:44,850 - TikSimPro - INFO - Récupération des hashtags tendance TikTok...
2025-05-13 00:08:44,850 - TikSimPro - ERROR - Erreur hashtags: 'TikTokApi' object has no attribute 'discover'
2025-05-13 00:08:44,851 - TikSimPro - INFO - Récupération des musiques populaires TikTok...
2025-05-13 00:08:44,851 - TikSimPro - ERROR - Erreur musiques: 'TikTokApi' object has no attribute 'discover'
2025-05-13 00:08:44,851 - TikSimPro - INFO - Analyse des tendances terminée.
2025-05-13 00:08:44,852 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:08:44,854 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:08:44,854 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:08:44,854 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:08:44,855 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:08:44,857 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:08:45,970 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:08:46,019 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:08:52,732 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:08:52,734 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:08:55,737 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:08:55,744 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:08:55,744 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:08:55,855 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:08:55,856 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:08:55,856 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:08:58,725 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:08:58,725 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:09:02,155 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.4s)
2025-05-13 00:09:05,602 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:09:05,672 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:09:05,711 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:09:05,711 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:09:05,712 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:09:07,652 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747087724.mp4
2025-05-13 00:09:07,653 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:09:07,667 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747087724.wav
2025-05-13 00:09:07,852 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: multiple values for argument 'font'
2025-05-13 00:09:08,021 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: multiple values for argument 'font'
2025-05-13 00:09:08,033 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747087724_enhanced.mp4
2025-05-13 00:09:08,034 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747087724_enhanced.mp4
2025-05-13 00:10:11,439 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:10:11,444 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:10:11,444 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:10:11,444 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:10:11,445 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:10:11,455 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:10:11,455 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:10:11,456 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:10:11,456 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:10:11,456 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:10:11,458 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:10:12,625 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:10:12,676 - TikTokAudioManager - INFO - Vidéo trouvée : The Kid LAROI, Justin Bieber - STAY (Official Video) (https://www.youtube.com/watch?v=kTJczUoc26U)
2025-05-13 00:10:18,691 - TikTokAudioManager - INFO - Musique téléchargée : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:10:18,693 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:10:21,168 - TikTokAudioManager - INFO - Nombre de notes extraites : 14443
2025-05-13 00:10:21,174 - TikSimPro - INFO - Mélodie définie: 14443 notes
2025-05-13 00:10:21,174 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:10:21,282 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:10:21,283 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:10:21,284 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:10:21,285 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:10:21,285 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:10:24,591 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.3s)
2025-05-13 00:10:28,055 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:10:28,139 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:10:28,168 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:10:28,169 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:10:28,170 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:10:29,800 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747087811.mp4
2025-05-13 00:10:29,800 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:10:29,803 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747087811.wav
2025-05-13 00:10:29,990 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: multiple values for argument 'font'
2025-05-13 00:10:30,190 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: multiple values for argument 'font'
2025-05-13 00:10:30,202 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747087811_enhanced.mp4
2025-05-13 00:10:30,204 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747087811_enhanced.mp4
2025-05-13 00:11:57,895 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:11:57,903 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:11:57,904 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:11:57,904 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:11:57,904 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:11:57,905 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:11:57,906 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:11:57,906 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:11:57,907 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:11:57,907 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:11:57,909 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:11:59,091 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:11:59,133 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:12:05,560 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:12:05,561 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:12:08,378 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:12:08,388 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:12:08,388 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:12:08,502 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:12:08,505 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:12:08,506 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:12:08,507 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:12:08,508 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:12:11,627 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.1s)
2025-05-13 00:12:14,759 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:12:14,813 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:12:14,853 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:12:14,853 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:12:14,853 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:12:16,480 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747087917.mp4
2025-05-13 00:12:16,481 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:12:16,496 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747087917.wav
2025-05-13 00:12:16,701 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: got an unexpected keyword argument 'fontsize'
2025-05-13 00:12:16,890 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: multiple values for argument 'font'
2025-05-13 00:12:16,899 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747087917_enhanced.mp4
2025-05-13 00:12:16,900 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747087917_enhanced.mp4
2025-05-13 00:12:50,530 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:12:50,536 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:12:50,536 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:12:50,536 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:12:50,537 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:12:50,537 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:12:50,538 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:12:50,538 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:12:50,538 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:12:50,538 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:12:50,540 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:12:51,528 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:12:51,575 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:12:58,491 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:12:58,493 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:13:01,580 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:13:01,587 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:13:01,587 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:13:01,743 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:13:01,746 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:13:01,747 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:13:01,748 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:13:01,748 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:13:05,075 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.3s)
2025-05-13 00:13:08,416 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:13:08,481 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:13:08,509 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:13:08,509 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:13:08,509 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:13:10,178 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747087970.mp4
2025-05-13 00:13:10,179 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:13:10,196 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747087970.wav
2025-05-13 00:13:10,370 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: got an unexpected keyword argument 'fontsize'
2025-05-13 00:13:10,546 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: multiple values for argument 'font'
2025-05-13 00:13:10,552 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747087970_enhanced.mp4
2025-05-13 00:13:10,553 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747087970_enhanced.mp4
2025-05-13 00:13:36,943 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:13:36,948 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:13:36,948 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:13:36,948 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:13:36,948 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:13:36,949 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:13:36,950 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:13:36,950 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:13:36,950 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:13:36,950 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:13:36,951 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:13:38,041 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:13:38,104 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:13:45,558 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:13:45,561 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:13:49,205 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:13:49,213 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:13:49,214 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:13:49,363 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:13:49,366 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:13:49,367 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:13:49,368 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:13:49,368 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:13:53,025 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.7s)
2025-05-13 00:13:56,669 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:13:56,736 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:13:56,773 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:13:56,773 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:13:56,774 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:13:59,285 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088016.mp4
2025-05-13 00:13:59,285 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:13:59,289 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088016.wav
2025-05-13 00:13:59,514 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: got an unexpected keyword argument 'fontsize'
2025-05-13 00:13:59,767 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: got an unexpected keyword argument 'fontsize'
2025-05-13 00:13:59,771 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088016_enhanced.mp4
2025-05-13 00:13:59,773 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088016_enhanced.mp4
2025-05-13 00:14:32,335 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:14:32,339 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:14:32,340 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:14:32,340 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:14:32,340 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:14:32,340 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:14:32,342 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:14:32,342 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:14:32,342 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:14:32,343 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:14:32,344 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:14:33,544 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:14:33,606 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:14:40,245 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:14:40,247 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:14:43,181 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:14:43,190 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:14:43,190 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:14:43,301 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:14:43,303 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:14:43,303 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:14:43,304 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:14:43,304 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:14:46,396 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.1s)
2025-05-13 00:14:49,544 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:14:49,601 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:14:49,630 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:14:49,630 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:14:49,632 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:14:51,271 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088072.mp4
2025-05-13 00:14:51,272 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:14:51,274 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088072.wav
2025-05-13 00:14:51,457 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: Invalid font None, pillow failed to use it with error 'NoneType' object has no attribute 'read'
2025-05-13 00:14:51,685 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: Invalid font None, pillow failed to use it with error 'NoneType' object has no attribute 'read'
2025-05-13 00:14:51,690 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088072_enhanced.mp4
2025-05-13 00:14:51,691 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088072_enhanced.mp4
2025-05-13 00:15:47,050 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:15:47,056 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:15:47,056 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:15:47,057 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:15:47,057 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:15:47,058 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:15:47,058 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:15:47,058 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:15:47,059 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:15:47,059 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:15:47,062 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:15:48,262 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:15:48,329 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:15:56,294 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:15:56,295 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:15:59,495 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:15:59,503 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:15:59,503 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:15:59,646 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:15:59,648 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:15:59,648 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:15:59,649 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:15:59,650 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:16:03,185 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.5s)
2025-05-13 00:16:06,690 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:16:06,754 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:16:06,790 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:16:06,791 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:16:06,792 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:16:08,697 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088147.mp4
2025-05-13 00:16:08,697 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:16:08,700 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088147.wav
2025-05-13 00:16:08,872 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: Invalid font Arial, pillow failed to use it with error cannot open resource
2025-05-13 00:16:09,028 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: Invalid font Arial, pillow failed to use it with error cannot open resource
2025-05-13 00:16:09,034 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088147_enhanced.mp4
2025-05-13 00:16:09,035 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088147_enhanced.mp4
2025-05-13 00:16:59,364 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:16:59,370 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:16:59,371 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:16:59,371 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:16:59,371 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:16:59,371 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:16:59,374 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:16:59,374 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:16:59,374 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:16:59,374 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:16:59,375 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:17:00,527 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:17:00,584 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:17:08,564 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:17:08,565 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:17:12,248 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:17:12,254 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:17:12,254 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:17:12,374 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:17:12,375 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:17:12,376 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:17:12,376 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:17:12,377 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:17:15,824 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.4s)
2025-05-13 00:17:19,315 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:17:19,382 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:17:19,413 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:17:19,414 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:17:19,414 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:17:21,554 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088219.mp4
2025-05-13 00:17:21,555 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:17:21,558 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088219.wav
2025-05-13 00:17:21,719 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: object of type 'FreeTypeFont' has no len()
2025-05-13 00:17:21,888 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: object of type 'FreeTypeFont' has no len()
2025-05-13 00:17:21,892 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088219_enhanced.mp4
2025-05-13 00:17:21,892 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088219_enhanced.mp4
2025-05-13 00:18:07,585 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:18:07,590 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:18:07,590 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:18:07,590 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:18:07,590 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:18:07,592 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:18:07,593 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:18:07,594 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:18:07,594 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:18:07,594 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:18:07,595 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:18:08,617 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:18:08,666 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:18:15,526 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:18:15,528 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:18:19,301 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:18:19,309 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:18:19,310 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:18:19,523 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:18:19,527 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:18:19,527 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:18:19,529 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:18:19,529 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:18:23,557 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 4.0s)
2025-05-13 00:18:27,852 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:18:27,922 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:18:27,948 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:18:27,948 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:18:27,949 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:18:29,989 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088287.mp4
2025-05-13 00:18:29,989 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:18:29,993 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088287.wav
2025-05-13 00:18:30,226 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: 'TextClip' object has no attribute 'set_position'
2025-05-13 00:18:30,416 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: 'float' object cannot be interpreted as an integer
2025-05-13 00:18:30,423 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088287_enhanced.mp4
2025-05-13 00:18:30,424 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088287_enhanced.mp4
2025-05-13 00:19:05,763 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:19:05,764 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:19:05,765 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:19:05,765 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:19:05,765 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:19:05,765 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:19:05,766 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:19:05,766 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:19:05,766 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:19:05,766 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:19:05,767 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:19:05,768 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:19:06,855 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:19:12,268 - TikTokAudioManager - INFO - Nombre de notes extraites : 1137
2025-05-13 00:19:12,269 - TikSimPro - INFO - Mélodie définie: 1137 notes
2025-05-13 00:19:12,269 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:19:12,396 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:19:12,397 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:19:12,398 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:19:12,398 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:19:12,398 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:19:16,105 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.7s)
2025-05-13 00:19:19,291 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:19:19,348 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:19:19,380 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:19:19,380 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:19:19,380 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:19:20,921 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088345.mp4
2025-05-13 00:19:20,921 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:19:20,923 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088345.wav
2025-05-13 00:19:21,115 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: 'TextClip' object has no attribute 'set_position'
2025-05-13 00:19:21,307 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: 'float' object cannot be interpreted as an integer
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1231, in add_hashtags
    txt_clip = TextClip(
               ^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\decorator.py", line 235, in fun
    return caller(func, *(extras + args), **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\moviepy\decorators.py", line 94, in wrapper
    return func(*new_args, **new_kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\moviepy\video\VideoClip.py", line 1846, in __init__
    draw.multiline_text(
  File "C:\Users\nolan\miniforge3\Lib\site-packages\PIL\ImageDraw.py", line 775, in multiline_text
    self.text(
  File "C:\Users\nolan\miniforge3\Lib\site-packages\PIL\ImageDraw.py", line 690, in text
    draw_text(stroke_ink, stroke_width)
  File "C:\Users\nolan\miniforge3\Lib\site-packages\PIL\ImageDraw.py", line 635, in draw_text
    mask, offset = font.getmask2(  # type: ignore[union-attr,misc]
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\nolan\miniforge3\Lib\site-packages\PIL\ImageFont.py", line 607, in getmask2
    return self.font.render(
           ^^^^^^^^^^^^^^^^^
TypeError: 'float' object cannot be interpreted as an integer
2025-05-13 00:19:21,388 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088345_enhanced.mp4
2025-05-13 00:19:21,388 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088345_enhanced.mp4
2025-05-13 00:20:00,002 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:20:00,005 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:20:00,006 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:20:00,006 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:20:00,006 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:20:00,007 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:20:00,007 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:20:00,009 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:20:00,009 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:20:00,009 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:20:00,009 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:20:00,010 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:20:01,139 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:20:01,186 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:20:08,159 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:20:08,161 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:20:11,998 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:20:12,012 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:20:12,013 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:20:12,183 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:20:12,186 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:20:12,186 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:20:12,187 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:20:12,187 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:20:16,331 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 4.1s)
2025-05-13 00:20:20,095 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:20:20,181 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:20:20,246 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:20:20,247 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:20:20,247 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:20:21,942 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088400.mp4
2025-05-13 00:20:21,942 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:20:21,957 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088400.wav
2025-05-13 00:20:22,153 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: 'TextClip' object has no attribute 'set_position'
2025-05-13 00:20:22,348 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: 'TextClip' object has no attribute 'set_position'
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1243, in add_hashtags
    .set_position(('center', 'bottom'))
     ^^^^^^^^^^^^
AttributeError: 'TextClip' object has no attribute 'set_position'. Did you mean: 'with_position'?
2025-05-13 00:20:22,358 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088400_enhanced.mp4
2025-05-13 00:20:22,358 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088400_enhanced.mp4
2025-05-13 00:21:16,836 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:21:16,837 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:21:16,838 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:21:16,838 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:21:16,838 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:21:16,838 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:21:16,839 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:21:16,839 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:21:16,839 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:21:16,840 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:21:16,840 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:21:16,841 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:21:17,980 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:21:18,048 - TikTokAudioManager - INFO - Vidéo trouvée : The Kid LAROI, Justin Bieber - STAY (Official Video) (https://www.youtube.com/watch?v=kTJczUoc26U)
2025-05-13 00:21:24,786 - TikTokAudioManager - INFO - Musique téléchargée : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:21:24,788 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:21:28,207 - TikTokAudioManager - INFO - Nombre de notes extraites : 14443
2025-05-13 00:21:28,215 - TikSimPro - INFO - Mélodie définie: 14443 notes
2025-05-13 00:21:28,215 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:21:28,352 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:21:28,353 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:21:28,353 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:21:28,354 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:21:28,355 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:21:32,327 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 4.0s)
2025-05-13 00:21:36,309 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:21:36,373 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:21:36,412 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:21:36,413 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:21:36,413 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:21:38,100 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088476.mp4
2025-05-13 00:21:38,100 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:21:38,104 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088476.wav
2025-05-13 00:21:38,296 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: 'TextClip' object has no attribute 'set_position'
2025-05-13 00:21:38,495 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: 'TextClip' object has no attribute 'margin'
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1245, in add_hashtags
    .with_duration(video.duration)
     ^^^^^^
AttributeError: 'TextClip' object has no attribute 'margin'
2025-05-13 00:21:38,537 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088476_enhanced.mp4
2025-05-13 00:21:38,537 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088476_enhanced.mp4
2025-05-13 00:21:49,807 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:21:49,809 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:21:49,809 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:21:49,810 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:21:49,810 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:21:49,810 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:21:49,810 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:21:49,812 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:21:49,812 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:21:49,812 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:21:49,813 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:21:49,815 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:21:51,426 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:21:51,506 - TikTokAudioManager - INFO - Vidéo trouvée : The Kid LAROI, Justin Bieber - STAY (Official Video) (https://www.youtube.com/watch?v=kTJczUoc26U)
2025-05-13 00:22:02,501 - TikTokAudioManager - INFO - Musique téléchargée : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:22:02,503 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:22:06,217 - TikTokAudioManager - INFO - Nombre de notes extraites : 14443
2025-05-13 00:22:06,225 - TikSimPro - INFO - Mélodie définie: 14443 notes
2025-05-13 00:22:06,225 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:22:06,455 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:22:06,458 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:22:06,458 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:22:06,460 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:22:06,460 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:22:09,966 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.5s)
2025-05-13 00:22:13,412 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:22:13,472 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:22:13,499 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:22:13,499 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:22:13,500 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:22:15,248 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088509.mp4
2025-05-13 00:22:15,248 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:22:15,252 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088509.wav
2025-05-13 00:22:15,468 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: 'TextClip' object has no attribute 'crossfadein'
2025-05-13 00:22:15,640 - TikSimPro - ERROR - Erreur lors de l'ajout des hashtags: 'TextClip' object has no attribute 'margin'
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1246, in add_hashtags
    .margin(bottom=int(20), opacity=0)
     ^^^^^^
AttributeError: 'TextClip' object has no attribute 'margin'
2025-05-13 00:22:15,668 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088509_enhanced.mp4
2025-05-13 00:22:15,669 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088509_enhanced.mp4
2025-05-13 00:22:55,300 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:22:55,303 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:22:55,303 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:22:55,303 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:22:55,303 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:22:55,303 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:22:55,304 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:22:55,305 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:22:55,305 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:22:55,305 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:22:55,305 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:22:55,307 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:22:56,447 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:22:56,496 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:23:03,354 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:23:03,357 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:23:06,867 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:23:06,877 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:23:06,878 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:23:07,044 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:23:07,047 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:23:07,048 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:23:07,051 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:23:07,051 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:23:10,575 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.5s)
2025-05-13 00:23:14,259 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:23:14,328 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:23:14,359 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:23:14,360 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:23:14,360 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:23:15,993 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088575.mp4
2025-05-13 00:23:15,993 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:23:15,996 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088575.wav
2025-05-13 00:23:16,185 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: 'TextClip' object has no attribute 'crossfadein'
2025-05-13 00:23:30,809 - TikSimPro - INFO - Hashtags ajoutés: C:\Users\nolan\Desktop\tiktok_test\temp_enhance\temp_hashtags.mp4
2025-05-13 00:23:30,814 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088575_enhanced.mp4
2025-05-13 00:23:30,814 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088575_enhanced.mp4
2025-05-13 00:23:39,132 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:23:39,134 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:23:39,134 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:23:39,134 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:23:39,135 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:23:39,135 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:23:39,135 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:23:39,136 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:23:39,136 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:23:39,137 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:23:39,137 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:23:39,139 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:23:40,168 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:23:40,217 - TikTokAudioManager - INFO - Vidéo trouvée : The Kid LAROI, Justin Bieber - STAY (Official Video) (https://www.youtube.com/watch?v=kTJczUoc26U)
2025-05-13 00:23:46,329 - TikTokAudioManager - INFO - Musique téléchargée : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:23:46,329 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:23:49,454 - TikTokAudioManager - INFO - Nombre de notes extraites : 14443
2025-05-13 00:23:49,461 - TikSimPro - INFO - Mélodie définie: 14443 notes
2025-05-13 00:23:49,461 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:23:49,655 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:23:49,657 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:23:49,657 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:23:49,659 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:23:49,659 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:23:53,226 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.6s)
2025-05-13 00:23:56,935 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:23:57,000 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:23:57,039 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:23:57,040 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:23:57,040 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:23:58,918 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088619.mp4
2025-05-13 00:23:58,919 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:23:58,920 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_9_oct1.wav
2025-05-13 00:23:58,924 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088619.wav
2025-05-13 00:23:59,148 - TikSimPro - ERROR - Erreur lors de l'ajout de l'introduction: 'TextClip' object has no attribute 'crossfadein'
2025-05-13 00:24:16,395 - TikSimPro - INFO - Hashtags ajoutés: C:\Users\nolan\Desktop\tiktok_test\temp_enhance\temp_hashtags.mp4
2025-05-13 00:24:16,401 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088619_enhanced.mp4
2025-05-13 00:24:16,402 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088619_enhanced.mp4
2025-05-13 00:24:37,743 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:24:37,745 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:24:37,745 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:24:37,745 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:24:37,745 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:24:37,746 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:24:37,747 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:24:37,747 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:24:37,748 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:24:37,748 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:24:37,748 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:24:37,750 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:24:38,947 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:24:38,995 - TikTokAudioManager - INFO - Vidéo trouvée : The Kid LAROI, Justin Bieber - STAY (Official Video) (https://www.youtube.com/watch?v=kTJczUoc26U)
2025-05-13 00:24:45,334 - TikTokAudioManager - INFO - Musique téléchargée : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:24:45,337 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:24:51,405 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:24:51,406 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:24:51,406 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:24:51,406 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:24:51,406 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:24:51,406 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:24:51,407 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:24:51,407 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:24:51,407 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:24:51,407 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:24:51,407 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:24:51,408 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:24:52,474 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:24:52,546 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:24:59,518 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:24:59,519 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:25:03,029 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:25:03,038 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:25:03,038 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:25:03,162 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:25:03,163 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:25:03,163 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:25:03,164 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:25:03,165 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:25:06,765 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.6s)
2025-05-13 00:25:10,335 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:25:10,439 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:25:10,472 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:25:10,473 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:25:10,473 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:25:12,464 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088691.mp4
2025-05-13 00:25:12,464 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:25:12,479 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088691.wav
2025-05-13 00:25:39,096 - TikSimPro - INFO - Introduction ajoutée: C:\Users\nolan\Desktop\tiktok_test\temp_enhance\temp_intro.mp4
2025-05-13 00:26:15,958 - TikSimPro - INFO - Hashtags ajoutés: C:\Users\nolan\Desktop\tiktok_test\temp_enhance\temp_hashtags.mp4
2025-05-13 00:26:15,963 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088691_enhanced.mp4
2025-05-13 00:26:15,964 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088691_enhanced.mp4
2025-05-13 00:27:52,982 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:27:52,984 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:27:52,984 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:27:52,984 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:27:52,984 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:27:52,984 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:27:52,985 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:27:52,985 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:27:52,985 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:27:52,986 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:27:52,986 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:27:52,987 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:27:54,231 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:27:54,286 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:28:01,191 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:28:01,195 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:28:04,350 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:28:04,358 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:28:04,358 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:28:04,485 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:28:04,486 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:28:04,486 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:28:04,488 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:28:04,488 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:28:07,837 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.3s)
2025-05-13 00:28:11,200 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:28:11,254 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:28:11,287 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:28:11,288 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:28:11,288 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:28:13,054 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088872.mp4
2025-05-13 00:28:13,055 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:28:13,059 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088872.wav
2025-05-13 00:28:13,405 - TikSimPro - ERROR - Erreur lors de l'ajout de la musique: 'CompositeAudioClip' object has no attribute 'subclip'
2025-05-13 00:28:13,407 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088872_enhanced.mp4
2025-05-13 00:28:13,407 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088872_enhanced.mp4
2025-05-13 00:28:24,444 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:28:24,446 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:28:24,447 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:28:24,447 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:28:24,447 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:28:24,447 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:28:24,448 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:28:24,449 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:28:24,449 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:28:24,450 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:28:24,450 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:28:24,452 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:28:25,801 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:28:25,904 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:28:33,667 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:28:33,669 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:28:37,884 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:28:37,897 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:28:37,897 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:28:38,066 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:28:38,068 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:28:38,068 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:28:38,069 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:28:38,069 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:28:41,688 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.6s)
2025-05-13 00:28:45,609 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:28:45,677 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:28:45,714 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:28:45,716 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:28:45,716 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:28:47,588 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088904.mp4
2025-05-13 00:28:47,589 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:28:47,607 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088904.wav
2025-05-13 00:28:47,610 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088904_enhanced.mp4
2025-05-13 00:28:47,610 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088904_enhanced.mp4
2025-05-13 00:29:59,862 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:29:59,864 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:29:59,864 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:29:59,864 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:29:59,864 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:29:59,864 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:29:59,865 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:29:59,866 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:29:59,866 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:29:59,866 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:29:59,866 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:29:59,867 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:30:01,063 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:30:01,111 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:30:07,700 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:30:07,702 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:30:11,493 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:30:11,503 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:30:11,503 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:30:11,650 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:30:11,653 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:30:11,653 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:30:11,655 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:30:11,656 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:30:15,093 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.4s)
2025-05-13 00:30:18,746 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:30:18,811 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:30:18,839 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:30:18,840 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:30:18,841 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:30:21,141 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747088999.mp4
2025-05-13 00:30:21,141 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:30:21,142 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_9_oct1.wav
2025-05-13 00:30:21,146 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747088999.wav
2025-05-13 00:30:21,149 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747088999_enhanced.mp4
2025-05-13 00:30:21,149 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747088999_enhanced.mp4
2025-05-13 00:33:46,860 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:33:46,861 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:33:46,861 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:33:46,861 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:33:46,861 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:33:46,861 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:33:46,862 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:33:46,862 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:33:46,863 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:33:46,863 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:33:46,863 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:33:46,864 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:33:48,038 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:33:48,083 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:33:55,158 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:33:55,160 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:33:58,171 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:33:58,178 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:33:58,179 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:33:58,314 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:33:58,316 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:33:58,316 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:33:58,317 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:33:58,318 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:34:01,658 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.3s)
2025-05-13 00:34:05,131 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:34:05,196 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:34:05,231 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:34:05,231 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:34:05,231 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:34:07,028 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747089226.mp4
2025-05-13 00:34:07,028 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:34:07,041 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747089226.wav
2025-05-13 00:34:07,211 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: 'AudioFileClip' object has no attribute 'volumex'
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1691, in generate_video
    mix_audio_files(
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 51, in mix_audio_files
    event_audio = AudioFileClip(event_audio_path).volumex(1.0)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'AudioFileClip' object has no attribute 'volumex'
2025-05-13 00:34:30,704 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:34:30,705 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:34:30,706 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:34:30,706 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:34:30,706 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:34:30,706 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:34:30,706 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:34:30,707 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:34:30,707 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:34:30,707 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:34:30,707 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:34:30,708 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:34:31,823 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:34:31,876 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:34:39,056 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:34:39,059 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:34:42,373 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:34:42,381 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:34:42,381 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:34:42,496 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:34:42,498 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:34:42,498 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:34:42,499 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:34:42,499 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:34:45,796 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.3s)
2025-05-13 00:34:49,679 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:34:49,770 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:34:49,820 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:34:49,821 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:34:49,822 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:34:52,602 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747089270.mp4
2025-05-13 00:34:52,603 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:34:52,611 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747089270.wav
2025-05-13 00:34:52,892 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: cannot access local variable 'music_audio' where it is not associated with a value
Traceback (most recent call last):
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 1691, in generate_video
    mix_audio_files(
  File "C:\Users\nolan\Desktop\tiktok_test\tiksim.py", line 54, in mix_audio_files
    if music_audio.duration < video_duration:
       ^^^^^^^^^^^
UnboundLocalError: cannot access local variable 'music_audio' where it is not associated with a value
2025-05-13 00:35:55,706 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:35:55,708 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:35:55,708 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:35:55,708 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:35:55,708 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:35:55,708 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:35:55,709 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:35:55,710 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:35:55,711 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:35:55,711 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:35:55,711 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:35:55,712 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:35:56,752 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:35:56,796 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:36:03,621 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:36:03,623 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:36:07,029 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:36:07,046 - TikSimPro - INFO - melody: [np.float32(741.77515), np.float32(225.24574), np.float32(793.2856), np.float32(833.8967), np.float32(192.77617), np.float32(331.99884), np.float32(350.57538), np.float32(350.84702), np.float32(220.51794), np.float32(187.50398), np.float32(271.4959), np.float32(265.74103), np.float32(265.32318), np.float32(260.20837), np.float32(260.16656), np.float32(260.18234), np.float32(327.77393), np.float32(329.55463), np.float32(257.89407), np.float32(258.50116), np.float32(329.8356), np.float32(329.2402), np.float32(329.12408), np.float32(329.4769), np.float32(328.9293), np.float32(328.47855), np.float32(330.14102), np.float32(328.54233), np.float32(328.77417), np.float32(329.66623), np.float32(328.4502), np.float32(328.78754), np.float32(329.8537), np.float32(328.35028), np.float32(329.8024), np.float32(329.2404), np.float32(327.8187), np.float32(329.80676), np.float32(330.01923), np.float32(328.02338), np.float32(329.4574), np.float32(328.5783), np.float32(328.70657), np.float32(329.60104), np.float32(328.7082), np.float32(328.41104), np.float32(329.4908), np.float32(783.0729), np.float32(782.4767), np.float32(782.8188), np.float32(782.9287), np.float32(782.6856), np.float32(782.4098), np.float32(782.5901), np.float32(783.01886), np.float32(782.0722), np.float32(782.2062), np.float32(782.0138), np.float32(781.3417), np.float32(781.03876), np.float32(246.56795), np.float32(254.6952), np.float32(327.05032), np.float32(195.31529), np.float32(196.18857), np.float32(194.61884), np.float32(193.53151), np.float32(193.76395), np.float32(193.961), np.float32(192.77953), np.float32(328.3684), np.float32(329.374), np.float32(329.5772), np.float32(327.97778), np.float32(329.18762), np.float32(328.72348), np.float32(328.80707), np.float32(328.95438), np.float32(328.47345), np.float32(329.01492), np.float32(329.05484), np.float32(328.75192), np.float32(329.48325), np.float32(328.45718), np.float32(327.87167), np.float32(329.86063), np.float32(329.3292), np.float32(328.68396), np.float32(329.3776), np.float32(328.5131), np.float32(329.5552), np.float32(329.47757), np.float32(329.21964), np.float32(328.8136), np.float32(329.2511), np.float32(327.97266), np.float32(329.15405), np.float32(330.0467), np.float32(328.78323), np.float32(328.78098), np.float32(329.37347), np.float32(195.92693), np.float32(194.84204), np.float32(193.91272), np.float32(192.39116), np.float32(194.06763), np.float32(193.44289), np.float32(193.45673), np.float32(195.58545), np.float32(191.1222), np.float32(188.3162), np.float32(187.45883), np.float32(187.04285), np.float32(192.39795), np.float32(194.60094), np.float32(194.45973), np.float32(193.13338), np.float32(193.56683), np.float32(193.77805), np.float32(192.80276), np.float32(194.30083), np.float32(329.48425), np.float32(328.88187), np.float32(192.3487), np.float32(194.93687), np.float32(328.74045), np.float32(328.70303), np.float32(193.05434), np.float32(327.9306), np.float32(328.08337), np.float32(329.7536), np.float32(327.90866), np.float32(192.03584), np.float32(329.80463), np.float32(327.08682), np.float32(329.37897), np.float32(330.03906), np.float32(328.9728), np.float32(329.0736), np.float32(329.0735), np.float32(193.13396), np.float32(192.8337), np.float32(195.4417), np.float32(194.2532), np.float32(193.15016), np.float32(328.1677), np.float32(328.0755), np.float32(195.52832), np.float32(193.85817), np.float32(192.61111), np.float32(193.18965), np.float32(195.62779), np.float32(194.85416), np.float32(193.72516), np.float32(193.43909), np.float32(194.08191), np.float32(193.56479), np.float32(194.8296), np.float32(195.60474), np.float32(192.86859), np.float32(197.45122), np.float32(333.32272), np.float32(350.12173), np.float32(347.10965), np.float32(351.2823), np.float32(292.95178), np.float32(297.11545), np.float32(297.53574), np.float32(296.19336), np.float32(293.4627), np.float32(292.83035), np.float32(294.26437), np.float32(294.91354), np.float32(294.2147), np.float32(351.95636), np.float32(300.4837), np.float32(292.33365), np.float32(294.4271), np.float32(292.43973), np.float32(351.14844), np.float32(346.15308), np.float32(295.13144), np.float32(292.50864), np.float32(293.02454), np.float32(350.4025), np.float32(347.16183), np.float32(351.04697), np.float32(349.72546), np.float32(292.71576), np.float32(350.97134), np.float32(347.02997), np.float32(350.5141), np.float32(348.64423), np.float32(348.17596), np.float32(351.23093), np.float32(348.31467), np.float32(350.6191), np.float32(347.53067), np.float32(347.69513), np.float32(351.81473), np.float32(440.94852), np.float32(350.06583), np.float32(346.76895), np.float32(440.99326), np.float32(440.97174), np.float32(441.09613), np.float32(441.4985), np.float32(441.60947), np.float32(440.60507), np.float32(441.08224), np.float32(303.8442), np.float32(221.16725), np.float32(225.3966), np.float32(221.72699), np.float32(216.76906), np.float32(226.80449), np.float32(217.0201), np.float32(221.74918), np.float32(216.71796), np.float32(223.93616), np.float32(216.93083), np.float32(217.64827), np.float32(219.53836), np.float32(214.88074), np.float32(221.64093), np.float32(217.68259), np.float32(218.8932), np.float32(217.74829), np.float32(220.25906), np.float32(215.61975), np.float32(220.76544), np.float32(218.10703), np.float32(218.56485), np.float32(218.19879), np.float32(218.39642), np.float32(220.35277), np.float32(216.35909), np.float32(219.02075), np.float32(217.7709), np.float32(219.08568), np.float32(215.84348), np.float32(220.45076), np.float32(218.69598), np.float32(218.17917), np.float32(218.2141), np.float32(217.29556), np.float32(218.15126), np.float32(218.29686), np.float32(220.14488), np.float32(217.78923), np.float32(219.84094), np.float32(216.29445), np.float32(219.43239), np.float32(216.20969), np.float32(220.23657), np.float32(218.84589), np.float32(217.85927), np.float32(218.51523), np.float32(218.0248), np.float32(218.43692), np.float32(215.31888), np.float32(215.61777), np.float32(218.38748), np.float32(217.53644), np.float32(224.11795), np.float32(219.48514), np.float32(216.69708), np.float32(221.86287), np.float32(217.55803), np.float32(220.60835), np.float32(215.89833), np.float32(224.77061), np.float32(215.8288), np.float32(222.6278), np.float32(217.86143), np.float32(217.14194), np.float32(221.74156), np.float32(216.92328), np.float32(221.07149), np.float32(216.22772), np.float32(223.15118), np.float32(215.73096), np.float32(220.13539), np.float32(217.17477), np.float32(219.11781), np.float32(218.11374), np.float32(217.38458), np.float32(221.57101), np.float32(215.61804), np.float32(221.81966), np.float32(217.79431), np.float32(218.85786), np.float32(328.6682), np.float32(328.76443), np.float32(328.5837), np.float32(328.90933), np.float32(329.0255), np.float32(328.5356), np.float32(328.79117), np.float32(329.4913), np.float32(329.1936), np.float32(327.72437), np.float32(220.31377), np.float32(216.62244), np.float32(221.27367), np.float32(218.06477), np.float32(218.61664), np.float32(220.05893), np.float32(214.9016), np.float32(217.72635), np.float32(213.71776), np.float32(215.51), np.float32(212.17953), np.float32(223.30655), np.float32(230.73903), np.float32(212.08644), np.float32(232.52107), np.float32(218.23538), np.float32(219.05278), np.float32(217.92648), np.float32(221.59406), np.float32(222.51108), np.float32(214.5338), np.float32(228.95589), np.float32(213.02094), np.float32(231.3175), np.float32(217.67273), np.float32(220.9686), np.float32(217.1328), np.float32(218.23459), np.float32(226.62216), np.float32(329.13763), np.float32(223.62236), np.float32(215.11429), np.float32(223.01509), np.float32(328.63242), np.float32(328.34518), np.float32(328.7617), np.float32(329.04404), np.float32(330.00824), np.float32(329.01324), np.float32(328.6963), np.float32(328.50452), np.float32(328.7646), np.float32(329.17294), np.float32(329.19583), np.float32(328.75507), np.float32(328.3073), np.float32(328.8065), np.float32(329.2597), np.float32(329.20258), np.float32(329.01035), np.float32(328.44684), np.float32(215.45378), np.float32(220.08994), np.float32(216.19083), np.float32(221.29317), np.float32(217.97018), np.float32(218.45891), np.float32(215.60294), np.float32(779.5859), np.float32(783.0853), np.float32(167.00917), np.float32(174.77937), np.float32(186.01357), np.float32(204.31636), np.float32(259.33527), np.float32(260.9507), np.float32(192.24371), np.float32(195.02943), np.float32(194.18112), np.float32(258.36356), np.float32(259.71942), np.float32(260.8253), np.float32(260.17325), np.float32(260.4201), np.float32(257.969), np.float32(202.05536), np.float32(194.04924), np.float32(188.5869), np.float32(192.47826), np.float32(200.94281), np.float32(257.7164), np.float32(187.6305), np.float32(195.20615), np.float32(201.09326), np.float32(194.56303), np.float32(329.45465), np.float32(193.11919), np.float32(198.29482), np.float32(328.0846), np.float32(328.867), np.float32(192.02153), np.float32(194.97084), np.float32(328.99115), np.float32(328.7367), np.float32(329.1855), np.float32(327.93176), np.float32(328.84583), np.float32(329.7707), np.float32(328.6126), np.float32(328.835), np.float32(329.08557), np.float32(327.13297), np.float32(198.26279), np.float32(329.0166), np.float32(780.80035), np.float32(779.7305), np.float32(200.73312), np.float32(195.97052), np.float32(187.03142), np.float32(212.12872), np.float32(216.60268), np.float32(213.72481), np.float32(228.43243), np.float32(221.59175), np.float32(216.54489), np.float32(224.68289), np.float32(218.08597), np.float32(222.3348), np.float32(214.5321), np.float32(220.14531), np.float32(217.21667), np.float32(219.62842), np.float32(217.97234), np.float32(215.25352), np.float32(224.01532), np.float32(217.02504), np.float32(219.2309), np.float32(216.17534), np.float32(219.0687), np.float32(217.47583), np.float32(218.82402), np.float32(218.75836), np.float32(219.53989), np.float32(218.12321), np.float32(217.72304), np.float32(219.42651), np.float32(216.7736), np.float32(217.81892), np.float32(217.53911), np.float32(220.96101), np.float32(217.12585), np.float32(219.69566), np.float32(218.09303), np.float32(218.27715), np.float32(217.66188), np.float32(218.83707), np.float32(218.82317), np.float32(218.54721), np.float32(219.76634), np.float32(217.22386), np.float32(219.67085), np.float32(215.76942), np.float32(218.69182), np.float32(218.08011), np.float32(219.01315), np.float32(218.99568), np.float32(218.41628), np.float32(217.57788), np.float32(217.3316), np.float32(223.51573), np.float32(215.72046), np.float32(222.39093), np.float32(226.2107), np.float32(215.59392), np.float32(227.5284), np.float32(216.24359), np.float32(221.69513), np.float32(214.811), np.float32(222.19711), np.float32(222.22842), np.float32(216.21754), np.float32(223.63896), np.float32(213.91931), np.float32(224.8832), np.float32(215.60147), np.float32(223.14035), np.float32(215.02061), np.float32(222.64615), np.float32(219.41502), np.float32(217.21443), np.float32(221.95995), np.float32(215.64085), np.float32(220.47556), np.float32(215.08824), np.float32(777.9221), np.float32(777.5692), np.float32(222.22174), np.float32(217.78795), np.float32(221.61208), np.float32(216.29839), np.float32(217.4209), np.float32(777.3631), np.float32(776.644), np.float32(776.97424), np.float32(216.38734), np.float32(226.27502), np.float32(328.24664), np.float32(219.36241), np.float32(776.72186), np.float32(775.8475), np.float32(775.1886), np.float32(774.6704), np.float32(220.89717), np.float32(216.74222), np.float32(223.4094), np.float32(216.53136), np.float32(774.91675), np.float32(775.3429), np.float32(775.5738), np.float32(209.24141), np.float32(329.9084), np.float32(323.10898), np.float32(331.20746), np.float32(331.26157), np.float32(329.1774), np.float32(331.973), np.float32(328.9598), np.float32(326.55484), np.float32(329.54092), np.float32(329.01813), np.float32(328.73297), np.float32(329.8609), np.float32(327.82983), np.float32(328.22168), np.float32(329.71393), np.float32(328.38583), np.float32(328.92114), np.float32(329.2111), np.float32(327.7475), np.float32(329.5307), np.float32(329.23123), np.float32(328.8107), np.float32(329.24014), np.float32(327.87442), np.float32(329.08453), np.float32(329.30447), np.float32(329.23636), np.float32(329.3735), np.float32(328.64777), np.float32(328.7464), np.float32(329.31525), np.float32(329.668), np.float32(328.96683), np.float32(328.51987), np.float32(328.48703), np.float32(329.59952), np.float32(329.82974), np.float32(329.23944), np.float32(329.0219), np.float32(328.2458), np.float32(328.9753), np.float32(777.20355), np.float32(776.52783), np.float32(329.46246), np.float32(328.56973), np.float32(441.20303), np.float32(441.2184), np.float32(440.93753), np.float32(776.22076), np.float32(443.32776), np.float32(234.10547), np.float32(191.02652), np.float32(188.47992), np.float32(190.86479), np.float32(193.77757), np.float32(195.06148), np.float32(194.59482), np.float32(192.44385), np.float32(193.59862), np.float32(194.6966), np.float32(194.33528), np.float32(195.77869), np.float32(194.23267), np.float32(193.2372), np.float32(195.6673), np.float32(193.01105), np.float32(193.9782), np.float32(194.5222), np.float32(193.68152), np.float32(192.79742), np.float32(196.89943), np.float32(195.87772), np.float32(192.68468), np.float32(193.68626), np.float32(193.76364), np.float32(194.57701), np.float32(194.67241), np.float32(193.07031), np.float32(193.9886), np.float32(197.48575), np.float32(193.7498), np.float32(192.63242), np.float32(194.87218), np.float32(194.57727), np.float32(193.70186), np.float32(193.97601), np.float32(194.51645), np.float32(195.7003), np.float32(193.88292), np.float32(193.22755), np.float32(193.91531), np.float32(195.35017), np.float32(194.16748), np.float32(193.44469), np.float32(195.69102), np.float32(195.30612), np.float32(193.59653), np.float32(194.56206), np.float32(195.82472), np.float32(190.43901), np.float32(192.76935), np.float32(212.32417), np.float32(215.95758), np.float32(228.80173), np.float32(218.6253), np.float32(218.35713), np.float32(220.78914), np.float32(219.875), np.float32(219.50908), np.float32(214.85527), np.float32(220.75992), np.float32(217.2358), np.float32(222.134), np.float32(217.23587), np.float32(216.62762), np.float32(220.75363), np.float32(218.02219), np.float32(218.8205), np.float32(217.11455), np.float32(218.97232), np.float32(217.4388), np.float32(218.71233), np.float32(218.24632), np.float32(220.17186), np.float32(217.26021), np.float32(218.33505), np.float32(218.2081), np.float32(217.60353), np.float32(218.9989), np.float32(218.21542), np.float32(218.87282), np.float32(216.46758), np.float32(220.38982), np.float32(217.68216), np.float32(218.3721), np.float32(217.53596), np.float32(218.83168), np.float32(218.68658), np.float32(219.0296), np.float32(217.5448), np.float32(218.24724), np.float32(218.18863), np.float32(217.52194), np.float32(219.87515), np.float32(217.05766), np.float32(219.2801), np.float32(218.45445), np.float32(218.10068), np.float32(217.8431), np.float32(218.1222), np.float32(216.88518), np.float32(217.03287), np.float32(266.18665), np.float32(238.83292), np.float32(215.24408), np.float32(219.51477), np.float32(218.89742), np.float32(217.79874), np.float32(221.62874), np.float32(215.77121), np.float32(226.2295), np.float32(215.31407), np.float32(226.59224), np.float32(216.67296), np.float32(220.00287), np.float32(218.94456), np.float32(218.28903), np.float32(219.58353), np.float32(215.69247), np.float32(222.0442), np.float32(216.06908), np.float32(222.47537), np.float32(216.7518), np.float32(219.40245), np.float32(217.18956), np.float32(219.47235), np.float32(218.82681), np.float32(217.10683), np.float32(220.3662), np.float32(216.88185), np.float32(221.29869), np.float32(215.92725), np.float32(219.86227), np.float32(217.09207), np.float32(219.2564), np.float32(218.3978), np.float32(219.2621), np.float32(218.11028), np.float32(219.00572), np.float32(218.58891), np.float32(216.99228), np.float32(218.64983), np.float32(216.74142), np.float32(220.47119), np.float32(216.47307), np.float32(222.63867), np.float32(217.53622), np.float32(218.32127), np.float32(216.76443), np.float32(219.52408), np.float32(215.61049), np.float32(207.86708), np.float32(222.16547), np.float32(216.75995), np.float32(219.68689), np.float32(233.39911), np.float32(215.25078), np.float32(225.45953), np.float32(215.75194), np.float32(223.11736), np.float32(216.01907), np.float32(220.29549), np.float32(222.4375), np.float32(216.8128), np.float32(225.40865), np.float32(214.58003), np.float32(227.16537), np.float32(214.32625), np.float32(224.6779), np.float32(215.89365), np.float32(220.71152), np.float32(221.14272), np.float32(215.44783), np.float32(221.16911), np.float32(216.64014), np.float32(220.74437), np.float32(214.9019), np.float32(223.1684), np.float32(328.6832), np.float32(329.7859), np.float32(328.84183), np.float32(328.65012), np.float32(328.58072), np.float32(328.53894), np.float32(329.39456), np.float32(328.9877), np.float32(328.91953), np.float32(329.0872), np.float32(328.64966), np.float32(328.71906), np.float32(328.38553), np.float32(328.353), np.float32(328.89233), np.float32(330.23346), np.float32(219.90779), np.float32(219.1321), np.float32(216.62329), np.float32(218.9793), np.float32(775.2233), np.float32(774.6995), np.float32(211.33896), np.float32(526.5612), np.float32(167.0139), np.float32(179.86578), np.float32(185.93495), np.float32(205.8696), np.float32(200.72601), np.float32(194.1999), np.float32(187.95413), np.float32(196.05304), np.float32(197.53511), np.float32(190.32004), np.float32(261.23605), np.float32(780.54724), np.float32(778.96857), np.float32(779.8131), np.float32(782.17346), np.float32(200.37563), np.float32(199.0952), np.float32(189.89255), np.float32(188.1601), np.float32(779.8164), np.float32(780.13776), np.float32(191.01923), np.float32(190.14023), np.float32(197.70062), np.float32(203.2158), np.float32(193.66478), np.float32(779.90625), np.float32(778.15765), np.float32(205.62373), np.float32(190.89275), np.float32(187.70222), np.float32(199.30238), np.float32(205.10555), np.float32(328.3018), np.float32(327.24454), np.float32(329.60416), np.float32(330.18518), np.float32(329.29498), np.float32(327.6493), np.float32(199.3029), np.float32(205.93399), np.float32(328.425), np.float32(328.2582), np.float32(202.64241), np.float32(328.45944), np.float32(327.54605), np.float32(329.23697), np.float32(202.8871), np.float32(201.70264), np.float32(255.41249), np.float32(259.98975), np.float32(260.85757), np.float32(259.93585), np.float32(330.73718), np.float32(197.76807), np.float32(330.79037), np.float32(330.12433), np.float32(328.11258), np.float32(329.22208), np.float32(330.4327), np.float32(328.38968), np.float32(328.32416), np.float32(330.1209), np.float32(328.8999), np.float32(329.084), np.float32(329.41208), np.float32(328.81024), np.float32(329.2476), np.float32(328.838), np.float32(328.57153), np.float32(329.80112), np.float32(329.12552), np.float32(328.20233), np.float32(329.57333), np.float32(329.0755), np.float32(329.00067), np.float32(329.40326), np.float32(328.99228), np.float32(328.6494), np.float32(328.72073), np.float32(329.72195), np.float32(328.67575), np.float32(329.20947), np.float32(328.61157), np.float32(328.86835), np.float32(329.04816), np.float32(328.74512), np.float32(329.0556), np.float32(329.00778), np.float32(782.8495), np.float32(782.6486), np.float32(782.06885), np.float32(782.10516), np.float32(782.3844), np.float32(781.86786), np.float32(781.85236), np.float32(781.9071), np.float32(782.05927), np.float32(781.714), np.float32(781.42303), np.float32(325.34177), np.float32(324.47614), np.float32(331.145), np.float32(330.66833), np.float32(330.94598), np.float32(330.5023), np.float32(328.8546), np.float32(328.06485), np.float32(329.98727), np.float32(329.47693), np.float32(328.20468), np.float32(330.48013), np.float32(328.54446), np.float32(328.86694), np.float32(328.9708), np.float32(329.2451), np.float32(329.35468), np.float32(329.04053), np.float32(328.5651), np.float32(329.22412), np.float32(329.28726), np.float32(329.59836), np.float32(329.04443), np.float32(327.72), np.float32(329.7371), np.float32(329.0559), np.float32(329.51962), np.float32(329.12933), np.float32(328.07794), np.float32(329.54797), np.float32(329.35406), np.float32(328.6102), np.float32(329.69473), np.float32(328.97623), np.float32(328.2195), np.float32(329.05103), np.float32(329.85342), np.float32(329.4302), np.float32(328.60757), np.float32(327.91333), np.float32(330.07693), np.float32(196.46127), np.float32(193.66725), np.float32(191.40799), np.float32(192.62903), np.float32(196.5225), np.float32(195.41614), np.float32(192.62787), np.float32(195.2352), np.float32(522.15155), np.float32(523.3646), np.float32(303.0343), np.float32(181.76082), np.float32(190.33076), np.float32(329.33066), np.float32(331.33868), np.float32(330.25433), np.float32(326.72455), np.float32(329.56955), np.float32(330.38495), np.float32(327.81052), np.float32(329.51886), np.float32(329.50757), np.float32(327.70908), np.float32(329.66553), np.float32(328.6619), np.float32(328.1359), np.float32(330.0815), np.float32(327.95807), np.float32(328.6687), np.float32(330.11926), np.float32(328.57883), np.float32(329.52847), np.float32(328.3876), np.float32(327.86398), np.float32(329.26627), np.float32(329.56635), np.float32(329.4958), np.float32(328.5544), np.float32(328.79636), np.float32(329.78726), np.float32(328.57635), np.float32(329.9652), np.float32(328.9567), np.float32(328.26306), np.float32(329.01025), np.float32(329.0275), np.float32(329.77167), np.float32(329.48203), np.float32(328.38602), np.float32(328.59937), np.float32(330.094), np.float32(328.85742), np.float32(330.1428), np.float32(329.3421), np.float32(327.40222), np.float32(331.24527), np.float32(329.22623), np.float32(194.55603), np.float32(198.49017), np.float32(443.08908), np.float32(348.61276), np.float32(347.90466), np.float32(349.98526), np.float32(346.88925), np.float32(295.51126), np.float32(298.95926), np.float32(292.38092), np.float32(295.7025), np.float32(300.66058), np.float32(293.32788), np.float32(296.2866), np.float32(350.6325), np.float32(351.13388), np.float32(346.11493), np.float32(351.8313), np.float32(345.78473), np.float32(351.17728), np.float32(349.88293), np.float32(346.10785), np.float32(351.83832), np.float32(346.87134), np.float32(352.19153), np.float32(348.59894), np.float32(347.6482), np.float32(351.67953), np.float32(348.0417), np.float32(350.45016), np.float32(348.64978), np.float32(348.39606), np.float32(351.8692), np.float32(348.25046), np.float32(349.3619), np.float32(348.659), np.float32(349.74954), np.float32(441.39804), np.float32(346.3263), np.float32(350.4133), np.float32(348.92224), np.float32(441.07117), np.float32(440.83908), np.float32(441.90622), np.float32(440.81918), np.float32(439.93753), np.float32(441.66492), np.float32(441.29514), np.float32(441.03476), np.float32(441.10474), np.float32(441.6153), np.float32(215.45653), np.float32(237.36494), np.float32(235.28654), np.float32(270.35284), np.float32(325.60852), np.float32(329.42657), np.float32(333.5065), np.float32(328.22818), np.float32(329.1583), np.float32(328.071), np.float32(327.5151), np.float32(330.61255), np.float32(328.54825), np.float32(328.49933), np.float32(329.7071), np.float32(328.0584), np.float32(330.0799), np.float32(329.07254), np.float32(328.46817), np.float32(329.16254), np.float32(328.01685), np.float32(329.44568), np.float32(329.2041), np.float32(328.5617), np.float32(329.4717), np.float32(328.41806), np.float32(329.1662), np.float32(329.15002), np.float32(328.6638), np.float32(329.54272), np.float32(328.5625), np.float32(328.5369), np.float32(329.3406), np.float32(329.02298), np.float32(329.1127), np.float32(329.0925), np.float32(328.24133), np.float32(328.9342), np.float32(328.89056), np.float32(329.53934), np.float32(329.2325), np.float32(327.74713), np.float32(329.46677), np.float32(329.9659), np.float32(328.46555), np.float32(217.88892), np.float32(328.2552), np.float32(217.67122), np.float32(219.38655), np.float32(220.82019), np.float32(214.43617), np.float32(216.3182), np.float32(210.46268), np.float32(225.70502), np.float32(215.73987), np.float32(227.1227), np.float32(228.66095), np.float32(216.06871), np.float32(221.12096), np.float32(215.19467), np.float32(228.56468), np.float32(213.92131), np.float32(227.33263), np.float32(217.27077), np.float32(219.21422), np.float32(224.19174), np.float32(215.49867), np.float32(222.88206), np.float32(215.49951), np.float32(225.00179), np.float32(215.56729), np.float32(222.23947), np.float32(216.27916), np.float32(219.55704), np.float32(218.35406), np.float32(218.05246), np.float32(222.1928), np.float32(215.15666), np.float32(222.01404), np.float32(216.48987), np.float32(220.54066), np.float32(216.73558), np.float32(328.35992), np.float32(328.8698), np.float32(328.75912), np.float32(219.49269), np.float32(329.04953), np.float32(328.96622), np.float32(329.26657), np.float32(329.04285), np.float32(328.5006), np.float32(328.38702), np.float32(329.06607), np.float32(329.59097), np.float32(328.71896), np.float32(775.27594), np.float32(775.16235), np.float32(775.24646), np.float32(774.60614), np.float32(220.73637), np.float32(215.85744), np.float32(213.55562), np.float32(776.1143), np.float32(778.7616), np.float32(659.52356), np.float32(659.2765), np.float32(240.29312), np.float32(261.2936), np.float32(240.58167), np.float32(215.62411), np.float32(237.41556), np.float32(257.84723), np.float32(256.99112), np.float32(256.1063), np.float32(261.47513), np.float32(246.2478), np.float32(329.21713), np.float32(777.2437), np.float32(777.2265), np.float32(330.77518), np.float32(327.79697), np.float32(328.0372), np.float32(329.96484), np.float32(328.7975), np.float32(329.5244), np.float32(328.86624), np.float32(327.87912), np.float32(329.405), np.float32(328.77884), np.float32(329.7021), np.float32(329.37827), np.float32(327.5911), np.float32(328.79892), np.float32(328.5232), np.float32(329.61508), np.float32(330.23257), np.float32(328.14264), np.float32(327.48715), np.float32(328.317), np.float32(329.54852), np.float32(330.1011), np.float32(328.43066), np.float32(327.2243), np.float32(328.78806), np.float32(329.4501), np.float32(329.28955), np.float32(329.29193), np.float32(327.34332), np.float32(326.8018), np.float32(329.43704), np.float32(519.8152), np.float32(520.1564), np.float32(201.66663), np.float32(186.31117), np.float32(188.82823), np.float32(193.94595), np.float32(194.96704), np.float32(194.14664), np.float32(194.78494), np.float32(193.39221), np.float32(193.43047), np.float32(192.97725), np.float32(196.01552), np.float32(196.69266), np.float32(193.53348), np.float32(194.09119), np.float32(194.7203), np.float32(194.59581), np.float32(193.79964), np.float32(192.7636), np.float32(194.3046), np.float32(329.22742), np.float32(328.6242), np.float32(192.82942), np.float32(194.04202), np.float32(328.18518), np.float32(328.85812), np.float32(194.58418), np.float32(195.42154), np.float32(194.02455), np.float32(193.25035), np.float32(194.95349), np.float32(194.52817), np.float32(193.96973), np.float32(193.43965), np.float32(193.9898), np.float32(196.16528), np.float32(195.33612), np.float32(192.7049), np.float32(194.18576), np.float32(196.3935), np.float32(194.00839), np.float32(191.85199), np.float32(195.34413), np.float32(197.05774), np.float32(193.6913), np.float32(191.993), np.float32(195.61095), np.float32(198.14474), np.float32(196.04675), np.float32(193.03958), np.float32(215.93356), np.float32(215.65646), np.float32(215.81985), np.float32(230.34395), np.float32(215.67102), np.float32(220.76826), np.float32(220.9854), np.float32(218.04523), np.float32(221.17548), np.float32(216.28082), np.float32(219.42067), np.float32(214.78134), np.float32(223.06848), np.float32(215.73091), np.float32(218.35326), np.float32(219.42177), np.float32(218.62383), np.float32(220.18718), np.float32(216.34175), np.float32(218.58124), np.float32(218.0141), np.float32(218.26645), np.float32(218.50235), np.float32(219.86679), np.float32(216.92505), np.float32(220.4234), np.float32(217.57991), np.float32(216.38646), np.float32(218.36018), np.float32(219.66074), np.float32(219.95274), np.float32(216.2472), np.float32(220.13098), np.float32(217.5088), np.float32(218.38794), np.float32(216.12164), np.float32(220.3785), np.float32(219.05624), np.float32(219.57552), np.float32(218.08939), np.float32(217.33014), np.float32(218.70796), np.float32(217.65076), np.float32(219.31348), np.float32(217.65202), np.float32(219.47987), np.float32(217.77219), np.float32(218.8861), np.float32(216.99603), np.float32(217.74677), np.float32(217.63043), np.float32(219.5394), np.float32(217.36713), np.float32(217.23512), np.float32(228.87294), np.float32(212.55525), np.float32(227.50314), np.float32(217.24384), np.float32(220.22997), np.float32(217.7251), np.float32(219.21626), np.float32(222.82585), np.float32(214.28833), np.float32(226.4887), np.float32(213.1169), np.float32(226.58878), np.float32(216.36244), np.float32(220.36444), np.float32(217.66226), np.float32(218.77225), np.float32(220.27629), np.float32(216.71278), np.float32(221.67183), np.float32(215.85985), np.float32(221.82608), np.float32(215.43396), np.float32(222.69577), np.float32(216.44131), np.float32(219.9007), np.float32(220.84453), np.float32(216.78537), np.float32(221.12317), np.float32(215.39954), np.float32(221.94818), np.float32(216.07625), np.float32(220.76236), np.float32(218.27458), np.float32(221.4601), np.float32(217.3705), np.float32(217.66971), np.float32(219.43031), np.float32(217.13164), np.float32(219.83049), np.float32(218.31892), np.float32(219.81308), np.float32(218.12271), np.float32(220.757), np.float32(216.00261), np.float32(219.66066), np.float32(216.00673), np.float32(225.1145), np.float32(230.94472), np.float32(342.63055), np.float32(326.02206), np.float32(330.38626), np.float32(331.2711), np.float32(329.89816), np.float32(331.1384), np.float32(330.27365), np.float32(327.15054), np.float32(328.66522), np.float32(329.83725), np.float32(328.30347), np.float32(329.00186), np.float32(328.51608), np.float32(328.01004), np.float32(330.13385), np.float32(327.83237), np.float32(328.50656), np.float32(330.26364), np.float32(328.2582), np.float32(328.3915), np.float32(328.68634), np.float32(329.17654), np.float32(329.74637), np.float32(328.16284), np.float32(328.75113), np.float32(329.0838), np.float32(329.14618), np.float32(329.33112), np.float32(328.9831), np.float32(328.68927), np.float32(329.23697), np.float32(329.423), np.float32(329.63733), np.float32(328.79062), np.float32(328.17093), np.float32(329.39426), np.float32(329.23816), np.float32(328.83005), np.float32(329.62994), np.float32(328.22003), np.float32(327.5261), np.float32(329.83182), np.float32(328.71518), np.float32(330.0896), np.float32(329.11905), np.float32(326.7457), np.float32(522.4313), np.float32(522.04614), np.float32(520.7572), np.float32(242.03485), np.float32(214.3217), np.float32(187.91275), np.float32(188.54279), np.float32(194.37099), np.float32(196.06146), np.float32(194.8328), np.float32(192.87918), np.float32(192.51343), np.float32(194.55751), np.float32(193.33182), np.float32(193.72346), np.float32(196.92679), np.float32(194.17586), np.float32(193.73572), np.float32(193.92117), np.float32(194.70895), np.float32(195.4463), np.float32(193.06561), np.float32(192.6842), np.float32(197.15865), np.float32(201.3958), np.float32(189.8426), np.float32(191.3854), np.float32(196.18053), np.float32(194.96231), np.float32(191.9966), np.float32(193.9875), np.float32(194.31802), np.float32(197.62726), np.float32(193.02759), np.float32(192.385), np.float32(193.94408), np.float32(196.82158), np.float32(193.06575), np.float32(192.47522), np.float32(196.07245), np.float32(196.19092), np.float32(193.89424), np.float32(193.03001), np.float32(193.74467), np.float32(195.68355), np.float32(194.7252), np.float32(193.00586), np.float32(194.48189), np.float32(195.89037), np.float32(194.46523), np.float32(192.56241), np.float32(195.67317), np.float32(194.55853), np.float32(194.02733), np.float32(202.52226), np.float32(193.67554), np.float32(187.61519), np.float32(329.32034), np.float32(330.36835), np.float32(331.24402), np.float32(329.24112), np.float32(328.21054), np.float32(328.79022), np.float32(328.57144), np.float32(328.7329), np.float32(328.48877), np.float32(328.50085), np.float32(328.20447), np.float32(329.08838), np.float32(329.56653), np.float32(328.83197), np.float32(328.3212), np.float32(329.15442), np.float32(328.90698), np.float32(329.38647), np.float32(329.04947), np.float32(328.40662), np.float32(328.6379), np.float32(328.7263), np.float32(329.13846), np.float32(329.64853), np.float32(328.87634), np.float32(328.62982), np.float32(328.82187), np.float32(328.16663), np.float32(329.90585), np.float32(329.01636), np.float32(328.74915), np.float32(329.22708), np.float32(328.753), np.float32(328.44357), np.float32(329.35825), np.float32(329.05554), np.float32(329.18988), np.float32(329.0169), np.float32(328.0611), np.float32(215.88113), np.float32(217.68745), np.float32(216.39082), np.float32(220.13576), np.float32(774.1618), np.float32(773.97504), np.float32(773.21967), np.float32(213.62415), np.float32(221.50447), np.float32(215.24352), np.float32(219.62251), np.float32(230.26158), np.float32(330.2286), np.float32(231.58792), np.float32(218.50134), np.float32(219.04991), np.float32(216.6526), np.float32(220.16203), np.float32(224.29707), np.float32(214.54831), np.float32(225.7345), np.float32(327.6668), np.float32(328.585), np.float32(329.03113), np.float32(329.06714), np.float32(329.34982), np.float32(327.7269), np.float32(328.50528), np.float32(329.6916), np.float32(329.40002), np.float32(328.73447), np.float32(328.22653), np.float32(328.15393), np.float32(328.89642), np.float32(329.00778), np.float32(329.20087), np.float32(329.29877), np.float32(328.06317), np.float32(328.36435), np.float32(329.1029), np.float32(329.1811), np.float32(329.0307), np.float32(328.70807), np.float32(328.41962), np.float32(328.77682), np.float32(328.95325), np.float32(328.56598), np.float32(659.20795), np.float32(774.4554), np.float32(774.48566), np.float32(773.1816), np.float32(659.4946), np.float32(658.4571), np.float32(658.87415), np.float32(771.2803), np.float32(772.6076), np.float32(772.98267), np.float32(772.8367), np.float32(771.8293), np.float32(321.24567), np.float32(258.51318), np.float32(254.824), np.float32(329.45914), np.float32(330.72647), np.float32(331.3346), np.float32(327.7153), np.float32(327.8306), np.float32(329.30304), np.float32(328.47702), np.float32(329.42505), np.float32(329.11484), np.float32(327.14395), np.float32(328.66565), np.float32(329.04233), np.float32(328.45874), np.float32(329.22504), np.float32(328.4212), np.float32(328.0693), np.float32(329.37195), np.float32(328.32684), np.float32(329.72543), np.float32(329.20187), np.float32(327.19147), np.float32(328.9212), np.float32(329.04065), np.float32(329.61026), np.float32(329.24594), np.float32(328.3271), np.float32(328.4522), np.float32(328.54498), np.float32(329.4037), np.float32(329.80966), np.float32(328.9148), np.float32(327.1921), np.float32(329.27704), np.float32(329.53647), np.float32(329.81433), np.float32(329.04755), np.float32(326.91058), np.float32(328.09335), np.float32(329.09573), np.float32(775.79596), np.float32(776.5982), np.float32(776.7323), np.float32(776.4848), np.float32(521.49664), np.float32(520.5362), np.float32(235.26746), np.float32(213.47362), np.float32(193.67842), np.float32(187.62764), np.float32(189.48369), np.float32(194.12373), np.float32(197.23468), np.float32(196.54388), np.float32(192.27834), np.float32(191.84227), np.float32(194.94673), np.float32(192.79216), np.float32(194.20973), np.float32(195.41681), np.float32(195.94603), np.float32(194.67111), np.float32(193.93086), np.float32(193.74301), np.float32(195.28465), np.float32(192.87013), np.float32(192.74287), np.float32(196.60252), np.float32(197.51057), np.float32(192.96007), np.float32(192.08339), np.float32(195.37035), np.float32(195.64323), np.float32(193.75647), np.float32(190.42929), np.float32(196.47372), np.float32(199.69493), np.float32(194.56293), np.float32(190.32333), np.float32(195.81966), np.float32(197.4802), np.float32(192.68091), np.float32(191.69539), np.float32(197.38402), np.float32(198.74089), np.float32(192.77513), np.float32(191.38042), np.float32(196.19765), np.float32(196.97444), np.float32(192.91661), np.float32(192.724), np.float32(195.8867), np.float32(196.4565), np.float32(191.15483), np.float32(195.05579), np.float32(198.52647), np.float32(193.9597), np.float32(206.51982), np.float32(257.997), np.float32(268.6098), np.float32(265.37915), np.float32(255.04932), np.float32(331.23215), np.float32(330.67947), np.float32(329.8316), np.float32(327.86865), np.float32(329.18457), np.float32(328.63696), np.float32(329.9854), np.float32(328.29373), np.float32(329.77377), np.float32(329.26187), np.float32(329.09973), np.float32(328.86014), np.float32(329.76804), np.float32(328.94547), np.float32(328.1778), np.float32(330.27127), np.float32(328.231), np.float32(329.0431), np.float32(329.78177), np.float32(327.91473), np.float32(329.44772), np.float32(329.47235), np.float32(328.64734), np.float32(331.15164), np.float32(858.5641), np.float32(866.84247), np.float32(876.4821), np.float32(891.9823), np.float32(886.8735), np.float32(887.4545), np.float32(898.9397), np.float32(912.21826), np.float32(928.60205), np.float32(954.9788), np.float32(965.8644), np.float32(974.9253), np.float32(980.5301), np.float32(984.2375), np.float32(984.301), np.float32(982.8868), np.float32(982.8928), np.float32(985.58136), np.float32(988.41364), np.float32(991.5867), np.float32(660.47876), np.float32(668.98926), np.float32(683.32166), np.float32(352.92618), np.float32(188.18367), np.float32(372.8189), np.float32(379.88635), np.float32(393.71948), np.float32(396.73328), np.float32(395.34924), np.float32(393.8027), np.float32(392.38776), np.float32(391.28903), np.float32(391.16928), np.float32(390.04315), np.float32(389.72952), np.float32(391.98093), np.float32(391.70255), np.float32(390.67618), np.float32(390.3505), np.float32(1561.94), np.float32(1563.5441), np.float32(1565.1381), np.float32(1567.7712), np.float32(1568.4601), np.float32(1568.6099), np.float32(1568.3164), np.float32(1568.4448), np.float32(1569.3789), np.float32(1567.0989), np.float32(1553.3217), np.float32(782.9162), np.float32(1541.4993), np.float32(1546.1863), np.float32(1551.1957), np.float32(1554.4639), np.float32(1167.9368), np.float32(1164.3237), np.float32(1160.4481), np.float32(1161.3969), np.float32(1165.0288), np.float32(1168.717), np.float32(1173.1582), np.float32(1184.5864), np.float32(1195.4829), np.float32(1200.2336), np.float32(1213.5961), np.float32(1222.3344), np.float32(1242.0537), np.float32(1249.7582), np.float32(1250.302), np.float32(1240.578), np.float32(1218.197), np.float32(1177.7855), np.float32(1141.0685), np.float32(1125.9028), np.float32(1122.5354), np.float32(1127.9872), np.float32(1148.3477), np.float32(1181.6805), np.float32(1204.6624), np.float32(810.9356), np.float32(820.97485), np.float32(823.48395), np.float32(816.4203), np.float32(815.90765), np.float32(795.6845), np.float32(784.4203), np.float32(777.239), np.float32(773.886), np.float32(775.54034), np.float32(392.36307), np.float32(392.2213), np.float32(392.2226), np.float32(389.9584), np.float32(384.46393), np.float32(385.22562), np.float32(385.7832), np.float32(383.29532), np.float32(375.47083), np.float32(364.95694), np.float32(351.53488), np.float32(354.4617), np.float32(675.8287), np.float32(787.4856), np.float32(331.44708), np.float32(653.37897), np.float32(646.9413), np.float32(646.4714), np.float32(649.45355), np.float32(651.84076), np.float32(330.6082), np.float32(328.68076), np.float32(331.23492), np.float32(331.1435), np.float32(330.76193), np.float32(329.4359), np.float32(328.71613), np.float32(327.8137), np.float32(328.40683), np.float32(325.23154), np.float32(325.3634), np.float32(318.86383), np.float32(311.97357), np.float32(350.02765), np.float32(353.3696), np.float32(349.3046), np.float32(351.35193), np.float32(588.42426), np.float32(587.9704), np.float32(587.7067), np.float32(587.5956), np.float32(588.6357), np.float32(589.15344), np.float32(587.7763), np.float32(586.0163), np.float32(582.5732), np.float32(580.6241), np.float32(580.8279), np.float32(582.9082), np.float32(584.69086), np.float32(585.7751), np.float32(351.6596), np.float32(342.96286), np.float32(280.8912), np.float32(299.93146), np.float32(296.82443), np.float32(302.99487), np.float32(288.4578), np.float32(282.94772), np.float32(284.21252), np.float32(268.50412), np.float32(542.8847), np.float32(272.99127), np.float32(285.70105), np.float32(301.27454), np.float32(291.12167), np.float32(296.51614), np.float32(299.7556), np.float32(293.6748), np.float32(292.36884), np.float32(353.53436), np.float32(348.28888), np.float32(582.19214), np.float32(584.7379), np.float32(587.24457), np.float32(352.14346), np.float32(348.0995), np.float32(350.38754), np.float32(348.68515), np.float32(440.90155), np.float32(441.3676), np.float32(442.60266), np.float32(211.62297), np.float32(227.92458), np.float32(233.41864), np.float32(329.82983), np.float32(252.73593), np.float32(248.12076), np.float32(262.4503), np.float32(265.85876), np.float32(270.93912), np.float32(262.29272), np.float32(266.5131), np.float32(261.60046), np.float32(265.70447), np.float32(263.3988), np.float32(276.85883), np.float32(278.13748), np.float32(292.13565), np.float32(301.86716), np.float32(290.30774), np.float32(304.90585), np.float32(304.62827), np.float32(294.29388), np.float32(304.17847), np.float32(301.6711), np.float32(286.52106), np.float32(298.43918), np.float32(285.82803), np.float32(291.29535), np.float32(287.2568), np.float32(287.3516), np.float32(289.12384), np.float32(278.29422), np.float32(259.72595), np.float32(267.42282), np.float32(256.68387), np.float32(259.5462), np.float32(233.61273), np.float32(227.80107), np.float32(228.93756), np.float32(216.94676), np.float32(214.1597), np.float32(216.60115), np.float32(216.94444), np.float32(219.42958), np.float32(221.8029), np.float32(222.29932), np.float32(217.82123), np.float32(216.14078), np.float32(215.72372), np.float32(213.36708), np.float32(220.17212), np.float32(293.46622), np.float32(325.2478), np.float32(331.86148), np.float32(230.37502), np.float32(215.2402), np.float32(256.84897), np.float32(443.5195), np.float32(446.0185), np.float32(447.51877), np.float32(447.4834), np.float32(446.05917), np.float32(443.66977), np.float32(440.32355), np.float32(438.4679), np.float32(437.3948), np.float32(435.46347), np.float32(328.8864), np.float32(329.0878), np.float32(327.70062), np.float32(328.14435), np.float32(329.02643), np.float32(329.9343), np.float32(328.33008), np.float32(328.18063), np.float32(328.09744), np.float32(329.66266), np.float32(474.1985), np.float32(473.7597), np.float32(236.70631), np.float32(228.01218), np.float32(226.19952), np.float32(328.4985), np.float32(219.56221), np.float32(327.2914), np.float32(327.55017), np.float32(445.6798), np.float32(444.33264), np.float32(444.836), np.float32(776.6142), np.float32(775.66754), np.float32(775.6362), np.float32(327.79742), np.float32(331.21255), np.float32(327.71152), np.float32(774.6745), np.float32(775.59283), np.float32(775.41614), np.float32(219.03647), np.float32(212.37326), np.float32(429.70306), np.float32(319.95135), np.float32(329.06116), np.float32(331.151), np.float32(326.78943), np.float32(331.85498), np.float32(329.8248), np.float32(326.9961), np.float32(328.50458), np.float32(329.49966), np.float32(328.20987), np.float32(328.15125), np.float32(329.95944), np.float32(327.416), np.float32(329.29932), np.float32(329.24292), np.float32(328.39783), np.float32(328.5437), np.float32(328.62323), np.float32(328.81192), np.float32(328.95526), np.float32(328.70996), np.float32(328.79773), np.float32(329.14313), np.float32(328.6744), np.float32(329.0365), np.float32(329.0809), np.float32(329.31168), np.float32(328.65143), np.float32(328.36572), np.float32(328.99597), np.float32(329.6703), np.float32(328.68326), np.float32(328.94937), np.float32(328.7613), np.float32(328.2115), np.float32(329.8153), np.float32(329.22043), np.float32(328.70255), np.float32(329.36697), np.float32(328.04425), np.float32(329.59924), np.float32(329.86462), np.float32(329.4627), np.float32(328.82062), np.float32(328.7422), np.float32(775.7116), np.float32(659.23267), np.float32(657.8117), np.float32(657.12646), np.float32(662.49506), np.float32(168.61435), np.float32(178.16125), np.float32(186.8811), np.float32(191.18701), np.float32(198.41745), np.float32(195.99078), np.float32(191.6198), np.float32(192.5389), np.float32(192.9543), np.float32(191.3667), np.float32(260.35907), np.float32(263.73407), np.float32(193.4946), np.float32(194.79799), np.float32(262.3674), np.float32(193.60399), np.float32(195.89091), np.float32(192.65231), np.float32(189.30904), np.float32(329.53827), np.float32(327.89737), np.float32(329.6178), np.float32(330.91483), np.float32(327.17932), np.float32(329.37085), np.float32(329.78433), np.float32(328.51776), np.float32(329.47983), np.float32(328.99826), np.float32(328.4752), np.float32(329.80032), np.float32(329.0926), np.float32(329.20407), np.float32(328.9758), np.float32(328.21838), np.float32(329.1416), np.float32(329.45422), np.float32(328.48154), np.float32(328.33072), np.float32(328.90625), np.float32(329.6382), np.float32(329.3126), np.float32(329.502), np.float32(329.23105), np.float32(327.8163), np.float32(329.14865), np.float32(658.82196), np.float32(658.4059), np.float32(656.88257), np.float32(657.5638), np.float32(215.26526), np.float32(208.70483), np.float32(224.28772), np.float32(226.42162), np.float32(215.19025), np.float32(221.43477), np.float32(216.63864), np.float32(225.477), np.float32(215.96869), np.float32(219.72037), np.float32(215.27022), np.float32(220.75742), np.float32(218.63199), np.float32(214.11963), np.float32(221.51878), np.float32(218.69649), np.float32(220.67357), np.float32(215.60057), np.float32(218.75859), np.float32(217.574), np.float32(220.00133), np.float32(217.0104), np.float32(219.8572), np.float32(218.41052), np.float32(218.34949), np.float32(219.68796), np.float32(216.08487), np.float32(217.71785), np.float32(218.36424), np.float32(220.97498), np.float32(215.87242), np.float32(221.15044), np.float32(218.58168), np.float32(217.2906), np.float32(217.03651), np.float32(218.2417), np.float32(219.49933), np.float32(217.79874), np.float32(219.74257), np.float32(218.15266), np.float32(219.28326), np.float32(215.71545), np.float32(220.52466), np.float32(217.82312), np.float32(218.55994), np.float32(217.98505), np.float32(218.07242), np.float32(218.51256), np.float32(216.67316), np.float32(221.84431), np.float32(226.91577), np.float32(219.38536), np.float32(220.08307), np.float32(219.48468), np.float32(216.75864), np.float32(231.94896), np.float32(214.59848), np.float32(221.88132), np.float32(214.65244), np.float32(226.38594), np.float32(218.46346), np.float32(217.8012), np.float32(232.83336), np.float32(329.2955), np.float32(329.67365), np.float32(328.09808), np.float32(329.0454), np.float32(330.44925), np.float32(329.22394), np.float32(328.6808), np.float32(329.1118), np.float32(328.18558), np.float32(329.80798), np.float32(329.63657), np.float32(328.05713), np.float32(329.20517), np.float32(328.7199), np.float32(330.8329), np.float32(329.49094), np.float32(327.33484), np.float32(329.1654), np.float32(329.0013), np.float32(328.47174), np.float32(329.0725), np.float32(329.04968), np.float32(328.96857), np.float32(328.9552), np.float32(329.41675), np.float32(329.32755), np.float32(328.6142), np.float32(328.61456), np.float32(329.02304), np.float32(329.18707), np.float32(329.60806), np.float32(328.95804), np.float32(328.45587), np.float32(328.7406), np.float32(329.01453), np.float32(328.94498), np.float32(328.48798), np.float32(229.89037), np.float32(216.5965), np.float32(168.08376), np.float32(237.3895), np.float32(330.32104), np.float32(331.8237), np.float32(330.51727), np.float32(328.05115), np.float32(327.6775), np.float32(329.50543), np.float32(328.76852), np.float32(328.5324), np.float32(328.6864), np.float32(328.09702), np.float32(328.77298), np.float32(329.27832), np.float32(328.45718), np.float32(328.79123), np.float32(328.1929), np.float32(329.03146), np.float32(328.8352), np.float32(328.65747), np.float32(328.87628), np.float32(328.6719), np.float32(329.0482), np.float32(328.42386), np.float32(328.7831), np.float32(329.32104), np.float32(329.49023), np.float32(328.82828), np.float32(328.73483), np.float32(328.77316), np.float32(329.0081), np.float32(329.33038), np.float32(328.61563), np.float32(328.977), np.float32(328.91925), np.float32(329.2819), np.float32(328.83813), np.float32(328.79886), np.float32(328.74164), np.float32(329.01535), np.float32(440.81625), np.float32(223.2692), np.float32(216.20233), np.float32(219.88066), np.float32(218.49152), np.float32(441.7773), np.float32(441.45956), np.float32(440.9356), np.float32(214.84166), np.float32(169.84009), np.float32(172.05829), np.float32(186.33606), np.float32(187.86095), np.float32(198.31982), np.float32(200.61914), np.float32(197.04237), np.float32(188.54448), np.float32(193.84764), np.float32(198.14532), np.float32(257.0031), np.float32(264.01822), np.float32(253.77646), np.float32(201.80879), np.float32(197.50998), np.float32(187.77017), np.float32(200.4536), np.float32(199.89426), np.float32(191.2002), np.float32(186.07393), np.float32(205.97363), np.float32(206.64224), np.float32(193.47421), np.float32(256.17035), np.float32(201.22049), np.float32(207.25777), np.float32(193.7392), np.float32(328.9301), np.float32(208.7813), np.float32(206.56245), np.float32(191.74097), np.float32(185.9545), np.float32(207.00865), np.float32(208.312), np.float32(329.62015), np.float32(327.7033), np.float32(208.82802), np.float32(210.29572), np.float32(328.04648), np.float32(188.81769), np.float32(205.97139), np.float32(207.05055), np.float32(658.0139), np.float32(657.8336), np.float32(208.87828), np.float32(212.21397), np.float32(659.00507), np.float32(658.6303), np.float32(201.17325), np.float32(201.2888), np.float32(285.43192), np.float32(257.13477), np.float32(234.52112), np.float32(214.79768), np.float32(219.4987), np.float32(219.61887), np.float32(220.4664), np.float32(217.79399), np.float32(217.36673), np.float32(222.72786), np.float32(216.07565), np.float32(224.83246), np.float32(217.15671), np.float32(218.89948), np.float32(219.59264), np.float32(217.78705), np.float32(216.3372), np.float32(328.24857), np.float32(218.29318), np.float32(217.50653), np.float32(221.14252), np.float32(217.4132), np.float32(218.72607), np.float32(215.53027), np.float32(220.35886), np.float32(217.86838), np.float32(217.81581), np.float32(217.60664), np.float32(219.48602), np.float32(218.50763), np.float32(216.73816), np.float32(219.61386), np.float32(217.1638), np.float32(218.6472), np.float32(217.62076), np.float32(218.38953), np.float32(217.16743), np.float32(220.01007), np.float32(217.57506), np.float32(218.53906), np.float32(217.64645), np.float32(218.52986), np.float32(219.30801), np.float32(216.44258), np.float32(218.75668), np.float32(218.84964), np.float32(218.82353), np.float32(217.54001), np.float32(220.09695), np.float32(217.59271), np.float32(227.52472), np.float32(271.88284), np.float32(325.255), np.float32(332.5329), np.float32(329.05347), np.float32(329.72046), np.float32(331.17203), np.float32(328.2955), np.float32(327.70517), np.float32(330.16373), np.float32(328.92474), np.float32(327.57327), np.float32(330.24493), np.float32(328.24847), np.float32(328.33548), np.float32(329.39233), np.float32(329.05222), np.float32(329.22806), np.float32(328.78992), np.float32(328.4302), np.float32(329.06683), np.float32(328.86362), np.float32(329.11066), np.float32(329.12653), np.float32(327.96417), np.float32(329.12238), np.float32(329.8445), np.float32(329.30292), np.float32(328.78778), np.float32(328.18994), np.float32(328.43198), np.float32(328.57755), np.float32(328.82898), np.float32(329.365), np.float32(328.96185), np.float32(328.57254), np.float32(329.11148), np.float32(328.92474), np.float32(219.80298), np.float32(216.14983), np.float32(218.61751), np.float32(216.87192), np.float32(219.54579), np.float32(216.682), np.float32(222.12325), np.float32(215.71329), np.float32(220.25175), np.float32(216.37569), np.float32(775.0182), np.float32(774.77997), np.float32(775.6134), np.float32(259.1601), np.float32(258.89502), np.float32(330.3381), np.float32(330.82907), np.float32(330.2562), np.float32(330.0261), np.float32(328.23114), np.float32(327.73367), np.float32(329.1246), np.float32(328.8357), np.float32(328.9218), np.float32(328.47812), np.float32(328.485), np.float32(329.36728), np.float32(328.44827), np.float32(327.85776), np.float32(328.7396), np.float32(329.13168), np.float32(328.29468), np.float32(329.03613), np.float32(329.32162), np.float32(328.85724), np.float32(328.49606), np.float32(328.43744), np.float32(328.97238), np.float32(329.34308), np.float32(329.01437), np.float32(328.91623), np.float32(329.17722), np.float32(328.46164), np.float32(329.15677), np.float32(329.21396), np.float32(328.95694), np.float32(328.64832), np.float32(328.79053), np.float32(329.13123), np.float32(329.2552), np.float32(330.0596), np.float32(330.15338), np.float32(325.55377), np.float32(333.0317), np.float32(330.24384), np.float32(330.41452), np.float32(327.3371), np.float32(327.59744), np.float32(331.101), np.float32(658.85187), np.float32(658.6949), np.float32(652.90173), np.float32(206.3643), np.float32(191.80106), np.float32(185.7788), np.float32(200.5818), np.float32(196.69519), np.float32(192.84093), np.float32(192.95154), np.float32(194.48782), np.float32(193.28308), np.float32(192.63295), np.float32(195.47873), np.float32(198.15523), np.float32(192.45657), np.float32(193.46233), np.float32(194.88316), np.float32(195.34073), np.float32(193.55435), np.float32(192.46031), np.float32(194.31664), np.float32(195.10457), np.float32(196.09822), np.float32(191.87546), np.float32(194.50417), np.float32(196.33676), np.float32(192.96004), np.float32(193.1429), np.float32(481.34814), np.float32(469.79767), np.float32(890.6001), np.float32(860.9907), np.float32(832.9783), np.float32(752.167), np.float32(729.1885), np.float32(1293.673), np.float32(1305.2721), np.float32(1317.0541), np.float32(1322.109), np.float32(1320.4563), np.float32(1316.9275), np.float32(1313.3488), np.float32(1314.7887), np.float32(657.8653), np.float32(659.7263), np.float32(659.08453), np.float32(656.0934), np.float32(655.817), np.float32(654.51385), np.float32(653.3367), np.float32(652.88196), np.float32(652.82184), np.float32(650.1119), np.float32(638.98206), np.float32(631.1685), np.float32(622.2771), np.float32(623.5547), np.float32(627.6931), np.float32(320.86682), np.float32(318.04163), np.float32(329.43555), np.float32(346.03687), np.float32(372.97626), np.float32(370.68106), np.float32(332.0014), np.float32(328.35803), np.float32(330.5226), np.float32(329.82852), np.float32(328.76602), np.float32(329.224), np.float32(328.85608), np.float32(328.3988), np.float32(329.33194), np.float32(328.64264), np.float32(330.4529), np.float32(329.2413), np.float32(327.56805), np.float32(329.0615), np.float32(329.3583), np.float32(329.59683), np.float32(330.2289), np.float32(404.5673), np.float32(396.37393), np.float32(331.92224), np.float32(646.16174), np.float32(651.40155), np.float32(659.4134), np.float32(663.1196), np.float32(659.0824), np.float32(659.26556), np.float32(658.38855), np.float32(656.4156), np.float32(652.956), np.float32(648.65466), np.float32(648.41187), np.float32(653.1021), np.float32(656.6596), np.float32(655.8354), np.float32(657.25464), np.float32(658.37555), np.float32(656.90216), np.float32(652.1434), np.float32(638.38873), np.float32(258.04633), np.float32(262.01538), np.float32(326.66232), np.float32(330.94415), np.float32(330.40085), np.float32(329.46054), np.float32(328.53394), np.float32(762.76324), np.float32(782.0218), np.float32(802.8991), np.float32(799.1936), np.float32(327.53397), np.float32(330.6744), np.float32(656.0728), np.float32(658.68353), np.float32(329.60727), np.float32(936.38965), np.float32(939.4108), np.float32(951.8067), np.float32(478.59744), np.float32(473.1542), np.float32(461.5822), np.float32(897.4401), np.float32(884.1178), np.float32(865.2966), np.float32(842.5516), np.float32(816.6355), np.float32(773.5075), np.float32(1017.7356), np.float32(935.3407), np.float32(920.5568), np.float32(910.24335), np.float32(892.7318), np.float32(893.5131), np.float32(896.5724), np.float32(897.3088), np.float32(895.2981), np.float32(894.8653), np.float32(904.1765), np.float32(922.1548), np.float32(949.87244), np.float32(972.6334), np.float32(984.07007), np.float32(992.4545), np.float32(999.38385), np.float32(995.66583), np.float32(990.9689), np.float32(988.5512), np.float32(986.4381), np.float32(984.1286), np.float32(971.0481), np.float32(956.49835), np.float32(990.1467), np.float32(332.5148), np.float32(331.76205), np.float32(330.8151), np.float32(330.4062), np.float32(326.5289), np.float32(328.76807), np.float32(329.5452), np.float32(328.46494), np.float32(329.188), np.float32(328.6527), np.float32(327.98627), np.float32(328.67868), np.float32(329.3966), np.float32(329.24295), np.float32(329.2889), np.float32(327.2664), np.float32(329.36304), np.float32(328.7027), np.float32(329.07388), np.float32(329.91547), np.float32(328.1859), np.float32(328.26785), np.float32(328.48303), np.float32(331.0893), np.float32(385.18997), np.float32(333.9131), np.float32(619.2481), np.float32(611.4431), np.float32(601.7742), np.float32(599.72144), np.float32(602.5982), np.float32(605.47504), np.float32(608.3955), np.float32(612.20325), np.float32(622.0658), np.float32(633.73834), np.float32(638.2992), np.float32(640.67487), np.float32(650.3036), np.float32(652.8191), np.float32(651.08655), np.float32(646.78467), np.float32(642.98193), np.float32(642.7659), np.float32(640.8169), np.float32(637.70776), np.float32(636.5259), np.float32(632.54706), np.float32(335.86557), np.float32(345.99805), np.float32(295.12823), np.float32(296.1683), np.float32(292.30005), np.float32(586.48883), np.float32(588.7817), np.float32(298.4309), np.float32(298.3764), np.float32(298.28845), np.float32(294.0044), np.float32(282.8447), np.float32(286.87366), np.float32(297.62234), np.float32(294.52783), np.float32(293.8348), np.float32(295.74374), np.float32(293.65964), np.float32(295.8828), np.float32(296.33093), np.float32(292.84894), np.float32(295.49817), np.float32(293.295), np.float32(291.08206), np.float32(297.60764), np.float32(294.3879), np.float32(310.18658), np.float32(523.1493), np.float32(536.61176), np.float32(539.8164), np.float32(539.4936), np.float32(529.32007), np.float32(517.91797), np.float32(514.2612), np.float32(516.4399), np.float32(523.63635), np.float32(259.28516), np.float32(272.92044), np.float32(279.45685), np.float32(282.32498), np.float32(282.99188), np.float32(280.19366), np.float32(258.58447), np.float32(265.1817), np.float32(263.19873), np.float32(255.47977), np.float32(260.9595), np.float32(258.9347), np.float32(258.52844), np.float32(258.34512), np.float32(262.79922), np.float32(254.67593), np.float32(258.4653), np.float32(262.82553), np.float32(260.2776), np.float32(263.79807), np.float32(260.3034), np.float32(264.5247), np.float32(255.36607), np.float32(266.263), np.float32(252.69487), np.float32(329.5681), np.float32(329.7053), np.float32(286.4249), np.float32(281.8166), np.float32(290.88425), np.float32(329.63168), np.float32(312.114), np.float32(304.47238), np.float32(300.24445), np.float32(305.8984), np.float32(308.1332), np.float32(296.52536), np.float32(294.5496), np.float32(303.87137), np.float32(284.15817), np.float32(290.05496), np.float32(283.3393), np.float32(289.2029), np.float32(282.45316), np.float32(278.59393), np.float32(267.2579), np.float32(256.41745), np.float32(264.4991), np.float32(248.88623), np.float32(249.57292), np.float32(329.07336), np.float32(226.2418), np.float32(227.245), np.float32(222.2836), np.float32(219.3489), np.float32(220.25179), np.float32(218.66768), np.float32(218.65338), np.float32(216.82835), np.float32(217.64206), np.float32(217.15224), np.float32(217.06627), np.float32(223.0154), np.float32(217.27211), np.float32(220.70306), np.float32(226.08632), np.float32(216.07246), np.float32(223.10172), np.float32(218.52422), np.float32(215.323), np.float32(215.04358), np.float32(219.85481), np.float32(446.29724), np.float32(444.56027), np.float32(443.79303), np.float32(440.57874), np.float32(220.27696), np.float32(215.45113), np.float32(424.41562), np.float32(428.1151), np.float32(438.81433), np.float32(443.57812), np.float32(448.1112), np.float32(451.08582), np.float32(451.76276), np.float32(224.0529), np.float32(222.89996), np.float32(461.61972), np.float32(468.00555), np.float32(473.59158), np.float32(466.63367), np.float32(227.39984), np.float32(222.31862), np.float32(215.76364), np.float32(215.92027), np.float32(214.8532), np.float32(216.55162), np.float32(429.37296), np.float32(440.85663), np.float32(442.9393), np.float32(445.09558), np.float32(448.5652), np.float32(228.32266), np.float32(228.1962), np.float32(229.20955), np.float32(465.43488), np.float32(457.46136), np.float32(452.89505), np.float32(773.3481), np.float32(774.34406), np.float32(430.0292), np.float32(427.13873), np.float32(214.01277), np.float32(225.71587), np.float32(329.40875), np.float32(325.69336), np.float32(333.85886), np.float32(328.07657), np.float32(330.50363), np.float32(331.71057), np.float32(328.16116), np.float32(328.94537), np.float32(329.1277), np.float32(328.7892), np.float32(329.3678), np.float32(329.32297), np.float32(326.88803), np.float32(329.43527), np.float32(329.64258), np.float32(327.9014), np.float32(329.28467), np.float32(329.56757), np.float32(328.08893), np.float32(328.85266), np.float32(329.1171), np.float32(329.17133), np.float32(328.9584), np.float32(327.69217), np.float32(329.1216), np.float32(329.49423), np.float32(329.78177), np.float32(328.1093), np.float32(329.16687), np.float32(329.5974), np.float32(328.8555), np.float32(328.88293), np.float32(329.3739), np.float32(328.77347), np.float32(328.05548), np.float32(329.70465), np.float32(330.17618), np.float32(328.62265), np.float32(328.8152), np.float32(328.1699), np.float32(330.70312), np.float32(329.61615), np.float32(328.93628), np.float32(328.623), np.float32(328.71606), np.float32(442.72833), np.float32(441.93048), np.float32(440.8709), np.float32(440.5051), np.float32(221.48083), np.float32(224.37271), np.float32(162.84601), np.float32(178.15282), np.float32(185.43906), np.float32(198.56062), np.float32(200.33669), np.float32(196.81688), np.float32(189.66203), np.float32(192.4654), np.float32(198.00392), np.float32(194.06302), np.float32(261.21677), np.float32(261.2543), np.float32(199.80234), np.float32(256.91837), np.float32(263.7294), np.float32(257.76318), np.float32(201.7713), np.float32(328.19925), np.float32(328.17218), np.float32(329.13138), np.float32(329.6909), np.float32(329.06458), np.float32(327.72168), np.float32(330.01068), np.float32(329.17847), np.float32(328.76236), np.float32(329.7676), np.float32(327.8961), np.float32(328.599), np.float32(329.6263), np.float32(328.7865), np.float32(329.45856), np.float32(328.4779), np.float32(328.4015), np.float32(329.2551), np.float32(329.41156), np.float32(329.02414), np.float32(328.88318), np.float32(327.86514), np.float32(328.96622), np.float32(329.60892), np.float32(329.04367), np.float32(328.43115), np.float32(328.3758), np.float32(328.90427), np.float32(329.4672), np.float32(327.49783), np.float32(209.05891), np.float32(205.69255), np.float32(336.59738), np.float32(208.24263), np.float32(218.43582), np.float32(223.90645), np.float32(216.11354), np.float32(221.91032), np.float32(218.01132), np.float32(220.92982), np.float32(217.07573), np.float32(220.863), np.float32(217.41338), np.float32(217.25441), np.float32(222.07442), np.float32(216.06406), np.float32(219.46472), np.float32(218.38297), np.float32(218.83691), np.float32(217.59608), np.float32(219.73462), np.float32(215.0028), np.float32(220.03377), np.float32(218.33858), np.float32(218.46907), np.float32(218.0073), np.float32(217.245), np.float32(221.08658), np.float32(216.4589), np.float32(216.92276), np.float32(217.93091), np.float32(220.72417), np.float32(216.91154), np.float32(218.17648), np.float32(218.23624), np.float32(217.13618), np.float32(218.04845), np.float32(218.38133), np.float32(217.93266), np.float32(217.0663), np.float32(218.7292), np.float32(216.45602), np.float32(220.70926), np.float32(217.29373), np.float32(219.60963), np.float32(217.2834), np.float32(219.40611), np.float32(217.98761), np.float32(218.3277), np.float32(217.54295), np.float32(218.79762), np.float32(218.8602), np.float32(219.5101), np.float32(226.1916), np.float32(219.23306), np.float32(229.2248), np.float32(215.29013), np.float32(251.40685), np.float32(247.83934), np.float32(214.87798), np.float32(252.26236), np.float32(260.3872), np.float32(252.59607), np.float32(262.64832), np.float32(249.89677), np.float32(261.9005), np.float32(251.41771), np.float32(330.3516), np.float32(254.17632), np.float32(328.74283), np.float32(329.64285), np.float32(328.8645), np.float32(328.65222), np.float32(329.21243), np.float32(329.45563), np.float32(328.8913), np.float32(328.67722), np.float32(328.53906), np.float32(329.19995), np.float32(329.00583), np.float32(329.90738), np.float32(328.7395), np.float32(328.36728), np.float32(328.33157), np.float32(329.1711), np.float32(329.7812), np.float32(328.8937), np.float32(328.07367), np.float32(328.83105), np.float32(329.4363), np.float32(329.18314), np.float32(329.13327), np.float32(328.66263), np.float32(328.17746), np.float32(329.7054), np.float32(329.11966), np.float32(328.48618), np.float32(330.16663), np.float32(772.11053), np.float32(771.6148), np.float32(770.66187), np.float32(770.93854), np.float32(771.56964), np.float32(203.09877), np.float32(288.29373), np.float32(252.2959), np.float32(328.4817), np.float32(330.18164), np.float32(332.21854), np.float32(328.78992), np.float32(327.11404), np.float32(329.12326), np.float32(329.4696), np.float32(328.11258), np.float32(329.5873), np.float32(326.91208), np.float32(328.34857), np.float32(329.41022), np.float32(328.3555), np.float32(328.94064), np.float32(329.12054), np.float32(327.14203), np.float32(329.0018), np.float32(328.85907), np.float32(329.31848), np.float32(328.892), np.float32(327.9992), np.float32(328.42322), np.float32(328.7947), np.float32(329.34058), np.float32(329.28702), np.float32(328.67648), np.float32(328.43002), np.float32(328.66577), np.float32(328.39484), np.float32(329.61572), np.float32(329.05508), np.float32(328.37808), np.float32(329.03812), np.float32(329.06876), np.float32(328.80374), np.float32(328.95654), np.float32(327.9442), np.float32(328.41653), np.float32(440.58777), np.float32(776.52325), np.float32(776.4676), np.float32(777.243), np.float32(441.40344), np.float32(441.14432), np.float32(441.17526), np.float32(441.10196), np.float32(446.19742), np.float32(781.30853), np.float32(169.41351), np.float32(181.30954), np.float32(191.58427), np.float32(193.81929), np.float32(193.86238), np.float32(196.07962), np.float32(193.53926), np.float32(192.15974), np.float32(191.76764), np.float32(195.30417), np.float32(391.18732), np.float32(394.91162), np.float32(191.01971), np.float32(198.24734), np.float32(198.11734), np.float32(192.6974), np.float32(192.07503), np.float32(193.81175), np.float32(192.33197), np.float32(329.58072), np.float32(326.9997), np.float32(196.8248), np.float32(780.0026), np.float32(780.196), np.float32(781.1262), np.float32(202.30966), np.float32(328.90442), np.float32(331.07648), np.float32(782.98663), np.float32(202.97058), np.float32(779.33124), np.float32(779.9361), np.float32(329.19418), np.float32(206.454), np.float32(327.81284), np.float32(328.77243), np.float32(211.19177), np.float32(210.16725), np.float32(778.4388), np.float32(659.22797), np.float32(205.39574), np.float32(211.51688), np.float32(658.43567), np.float32(658.8362), np.float32(211.31325), np.float32(208.59367), np.float32(658.388), np.float32(658.6144), np.float32(202.95366), np.float32(214.9568), np.float32(236.1743), np.float32(214.48833), np.float32(222.6021), np.float32(225.8469), np.float32(216.14008), np.float32(222.61919), np.float32(216.53679), np.float32(222.13884), np.float32(215.382), np.float32(223.41888), np.float32(217.4631), np.float32(218.35349), np.float32(221.72772), np.float32(215.62802), np.float32(221.65369), np.float32(216.429), np.float32(219.85066), np.float32(216.35536), np.float32(219.19757), np.float32(216.35468), np.float32(221.46144), np.float32(217.45753), np.float32(218.4648), np.float32(217.74239), np.float32(217.8034), np.float32(219.51555), np.float32(216.60933), np.float32(219.29774), np.float32(218.1128), np.float32(219.74274), np.float32(216.1937), np.float32(218.82072), np.float32(218.45403), np.float32(219.32167), np.float32(217.53809), np.float32(218.03558), np.float32(219.27809), np.float32(218.32622), np.float32(217.95866), np.float32(217.45781), np.float32(218.60045), np.float32(216.4682), np.float32(220.3182), np.float32(217.50572), np.float32(220.11082), np.float32(217.71518), np.float32(217.67761), np.float32(218.05377), np.float32(217.73354), np.float32(215.2471), np.float32(217.91661), np.float32(235.09015), np.float32(213.71597), np.float32(229.8924), np.float32(329.70273), np.float32(331.37384), np.float32(328.8013), np.float32(327.9415), np.float32(230.28609), np.float32(329.4339), np.float32(328.43665), np.float32(329.53406), np.float32(328.19547), np.float32(328.41727), np.float32(329.60815), np.float32(328.76056), np.float32(329.22952), np.float32(329.72134), np.float32(327.74945), np.float32(329.34494), np.float32(328.82166), np.float32(328.90274), np.float32(329.27332), np.float32(328.40625), np.float32(329.49292), np.float32(328.71973), np.float32(329.11288), np.float32(329.03067), np.float32(328.8204), np.float32(328.39618), np.float32(329.5155), np.float32(329.41507), np.float32(329.05896), np.float32(328.94888), np.float32(328.29565), np.float32(329.43814), np.float32(329.45908), np.float32(217.57913), np.float32(218.24557), np.float32(218.452), np.float32(217.24696), np.float32(218.09071), np.float32(217.15994), np.float32(220.2056), np.float32(217.23988), np.float32(219.73065), np.float32(216.36572), np.float32(223.43039), np.float32(214.9244), np.float32(773.8222), np.float32(255.8028), np.float32(252.828), np.float32(266.16226), np.float32(254.74403), np.float32(330.92972), np.float32(330.9191), np.float32(329.7384), np.float32(328.97354), np.float32(328.19907), np.float32(329.6817), np.float32(328.8897), np.float32(329.12213), np.float32(329.12332), np.float32(328.3743), np.float32(329.51083), np.float32(329.07428), np.float32(329.03568), np.float32(328.65903), np.float32(329.12906), np.float32(328.25317), np.float32(329.16687), np.float32(329.02313), np.float32(328.79984), np.float32(328.88324), np.float32(329.18585), np.float32(329.66403), np.float32(329.3703), np.float32(327.97174), np.float32(328.9049), np.float32(327.8175), np.float32(933.1001), np.float32(935.17194), np.float32(1000.41016), np.float32(832.8559), np.float32(872.1505), np.float32(909.1678), np.float32(953.7818), np.float32(986.3167), np.float32(1002.0478), np.float32(1011.19696), np.float32(1010.4403), np.float32(1002.99817), np.float32(1000.8708), np.float32(228.7644), np.float32(214.75479), np.float32(228.04741), np.float32(218.5324), np.float32(222.1329), np.float32(212.29851), np.float32(213.73343), np.float32(203.77452), np.float32(185.63387), np.float32(189.10437), np.float32(202.47589), np.float32(193.63281), np.float32(192.3373), np.float32(193.50267), np.float32(323.3336), np.float32(327.60632), np.float32(331.15332), np.float32(332.61398), np.float32(333.76495), np.float32(330.3014), np.float32(329.02588), np.float32(329.72046), np.float32(1310.0635), np.float32(1311.8613), np.float32(663.9174), np.float32(664.08496), np.float32(331.0571), np.float32(330.11258), np.float32(327.17093), np.float32(326.69186), np.float32(330.472), np.float32(330.04425), np.float32(331.63815), np.float32(337.06085), np.float32(345.21185), np.float32(363.0047), np.float32(381.8667), np.float32(779.7316), np.float32(1565.5669), np.float32(1572.6248), np.float32(1584.1238), np.float32(1200.9525), np.float32(1199.306), np.float32(1586.8022), np.float32(1573.3512), np.float32(1563.0302), np.float32(1550.3483), np.float32(1545.9221), np.float32(1147.7782), np.float32(1137.435), np.float32(1122.0356), np.float32(706.1245), np.float32(303.88504), np.float32(202.5584), np.float32(323.51315), np.float32(253.20534), np.float32(261.74774), np.float32(260.99826), np.float32(259.2087), np.float32(262.39178), np.float32(328.1556), np.float32(323.58694), np.float32(331.77313), np.float32(715.33795), np.float32(749.02655), np.float32(772.4553), np.float32(786.119), np.float32(795.04224), np.float32(792.79425), np.float32(792.2241), np.float32(792.0386), np.float32(791.67377), np.float32(793.1615), np.float32(1975.5632), np.float32(1969.5476), np.float32(1963.7341), np.float32(1967.2361), np.float32(1974.0074), np.float32(1976.9358), np.float32(1973.8632), np.float32(1967.6381), np.float32(1966.2444), np.float32(330.2246), np.float32(327.74002), np.float32(328.70108), np.float32(331.98203), np.float32(374.89902), np.float32(372.9844), np.float32(343.66223), np.float32(330.29398), np.float32(326.58203), np.float32(326.1515), np.float32(326.53683), np.float32(331.08032), np.float32(786.47797), np.float32(386.50833), np.float32(397.42398), np.float32(399.74393), np.float32(398.08264), np.float32(394.75134), np.float32(1983.4548), np.float32(1975.4229), np.float32(1971.0758), np.float32(1966.1929), np.float32(391.72507), np.float32(382.28183), np.float32(376.23038), np.float32(375.28806), np.float32(372.81412), np.float32(378.3608), np.float32(374.00464), np.float32(377.4602), np.float32(392.77567), np.float32(398.42487), np.float32(393.8668), np.float32(392.0561), np.float32(394.58096), np.float32(394.50162), np.float32(2353.654), np.float32(2346.8445), np.float32(2339.4429), np.float32(392.1433), np.float32(392.1536), np.float32(392.38647), np.float32(2357.6807), np.float32(2361.3884), np.float32(2364.5247), np.float32(2364.7568), np.float32(2363.0535), np.float32(2363.372), np.float32(2361.8452), np.float32(2353.9043), np.float32(782.924), np.float32(781.45166), np.float32(780.77637), np.float32(781.8359), np.float32(782.7383), np.float32(784.76526), np.float32(787.814), np.float32(789.7344), np.float32(789.22424), np.float32(788.2936), np.float32(788.1867), np.float32(789.4086), np.float32(791.8422), np.float32(796.9902), np.float32(802.7046), np.float32(809.9645), np.float32(819.71344), np.float32(839.66705), np.float32(856.3353), np.float32(869.3423), np.float32(884.4184), np.float32(887.0896), np.float32(887.89557), np.float32(888.2337), np.float32(883.7829), np.float32(880.81323), np.float32(880.02716), np.float32(877.269), np.float32(878.8731), np.float32(880.03), np.float32(878.9658), np.float32(881.5059), np.float32(881.50385), np.float32(882.6054), np.float32(883.53107), np.float32(881.0917), np.float32(879.8469), np.float32(878.75024), np.float32(874.5562), np.float32(873.8123), np.float32(870.5296), np.float32(869.57806), np.float32(862.5827), np.float32(845.8323), np.float32(836.19006), np.float32(808.564), np.float32(800.7963), np.float32(770.07104), np.float32(757.6641), np.float32(755.946), np.float32(734.52423), np.float32(717.264), np.float32(703.6232), np.float32(694.3041), np.float32(680.7121), np.float32(330.4204), np.float32(330.3231), np.float32(329.51282), np.float32(330.56094), np.float32(329.34006), np.float32(326.14194), np.float32(407.67453), np.float32(423.58438), np.float32(430.79147), np.float32(331.1226), np.float32(328.32785), np.float32(874.1852), np.float32(864.92584), np.float32(658.5466), np.float32(658.513), np.float32(657.8063), np.float32(658.6318), np.float32(887.70123), np.float32(888.8347), np.float32(871.2731), np.float32(263.25662), np.float32(297.38226), np.float32(169.03891), np.float32(347.9368), np.float32(348.8191), np.float32(347.57407), np.float32(297.69708), np.float32(602.66785), np.float32(603.133), np.float32(603.57623), np.float32(601.8035), np.float32(601.5298), np.float32(607.8031), np.float32(619.90436), np.float32(636.9298), np.float32(650.5848), np.float32(654.5727), np.float32(666.463), np.float32(670.1944), np.float32(671.2519), np.float32(673.7427), np.float32(670.6353), np.float32(661.14594), np.float32(664.54956), np.float32(659.88873), np.float32(657.3847), np.float32(658.2569), np.float32(652.04913), np.float32(657.1695), np.float32(661.4049), np.float32(679.51276), np.float32(292.19528), np.float32(292.9499), np.float32(295.40485), np.float32(293.41583), np.float32(290.33557), np.float32(292.6721), np.float32(297.85388), np.float32(293.2509), np.float32(293.95798), np.float32(293.20087), np.float32(292.836), np.float32(294.99594), np.float32(292.83887), np.float32(293.73422), np.float32(290.47067), np.float32(293.3535), np.float32(294.78903), np.float32(290.25128), np.float32(294.25385), np.float32(289.61172), np.float32(221.77077), np.float32(214.22954), np.float32(218.52475), np.float32(227.37367), np.float32(216.27853), np.float32(222.3871), np.float32(217.69759), np.float32(220.54694), np.float32(219.0194), np.float32(216.87978), np.float32(220.98926), np.float32(216.71744), np.float32(222.37637), np.float32(215.2539), np.float32(222.07689), np.float32(217.8121), np.float32(218.66591), np.float32(218.31538), np.float32(217.68), np.float32(220.5061), np.float32(216.49184), np.float32(219.94836), np.float32(318.90683), np.float32(320.50165), np.float32(318.70865), np.float32(304.59882), np.float32(217.2277), np.float32(279.8706), np.float32(271.39246), np.float32(219.7491), np.float32(248.11809), np.float32(261.2848), np.float32(246.42131), np.float32(212.8389), np.float32(242.51578), np.float32(211.83122), np.float32(221.9164), np.float32(223.30121), np.float32(219.69234), np.float32(216.20424), np.float32(220.00485), np.float32(218.02899), np.float32(218.06654), np.float32(219.74211), np.float32(217.06308), np.float32(221.12976), np.float32(217.33923), np.float32(218.41727), np.float32(216.71156), np.float32(219.71335), np.float32(216.15364), np.float32(223.84647), np.float32(257.43015), np.float32(260.88873), np.float32(258.87003), np.float32(262.16812), np.float32(519.828), np.float32(522.6759), np.float32(524.60175), np.float32(520.45245), np.float32(519.91614), np.float32(522.6289), np.float32(522.96747), np.float32(522.20074), np.float32(523.138), np.float32(524.6898), np.float32(522.5553), np.float32(519.7471), np.float32(519.83386), np.float32(516.5302), np.float32(512.6979), np.float32(259.44446), np.float32(265.38742), np.float32(257.63593), np.float32(263.127), np.float32(257.49457), np.float32(262.21567), np.float32(258.8794), np.float32(260.37463), np.float32(259.6553), np.float32(257.66693), np.float32(263.03876), np.float32(258.37192), np.float32(262.5049), np.float32(258.71802), np.float32(261.75073), np.float32(258.21152), np.float32(256.63205), np.float32(256.01193), np.float32(328.912), np.float32(328.4776), np.float32(329.33063), np.float32(329.36282), np.float32(330.2874), np.float32(328.09854), np.float32(327.7232), np.float32(773.2619), np.float32(257.2429), np.float32(255.8918), np.float32(263.5382), np.float32(663.52625), np.float32(657.478), np.float32(514.96326), np.float32(510.06677), np.float32(516.6626), np.float32(520.1368), np.float32(519.68115), np.float32(520.11755), np.float32(520.0847), np.float32(517.61127), np.float32(515.1142), np.float32(514.7525), np.float32(515.0503), np.float32(517.22833), np.float32(521.1192), np.float32(527.41815), np.float32(537.19995), np.float32(541.0676), np.float32(543.7663), np.float32(545.3388), np.float32(538.643), np.float32(532.58954), np.float32(525.6398), np.float32(520.64813), np.float32(519.2766), np.float32(519.5181), np.float32(519.4747), np.float32(519.5504), np.float32(524.1809), np.float32(531.1814), np.float32(532.8102), np.float32(533.4773), np.float32(533.5795), np.float32(533.37933), np.float32(529.5505), np.float32(521.82184), np.float32(519.64374), np.float32(515.81573), np.float32(512.51245), np.float32(517.963), np.float32(522.93695), np.float32(533.0439), np.float32(544.8788), np.float32(563.89294), np.float32(581.12213), np.float32(590.63776), np.float32(600.34894), np.float32(596.71295), np.float32(591.47095), np.float32(586.43036), np.float32(584.9803), np.float32(588.7853), np.float32(592.93616), np.float32(606.84717), np.float32(612.89923), np.float32(628.96356), np.float32(650.1038), np.float32(658.6199), np.float32(664.5045), np.float32(658.8348), np.float32(656.39124), np.float32(327.0356), np.float32(326.24908), np.float32(194.8098), np.float32(195.70079), np.float32(193.59607), np.float32(194.16954), np.float32(194.87457), np.float32(192.84145), np.float32(193.20343), np.float32(195.67838), np.float32(196.39952), np.float32(193.16995), np.float32(193.0815), np.float32(194.2246), np.float32(195.65225), np.float32(193.30295), np.float32(191.59888), np.float32(196.80923), np.float32(198.56882), np.float32(193.29607), np.float32(191.34209), np.float32(195.87355), np.float32(197.43297), np.float32(193.09145), np.float32(190.78273), np.float32(197.38615), np.float32(199.7893), np.float32(193.06345), np.float32(191.12137), np.float32(195.78993), np.float32(198.90977), np.float32(193.11606), np.float32(191.16878), np.float32(197.19379), np.float32(198.13745), np.float32(192.49156), np.float32(192.72401), np.float32(199.29662), np.float32(196.67458), np.float32(187.8605), np.float32(230.09224), np.float32(222.98326), np.float32(214.97931), np.float32(227.60318), np.float32(217.99136), np.float32(218.06396), np.float32(220.09486), np.float32(220.98224), np.float32(219.62703), np.float32(215.1886), np.float32(220.2716), np.float32(217.7317), np.float32(220.30733), np.float32(216.16039), np.float32(221.8011), np.float32(216.84134), np.float32(218.0034), np.float32(218.96297), np.float32(216.75238), np.float32(220.11357), np.float32(217.57649), np.float32(219.5782), np.float32(217.4477), np.float32(220.6495), np.float32(216.9493), np.float32(218.25703), np.float32(218.23344), np.float32(218.03407), np.float32(217.8734), np.float32(218.11136), np.float32(219.62692), np.float32(217.52434), np.float32(218.63156), np.float32(216.9306), np.float32(220.24095), np.float32(216.63593), np.float32(219.09589), np.float32(219.20256), np.float32(218.1734), np.float32(218.76796), np.float32(217.48688), np.float32(218.25197), np.float32(217.59973), np.float32(218.89684), np.float32(217.5815), np.float32(220.01804), np.float32(218.30089), np.float32(219.55379), np.float32(216.47838), np.float32(215.58522), np.float32(216.44164), np.float32(219.73036), np.float32(438.70377), np.float32(231.71515), np.float32(256.9456), np.float32(255.5549), np.float32(777.68207), np.float32(777.63666), np.float32(234.00957), np.float32(215.51813), np.float32(236.70479), np.float32(214.17973), np.float32(230.96254), np.float32(216.2966), np.float32(219.74858), np.float32(221.82393), np.float32(217.39659), np.float32(229.44186), np.float32(214.53964), np.float32(229.11404), np.float32(213.95796), np.float32(228.22379), np.float32(216.1221), np.float32(219.66121), np.float32(218.9074), np.float32(219.28168), np.float32(224.55402), np.float32(214.37079), np.float32(227.46826), np.float32(214.98355), np.float32(221.89998), np.float32(215.0949), np.float32(225.88893), np.float32(217.86528), np.float32(217.72345), np.float32(221.07346), np.float32(776.1818), np.float32(776.3422), np.float32(776.3784), np.float32(776.52783), np.float32(215.61496), np.float32(223.54247), np.float32(217.0335), np.float32(776.5403), np.float32(776.52856), np.float32(776.59436), np.float32(775.7945), np.float32(215.29326), np.float32(221.07051), np.float32(215.33353), np.float32(231.90459), np.float32(266.85266), np.float32(325.32324), np.float32(330.29025), np.float32(330.73325), np.float32(330.21127), np.float32(330.27023), np.float32(329.18405), np.float32(327.86728), np.float32(329.55878), np.float32(328.60837), np.float32(328.74014), np.float32(329.86954), np.float32(327.89124), np.float32(328.311), np.float32(329.461), np.float32(328.766), np.float32(328.91452), np.float32(329.10568), np.float32(328.15594), np.float32(329.458), np.float32(328.67484), np.float32(329.14246), np.float32(329.44858), np.float32(327.83966), np.float32(329.07388), np.float32(329.11462), np.float32(329.32782), np.float32(329.2071), np.float32(329.3623), np.float32(328.69986), np.float32(328.87766), np.float32(329.48828), np.float32(329.7167), np.float32(328.99634), np.float32(328.12885), np.float32(329.03387), np.float32(329.00497), np.float32(329.81268), np.float32(329.57864), np.float32(327.9602), np.float32(776.1792), np.float32(776.20404), np.float32(329.68616), np.float32(329.4027), np.float32(328.923), np.float32(521.75397), np.float32(776.2319), np.float32(775.4109), np.float32(775.5535), np.float32(512.51556), np.float32(163.24814), np.float32(170.74086), np.float32(183.78069), np.float32(198.15825), np.float32(197.74504), np.float32(260.48395), np.float32(192.12366), np.float32(193.24313), np.float32(193.68416), np.float32(259.97815), np.float32(258.29874), np.float32(262.69974), np.float32(258.7278), np.float32(261.334), np.float32(259.44785), np.float32(200.362), np.float32(260.0286), np.float32(189.87424), np.float32(193.03624), np.float32(195.19463), np.float32(329.05118), np.float32(328.97073), np.float32(196.4603), np.float32(327.28226), np.float32(328.9108), np.float32(330.27258), np.float32(328.54816), np.float32(328.6528), np.float32(329.74014), np.float32(328.44473), np.float32(328.64468), np.float32(329.2909), np.float32(328.48398), np.float32(329.55856), np.float32(329.3019), np.float32(328.58026), np.float32(328.88922), np.float32(329.50482), np.float32(328.8489), np.float32(329.36093), np.float32(328.39795), np.float32(329.37332), np.float32(330.0917), np.float32(328.6795), np.float32(659.1065), np.float32(659.1868), np.float32(658.49133), np.float32(658.0458), np.float32(657.6626), np.float32(540.42804), np.float32(241.48058), np.float32(229.63373), np.float32(213.9599), np.float32(228.07918), np.float32(217.31819), np.float32(220.4885), np.float32(219.27335), np.float32(219.5109), np.float32(221.54398), np.float32(214.40096), np.float32(221.37704), np.float32(217.31627), np.float32(220.8293), np.float32(215.19086), np.float32(222.47505), np.float32(218.40881), np.float32(217.83676), np.float32(219.26822), np.float32(215.53015), np.float32(220.68776), np.float32(217.20091), np.float32(218.96042), np.float32(217.06209), np.float32(220.56651), np.float32(217.3568), np.float32(217.99808), np.float32(218.47798), np.float32(217.94391), np.float32(218.52939), np.float32(217.1028), np.float32(219.37665), np.float32(217.86069), np.float32(218.82652), np.float32(217.3266), np.float32(219.27461), np.float32(216.55144), np.float32(218.79002), np.float32(219.44456), np.float32(217.30319), np.float32(218.96397), np.float32(217.94421), np.float32(217.94548), np.float32(217.87997), np.float32(218.80083), np.float32(217.5934), np.float32(220.03494), np.float32(217.40956), np.float32(220.25092), np.float32(217.08015), np.float32(217.4831), np.float32(215.84177), np.float32(221.64467), np.float32(221.39296), np.float32(217.14726), np.float32(230.07188), np.float32(216.6456), np.float32(223.4476), np.float32(216.51321), np.float32(220.99516), np.float32(217.82326), np.float32(216.95137), np.float32(221.59781), np.float32(216.2696), np.float32(222.53467), np.float32(215.57782), np.float32(221.91284), np.float32(215.92902), np.float32(222.18103), np.float32(216.47086), np.float32(218.44362), np.float32(219.7043), np.float32(217.36415), np.float32(219.63094), np.float32(216.4396), np.float32(221.91028), np.float32(215.83601), np.float32(220.00493), np.float32(217.16806), np.float32(220.19415), np.float32(216.37895), np.float32(219.59682), np.float32(219.15915), np.float32(217.73099), np.float32(218.79144), np.float32(217.22008), np.float32(219.5107), np.float32(217.63974), np.float32(221.35182), np.float32(217.37865), np.float32(218.51286), np.float32(216.39157), np.float32(219.21806), np.float32(216.43227), np.float32(219.34839), np.float32(220.46686), np.float32(218.047), np.float32(219.73476), np.float32(216.31567), np.float32(219.6349), np.float32(213.381), np.float32(228.18378), np.float32(248.90382), np.float32(264.45975), np.float32(329.49326), np.float32(331.14902), np.float32(330.3046), np.float32(330.961), np.float32(329.2797), np.float32(327.172), np.float32(329.4681), np.float32(329.05304), np.float32(328.36792), np.float32(329.3384), np.float32(328.55914), np.float32(329.24628), np.float32(329.48077), np.float32(328.37994), np.float32(328.95203), np.float32(329.1483), np.float32(328.25732), np.float32(329.31863), np.float32(328.86374), np.float32(328.733), np.float32(329.05243), np.float32(328.85275), np.float32(327.66415), np.float32(338.8233), np.float32(340.28506), np.float32(324.37247), np.float32(319.59573), np.float32(314.6209), np.float32(318.83554), np.float32(333.68262), np.float32(326.94144), np.float32(329.8635), np.float32(328.18658), np.float32(327.95993), np.float32(329.8987), np.float32(330.4535), np.float32(328.44922), np.float32(326.51697), np.float32(327.722), np.float32(331.56592), np.float32(329.30695), np.float32(329.67804), np.float32(331.29092), np.float32(327.76385), np.float32(328.01767), np.float32(327.47974), np.float32(329.6924), np.float32(660.3263), np.float32(333.69736), np.float32(340.3737), np.float32(336.93445), np.float32(668.53424), np.float32(662.51825), np.float32(660.3524), np.float32(658.85895), np.float32(656.446), np.float32(652.5458), np.float32(648.9225), np.float32(642.6199), np.float32(325.87314), np.float32(655.1098), np.float32(663.9427), np.float32(676.91797), np.float32(686.5329), np.float32(699.45844), np.float32(704.9197), np.float32(703.3946), np.float32(698.8819), np.float32(681.93146), np.float32(661.8135), np.float32(649.0166), np.float32(322.95374), np.float32(325.13913), np.float32(325.89334), np.float32(328.1662), np.float32(332.17203), np.float32(334.51273), np.float32(337.98938), np.float32(340.93216), np.float32(336.84192), np.float32(331.0589), np.float32(330.05978), np.float32(335.91232), np.float32(784.3474), np.float32(320.77414), np.float32(658.8362), np.float32(662.8563), np.float32(665.562), np.float32(672.4418), np.float32(781.4599), np.float32(785.1104), np.float32(333.98923), np.float32(337.78964), np.float32(339.19913), np.float32(658.5902), np.float32(781.18054), np.float32(781.7758), np.float32(786.92834), np.float32(246.1765), np.float32(793.9322), np.float32(394.39484), np.float32(391.56644), np.float32(385.2624), np.float32(378.55746), np.float32(335.67224), np.float32(784.0562), np.float32(784.8488), np.float32(784.4076), np.float32(783.1726), np.float32(783.3033), np.float32(782.09296), np.float32(782.3175), np.float32(329.46463), np.float32(330.29086), np.float32(329.85342), np.float32(327.0102), np.float32(330.51245), np.float32(330.0205), np.float32(328.70108), np.float32(329.84802), np.float32(328.49722), np.float32(327.42072), np.float32(329.32373), np.float32(328.37976), np.float32(330.23196), np.float32(330.061), np.float32(329.07367), np.float32(330.72754), np.float32(414.17987), np.float32(407.9254), np.float32(404.3853), np.float32(402.00565), np.float32(399.93347), np.float32(396.95868), np.float32(390.97794), np.float32(386.20328), np.float32(384.90005), np.float32(384.9541), np.float32(384.25043), np.float32(384.80563), np.float32(390.4626), np.float32(393.87054), np.float32(398.13763), np.float32(402.72668), np.float32(406.0597), np.float32(412.0344), np.float32(415.7617), np.float32(410.35583), np.float32(401.2775), np.float32(396.87714), np.float32(260.9212), np.float32(191.96513), np.float32(193.32864), np.float32(195.39153), np.float32(195.1175), np.float32(193.91125), np.float32(193.17781), np.float32(192.27574), np.float32(327.87604), np.float32(329.08124), np.float32(329.86835), np.float32(327.86874), np.float32(329.10452), np.float32(328.88834), np.float32(329.33273), np.float32(328.21994), np.float32(328.6485), np.float32(328.67337), np.float32(328.43073), np.float32(329.29297), np.float32(329.2268), np.float32(328.5753), np.float32(329.44525), np.float32(328.33145), np.float32(329.68018), np.float32(328.97086), np.float32(419.20404), np.float32(406.7201), np.float32(399.03598), np.float32(396.52643), np.float32(396.4472), np.float32(791.6786), np.float32(788.6126), np.float32(780.35815), np.float32(775.56946), np.float32(774.5119), np.float32(773.9228), np.float32(773.9043), np.float32(774.58417), np.float32(777.89716), np.float32(786.4948), np.float32(796.3347), np.float32(802.30707), np.float32(805.82104), np.float32(811.5131), np.float32(807.9711), np.float32(799.6967), np.float32(793.04565), np.float32(779.7727), np.float32(768.5903), np.float32(752.26337), np.float32(752.0468), np.float32(758.0379), np.float32(769.80963), np.float32(780.8845), np.float32(798.3458), np.float32(812.06775), np.float32(806.5551), np.float32(812.5746), np.float32(816.09265), np.float32(795.97784), np.float32(779.12604), np.float32(764.989), np.float32(751.742), np.float32(750.0169), np.float32(743.48645), np.float32(754.56067), np.float32(769.7745), np.float32(785.41), np.float32(792.55054), np.float32(790.30835), np.float32(329.05185), np.float32(807.30786), np.float32(802.54407), np.float32(330.1228), np.float32(328.6186), np.float32(329.05746), np.float32(776.789), np.float32(327.358), np.float32(330.57565), np.float32(328.9145), np.float32(328.73874), np.float32(329.93576), np.float32(328.4864), np.float32(328.502), np.float32(782.7519), np.float32(783.72125), np.float32(775.77716), np.float32(770.27057), np.float32(328.283), np.float32(332.7257), np.float32(330.81934), np.float32(779.60657), np.float32(783.85803), np.float32(394.5397), np.float32(658.9047), np.float32(660.5976), np.float32(655.79443), np.float32(397.47906), np.float32(352.7559), np.float32(348.5105), np.float32(349.80072), np.float32(350.76364), np.float32(348.8605), np.float32(295.07343), np.float32(291.83267), np.float32(718.52594), np.float32(713.0532), np.float32(698.2381), np.float32(682.77655), np.float32(674.8802), np.float32(660.75653), np.float32(658.4243), np.float32(656.6994), np.float32(656.0409), np.float32(654.3035), np.float32(657.4091), np.float32(333.9245), np.float32(315.14316), np.float32(316.5136), np.float32(329.5846), np.float32(323.85342), np.float32(314.09372), np.float32(321.27505), np.float32(321.1741), np.float32(304.49292), np.float32(306.9654), np.float32(304.2182), np.float32(605.24493), np.float32(600.1312), np.float32(594.63055), np.float32(590.051), np.float32(587.3333), np.float32(586.7657), np.float32(586.9307), np.float32(585.92053), np.float32(585.9791), np.float32(585.9703), np.float32(586.12146), np.float32(586.3195), np.float32(587.8179), np.float32(589.86743), np.float32(589.94196), np.float32(297.96704), np.float32(299.79062), np.float32(291.57764), np.float32(290.28317), np.float32(298.114), np.float32(302.67636), np.float32(288.87894), np.float32(211.39926), np.float32(313.38516), np.float32(586.8455), np.float32(584.6171), np.float32(584.40936), np.float32(581.73413), np.float32(580.40265), np.float32(582.817), np.float32(580.90857), np.float32(578.9006), np.float32(580.5984), np.float32(581.8618), np.float32(581.5404), np.float32(582.8616), np.float32(583.37537), np.float32(580.8353), np.float32(581.73975), np.float32(578.10986), np.float32(566.74854), np.float32(219.39395), np.float32(221.93513), np.float32(324.68048), np.float32(220.53972), np.float32(216.82039), np.float32(222.94594), np.float32(215.16359), np.float32(220.35878), np.float32(216.67561), np.float32(221.23517), np.float32(216.4407), np.float32(219.2473), np.float32(218.40012), np.float32(218.05533), np.float32(217.48305), np.float32(218.21019), np.float32(220.05824), np.float32(216.5072), np.float32(218.918), np.float32(217.93817), np.float32(220.2943), np.float32(217.61227), np.float32(218.93034), np.float32(217.79259), np.float32(218.88298), np.float32(220.0331), np.float32(216.63081), np.float32(217.98033), np.float32(217.25017), np.float32(214.41971), np.float32(215.9038), np.float32(327.21118), np.float32(330.37933), np.float32(329.2713), np.float32(237.88162), np.float32(534.1221), np.float32(536.2526), np.float32(797.667), np.float32(795.10657), np.float32(797.91187), np.float32(797.821), np.float32(794.1641), np.float32(792.8719), np.float32(794.8472), np.float32(804.3391), np.float32(816.3876), np.float32(558.7679), np.float32(576.3695), np.float32(585.36646), np.float32(589.89514), np.float32(308.15466), np.float32(581.51825), np.float32(580.47516), np.float32(575.19104), np.float32(562.15283), np.float32(547.8121), np.float32(329.2708), np.float32(331.65576), np.float32(323.6078), np.float32(329.23315), np.float32(324.26233), np.float32(302.85635), np.float32(285.90237), np.float32(313.6122), np.float32(328.4453), np.float32(777.13556), np.float32(324.27643), np.float32(330.6271), np.float32(327.97366), np.float32(325.8639), np.float32(781.30695), np.float32(775.85864), np.float32(770.14813), np.float32(775.5477), np.float32(777.77466), np.float32(589.30664), np.float32(584.1225), np.float32(579.5184), np.float32(772.6897), np.float32(773.07983), np.float32(243.63063), np.float32(254.04466), np.float32(268.5473), np.float32(249.63692), np.float32(218.01714), np.float32(218.56387), np.float32(220.69684), np.float32(226.64726), np.float32(225.32784), np.float32(214.60768), np.float32(225.14581), np.float32(215.28964), np.float32(220.66765), np.float32(217.23907), np.float32(216.70502), np.float32(215.82458), np.float32(218.11745), np.float32(220.28674), np.float32(220.16835), np.float32(227.61894), np.float32(223.06416), np.float32(227.25452), np.float32(449.1181), np.float32(447.3399), np.float32(445.07516), np.float32(440.87167), np.float32(433.69843), np.float32(427.58517), np.float32(421.6163), np.float32(209.17589), np.float32(214.42043), np.float32(213.33337), np.float32(222.54172), np.float32(219.4388), np.float32(226.95543), np.float32(226.0256), np.float32(225.0502), np.float32(230.2883), np.float32(329.4352), np.float32(329.88516), np.float32(328.01987), np.float32(328.01324), np.float32(329.51373), np.float32(328.77844), np.float32(329.67438), np.float32(328.33716), np.float32(328.2206), np.float32(328.7422), np.float32(776.5104), np.float32(777.94165), np.float32(237.24084), np.float32(390.4971), np.float32(261.28427), np.float32(259.49234), np.float32(195.98389), np.float32(781.21747), np.float32(781.474), np.float32(190.05003), np.float32(193.82445), np.float32(192.54675), np.float32(192.94017), np.float32(782.1076), np.float32(780.4719), np.float32(780.31744), np.float32(329.26575), np.float32(328.92365), np.float32(330.28632), np.float32(328.8316), np.float32(192.30444), np.float32(327.9458), np.float32(329.049), np.float32(329.3059), np.float32(329.4154), np.float32(328.8498), np.float32(328.5796), np.float32(327.93344), np.float32(330.04813), np.float32(328.65353), np.float32(328.4283), np.float32(329.91464), np.float32(328.5981), np.float32(329.82703), np.float32(328.68283), np.float32(328.36368), np.float32(328.96002), np.float32(328.7531), np.float32(328.99667), np.float32(329.13388), np.float32(329.2642), np.float32(328.41724), np.float32(328.74573), np.float32(329.0135), np.float32(329.4851), np.float32(329.116), np.float32(329.6892), np.float32(328.92938), np.float32(329.66763), np.float32(329.62494), np.float32(328.88046), np.float32(331.63498), np.float32(181.74081), np.float32(194.18353), np.float32(253.56512), np.float32(255.14462), np.float32(329.8413), np.float32(329.93405), np.float32(330.5514), np.float32(328.47504), np.float32(327.5742), np.float32(329.4943), np.float32(328.2732), np.float32(328.80612), np.float32(329.46863), np.float32(328.09457), np.float32(329.47192), np.float32(329.05518), np.float32(328.6127), np.float32(328.93912), np.float32(328.91565), np.float32(328.3592), np.float32(329.4234), np.float32(328.93787), np.float32(328.8099), np.float32(328.9754), np.float32(328.58047), np.float32(329.43045), np.float32(328.47797), np.float32(328.787), np.float32(329.4477), np.float32(328.86832), np.float32(328.96005), np.float32(329.1263), np.float32(329.7727), np.float32(328.73096), np.float32(328.271), np.float32(218.03294), np.float32(220.70633), np.float32(328.82437), np.float32(329.01706), np.float32(328.9556), np.float32(328.5075), np.float32(216.66792), np.float32(220.28383), np.float32(218.93501), np.float32(219.09392), np.float32(220.63063), np.float32(216.28639), np.float32(218.06973), np.float32(216.41621), np.float32(221.49783), np.float32(216.26073), np.float32(233.44498), np.float32(264.68), np.float32(234.72714), np.float32(219.35896), np.float32(219.6392), np.float32(330.89612), np.float32(327.4894), np.float32(327.32526), np.float32(329.69562), np.float32(329.269), np.float32(329.0531), np.float32(328.91547), np.float32(327.4822), np.float32(329.11923), np.float32(328.68167), np.float32(328.40918), np.float32(329.77557), np.float32(328.6033), np.float32(329.31607), np.float32(328.76614), np.float32(328.31372), np.float32(328.94955), np.float32(328.90958), np.float32(328.3163), np.float32(329.03574), np.float32(329.36542), np.float32(328.65866), np.float32(328.98477), np.float32(328.47455), np.float32(328.89062), np.float32(328.85706), np.float32(329.21423), np.float32(329.18417), np.float32(328.6031), np.float32(328.3486), np.float32(329.1387), np.float32(329.11176), np.float32(328.43344), np.float32(328.25256), np.float32(217.83746), np.float32(218.04773), np.float32(216.67606), np.float32(776.87427), np.float32(776.92017), np.float32(776.6565), np.float32(659.87476), np.float32(658.6188), np.float32(659.3174), np.float32(777.37976), np.float32(775.27264), np.float32(251.75209), np.float32(240.787), np.float32(258.96234), np.float32(330.98016), np.float32(330.08368), np.float32(331.36023), np.float32(330.33142), np.float32(327.09268), np.float32(328.6127), np.float32(330.0196), np.float32(328.3256), np.float32(328.73523), np.float32(329.37054), np.float32(327.83948), np.float32(329.56763), np.float32(329.1552), np.float32(328.36044), np.float32(328.90375), np.float32(328.65305), np.float32(329.17773), np.float32(329.17334), np.float32(328.67593), np.float32(329.17624), np.float32(328.74173), np.float32(328.1782), np.float32(329.80115), np.float32(328.92593), np.float32(329.18423), np.float32(329.4008), np.float32(328.9929), np.float32(329.39093), np.float32(328.78632), np.float32(329.37646), np.float32(329.18735), np.float32(328.7235), np.float32(328.6972), np.float32(329.59753), np.float32(329.21506), np.float32(329.08395), np.float32(328.60452), np.float32(329.15796), np.float32(330.24072), np.float32(329.36697), np.float32(329.37994), np.float32(328.6667), np.float32(778.32733), np.float32(777.33746), np.float32(777.83563), np.float32(659.05457), np.float32(660.2828), np.float32(396.37378), np.float32(168.83492), np.float32(179.08464), np.float32(188.39804), np.float32(195.29552), np.float32(195.01048), np.float32(194.08392), np.float32(192.12427), np.float32(194.73013), np.float32(192.19362), np.float32(190.85555), np.float32(195.56303), np.float32(260.59357), np.float32(192.1254), np.float32(193.58435), np.float32(196.70052), np.float32(196.11806), np.float32(191.82878), np.float32(190.74207), np.float32(191.93118), np.float32(328.40442), np.float32(329.93182), np.float32(329.07355), np.float32(195.38258), np.float32(329.9598), np.float32(328.60342), np.float32(328.66626), np.float32(329.30148), np.float32(329.8008), np.float32(329.05496), np.float32(329.43094), np.float32(328.31747), np.float32(327.88794), np.float32(329.98605), np.float32(329.3976), np.float32(328.65625), np.float32(329.2153), np.float32(328.54276), np.float32(329.43106), np.float32(329.39572), np.float32(329.20535), np.float32(329.28162), np.float32(329.634), np.float32(328.41357), np.float32(330.05533), np.float32(329.77863), np.float32(206.4259), np.float32(330.20312), np.float32(329.03214), np.float32(210.86195), np.float32(332.52795), np.float32(325.3141), np.float32(330.69934), np.float32(330.1902), np.float32(329.27377), np.float32(332.17868), np.float32(222.301), np.float32(214.6219), np.float32(228.0299), np.float32(329.12308), np.float32(226.039), np.float32(216.03996), np.float32(220.00089), np.float32(328.02148), np.float32(214.06366), np.float32(222.1649), np.float32(217.57591), np.float32(329.4385), np.float32(327.81628), np.float32(329.23856), np.float32(328.72153), np.float32(219.94034), np.float32(216.62563), np.float32(328.14026), np.float32(328.42645), np.float32(329.06985), np.float32(329.01816), np.float32(329.21506), np.float32(220.1451), np.float32(216.64648), np.float32(219.37553), np.float32(216.45947), np.float32(329.4414), np.float32(328.8598), np.float32(217.6493), np.float32(217.77962), np.float32(218.19034), np.float32(219.85579), np.float32(215.91092), np.float32(219.3364), np.float32(327.73605), np.float32(221.97153), np.float32(216.61148), np.float32(221.61728), np.float32(218.14464), np.float32(218.49153), np.float32(217.50726), np.float32(217.09282), np.float32(221.00244), np.float32(215.69426), np.float32(207.22324), np.float32(325.02023), np.float32(327.67206), np.float32(329.18805), np.float32(330.3302), np.float32(329.91745), np.float32(330.4203), np.float32(328.21155), np.float32(327.7843), np.float32(329.34686), np.float32(329.37225), np.float32(329.01257), np.float32(328.4792), np.float32(328.08435), np.float32(328.8867), np.float32(328.81372), np.float32(328.8056), np.float32(328.95813), np.float32(328.86078), np.float32(328.36353), np.float32(328.98727), np.float32(329.13416), np.float32(328.85), np.float32(328.91898), np.float32(328.71042), np.float32(329.04572), np.float32(328.72488), np.float32(329.21103), np.float32(329.1504), np.float32(328.67313), np.float32(328.54538), np.float32(328.98865), np.float32(329.40164), np.float32(328.62634), np.float32(328.89807), np.float32(328.76465), np.float32(328.417), np.float32(328.8968), np.float32(329.34537), np.float32(328.9487), np.float32(328.69824), np.float32(329.01172), np.float32(329.3145), np.float32(777.30316), np.float32(328.55777), np.float32(329.18475), np.float32(328.1682), np.float32(329.2886), np.float32(778.174), np.float32(777.36005), np.float32(775.7596), np.float32(210.99979), np.float32(234.98274), np.float32(253.90079), np.float32(329.0139), np.float32(328.02765), np.float32(332.54025), np.float32(329.33157), np.float32(327.26862), np.float32(329.4679), np.float32(329.3328), np.float32(328.4677), np.float32(329.44092), np.float32(328.54483), np.float32(327.64542), np.float32(329.60233), np.float32(328.88763), np.float32(328.71072), np.float32(329.39542), np.float32(327.4762), np.float32(329.60455), np.float32(329.04117), np.float32(329.00354), np.float32(329.29657), np.float32(327.79492), np.float32(328.34195), np.float32(329.3511), np.float32(329.47632), np.float32(329.25433), np.float32(329.0729), np.float32(328.33044), np.float32(329.43402), np.float32(328.9019), np.float32(329.49304), np.float32(328.88013), np.float32(328.05368), np.float32(329.0961), np.float32(330.10977), np.float32(329.04065), np.float32(328.94724), np.float32(327.7286), np.float32(441.31122), np.float32(440.5407), np.float32(440.76212), np.float32(440.98917), np.float32(441.08438), np.float32(441.31168), np.float32(441.3623), np.float32(440.84662), np.float32(440.66663), np.float32(442.07886), np.float32(444.67065), np.float32(443.74957), np.float32(244.5928), np.float32(330.49432), np.float32(331.07184), np.float32(330.03937), np.float32(329.8209), np.float32(329.02884), np.float32(328.95465), np.float32(328.93066), np.float32(328.7809), np.float32(329.15204), np.float32(328.3003), np.float32(329.52563), np.float32(329.5546), np.float32(329.1291), np.float32(328.73584), np.float32(328.49756), np.float32(328.4209), np.float32(328.8416), np.float32(328.85455), np.float32(329.5912), np.float32(329.2032), np.float32(328.3159), np.float32(328.94687), np.float32(329.1325), np.float32(329.3674), np.float32(329.28506), np.float32(329.0299), np.float32(329.439), np.float32(328.73322), np.float32(329.353), np.float32(329.27728), np.float32(329.079), np.float32(328.99435), np.float32(328.69882), np.float32(328.99664), np.float32(329.13962), np.float32(329.57947), np.float32(328.76733), np.float32(329.201), np.float32(328.61047), np.float32(329.1262), np.float32(329.6697), np.float32(329.1487), np.float32(440.48996), np.float32(441.1143), np.float32(441.78812), np.float32(441.82462), np.float32(226.99704), np.float32(232.7808), np.float32(210.01698), np.float32(172.67984), np.float32(174.2338), np.float32(175.4166), np.float32(174.54236), np.float32(172.10698), np.float32(172.30148), np.float32(599.6701), np.float32(594.70654), np.float32(173.93478), np.float32(171.28503), np.float32(880.63214), np.float32(880.72253), np.float32(172.36766), np.float32(171.66449), np.float32(174.45949), np.float32(172.916), np.float32(175.28853), np.float32(171.08894), np.float32(171.06671), np.float32(169.32733), np.float32(175.13783), np.float32(171.66563), np.float32(173.92319), np.float32(170.08337), np.float32(176.15114), np.float32(170.11162), np.float32(585.6886), np.float32(585.7584), np.float32(585.50116), np.float32(882.2871), np.float32(885.33527), np.float32(589.62555), np.float32(589.978), np.float32(592.1911), np.float32(593.5544), np.float32(592.4602), np.float32(589.50275), np.float32(587.55304), np.float32(586.32745), np.float32(586.10004), np.float32(294.47058), np.float32(292.91763), np.float32(289.22656), np.float32(287.84674), np.float32(292.6435), np.float32(293.1681), np.float32(287.9286), np.float32(283.66568), np.float32(276.885), np.float32(172.18187), np.float32(258.3828), np.float32(167.5796), np.float32(168.80063), np.float32(298.1701), np.float32(596.94745), np.float32(596.04297), np.float32(592.7164), np.float32(591.3726), np.float32(592.3684), np.float32(592.82733), np.float32(590.59644), np.float32(588.3479), np.float32(587.4436), np.float32(586.40686), np.float32(585.0565), np.float32(583.85626), np.float32(584.41235), np.float32(586.4554), np.float32(586.6415), np.float32(586.70184), np.float32(586.1512), np.float32(584.8621), np.float32(579.8001), np.float32(282.7358), np.float32(281.139), np.float32(284.56766), np.float32(283.6894), np.float32(284.31927), np.float32(277.1885), np.float32(536.3368), np.float32(261.05), np.float32(262.2133), np.float32(262.1239), np.float32(263.7683), np.float32(262.79974), np.float32(264.70157), np.float32(263.22067), np.float32(264.6675), np.float32(260.59845), np.float32(262.02472), np.float32(259.54135), np.float32(259.47305), np.float32(258.298), np.float32(257.62814), np.float32(256.89886), np.float32(256.40125), np.float32(261.3596), np.float32(262.10638), np.float32(262.5708), np.float32(281.80588), np.float32(280.9637), np.float32(284.12396), np.float32(588.04083), np.float32(589.4669), np.float32(592.04126), np.float32(589.5062), np.float32(584.37915), np.float32(583.7595), np.float32(585.85), np.float32(587.38605), np.float32(587.8439), np.float32(587.43396), np.float32(885.87964), np.float32(889.8302), np.float32(897.3317), np.float32(606.7059), np.float32(607.0408), np.float32(608.0158), np.float32(611.7781), np.float32(621.48553), np.float32(616.8083), np.float32(607.45447), np.float32(590.87366), np.float32(583.8071), np.float32(862.38434), np.float32(864.38586), np.float32(580.4523), np.float32(586.3356), np.float32(593.00885), np.float32(600.93445), np.float32(604.30066), np.float32(605.67615), np.float32(601.3956), np.float32(592.3608), np.float32(585.2357), np.float32(569.9732), np.float32(564.86334), np.float32(571.1678), np.float32(582.9965), np.float32(590.3693), np.float32(596.2502), np.float32(300.28525), np.float32(297.2345), np.float32(298.11252), np.float32(297.07382), np.float32(294.6813), np.float32(291.02094), np.float32(285.65146), np.float32(285.10852), np.float32(281.5965), np.float32(283.23993), np.float32(439.3531), np.float32(201.61067), np.float32(276.80908), np.float32(281.51688), np.float32(582.2316), np.float32(582.99286), np.float32(584.01886), np.float32(586.35815), np.float32(585.42065), np.float32(584.4807), np.float32(587.4215), np.float32(586.36896), np.float32(583.46606), np.float32(583.592), np.float32(584.25793), np.float32(584.649), np.float32(585.6094), np.float32(586.7818), np.float32(588.49713), np.float32(587.7228), np.float32(289.90625), np.float32(283.6777), np.float32(283.4814), np.float32(280.1553), np.float32(275.2406), np.float32(260.923), np.float32(514.68555), np.float32(509.20645), np.float32(501.31503), np.float32(500.44504), np.float32(510.43158), np.float32(515.8403), np.float32(519.0419), np.float32(522.04205), np.float32(524.2106), np.float32(527.7148), np.float32(529.0341), np.float32(528.88617), np.float32(531.0522), np.float32(527.4698), np.float32(527.15356), np.float32(522.9369), np.float32(520.98755), np.float32(521.61554), np.float32(258.68515), np.float32(263.60562), np.float32(258.3832), np.float32(535.5703), np.float32(536.43463), np.float32(280.9072), np.float32(154.80652), np.float32(581.96356), np.float32(587.3521), np.float32(589.164), np.float32(293.09155), np.float32(159.06827), np.float32(294.13153), np.float32(293.94055), np.float32(163.42369), np.float32(160.23347), np.float32(582.693), np.float32(584.1706), np.float32(585.52045), np.float32(584.4407), np.float32(585.7113), np.float32(163.85677), np.float32(588.3462), np.float32(888.0403), np.float32(889.3177), np.float32(890.312), np.float32(890.77716), np.float32(890.90753), np.float32(590.0042), np.float32(588.6052), np.float32(588.85345), np.float32(591.61395), np.float32(591.03314), np.float32(589.6042), np.float32(586.63043), np.float32(583.6034), np.float32(584.27905), np.float32(585.8597), np.float32(587.60944), np.float32(589.5439), np.float32(590.07086), np.float32(293.81863), np.float32(293.94272), np.float32(584.9243), np.float32(292.75842), np.float32(286.81662), np.float32(285.82504), np.float32(288.9938), np.float32(287.09912), np.float32(286.4572), np.float32(286.6854), np.float32(284.81604), np.float32(280.94293), np.float32(271.7213), np.float32(262.1656), np.float32(282.07645), np.float32(297.56934), np.float32(299.73636), np.float32(602.0602), np.float32(603.0537), np.float32(600.9612), np.float32(598.0856), np.float32(592.0874), np.float32(585.16016), np.float32(577.1831), np.float32(576.6567), np.float32(579.93335), np.float32(580.81415), np.float32(580.8458), np.float32(582.36755), np.float32(587.6876), np.float32(590.44354), np.float32(592.8566), np.float32(598.7996), np.float32(297.63116), np.float32(296.1428), np.float32(289.2808), np.float32(291.75784), np.float32(295.76193), np.float32(289.5874), np.float32(284.6494), np.float32(276.45526), np.float32(520.6832), np.float32(516.8755), np.float32(516.57043), np.float32(517.01556), np.float32(518.2216), np.float32(519.93536), np.float32(521.74756), np.float32(524.7903), np.float32(530.0103), np.float32(532.73364), np.float32(534.10596), np.float32(533.2331), np.float32(534.15436), np.float32(533.1136), np.float32(528.5682), np.float32(523.8936), np.float32(522.8907), np.float32(522.12286), np.float32(522.4351), np.float32(523.1871), np.float32(531.70886), np.float32(535.8877), np.float32(541.33514), np.float32(552.44037), np.float32(567.7813), np.float32(577.4324), np.float32(584.9816), np.float32(587.0195), np.float32(587.1822), np.float32(886.37177), np.float32(885.26587), np.float32(882.8593), np.float32(586.226), np.float32(582.81757), np.float32(580.9595), np.float32(581.6583), np.float32(584.3801), np.float32(587.03735), np.float32(589.45294), np.float32(593.18445), np.float32(600.87756), np.float32(605.2492), np.float32(603.2639), np.float32(605.1281), np.float32(606.2526), np.float32(602.71844), np.float32(597.8936), np.float32(588.7418), np.float32(290.1667), np.float32(284.38278), np.float32(562.05566), np.float32(556.9052), np.float32(560.489), np.float32(563.37024), np.float32(577.4118), np.float32(592.6261), np.float32(602.27057), np.float32(602.25885), np.float32(596.1029), np.float32(597.84186), np.float32(599.7161), np.float32(594.3029), np.float32(587.2708), np.float32(287.45078), np.float32(286.44275), np.float32(577.292), np.float32(576.85236), np.float32(568.32916), np.float32(573.92615), np.float32(584.79675), np.float32(585.1827), np.float32(290.18405), np.float32(294.19962), np.float32(582.595), np.float32(585.7213), np.float32(584.74347), np.float32(583.8005), np.float32(296.4678), np.float32(298.6918), np.float32(298.18866), np.float32(301.8108), np.float32(303.17072), np.float32(308.34915), np.float32(172.83022), np.float32(170.07303), np.float32(323.46832), np.float32(170.29851), np.float32(180.2513), np.float32(174.58597), np.float32(172.1604), np.float32(169.01448), np.float32(184.61456), np.float32(167.84511), np.float32(168.69218), np.float32(168.38297), np.float32(181.29155), np.float32(166.45518), np.float32(177.99155), np.float32(440.84744), np.float32(172.81308), np.float32(164.27835), np.float32(184.37718), np.float32(440.62164), np.float32(166.14233), np.float32(162.10071), np.float32(442.75378), np.float32(447.23303), np.float32(528.26794), np.float32(524.15405), np.float32(525.4098), np.float32(520.9885), np.float32(522.4006), np.float32(527.5974), np.float32(525.28357), np.float32(521.6912), np.float32(517.9499), np.float32(516.0726), np.float32(516.0695), np.float32(519.0051), np.float32(519.0309), np.float32(519.69635), np.float32(521.6063), np.float32(524.93475), np.float32(528.00775), np.float32(530.40546), np.float32(530.7275), np.float32(528.26544), np.float32(529.0381), np.float32(524.76984), np.float32(518.40265), np.float32(518.7915), np.float32(522.3951), np.float32(518.83325), np.float32(515.11316), np.float32(517.6088), np.float32(217.1169), np.float32(216.0576), np.float32(218.29877), np.float32(535.3557), np.float32(532.5582), np.float32(530.759), np.float32(527.3711), np.float32(523.155), np.float32(227.81178), np.float32(212.56348), np.float32(225.59578), np.float32(213.84485), np.float32(222.07893), np.float32(215.04532), np.float32(218.88644), np.float32(219.86195), np.float32(214.9832), np.float32(221.03174), np.float32(213.5286), np.float32(221.63055), np.float32(215.87334), np.float32(219.38745), np.float32(218.85796), np.float32(216.42732), np.float32(217.51866), np.float32(219.44604), np.float32(216.47073), np.float32(218.95087), np.float32(217.52226), np.float32(217.47292), np.float32(219.45164), np.float32(215.89053), np.float32(219.94766), np.float32(217.06235), np.float32(218.67873), np.float32(217.16797), np.float32(218.24161), np.float32(217.57265), np.float32(209.96883), np.float32(214.7817), np.float32(325.8788), np.float32(215.66516), np.float32(228.86559), np.float32(210.77267), np.float32(219.72704), np.float32(214.03174), np.float32(218.05379), np.float32(213.80086), np.float32(214.64236), np.float32(225.55917), np.float32(210.3948), np.float32(226.7948), np.float32(211.92392), np.float32(222.78673), np.float32(217.2361), np.float32(215.37753), np.float32(219.39893), np.float32(211.90186), np.float32(221.55087), np.float32(213.36108), np.float32(225.68582), np.float32(216.55156), np.float32(224.5204), np.float32(215.32742), np.float32(218.80386), np.float32(217.70145), np.float32(217.24547), np.float32(222.6247), np.float32(216.93983), np.float32(220.22762), np.float32(215.97469), np.float32(221.19084), np.float32(215.54652), np.float32(219.4093), np.float32(217.13565), np.float32(218.38342), np.float32(220.71666), np.float32(214.789), np.float32(219.82094), np.float32(214.3415), np.float32(219.21964), np.float32(217.59798), np.float32(218.89902), np.float32(218.17172), np.float32(218.53041), np.float32(217.26721), np.float32(216.98897), np.float32(218.18056), np.float32(215.80563), np.float32(214.55127), np.float32(234.73357), np.float32(211.8238), np.float32(248.31857), np.float32(241.55544), np.float32(212.73964), np.float32(240.70386), np.float32(166.10512), np.float32(245.44234), np.float32(260.8013), np.float32(255.7363), np.float32(259.80017), np.float32(256.55466), np.float32(253.8244), np.float32(263.04532), np.float32(254.42728), np.float32(263.687), np.float32(256.1006), np.float32(164.1485), np.float32(165.68153), np.float32(262.1334), np.float32(259.35886), np.float32(512.99506), np.float32(259.8432), np.float32(257.3467), np.float32(778.20624), np.float32(778.36273), np.float32(780.2098), np.float32(514.98193), np.float32(515.6063), np.float32(251.00859), np.float32(778.55426), np.float32(777.51227), np.float32(777.2375), np.float32(778.7492), np.float32(514.98114), np.float32(516.3192), np.float32(226.51492), np.float32(212.41556), np.float32(778.0742), np.float32(776.2807), np.float32(776.2689), np.float32(221.47885), np.float32(438.7882), np.float32(223.56558), np.float32(214.21512), np.float32(776.04755), np.float32(775.0314), np.float32(163.63744), np.float32(166.84828), np.float32(170.61787), np.float32(171.46582), np.float32(173.07039), np.float32(170.45093), np.float32(164.81697), np.float32(164.75699), np.float32(163.94258), np.float32(165.72829), np.float32(164.53062), np.float32(164.1923), np.float32(166.59222), np.float32(162.96535), np.float32(162.40903), np.float32(163.48546), np.float32(162.3786), np.float32(166.14352), np.float32(164.85052), np.float32(164.68388), np.float32(166.23842), np.float32(164.00461), np.float32(165.7056), np.float32(162.44289), np.float32(162.9116), np.float32(161.86252), np.float32(163.11223), np.float32(165.60857), np.float32(163.29066), np.float32(164.92294), np.float32(165.68352), np.float32(164.12093), np.float32(165.80309), np.float32(164.02782), np.float32(163.20709), np.float32(164.51266), np.float32(161.87929), np.float32(164.39204), np.float32(162.56404), np.float32(164.34627), np.float32(166.5569), np.float32(163.7049), np.float32(166.93141), np.float32(162.48567), np.float32(221.21767), np.float32(210.41338), np.float32(222.56535), np.float32(211.14355), np.float32(222.4889), np.float32(214.4275), np.float32(216.48053), np.float32(215.09319), np.float32(210.0786), np.float32(215.47885), np.float32(233.31046), np.float32(163.48755), np.float32(162.1223), np.float32(164.88722), np.float32(164.18173), np.float32(165.22108), np.float32(166.20015), np.float32(164.41962), np.float32(164.57822), np.float32(162.77098), np.float32(164.85243), np.float32(162.68364), np.float32(163.83073), np.float32(166.50763), np.float32(164.08278), np.float32(165.26476), np.float32(164.00482), np.float32(164.8787), np.float32(165.09137), np.float32(162.84503), np.float32(163.80505), np.float32(161.92085), np.float32(261.743), np.float32(258.19995), np.float32(259.92725), np.float32(259.2309), np.float32(165.69136), np.float32(165.14526), np.float32(164.5627), np.float32(164.39584), np.float32(443.39688), np.float32(328.36365), np.float32(328.16888), np.float32(328.73273), np.float32(328.63574), np.float32(328.4895), np.float32(329.46783), np.float32(328.56613), np.float32(329.31412), np.float32(328.76538), np.float32(329.02563), np.float32(329.02637), np.float32(328.6255), np.float32(328.80716), np.float32(329.49866), np.float32(328.88007), np.float32(330.17532), np.float32(209.26553), np.float32(208.36995), np.float32(204.8821), np.float32(240.06046), np.float32(214.3338), np.float32(164.39734), np.float32(165.3857), np.float32(165.95099), np.float32(162.41528), np.float32(167.64816), np.float32(163.18506), np.float32(166.46378), np.float32(163.39499), np.float32(162.5092), np.float32(164.39667), np.float32(162.97607), np.float32(165.8558), np.float32(166.23991), np.float32(163.5836), np.float32(168.60577), np.float32(163.68861), np.float32(167.9452), np.float32(161.89343), np.float32(218.7022), np.float32(442.42883), np.float32(218.34288), np.float32(224.8168), np.float32(213.91139), np.float32(228.18219), np.float32(211.48021), np.float32(229.91344), np.float32(442.0383), np.float32(221.61697), np.float32(440.55695), np.float32(443.88892), np.float32(440.32513), np.float32(441.56595), np.float32(223.0826), np.float32(440.2654), np.float32(442.1052), np.float32(440.3041), np.float32(216.22812), np.float32(217.73485), np.float32(219.98944), np.float32(218.40668), np.float32(218.10898), np.float32(217.86679), np.float32(217.51967), np.float32(216.8088), np.float32(217.79707), np.float32(216.67006), np.float32(215.2754), np.float32(216.44719), np.float32(218.49142), np.float32(332.0692), np.float32(224.7923), np.float32(164.15344), np.float32(164.84703), np.float32(171.44403), np.float32(166.70421), np.float32(213.46378), np.float32(203.73364), np.float32(167.32887), np.float32(395.60962), np.float32(167.50932), np.float32(393.61066), np.float32(400.37445), np.float32(394.31494), np.float32(405.48694), np.float32(408.27124), np.float32(211.33109), np.float32(425.67203), np.float32(432.54175), np.float32(437.64392), np.float32(440.34113), np.float32(441.1951), np.float32(443.6117), np.float32(446.04434), np.float32(447.0237), np.float32(447.7212), np.float32(445.90506), np.float32(443.8482), np.float32(221.12894), np.float32(215.53452), np.float32(218.74818), np.float32(218.39433), np.float32(218.56358), np.float32(216.82445), np.float32(216.59193), np.float32(218.49245), np.float32(437.54007), np.float32(439.43185), np.float32(440.7205), np.float32(441.53412), np.float32(440.5908), np.float32(444.90784), np.float32(444.57938), np.float32(442.26437), np.float32(440.10876), np.float32(438.05148), np.float32(436.9667), np.float32(432.8964), np.float32(435.42404), np.float32(442.783), np.float32(188.51239), np.float32(165.45181), np.float32(467.98486), np.float32(479.06714), np.float32(496.46585), np.float32(504.11618), np.float32(509.2225), np.float32(513.02014), np.float32(518.42114), np.float32(520.19934), np.float32(518.37976), np.float32(518.74304), np.float32(523.7151), np.float32(522.7554), np.float32(522.4503), np.float32(528.47845), np.float32(524.4999), np.float32(524.05457), np.float32(525.5736), np.float32(522.8718), np.float32(520.7135), np.float32(521.2724), np.float32(521.8469), np.float32(520.1594), np.float32(517.9376), np.float32(257.3135), np.float32(264.50076), np.float32(263.66708), np.float32(266.2604), np.float32(261.64108), np.float32(262.9649), np.float32(259.97073), np.float32(261.0033), np.float32(261.47296), np.float32(261.09277), np.float32(261.96158), np.float32(259.6228), np.float32(260.54666), np.float32(257.9973), np.float32(260.67572), np.float32(258.4665), np.float32(262.30942), np.float32(261.53586), np.float32(261.9708), np.float32(262.14453), np.float32(264.38333), np.float32(266.02856), np.float32(266.43942), np.float32(277.35477), np.float32(288.2762), np.float32(280.20013), np.float32(283.59763), np.float32(298.10995), np.float32(296.6151), np.float32(283.22012), np.float32(597.0944), np.float32(594.3548), np.float32(591.82434), np.float32(588.9811), np.float32(589.6471), np.float32(589.6952), np.float32(588.91595), np.float32(588.26843), np.float32(174.78087), np.float32(590.8177), np.float32(890.53455), np.float32(890.6039), np.float32(893.0532), np.float32(898.22266), np.float32(606.4933), np.float32(606.91736), np.float32(606.1738), np.float32(602.8158), np.float32(595.32733), np.float32(174.95332), np.float32(169.79314), np.float32(856.393), np.float32(571.6645), np.float32(575.4792), np.float32(585.17725), np.float32(593.5238), np.float32(600.09576), np.float32(602.8082), np.float32(597.5187), np.float32(588.4641), np.float32(581.0225), np.float32(577.1615), np.float32(581.00854), np.float32(585.6627), np.float32(593.9284), np.float32(301.37576), np.float32(283.4878), np.float32(275.8895), np.float32(167.21889), np.float32(232.43114), np.float32(167.20584), np.float32(187.24767), np.float32(166.98842), np.float32(222.00888), np.float32(225.61127), np.float32(439.52902), np.float32(438.965), np.float32(228.3848), np.float32(238.72078), np.float32(533.8349), np.float32(557.4361), np.float32(567.0871), np.float32(587.62933), np.float32(597.35785), np.float32(599.7023), np.float32(596.2461), np.float32(588.6421), np.float32(582.6146), np.float32(583.25714), np.float32(580.89886), np.float32(580.68427), np.float32(583.01), np.float32(583.6628), np.float32(585.09625), np.float32(582.53406), np.float32(578.44293), np.float32(290.01874), np.float32(293.9848), np.float32(296.7088), np.float32(293.9163), np.float32(286.4403), np.float32(283.53845), np.float32(280.95822), np.float32(271.22528), np.float32(260.39136), np.float32(258.1054), np.float32(256.97253), np.float32(257.9724), np.float32(263.09094), np.float32(260.93265), np.float32(265.08243), np.float32(262.923), np.float32(265.1224), np.float32(262.1784), np.float32(263.7922), np.float32(261.75803), np.float32(262.81317), np.float32(258.3691), np.float32(259.9253), np.float32(257.63263), np.float32(254.6939), np.float32(259.09677), np.float32(254.96481), np.float32(263.5076), np.float32(258.2804), np.float32(267.44714), np.float32(261.7983), np.float32(568.4448), np.float32(575.7317), np.float32(585.6091), np.float32(590.55084), np.float32(595.89905), np.float32(596.67444), np.float32(591.07355), np.float32(587.2931), np.float32(584.32446), np.float32(580.9235), np.float32(581.69965), np.float32(584.08813), np.float32(589.45483), np.float32(600.1456), np.float32(605.31616), np.float32(608.09125), np.float32(608.74896), np.float32(607.6509), np.float32(606.6234), np.float32(600.88855), np.float32(591.9361), np.float32(580.18634), np.float32(568.0617), np.float32(571.3948), np.float32(576.1958), np.float32(580.8606), np.float32(587.6843), np.float32(595.1781), np.float32(603.4011), np.float32(604.7185), np.float32(597.87366), np.float32(589.01373), np.float32(583.97363), np.float32(583.8517), np.float32(584.7617), np.float32(290.3102), np.float32(286.31503), np.float32(280.70834), np.float32(278.45236), np.float32(233.88994), np.float32(209.07275), np.float32(167.07243), np.float32(206.09187), np.float32(224.15257), np.float32(210.12534), np.float32(224.76616), np.float32(230.50986), np.float32(450.04843), np.float32(263.64615), np.float32(252.04872), np.float32(533.58954), np.float32(558.0418), np.float32(573.0288), np.float32(587.5526), np.float32(595.3081), np.float32(596.7185), np.float32(595.9498), np.float32(592.7316), np.float32(588.0837), np.float32(584.9802), np.float32(583.8201), np.float32(586.0594), np.float32(588.40515), np.float32(590.8337), np.float32(589.2781), np.float32(584.96716), np.float32(574.3111), np.float32(288.09097), np.float32(295.16403), np.float32(287.31964), np.float32(285.34863), np.float32(287.05267), np.float32(280.50485), np.float32(270.30673), np.float32(262.5919), np.float32(263.46274), np.float32(257.13965), np.float32(258.02243), np.float32(259.71268), np.float32(259.26123), np.float32(262.47836), np.float32(261.201), np.float32(262.73618), np.float32(262.74045), np.float32(264.1877), np.float32(261.50467), np.float32(262.42746), np.float32(261.05548), np.float32(262.92322), np.float32(259.11554), np.float32(260.47876), np.float32(259.27866), np.float32(258.1607), np.float32(259.46112), np.float32(259.75317), np.float32(261.19565), np.float32(256.5889), np.float32(268.54535), np.float32(260.38968), np.float32(553.68134), np.float32(561.1434), np.float32(565.1782), np.float32(874.0641), np.float32(886.6866), np.float32(890.98), np.float32(890.7447), np.float32(885.6125), np.float32(877.93414), np.float32(871.75183), np.float32(869.97314), np.float32(872.8137), np.float32(883.7821), np.float32(891.6328), np.float32(903.285), np.float32(912.9808), np.float32(915.82526), np.float32(933.2606), np.float32(941.61224), np.float32(941.73615), np.float32(930.5853), np.float32(903.9558), np.float32(878.1159), np.float32(860.7372), np.float32(849.4668), np.float32(860.5942), np.float32(868.6465), np.float32(887.4627), np.float32(596.2071), np.float32(605.44836), np.float32(607.8571), np.float32(604.3926), np.float32(591.8323), np.float32(578.8917), np.float32(572.1782), np.float32(581.3087), np.float32(583.1564), np.float32(580.20276), np.float32(279.39206), np.float32(267.97202), np.float32(248.01828), np.float32(440.2953), np.float32(442.03174), np.float32(153.21637), np.float32(440.182), np.float32(442.02243), np.float32(159.83472), np.float32(443.4651), np.float32(444.8689), np.float32(439.96765), np.float32(273.13373), np.float32(561.92914), np.float32(569.3832), np.float32(581.2626), np.float32(584.4755), np.float32(582.7609), np.float32(584.9849), np.float32(589.5024), np.float32(587.946), np.float32(581.9102), np.float32(584.9698), np.float32(586.7242), np.float32(586.412), np.float32(587.6807), np.float32(588.71936), np.float32(586.9951), np.float32(578.1718), np.float32(287.99847), np.float32(296.0855), np.float32(292.4831), np.float32(287.38553), np.float32(283.10004), np.float32(280.2633), np.float32(271.8641), np.float32(262.7565), np.float32(262.34348), np.float32(512.8375), np.float32(505.91653), np.float32(259.31604), np.float32(260.89932), np.float32(264.73172), np.float32(258.13016), np.float32(262.8111), np.float32(264.42737), np.float32(257.29062), np.float32(262.13956), np.float32(260.48016), np.float32(260.88974), np.float32(256.89316), np.float32(262.94803), np.float32(256.05457), np.float32(260.68744), np.float32(261.66562), np.float32(257.28632), np.float32(264.2789), np.float32(263.4609), np.float32(261.68823), np.float32(260.33432), np.float32(274.63486), np.float32(273.45627), np.float32(262.04858), np.float32(568.48816), np.float32(575.1569), np.float32(576.3696), np.float32(580.85455), np.float32(880.2366), np.float32(882.5723), np.float32(881.0774), np.float32(879.41473), np.float32(880.3192), np.float32(881.25903), np.float32(882.83386), np.float32(885.0409), np.float32(886.9926), np.float32(885.46387), np.float32(884.69775), np.float32(883.77124), np.float32(883.9549), np.float32(884.6652), np.float32(885.6958), np.float32(885.25433), np.float32(884.8249), np.float32(885.1191), np.float32(880.54846), np.float32(875.3318), np.float32(877.08594), np.float32(585.09845), np.float32(585.31024), np.float32(586.3186), np.float32(586.39935), np.float32(586.5665), np.float32(586.4904), np.float32(586.2864), np.float32(586.8653), np.float32(586.4905), np.float32(585.18396), np.float32(583.557), np.float32(584.1078), np.float32(298.43845), np.float32(296.23056), np.float32(289.2716), np.float32(284.1493), np.float32(280.44858), np.float32(156.7152), np.float32(281.51053), np.float32(285.112), np.float32(286.11438), np.float32(296.72433), np.float32(313.69714), np.float32(340.24493), np.float32(345.38602), np.float32(351.17618), np.float32(349.74405), np.float32(346.30887), np.float32(331.61667), np.float32(172.17143), np.float32(322.06656), np.float32(325.78018), np.float32(330.40472), np.float32(323.39618), np.float32(325.96326), np.float32(331.03586), np.float32(327.89322), np.float32(329.607), np.float32(328.15466), np.float32(327.24057), np.float32(331.62314), np.float32(329.02356), np.float32(330.6051), np.float32(330.37604), np.float32(330.27728), np.float32(334.30423), np.float32(330.67618), np.float32(331.57272), np.float32(328.24268), np.float32(325.66376), np.float32(327.88644), np.float32(325.9245), np.float32(327.65198), np.float32(333.7269), np.float32(664.28143), np.float32(660.5735), np.float32(656.50214), np.float32(657.8575), np.float32(659.6039), np.float32(659.71277), np.float32(660.26917), np.float32(658.8336), np.float32(659.98267), np.float32(661.35693), np.float32(664.393), np.float32(668.91986), np.float32(672.3891), np.float32(675.6535), np.float32(681.60504), np.float32(688.9778), np.float32(693.20514), np.float32(696.4644), np.float32(698.85266), np.float32(699.30383), np.float32(697.04596), np.float32(697.39044), np.float32(690.0832), np.float32(682.7676), np.float32(675.97003), np.float32(662.59296), np.float32(653.8803), np.float32(641.75006), np.float32(631.1204), np.float32(632.1105), np.float32(640.8177), np.float32(656.36414), np.float32(672.8491), np.float32(674.23047), np.float32(192.84508), np.float32(192.72084), np.float32(697.18414), np.float32(695.06146), np.float32(700.25006), np.float32(1014.5397), np.float32(1001.87585), np.float32(987.3939), np.float32(973.8772), np.float32(191.3461), np.float32(323.08234), np.float32(318.4685), np.float32(323.52307), np.float32(328.26144), np.float32(192.90791), np.float32(194.50153), np.float32(677.03796), np.float32(198.49483), np.float32(334.1406), np.float32(333.06372), np.float32(332.30313), np.float32(329.52487), np.float32(331.62665), np.float32(322.32257), np.float32(324.44943), np.float32(328.26526), np.float32(321.5601), np.float32(191.71855), np.float32(195.07431), np.float32(192.53723), np.float32(196.64014), np.float32(194.3539), np.float32(193.8802), np.float32(194.62941), np.float32(193.75673), np.float32(225.66188), np.float32(236.97635), np.float32(250.62581), np.float32(492.9016), np.float32(493.5026), np.float32(493.46292), np.float32(493.22525), np.float32(493.26343), np.float32(493.30502), np.float32(493.14575), np.float32(493.63263), np.float32(294.83487), np.float32(292.52563), np.float32(295.5111), np.float32(493.64688), np.float32(298.07077), np.float32(283.16403), np.float32(295.03912), np.float32(288.28906), np.float32(296.6187), np.float32(493.11246), np.float32(492.99725), np.float32(293.90665), np.float32(294.88467), np.float32(493.3107), np.float32(492.91208), np.float32(492.94028), np.float32(298.05377), np.float32(285.92023), np.float32(293.675), np.float32(296.15424), np.float32(286.73236), np.float32(295.06335), np.float32(293.5164), np.float32(289.1336), np.float32(294.00848), np.float32(291.39325), np.float32(283.33948), np.float32(296.79037), np.float32(293.69867), np.float32(293.35822), np.float32(288.40787), np.float32(293.60178), np.float32(297.61255), np.float32(190.76706), np.float32(209.7217), np.float32(192.5893), np.float32(198.4994), np.float32(194.63075), np.float32(231.68938), np.float32(237.43576), np.float32(231.5508), np.float32(184.59026), np.float32(193.3341), np.float32(249.30626), np.float32(245.55981), np.float32(247.891), np.float32(248.56596), np.float32(243.66322), np.float32(249.79143), np.float32(242.71387), np.float32(249.19711), np.float32(243.8225), np.float32(249.44145), np.float32(244.67369), np.float32(249.68178), np.float32(246.13733), np.float32(247.47125), np.float32(247.48564), np.float32(246.55978), np.float32(247.00404), np.float32(245.66173), np.float32(248.4706), np.float32(246.19945), np.float32(247.46548), np.float32(246.65712), np.float32(246.46242), np.float32(247.52765), np.float32(247.20148), np.float32(248.47656), np.float32(245.55362), np.float32(249.40488), np.float32(242.80763), np.float32(249.18958), np.float32(244.88742), np.float32(248.62003), np.float32(245.82712), np.float32(249.10074), np.float32(245.4093), np.float32(247.59189), np.float32(247.0056), np.float32(246.00784), np.float32(247.12558), np.float32(245.2047), np.float32(246.98189), np.float32(247.85841), np.float32(246.67108), np.float32(244.58328), np.float32(247.46457), np.float32(247.6192), np.float32(232.05559), np.float32(228.13982), np.float32(491.37686), np.float32(492.23276), np.float32(492.26544), np.float32(493.1495), np.float32(493.50424), np.float32(492.79828), np.float32(493.03522), np.float32(494.0002), np.float32(492.42133), np.float32(493.8807), np.float32(492.538), np.float32(494.23978), np.float32(492.46942), np.float32(492.55566), np.float32(493.83664), np.float32(493.2549), np.float32(492.01672), np.float32(493.42752), np.float32(493.37802), np.float32(277.37848), np.float32(299.6116), np.float32(278.27905), np.float32(300.16812), np.float32(275.2156), np.float32(299.05872), np.float32(277.1786), np.float32(190.75003), np.float32(277.7948), np.float32(297.82556), np.float32(268.30173), np.float32(297.4873), np.float32(271.8422), np.float32(238.78133), np.float32(261.2868), np.float32(239.30489), np.float32(259.7339), np.float32(238.69987), np.float32(253.29971), np.float32(239.7265), np.float32(248.91803), np.float32(243.84534), np.float32(250.25858), np.float32(492.20245), np.float32(243.24933), np.float32(244.74654), np.float32(242.06398), np.float32(251.6898), np.float32(241.58319), np.float32(227.52492), np.float32(194.33911), np.float32(190.00522), np.float32(192.74078), np.float32(195.66837), np.float32(294.527), np.float32(292.14798), np.float32(296.2747), np.float32(194.0681), np.float32(195.20439), np.float32(282.15283), np.float32(297.53418), np.float32(285.85458), np.float32(295.78436), np.float32(265.5469), np.float32(230.33046), np.float32(264.9066), np.float32(195.74033), np.float32(261.15552), np.float32(193.97362), np.float32(254.15112), np.float32(193.34706), np.float32(198.0339), np.float32(192.09894), np.float32(253.90997), np.float32(191.49562), np.float32(249.69926), np.float32(243.4867), np.float32(253.20766), np.float32(194.41196), np.float32(253.69054), np.float32(194.35504), np.float32(256.73004), np.float32(233.5564), np.float32(257.40216), np.float32(229.75844), np.float32(257.456), np.float32(226.93001), np.float32(192.29906), np.float32(194.86365), np.float32(193.63171), np.float32(194.1454), np.float32(196.0575), np.float32(192.35077), np.float32(197.2251), np.float32(192.2989), np.float32(204.11658), np.float32(191.45998), np.float32(201.1122), np.float32(191.01344), np.float32(275.17996), np.float32(494.1934), np.float32(496.2219), np.float32(184.36093), np.float32(190.9753), np.float32(492.37625), np.float32(493.05896), np.float32(494.19812), np.float32(491.25754), np.float32(493.66263), np.float32(493.89157), np.float32(493.19562), np.float32(492.85358), np.float32(493.66074), np.float32(493.2282), np.float32(493.18414), np.float32(493.47263), np.float32(493.45905), np.float32(493.31512), np.float32(493.49213), np.float32(493.372), np.float32(492.9275), np.float32(493.31778), np.float32(492.85147), np.float32(493.05487), np.float32(493.801), np.float32(492.77844), np.float32(492.78888), np.float32(493.70584), np.float32(492.57962), np.float32(494.23682), np.float32(492.83347), np.float32(493.3425), np.float32(493.99142), np.float32(491.28015), np.float32(493.61273), np.float32(492.56396), np.float32(493.7088), np.float32(493.02826), np.float32(492.34573), np.float32(242.36113), np.float32(243.80836), np.float32(242.9752), np.float32(249.53958), np.float32(246.66423), np.float32(247.21545), np.float32(248.64374), np.float32(243.42181), np.float32(246.59364), np.float32(246.8465), np.float32(240.85065), np.float32(240.86034), np.float32(182.8337), np.float32(185.70615), np.float32(496.16202), np.float32(493.19724), np.float32(493.0779), np.float32(493.51547), np.float32(492.66486), np.float32(493.7095), np.float32(243.29295), np.float32(249.25894), np.float32(248.80183), np.float32(493.7591), np.float32(494.107), np.float32(245.90938), np.float32(493.24496), np.float32(493.34082), np.float32(247.8434), np.float32(247.04283), np.float32(247.61993), np.float32(248.64832), np.float32(246.9467), np.float32(248.15027), np.float32(245.8774), np.float32(249.24706), np.float32(245.4304), np.float32(248.9386), np.float32(246.39719), np.float32(248.1686), np.float32(246.462), np.float32(248.25331), np.float32(248.3839), np.float32(247.38885), np.float32(248.45746), np.float32(247.1451), np.float32(247.99803), np.float32(246.67203), np.float32(248.44998), np.float32(247.55423), np.float32(249.36179), np.float32(247.62708), np.float32(246.75154), np.float32(248.45415), np.float32(246.44109), np.float32(248.85922), np.float32(246.87889), np.float32(247.06815), np.float32(246.42973), np.float32(250.4687), np.float32(256.37863), np.float32(260.7402), np.float32(166.23184), np.float32(173.01357), np.float32(252.59239), np.float32(248.08508), np.float32(250.55742), np.float32(247.58386), np.float32(249.63089), np.float32(248.16057), np.float32(249.18916), np.float32(248.35522), np.float32(245.57547), np.float32(248.43457), np.float32(246.02087), np.float32(248.48857), np.float32(247.11287), np.float32(249.76144), np.float32(245.2278), np.float32(248.21135), np.float32(246.0428), np.float32(247.96957), np.float32(247.49133), np.float32(246.17062), np.float32(247.76805), np.float32(246.31831), np.float32(246.78511), np.float32(244.96281), np.float32(245.46475), np.float32(244.43953), np.float32(246.08958), np.float32(248.2376), np.float32(246.25206), np.float32(248.51382), np.float32(245.75948), np.float32(246.72795), np.float32(492.74234), np.float32(493.24332), np.float32(492.96838), np.float32(492.6639), np.float32(492.63602), np.float32(492.50986), np.float32(492.74445), np.float32(284.9315), np.float32(295.16464), np.float32(288.85098), np.float32(297.70706), np.float32(289.78302), np.float32(298.29742), np.float32(279.3464), np.float32(189.35104), np.float32(192.33958), np.float32(192.58127), np.float32(190.29257), np.float32(199.84676), np.float32(330.23), np.float32(193.5701), np.float32(191.90509), np.float32(189.72629), np.float32(195.62741), np.float32(658.19946), np.float32(194.80257), np.float32(189.59702), np.float32(194.51991), np.float32(193.87578), np.float32(195.60847), np.float32(194.12917), np.float32(194.60283), np.float32(194.71788), np.float32(197.98508), np.float32(192.80836), np.float32(189.77757), np.float32(192.24019), np.float32(199.66498), np.float32(192.40195), np.float32(336.8555), np.float32(326.41553), np.float32(319.83713), np.float32(320.06317), np.float32(653.37195), np.float32(656.946), np.float32(659.51086), np.float32(659.05707), np.float32(658.20044), np.float32(657.92615), np.float32(657.7567), np.float32(656.13776), np.float32(326.94424), np.float32(316.77057), np.float32(301.22925), np.float32(194.02419), np.float32(192.84308), np.float32(192.29236), np.float32(194.8727), np.float32(192.8257), np.float32(191.6616), np.float32(188.8254), np.float32(192.9194), np.float32(194.43881), np.float32(260.36343), np.float32(262.59235), np.float32(260.44672), np.float32(285.18607), np.float32(304.64902), np.float32(301.35406), np.float32(318.20963), np.float32(331.64502), np.float32(329.02032), np.float32(325.97055), np.float32(327.20892), np.float32(328.2889), np.float32(326.5924), np.float32(191.72896), np.float32(659.07806), np.float32(663.6272), np.float32(665.3659), np.float32(668.80786), np.float32(668.91895), np.float32(330.91022), np.float32(336.9108), np.float32(335.7552), np.float32(341.83234), np.float32(191.35329), np.float32(365.47977), np.float32(371.7551), np.float32(397.71906), np.float32(400.48895), np.float32(399.96817), np.float32(397.67737), np.float32(394.3039), np.float32(383.64606), np.float32(378.88428), np.float32(354.60077), np.float32(346.72076), np.float32(195.91162), np.float32(193.631), np.float32(197.05252), np.float32(189.9841), np.float32(194.15834), np.float32(195.174), np.float32(196.26543), np.float32(191.26602), np.float32(192.07956), np.float32(197.34872), np.float32(263.66647), np.float32(262.37845), np.float32(262.42975), np.float32(262.84946), np.float32(259.2092), np.float32(263.89804), np.float32(261.48904), np.float32(252.25096), np.float32(256.53265), np.float32(258.46277), np.float32(260.14322), np.float32(334.37668), np.float32(348.86), np.float32(363.75314), np.float32(370.67822), np.float32(372.18573), np.float32(383.09512), np.float32(1537.1409), np.float32(1543.8744), np.float32(775.70013), np.float32(776.87787), np.float32(778.92883), np.float32(780.9893), np.float32(784.5751), np.float32(787.95953), np.float32(792.8886), np.float32(796.68066), np.float32(796.4364), np.float32(800.6454), np.float32(1213.5516), np.float32(1217.4993), np.float32(1212.4858), np.float32(1200.368), np.float32(1190.6957), np.float32(777.88983), np.float32(768.675), np.float32(753.06793), np.float32(753.9963), np.float32(759.3723), np.float32(771.5258), np.float32(795.4144), np.float32(798.45966), np.float32(805.50665), np.float32(811.9426), np.float32(810.6439), np.float32(1605.0314), np.float32(1585.9893), np.float32(772.44934), np.float32(763.21576), np.float32(768.4467), np.float32(776.42676), np.float32(780.68475), np.float32(787.61707), np.float32(818.13824), np.float32(452.746), np.float32(937.80634), np.float32(955.4317), np.float32(960.19), np.float32(958.7548), np.float32(948.17065), np.float32(901.11316), np.float32(865.6384), np.float32(833.78796), np.float32(743.04065), np.float32(711.38763), np.float32(696.1683), np.float32(686.63416), np.float32(1008.3702), np.float32(1003.11017), np.float32(991.39703), np.float32(984.6258), np.float32(982.1892), np.float32(981.4198), np.float32(979.51886), np.float32(978.295), np.float32(981.75385), np.float32(983.57697), np.float32(985.37805), np.float32(984.12756), np.float32(982.8505), np.float32(984.5986), np.float32(652.7896), np.float32(637.9282), np.float32(624.9157), np.float32(263.2341), np.float32(267.69766), np.float32(586.1072), np.float32(588.5404), np.float32(590.5558), np.float32(586.5184), np.float32(270.95074), np.float32(265.79913), np.float32(263.9343), np.float32(263.65128), np.float32(261.35507), np.float32(258.89175), np.float32(262.0989), np.float32(263.80466), np.float32(260.43613), np.float32(262.4978), np.float32(261.83197), np.float32(261.75952), np.float32(262.33102), np.float32(262.14032), np.float32(261.02972), np.float32(261.14957), np.float32(261.2084), np.float32(258.65695), np.float32(273.1346), np.float32(273.85696), np.float32(306.06598), np.float32(296.9222), np.float32(302.58502), np.float32(300.24524), np.float32(287.3289), np.float32(302.64658), np.float32(288.96954), np.float32(286.93768), np.float32(299.46167), np.float32(297.9737), np.float32(297.57983), np.float32(301.10458), np.float32(343.5802), np.float32(591.5238), np.float32(590.0663), np.float32(588.2876), np.float32(585.4353), np.float32(351.1093), np.float32(277.90524), np.float32(277.58908), np.float32(276.64154), np.float32(260.25275), np.float32(254.55394), np.float32(235.11165), np.float32(270.44427), np.float32(272.85327), np.float32(542.20636), np.float32(348.75082), np.float32(241.20235), np.float32(348.82037), np.float32(349.17642), np.float32(349.51297), np.float32(347.7288), np.float32(351.76736), np.float32(350.72464), np.float32(345.5877), np.float32(348.33667), np.float32(348.61978), np.float32(353.7881), np.float32(294.1541), np.float32(294.73965), np.float32(295.7654), np.float32(294.57773), np.float32(294.40222), np.float32(301.6862), np.float32(296.53708), np.float32(293.52002), np.float32(293.2176), np.float32(301.1764), np.float32(288.11087), np.float32(291.77234), np.float32(291.6413), np.float32(736.17975), np.float32(753.18024), np.float32(764.12115), np.float32(767.30273), np.float32(773.1446), np.float32(776.9327), np.float32(775.863), np.float32(779.18066), np.float32(793.81976), np.float32(813.60486), np.float32(833.97394), np.float32(857.02155), np.float32(870.3163), np.float32(886.2246), np.float32(889.8675), np.float32(890.80804), np.float32(889.84705), np.float32(885.1791), np.float32(876.4451), np.float32(870.8232), np.float32(870.7141), np.float32(871.1935), np.float32(871.5747), np.float32(872.66864), np.float32(866.49255), np.float32(844.9403), np.float32(556.1179), np.float32(761.2137), np.float32(719.73425), np.float32(698.08374), np.float32(685.3102), np.float32(444.67703), np.float32(440.89862), np.float32(437.31113), np.float32(434.3957), np.float32(297.15125), np.float32(295.60556), np.float32(296.09317), np.float32(293.86682), np.float32(293.8794), np.float32(444.81326), np.float32(443.63495), np.float32(440.97247), np.float32(437.79745), np.float32(433.5181), np.float32(290.83115), np.float32(417.14026), np.float32(226.4866), np.float32(220.56277), np.float32(223.78255), np.float32(217.71375), np.float32(216.8759), np.float32(442.84607), np.float32(443.20932), np.float32(441.20068), np.float32(439.6766), np.float32(440.4294), np.float32(437.73398), np.float32(431.34338), np.float32(429.6011), np.float32(433.55356), np.float32(437.3996), np.float32(440.57825), np.float32(444.52823), np.float32(446.9431), np.float32(447.4328), np.float32(229.43723), np.float32(231.34187), np.float32(352.40677), np.float32(350.30142), np.float32(346.31927), np.float32(230.26373), np.float32(351.87714), np.float32(351.99503), np.float32(352.4654), np.float32(217.54292), np.float32(349.57605), np.float32(352.30008), np.float32(352.56665), np.float32(351.65292), np.float32(341.1872), np.float32(350.47083), np.float32(352.67422), np.float32(351.83453), np.float32(350.14944), np.float32(343.85892), np.float32(349.97092), np.float32(350.54202), np.float32(351.35568), np.float32(351.58765), np.float32(349.77502), np.float32(349.47458), np.float32(220.23662), np.float32(347.65405), np.float32(351.09253), np.float32(351.60776), np.float32(351.96255), np.float32(230.17778), np.float32(218.43976), np.float32(152.8012), np.float32(288.88596), np.float32(293.21613), np.float32(297.77597), np.float32(294.33972), np.float32(294.33707), np.float32(294.77197), np.float32(295.27646), np.float32(296.9083), np.float32(294.84528), np.float32(297.2338), np.float32(295.37598), np.float32(296.8291), np.float32(297.92392), np.float32(294.00394), np.float32(295.43344), np.float32(297.00067), np.float32(302.33136), np.float32(294.8903), np.float32(350.50595), np.float32(349.15274), np.float32(353.87875), np.float32(301.8339), np.float32(295.51495), np.float32(292.75943), np.float32(348.95334), np.float32(352.90143), np.float32(303.2882), np.float32(351.35593), np.float32(475.50223), np.float32(482.95834), np.float32(497.55347), np.float32(778.6974), np.float32(793.7671), np.float32(798.36536), np.float32(798.74384), np.float32(795.5318), np.float32(790.8597), np.float32(277.9236), np.float32(516.14404), np.float32(518.5017), np.float32(517.8696), np.float32(521.6807), np.float32(799.92755), np.float32(276.89633), np.float32(540.20416), np.float32(555.2008), np.float32(563.7046), np.float32(572.5832), np.float32(582.73724), np.float32(577.91846), np.float32(574.1123), np.float32(567.8295), np.float32(237.1046), np.float32(507.20334), np.float32(219.2052), np.float32(232.5272), np.float32(234.10852), np.float32(259.43317), np.float32(248.7935), np.float32(273.25772), np.float32(220.50824), np.float32(216.0387), np.float32(222.16606), np.float32(216.47571), np.float32(219.1434), np.float32(217.38658), np.float32(217.45612), np.float32(219.1068), np.float32(217.97832), np.float32(223.13004), np.float32(215.12029), np.float32(222.51224), np.float32(218.75095), np.float32(216.07425), np.float32(218.43335), np.float32(220.2583), np.float32(218.62543), np.float32(215.36684), np.float32(218.03062), np.float32(514.3605), np.float32(521.991), np.float32(533.59125), np.float32(532.43164), np.float32(523.96106), np.float32(514.3983), np.float32(507.48138), np.float32(498.24014), np.float32(500.59402), np.float32(509.86377), np.float32(517.7364), np.float32(519.0717), np.float32(259.84833), np.float32(268.16385), np.float32(259.28653), np.float32(261.09454), np.float32(256.2307), np.float32(253.48685), np.float32(259.9158), np.float32(244.55981), np.float32(232.26836), np.float32(239.32436), np.float32(465.41537), np.float32(451.21085), np.float32(446.2282), np.float32(443.98853), np.float32(441.78336), np.float32(437.63144), np.float32(435.6668), np.float32(437.10046), np.float32(440.1516), np.float32(440.24857), np.float32(439.9802), np.float32(437.77518), np.float32(433.21283), np.float32(431.6789), np.float32(438.60214), np.float32(221.28065), np.float32(225.42041), np.float32(211.47108), np.float32(331.4863), np.float32(327.58267), np.float32(328.2578), np.float32(328.60065), np.float32(372.72464), np.float32(385.7312), np.float32(381.23483), np.float32(384.92706), np.float32(389.97968), np.float32(391.18384), np.float32(385.78107), np.float32(377.9342), np.float32(374.2679), np.float32(348.2114), np.float32(777.6776), np.float32(219.81017), np.float32(223.77542), np.float32(221.36974), np.float32(330.27194), np.float32(221.67935), np.float32(216.70013), np.float32(775.4361), np.float32(775.4389), np.float32(216.92627), np.float32(220.99275), np.float32(216.25739), np.float32(216.91356), np.float32(226.90054), np.float32(217.96657), np.float32(253.7594), np.float32(328.253), np.float32(329.15875), np.float32(330.30316), np.float32(329.67352), np.float32(630.0944), np.float32(635.603), np.float32(650.18774), np.float32(699.164), np.float32(728.77545), np.float32(500.0242), np.float32(512.48944), np.float32(516.6392), np.float32(517.44745), np.float32(518.90796), np.float32(522.13495), np.float32(526.23004), np.float32(529.3937), np.float32(528.76184), np.float32(526.72546), np.float32(525.29364), np.float32(523.9894), np.float32(522.43225), np.float32(519.9827), np.float32(518.457), np.float32(518.7791), np.float32(520.9601), np.float32(523.8016), np.float32(519.8685), np.float32(518.0603), np.float32(517.4709), np.float32(519.8814), np.float32(522.5694), np.float32(257.72336), np.float32(257.56113), np.float32(261.08557), np.float32(258.33435), np.float32(266.82645), np.float32(269.2982), np.float32(277.7569), np.float32(285.87265), np.float32(292.19736), np.float32(297.97736), np.float32(297.7806), np.float32(592.97723), np.float32(595.3462), np.float32(589.70233), np.float32(293.35593), np.float32(291.08765), np.float32(290.9825), np.float32(288.79346), np.float32(282.868), np.float32(295.4907), np.float32(301.19183), np.float32(287.8436), np.float32(298.33652), np.float32(292.3303), np.float32(287.06985), np.float32(298.97275), np.float32(289.834), np.float32(294.50583), np.float32(297.00623), np.float32(289.086), np.float32(296.20892), np.float32(294.43), np.float32(295.09125), np.float32(295.61), np.float32(289.80002), np.float32(297.65753), np.float32(292.59378), np.float32(292.49463), np.float32(298.71353), np.float32(288.4543), np.float32(293.85077), np.float32(292.3226), np.float32(289.6745), np.float32(300.84753), np.float32(294.8633), np.float32(585.8524), np.float32(587.34827), np.float32(585.2579), np.float32(584.0383), np.float32(583.57135), np.float32(581.3092), np.float32(580.6552), np.float32(579.92926), np.float32(579.4514), np.float32(581.5243), np.float32(585.79614), np.float32(602.4046), np.float32(621.5652), np.float32(651.7477), np.float32(670.55774), np.float32(684.07446), np.float32(704.61273), np.float32(700.24506), np.float32(1011.7084), np.float32(985.557), np.float32(315.62305), np.float32(598.4872), np.float32(585.60144), np.float32(277.86102), np.float32(276.0488), np.float32(346.29813), np.float32(352.30347), np.float32(338.20935), np.float32(353.13446), np.float32(349.06842), np.float32(344.98257), np.float32(346.5031), np.float32(345.35144), np.float32(346.3133), np.float32(337.46967), np.float32(311.82858), np.float32(318.14432), np.float32(347.45044), np.float32(165.68684), np.float32(181.06905), np.float32(167.10695), np.float32(170.04161), np.float32(351.61237), np.float32(165.04405), np.float32(171.76086), np.float32(172.13625), np.float32(172.51703), np.float32(170.19627), np.float32(172.59612), np.float32(169.72075), np.float32(168.69286), np.float32(173.08336), np.float32(167.29546), np.float32(174.84311), np.float32(165.02182), np.float32(179.955), np.float32(168.43022), np.float32(172.44606), np.float32(170.41818), np.float32(169.97786), np.float32(175.45413), np.float32(166.2551), np.float32(176.7021), np.float32(164.78166), np.float32(182.9655), np.float32(164.83575), np.float32(179.68317), np.float32(163.4609), np.float32(181.96176), np.float32(166.31538), np.float32(178.41087), np.float32(168.33997), np.float32(170.60156), np.float32(346.3301), np.float32(350.05856), np.float32(350.16998), np.float32(350.14108), np.float32(349.26996), np.float32(350.8091), np.float32(351.243), np.float32(350.97684), np.float32(348.15454), np.float32(349.89868), np.float32(348.27805), np.float32(352.05478), np.float32(348.349), np.float32(350.49667), np.float32(348.8764), np.float32(350.00348), np.float32(349.3956), np.float32(349.49152), np.float32(348.56952), np.float32(349.71283), np.float32(349.0506), np.float32(349.9983), np.float32(349.07965), np.float32(349.81372), np.float32(349.84866), np.float32(349.19318), np.float32(350.24887), np.float32(349.02017), np.float32(349.41904), np.float32(349.8719), np.float32(349.61316), np.float32(348.27753), np.float32(349.15506), np.float32(349.55838), np.float32(349.76978), np.float32(350.81174), np.float32(348.99768), np.float32(349.21048), np.float32(348.26303), np.float32(350.61084), np.float32(348.28302), np.float32(350.31583), np.float32(181.68437), np.float32(166.57585), np.float32(181.05174), np.float32(166.88321), np.float32(178.89763), np.float32(167.90002), np.float32(176.74419), np.float32(173.17784), np.float32(168.4204), np.float32(260.79874), np.float32(348.44427), np.float32(349.97552), np.float32(350.99384), np.float32(196.93076), np.float32(230.39401), np.float32(204.93427), np.float32(218.83298), np.float32(210.64275), np.float32(216.02356), np.float32(217.1262), np.float32(212.8611), np.float32(350.0125), np.float32(350.04242), np.float32(223.0422), np.float32(210.3334), np.float32(218.51387), np.float32(209.59961), np.float32(348.04697), np.float32(209.21358), np.float32(349.2816), np.float32(350.36047), np.float32(349.21545), np.float32(350.5562), np.float32(349.00674), np.float32(349.87003), np.float32(349.30814), np.float32(349.08798), np.float32(350.67938), np.float32(348.24246), np.float32(350.50986), np.float32(349.65167), np.float32(350.2667), np.float32(348.96146), np.float32(349.48926), np.float32(348.37326), np.float32(349.02014), np.float32(349.7484), np.float32(350.47485), np.float32(349.78223), np.float32(348.57996), np.float32(350.0342), np.float32(172.37941), np.float32(176.63943), np.float32(171.26968), np.float32(179.02313), np.float32(172.88066), np.float32(174.47554), np.float32(168.16435), np.float32(185.66002), np.float32(195.76031), np.float32(242.74171), np.float32(170.81389), np.float32(239.56767), np.float32(204.19545), np.float32(247.65703), np.float32(252.21753), np.float32(168.83258), np.float32(189.58427), np.float32(166.90204), np.float32(178.50172), np.float32(168.61407), np.float32(182.64194), np.float32(347.93402), np.float32(175.54756), np.float32(349.39615), np.float32(350.91766), np.float32(349.49152), np.float32(175.25122), np.float32(350.13354), np.float32(349.51022), np.float32(351.674), np.float32(346.22482), np.float32(352.5775), np.float32(413.09097), np.float32(422.2788), np.float32(440.1903), np.float32(435.9811), np.float32(821.27966), np.float32(805.86646), np.float32(798.17725), np.float32(795.4599), np.float32(794.73364), np.float32(791.3536), np.float32(788.7947), np.float32(780.1652), np.float32(774.1212), np.float32(774.83905), np.float32(776.85785), np.float32(776.05634), np.float32(775.3012), np.float32(775.56805), np.float32(778.05963), np.float32(779.69324), np.float32(780.4985), np.float32(780.2837), np.float32(779.5665), np.float32(777.5123), np.float32(773.5686), np.float32(763.7095), np.float32(307.65616), np.float32(184.2655), np.float32(186.22284), np.float32(340.11383), np.float32(341.2069), np.float32(683.04706), np.float32(188.29022), np.float32(331.69122), np.float32(329.04257), np.float32(326.4862), np.float32(327.07233), np.float32(329.48526), np.float32(327.8937), np.float32(329.72888), np.float32(332.9975), np.float32(330.09366), np.float32(331.01825), np.float32(328.96338), np.float32(328.56683), np.float32(329.93323), np.float32(330.2514), np.float32(330.42816), np.float32(392.90042), np.float32(380.1678), np.float32(355.16602), np.float32(324.28778), np.float32(314.3267), np.float32(318.2441), np.float32(326.95004), np.float32(331.81247), np.float32(335.64484), np.float32(331.67734), np.float32(324.75436), np.float32(311.99994), np.float32(327.65494), np.float32(785.54236), np.float32(783.74554), np.float32(783.07043), np.float32(780.25635), np.float32(783.6611), np.float32(783.7905), np.float32(782.0625), np.float32(783.42334), np.float32(784.90045), np.float32(261.46582), np.float32(190.3818), np.float32(185.5659), np.float32(262.04303), np.float32(211.2192), np.float32(190.60023), np.float32(327.6071), np.float32(182.08205), np.float32(785.78815), np.float32(342.44086), np.float32(339.39374), np.float32(2043.0049), np.float32(675.7262), np.float32(348.80637), np.float32(345.66864), np.float32(347.00287), np.float32(2146.52), np.float32(2157.5916), np.float32(2171.234), np.float32(2199.1216), np.float32(373.7608), np.float32(386.21225), np.float32(395.00647), np.float32(396.22705), np.float32(397.4942), np.float32(397.7745), np.float32(397.0111), np.float32(397.2978), np.float32(395.03323), np.float32(394.70526), np.float32(394.0004), np.float32(390.00482), np.float32(3112.601), np.float32(1920.0244), np.float32(1908.497), np.float32(764.8958), np.float32(757.7124), np.float32(362.9686), np.float32(354.67874), np.float32(352.07968), np.float32(683.81146), np.float32(685.32916), np.float32(676.448), np.float32(665.8976), np.float32(660.23303), np.float32(658.0246), np.float32(655.84375), np.float32(655.11865), np.float32(656.6443), np.float32(656.7322), np.float32(657.9739), np.float32(657.63434), np.float32(657.5712), np.float32(657.25397), np.float32(658.7279), np.float32(659.6143), np.float32(660.12463), np.float32(663.3702), np.float32(662.38855), np.float32(659.68274), np.float32(657.83734), np.float32(657.18274), np.float32(656.4608), np.float32(656.127), np.float32(655.8374), np.float32(655.7101), np.float32(654.01746), np.float32(652.4246), np.float32(1969.8422), np.float32(658.4735), np.float32(660.7128), np.float32(657.55975), np.float32(662.04443), np.float32(322.47116), np.float32(327.81226), np.float32(328.6266), np.float32(329.75897), np.float32(330.42874), np.float32(328.47052), np.float32(327.89392), np.float32(330.19617), np.float32(329.47748), np.float32(330.59122), np.float32(324.3073), np.float32(279.5685), np.float32(321.8461), np.float32(314.16574), np.float32(296.41522), np.float32(309.197), np.float32(302.65622), np.float32(329.4186), np.float32(327.4547), np.float32(328.30814), np.float32(328.6424), np.float32(328.73044), np.float32(328.66327), np.float32(327.94183), np.float32(328.31537), np.float32(329.10907), np.float32(656.5871), np.float32(258.81973), np.float32(261.70523), np.float32(261.00098), np.float32(262.29727), np.float32(260.7577), np.float32(268.86304), np.float32(440.1746), np.float32(440.92676), np.float32(438.92426), np.float32(413.668), np.float32(391.47278), np.float32(379.2993), np.float32(674.5016), np.float32(658.3875), np.float32(655.7204), np.float32(655.1867), np.float32(654.5452), np.float32(656.464), np.float32(656.99286), np.float32(656.55115), np.float32(655.4537), np.float32(655.0339), np.float32(328.07846), np.float32(328.77582), np.float32(328.54468), np.float32(328.1722), np.float32(327.07693), np.float32(327.66156), np.float32(328.555), np.float32(327.46677), np.float32(327.9973), np.float32(329.33554), np.float32(195.7856), np.float32(192.97021), np.float32(326.3334), np.float32(589.7846), np.float32(583.2735), np.float32(570.97845), np.float32(577.0085), np.float32(579.6648), np.float32(582.7116), np.float32(585.3255), np.float32(584.40063), np.float32(582.4651), np.float32(276.13623), np.float32(564.67535), np.float32(572.02716), np.float32(193.3662), np.float32(194.73808), np.float32(194.96037), np.float32(194.6784), np.float32(196.61491), np.float32(263.53116), np.float32(259.2245), np.float32(194.49814), np.float32(261.02182), np.float32(257.0694), np.float32(348.61575), np.float32(343.03806), np.float32(353.46136), np.float32(349.15063), np.float32(349.8926), np.float32(349.138), np.float32(597.78595), np.float32(594.9484), np.float32(591.57806), np.float32(588.31805), np.float32(587.987), np.float32(587.2423), np.float32(588.032), np.float32(587.6019), np.float32(296.90182), np.float32(299.56604), np.float32(345.97302), np.float32(282.88318), np.float32(349.81497), np.float32(348.9767), np.float32(353.29678), np.float32(347.7743), np.float32(346.66522), np.float32(290.68893), np.float32(280.27417), np.float32(353.3265), np.float32(255.75215), np.float32(274.04352), np.float32(522.2141), np.float32(523.69904), np.float32(267.5643), np.float32(226.86661), np.float32(350.30652), np.float32(346.1318), np.float32(346.59668), np.float32(352.0967), np.float32(351.2576), np.float32(351.5077), np.float32(348.95404), np.float32(290.59988), np.float32(351.6851), np.float32(351.59518), np.float32(353.42114), np.float32(296.0227), np.float32(295.71588), np.float32(289.87335), np.float32(292.62634), np.float32(291.24762), np.float32(297.2786), np.float32(226.93129), np.float32(226.64804), np.float32(631.9797), np.float32(646.0484), np.float32(757.15405), np.float32(770.42755), np.float32(775.4005), np.float32(774.8601), np.float32(773.91437), np.float32(782.0971), np.float32(796.0586), np.float32(804.69073), np.float32(815.26105), np.float32(837.5954), np.float32(860.02155), np.float32(887.68097), np.float32(896.29816), np.float32(894.3473), np.float32(893.8049), np.float32(890.72845), np.float32(886.3675), np.float32(878.8583), np.float32(871.2117), np.float32(866.6444), np.float32(866.638), np.float32(573.671), np.float32(564.36395), np.float32(559.52734), np.float32(545.21136), np.float32(527.0929), np.float32(517.1385), np.float32(512.0921), np.float32(499.5528), np.float32(489.1451), np.float32(333.109), np.float32(534.8075), np.float32(304.15942), np.float32(509.12778), np.float32(499.87225), np.float32(448.02914), np.float32(442.85376), np.float32(888.3034), np.float32(292.5627), np.float32(219.39442), np.float32(295.4256), np.float32(292.89612), np.float32(293.05432), np.float32(292.23465), np.float32(293.5603), np.float32(295.563), np.float32(283.93954), np.float32(293.27835), np.float32(290.4827), np.float32(347.254), np.float32(289.62173), np.float32(296.44293), np.float32(298.35635), np.float32(293.53955), np.float32(297.26654), np.float32(292.4908), np.float32(293.58475), np.float32(228.09895), np.float32(447.7617), np.float32(447.0434), np.float32(445.25833), np.float32(444.39526), np.float32(443.07748), np.float32(442.90518), np.float32(443.57388), np.float32(444.90683), np.float32(445.90128), np.float32(448.7439), np.float32(456.455), np.float32(463.64816), np.float32(468.31427), np.float32(233.51178), np.float32(231.22415), np.float32(450.12134), np.float32(445.3658), np.float32(442.395), np.float32(441.3591), np.float32(442.55728), np.float32(447.14746), np.float32(449.62405), np.float32(454.14908), np.float32(467.37595), np.float32(470.83282), np.float32(238.80634), np.float32(237.9309), np.float32(466.26343), np.float32(451.7265), np.float32(447.45325), np.float32(442.26654), np.float32(435.7458), np.float32(431.50955), np.float32(433.13834), np.float32(432.06308), np.float32(434.1149), np.float32(438.39008), np.float32(443.7071), np.float32(442.61594), np.float32(443.71362), np.float32(440.48596), np.float32(430.19214), np.float32(418.8722), np.float32(394.1351), np.float32(378.38675), np.float32(296.7755), np.float32(375.4578), np.float32(380.6583), np.float32(298.35367), np.float32(377.9709), np.float32(394.07245), np.float32(384.90668), np.float32(395.50677), np.float32(393.56207), np.float32(396.70288), np.float32(395.74197), np.float32(395.89142), np.float32(393.72794), np.float32(394.68515), np.float32(398.17267), np.float32(394.31824), np.float32(398.04007), np.float32(384.65057), np.float32(400.0902), np.float32(385.63962), np.float32(397.04846), np.float32(381.31763), np.float32(579.6511), np.float32(578.85364), np.float32(374.40732), np.float32(583.97925), np.float32(586.28876), np.float32(402.50656), np.float32(402.86093), np.float32(426.148), np.float32(448.68423), np.float32(473.1487), np.float32(489.30496), np.float32(501.84558), np.float32(514.0008), np.float32(520.5266), np.float32(523.1738), np.float32(524.1453), np.float32(523.0087), np.float32(520.8128), np.float32(518.4648), np.float32(514.34467), np.float32(511.7622), np.float32(511.0059), np.float32(512.1333), np.float32(511.51932), np.float32(169.38785), np.float32(330.11166), np.float32(162.13617), np.float32(330.1237), np.float32(326.55594), np.float32(327.75247), np.float32(328.69656), np.float32(331.87195), np.float32(216.38799), np.float32(221.9157), np.float32(215.4635), np.float32(222.19748), np.float32(217.30438), np.float32(218.10828), np.float32(218.9321), np.float32(220.28683), np.float32(217.23505), np.float32(218.55553), np.float32(216.42645), np.float32(327.63525), np.float32(225.23628), np.float32(216.30954), np.float32(219.83643), np.float32(216.57413), np.float32(220.2358), np.float32(216.92017), np.float32(449.57388), np.float32(460.26465), np.float32(478.22748), np.float32(491.6025), np.float32(496.58673), np.float32(510.25345), np.float32(521.1526), np.float32(524.422), np.float32(525.2158), np.float32(523.15625), np.float32(526.8977), np.float32(529.1781), np.float32(520.5876), np.float32(520.5735), np.float32(521.56824), np.float32(522.0799), np.float32(521.02637), np.float32(522.25146), np.float32(523.1671), np.float32(519.8103), np.float32(517.54407), np.float32(518.47894), np.float32(515.49945), np.float32(510.82495), np.float32(258.68597), np.float32(251.31105), np.float32(496.44992), np.float32(490.44272), np.float32(471.7897), np.float32(468.40854), np.float32(237.6609), np.float32(330.10727), np.float32(329.38193), np.float32(328.9377), np.float32(328.49936), np.float32(432.88162), np.float32(441.08777), np.float32(328.4165), np.float32(330.08575), np.float32(328.14337), np.float32(328.93954), np.float32(328.56638), np.float32(330.34048), np.float32(328.8559), np.float32(328.0357), np.float32(328.86118), np.float32(329.23126), np.float32(330.23346), np.float32(329.96655), np.float32(327.43524), np.float32(328.0041), np.float32(337.06827), np.float32(176.54922), np.float32(175.75606), np.float32(346.68854), np.float32(376.6153), np.float32(373.46445), np.float32(379.08133), np.float32(190.50601), np.float32(390.086), np.float32(395.88278), np.float32(396.51334), np.float32(399.7428), np.float32(403.18356), np.float32(402.53745), np.float32(402.16666), np.float32(398.68896), np.float32(398.56082), np.float32(398.87772), np.float32(397.53134), np.float32(395.21005), np.float32(390.5645), np.float32(383.2229), np.float32(380.17316), np.float32(572.9489), np.float32(577.5267), np.float32(578.86224), np.float32(579.4865), np.float32(581.4301), np.float32(800.5859), np.float32(824.83746), np.float32(854.4781), np.float32(883.9963), np.float32(898.07434), np.float32(909.61365), np.float32(943.5056), np.float32(982.1082), np.float32(1001.19104), np.float32(1011.67645), np.float32(1015.647), np.float32(1027.6031), np.float32(774.7221), np.float32(777.56085), np.float32(778.35815), np.float32(780.75793), np.float32(782.37225), np.float32(785.21906), np.float32(1046.766), np.float32(1046.0844), np.float32(1044.8353), np.float32(1048.9135), np.float32(1050.02), np.float32(1048.015), np.float32(1048.9513), np.float32(1050.3146), np.float32(1053.0804), np.float32(789.7366), np.float32(789.2601), np.float32(789.66473), np.float32(789.32935), np.float32(787.8709), np.float32(783.31696), np.float32(779.6464), np.float32(777.5197), np.float32(777.55835), np.float32(520.0208), np.float32(230.70638), np.float32(227.91197), np.float32(218.52751), np.float32(226.30759), np.float32(221.61116), np.float32(219.57288), np.float32(233.78902), np.float32(242.92685), np.float32(280.37418), np.float32(282.06866), np.float32(313.91092), np.float32(281.51254), np.float32(302.09598), np.float32(328.44498), np.float32(322.72275), np.float32(315.13846), np.float32(331.07928), np.float32(309.96356), np.float32(283.15482), np.float32(314.11398), np.float32(312.48618), np.float32(282.07074), np.float32(310.94153), np.float32(302.806), np.float32(285.40582), np.float32(309.10968), np.float32(1174.31), np.float32(315.4534), np.float32(309.3487), np.float32(283.40598), np.float32(586.2776), np.float32(587.3708), np.float32(590.7486), np.float32(596.31866), np.float32(592.2133), np.float32(882.87286), np.float32(884.52325), np.float32(884.57245), np.float32(884.86884), np.float32(881.99713), np.float32(876.8247), np.float32(875.2513), np.float32(874.8002), np.float32(875.32135), np.float32(882.99426), np.float32(892.7774), np.float32(909.44214), np.float32(615.1628), np.float32(642.5822), np.float32(653.70935), np.float32(658.33966), np.float32(659.2085), np.float32(650.6287), np.float32(625.8451), np.float32(595.86804), np.float32(575.01105), np.float32(219.59534), np.float32(216.69618), np.float32(207.17844), np.float32(347.8992), np.float32(211.61569), np.float32(224.66788), np.float32(203.34763), np.float32(169.35446), np.float32(172.88559), np.float32(352.76956), np.float32(350.5055), np.float32(541.45447), np.float32(522.7883), np.float32(345.33768), np.float32(349.53824), np.float32(350.64285), np.float32(347.02237), np.float32(168.33507), np.float32(351.61014), np.float32(347.64865), np.float32(350.68552), np.float32(348.60117), np.float32(158.65999), np.float32(349.2105), np.float32(349.10574), np.float32(188.54716), np.float32(163.53847), np.float32(347.6146), np.float32(163.56377), np.float32(170.51274), np.float32(169.11406), np.float32(167.92255), np.float32(208.69963), np.float32(212.68367), np.float32(210.13403), np.float32(214.06725), np.float32(201.9057), np.float32(164.62314), np.float32(198.93398), np.float32(164.42099), np.float32(208.07164), np.float32(212.88518), np.float32(173.81824), np.float32(168.40298), np.float32(169.61234), np.float32(171.17365), np.float32(174.44545), np.float32(170.1077), np.float32(179.60172), np.float32(170.24689), np.float32(186.95813), np.float32(355.29852), np.float32(347.56125), np.float32(349.9811), np.float32(350.33215), np.float32(350.38782), np.float32(347.891), np.float32(350.99384), np.float32(349.79486), np.float32(351.06207), np.float32(347.74078), np.float32(350.9299), np.float32(350.00665), np.float32(351.52277), np.float32(348.64035), np.float32(349.30713), np.float32(348.9167), np.float32(350.76282), np.float32(349.45618), np.float32(348.99878), np.float32(349.47116), np.float32(350.44846), np.float32(174.63754), np.float32(350.1738), np.float32(174.49202), np.float32(348.71542), np.float32(350.90622), np.float32(348.7246), np.float32(350.92334), np.float32(348.28604), np.float32(350.04285), np.float32(212.61942), np.float32(211.10857), np.float32(784.37665), np.float32(788.27496), np.float32(712.0624), np.float32(729.94586), np.float32(756.00385), np.float32(520.85767), np.float32(516.99817), np.float32(514.55725), np.float32(518.8124), np.float32(795.68274), np.float32(226.98373), np.float32(250.64684), np.float32(252.39694), np.float32(234.47368), np.float32(231.89098), np.float32(218.67781), np.float32(350.25635), np.float32(347.86868), np.float32(170.29657), np.float32(234.47107), np.float32(234.67477), np.float32(232.69708), np.float32(545.3975), np.float32(566.43665), np.float32(879.7409), np.float32(891.0158), np.float32(891.3526), np.float32(892.97815), np.float32(892.0344), np.float32(887.5642), np.float32(878.2652), np.float32(1166.4305), np.float32(1170.5238), np.float32(1181.243), np.float32(1197.4572), np.float32(1214.3693), np.float32(1234.7367), np.float32(1276.7152), np.float32(1299.59), np.float32(1313.6558), np.float32(1320.2794), np.float32(1325.6177), np.float32(1328.8734), np.float32(1328.874), np.float32(1323.8802), np.float32(1319.0908), np.float32(656.4862), np.float32(344.89142), np.float32(333.44058), np.float32(344.07407), np.float32(354.66098), np.float32(346.62347), np.float32(350.2601), np.float32(347.0899), np.float32(350.1734), np.float32(348.45654), np.float32(349.57886), np.float32(349.02884), np.float32(350.77637), np.float32(348.98294), np.float32(349.6268), np.float32(281.68372), np.float32(294.84506), np.float32(313.5255), np.float32(301.75906), np.float32(297.39352), np.float32(297.38025), np.float32(295.1001), np.float32(293.10126), np.float32(354.02805), np.float32(349.96307), np.float32(349.164), np.float32(348.12296), np.float32(237.95537), np.float32(347.95822), np.float32(349.12592), np.float32(252.7867), np.float32(248.97914), np.float32(259.81836), np.float32(249.86983), np.float32(217.61687), np.float32(349.15793), np.float32(176.00136), np.float32(167.4636), np.float32(187.99202), np.float32(168.6195), np.float32(350.62607), np.float32(348.62457), np.float32(350.73715), np.float32(348.49713), np.float32(351.5019), np.float32(172.45534), np.float32(175.72166), np.float32(174.82559), np.float32(348.48123), np.float32(349.27188), np.float32(349.37814), np.float32(352.33554), np.float32(349.11243), np.float32(348.8521), np.float32(349.60645), np.float32(189.29665), np.float32(351.18997), np.float32(201.12837), np.float32(232.06998), np.float32(201.94113), np.float32(350.80185), np.float32(206.39294), np.float32(597.30566), np.float32(607.74066), np.float32(627.4156), np.float32(621.8074), np.float32(608.768), np.float32(608.1141), np.float32(605.991), np.float32(604.9466), np.float32(604.3861), np.float32(604.6796), np.float32(604.7715), np.float32(611.5915), np.float32(610.52673), np.float32(616.6603), np.float32(328.26294), np.float32(327.72076), np.float32(329.0918), np.float32(330.48157), np.float32(329.99594), np.float32(328.46072), np.float32(328.36288), np.float32(1972.6101), np.float32(329.46857), np.float32(327.6696), np.float32(652.7111), np.float32(654.45306), np.float32(654.8264), np.float32(655.813), np.float32(655.16077), np.float32(657.8864), np.float32(658.6591), np.float32(659.3185), np.float32(659.03546), np.float32(657.44574), np.float32(659.2419), np.float32(658.86115), np.float32(659.62805), np.float32(657.7561), np.float32(657.58185), np.float32(658.5816), np.float32(657.5151), np.float32(657.274), np.float32(657.6813), np.float32(658.11273), np.float32(659.2778), np.float32(658.1), np.float32(657.6483), np.float32(656.0715), np.float32(655.59576), np.float32(655.4387), np.float32(655.1485), np.float32(654.4833), np.float32(655.3579), np.float32(655.1985), np.float32(657.4125), np.float32(655.6038), np.float32(656.35846), np.float32(654.9407), np.float32(655.09534), np.float32(655.4187), np.float32(656.9134), np.float32(659.48553), np.float32(657.41705), np.float32(657.18585), np.float32(659.00226), np.float32(657.4553), np.float32(656.6886), np.float32(656.7478), np.float32(657.68164), np.float32(656.552), np.float32(656.859), np.float32(655.8806), np.float32(655.72864), np.float32(655.68787), np.float32(328.2986), np.float32(329.05392), np.float32(329.3071), np.float32(1970.5825), np.float32(1967.6101), np.float32(655.14276), np.float32(656.457), np.float32(656.26135), np.float32(655.75476), np.float32(655.8877), np.float32(655.70355), np.float32(655.4074), np.float32(1969.863), np.float32(1970.5055), np.float32(1970.4395), np.float32(656.9979), np.float32(657.5684), np.float32(657.09467), np.float32(658.1746), np.float32(657.01685), np.float32(657.903), np.float32(658.5903), np.float32(659.3953), np.float32(658.91565), np.float32(659.2892), np.float32(659.53485), np.float32(659.14557), np.float32(657.37274), np.float32(657.6094), np.float32(656.28564), np.float32(655.85925), np.float32(656.102), np.float32(655.40607), np.float32(655.7782), np.float32(654.8207), np.float32(655.56635), np.float32(656.5458), np.float32(263.1303), np.float32(261.8206), np.float32(259.75558), np.float32(258.99762), np.float32(260.6291), np.float32(655.8328), np.float32(656.0295), np.float32(656.3591), np.float32(655.9576), np.float32(656.9053), np.float32(657.5741), np.float32(657.8113), np.float32(658.4028), np.float32(657.71), np.float32(657.4812), np.float32(657.2752), np.float32(657.2217), np.float32(656.16876), np.float32(656.76154), np.float32(656.8104), np.float32(655.57446), np.float32(655.7367), np.float32(655.8347), np.float32(655.2439), np.float32(654.4395), np.float32(654.43677), np.float32(655.41693), np.float32(654.451), np.float32(655.14417), np.float32(656.80804), np.float32(656.78754), np.float32(656.8466), np.float32(657.0931), np.float32(657.4096), np.float32(657.5428), np.float32(658.1333), np.float32(657.3881), np.float32(656.8846), np.float32(656.8291), np.float32(657.1823), np.float32(656.9771), np.float32(656.8901), np.float32(657.69275), np.float32(657.8901), np.float32(657.4766), np.float32(657.41327), np.float32(657.4266), np.float32(657.48206), np.float32(656.6425), np.float32(655.1781), np.float32(653.7177), np.float32(661.7428), np.float32(656.6819), np.float32(656.3193), np.float32(657.9761), np.float32(655.3112), np.float32(659.67017), np.float32(654.95294), np.float32(660.47186), np.float32(654.16284), np.float32(660.03467), np.float32(657.2709), np.float32(657.9654), np.float32(658.2232), np.float32(655.6734), np.float32(659.0732), np.float32(654.3502), np.float32(660.5546), np.float32(655.39636), np.float32(658.4826), np.float32(657.548), np.float32(655.8382), np.float32(656.68854), np.float32(655.001), np.float32(658.1434), np.float32(654.51544), np.float32(657.3621), np.float32(655.1709), np.float32(656.42035), np.float32(655.9254), np.float32(655.243), np.float32(656.15717), np.float32(655.349), np.float32(657.2117), np.float32(655.8536), np.float32(656.47485), np.float32(655.71063), np.float32(656.107), np.float32(657.601), np.float32(656.15424), np.float32(658.9966), np.float32(656.2356), np.float32(659.5112), np.float32(657.545), np.float32(658.08276), np.float32(659.38416), np.float32(656.0753), np.float32(658.6371), np.float32(655.4735), np.float32(658.46625), np.float32(657.57587), np.float32(656.93567), np.float32(657.95276), np.float32(656.442), np.float32(657.496), np.float32(656.32263), np.float32(657.9618), np.float32(658.0025), np.float32(657.86237), np.float32(657.6783), np.float32(657.3601), np.float32(658.16693), np.float32(657.5992), np.float32(657.40247), np.float32(656.22766), np.float32(655.63965), np.float32(655.64136), np.float32(654.87555), np.float32(327.40924), np.float32(329.28082), np.float32(328.59695), np.float32(327.7576), np.float32(331.04782), np.float32(328.9279), np.float32(328.14078), np.float32(329.03796), np.float32(655.3613), np.float32(655.62823), np.float32(655.269), np.float32(656.1747), np.float32(656.81), np.float32(657.029), np.float32(656.99445), np.float32(657.5269), np.float32(657.79755), np.float32(657.81195), np.float32(657.5761), np.float32(657.76733), np.float32(656.9367), np.float32(656.7589), np.float32(657.62915), np.float32(658.0084), np.float32(658.1334), np.float32(658.1819), np.float32(657.6872), np.float32(657.2371), np.float32(657.7879), np.float32(657.58386), np.float32(657.349), np.float32(657.26965), np.float32(656.33344), np.float32(656.0144), np.float32(655.0307), np.float32(655.40106), np.float32(654.98175), np.float32(655.771), np.float32(656.9012), np.float32(657.7483), np.float32(657.94257), np.float32(658.37494), np.float32(659.95123), np.float32(661.17487), np.float32(659.8462), np.float32(658.8181), np.float32(658.4897), np.float32(658.3501), np.float32(657.1546), np.float32(655.781), np.float32(655.1567), np.float32(655.6177), np.float32(655.3689), np.float32(657.0107), np.float32(658.67114), np.float32(659.2241), np.float32(660.08405), np.float32(661.28235), np.float32(661.1678), np.float32(660.291), np.float32(660.068), np.float32(661.08514), np.float32(661.3579), np.float32(660.8104), np.float32(659.413), np.float32(657.3034), np.float32(654.75494), np.float32(652.79333), np.float32(647.8133), np.float32(646.8214), np.float32(649.5382), np.float32(650.11017), np.float32(652.7092), np.float32(657.1071), np.float32(661.05963), np.float32(667.3742), np.float32(674.66473), np.float32(677.9712), np.float32(678.02484), np.float32(677.89166), np.float32(679.253), np.float32(679.5926), np.float32(672.26105), np.float32(660.7276), np.float32(656.95294), np.float32(654.7003), np.float32(655.39655), np.float32(656.90027), np.float32(658.4103), np.float32(660.62805), np.float32(663.28564), np.float32(664.8142), np.float32(666.7287), np.float32(667.9508), np.float32(667.5006), np.float32(664.4545), np.float32(659.77795), np.float32(656.0867), np.float32(652.64307), np.float32(651.2804), np.float32(652.6652), np.float32(653.0255), np.float32(651.3839), np.float32(655.9405), np.float32(660.13715), np.float32(662.7068), np.float32(665.4488), np.float32(670.68097), np.float32(672.6397), np.float32(674.2849), np.float32(678.2188), np.float32(678.5634), np.float32(672.5636), np.float32(665.4845), np.float32(660.8122), np.float32(1958.5563), np.float32(649.3067), np.float32(656.9982), np.float32(655.8388), np.float32(653.70953), np.float32(329.8988), np.float32(656.67004), np.float32(667.4307), np.float32(669.561), np.float32(662.0486), np.float32(661.7168), np.float32(660.25934), np.float32(641.3114), np.float32(618.77216), np.float32(612.55145), np.float32(588.20764), np.float32(661.3525), np.float32(663.2362), np.float32(665.6132), np.float32(665.68066), np.float32(664.92523), np.float32(661.283), np.float32(262.39923), np.float32(522.9372), np.float32(520.2832), np.float32(520.759), np.float32(521.4877), np.float32(520.2813), np.float32(260.59305), np.float32(261.4332), np.float32(260.24088), np.float32(258.7798), np.float32(257.49033), np.float32(662.6399), np.float32(660.63617), np.float32(660.4055), np.float32(255.90982), np.float32(259.20914), np.float32(259.01688), np.float32(258.9631), np.float32(261.5675), np.float32(259.43668), np.float32(262.8067), np.float32(254.39798), np.float32(262.7313), np.float32(255.15521), np.float32(330.08524), np.float32(328.88773), np.float32(328.34216), np.float32(329.86362), np.float32(254.4833), np.float32(328.42856), np.float32(328.63), np.float32(328.58545), np.float32(660.928), np.float32(328.71762), np.float32(782.2196), np.float32(780.31287), np.float32(780.4276), np.float32(780.6073), np.float32(330.13202), np.float32(327.99774), np.float32(205.32962), np.float32(193.68707), np.float32(779.7152), np.float32(196.45471), np.float32(204.30264), np.float32(516.0734), np.float32(241.9729), np.float32(223.99023), np.float32(214.8156), np.float32(230.15552), np.float32(213.06844), np.float32(222.68115), np.float32(223.36668), np.float32(217.32695), np.float32(219.47545), np.float32(215.40172), np.float32(227.7281), np.float32(214.05986), np.float32(227.59077), np.float32(214.3935), np.float32(221.62233), np.float32(221.73238), np.float32(214.49335), np.float32(226.38419), np.float32(214.56178), np.float32(223.1475), np.float32(216.10027), np.float32(221.40562), np.float32(218.39238), np.float32(219.20573), np.float32(218.46074), np.float32(217.96445), np.float32(222.45825), np.float32(214.30678), np.float32(224.72986), np.float32(215.57016), np.float32(222.51224), np.float32(215.4549), np.float32(222.09348), np.float32(218.9196), np.float32(217.49174), np.float32(219.30519), np.float32(216.22267), np.float32(225.61739), np.float32(213.97673), np.float32(226.60995), np.float32(215.35915), np.float32(221.41756), np.float32(218.58948), np.float32(218.56195), np.float32(220.55013), np.float32(215.33105), np.float32(224.05884), np.float32(214.59332), np.float32(222.51285), np.float32(216.06265), np.float32(225.27954), np.float32(218.85059), np.float32(218.01125), np.float32(238.20078), np.float32(212.58908), np.float32(236.44083), np.float32(232.82199), np.float32(217.18996), np.float32(237.15831), np.float32(213.41267), np.float32(238.30933), np.float32(212.0769), np.float32(239.66283), np.float32(257.35577), np.float32(252.56206), np.float32(256.2202), np.float32(329.954), np.float32(328.69928), np.float32(328.95804), np.float32(330.0977), np.float32(328.38516), np.float32(328.65594), np.float32(328.0237), np.float32(329.27298), np.float32(329.33984), np.float32(328.77487), np.float32(329.33173), np.float32(328.79318), np.float32(329.52844), np.float32(329.30408), np.float32(328.36655), np.float32(328.2731), np.float32(329.02908), np.float32(329.64716), np.float32(328.35062), np.float32(329.2913), np.float32(328.45844), np.float32(328.9948), np.float32(329.09842), np.float32(328.50366), np.float32(329.2629), np.float32(327.9531), np.float32(328.47632), np.float32(329.38824), np.float32(328.85025), np.float32(329.16763), np.float32(328.45477), np.float32(328.7756), np.float32(328.02176), np.float32(329.61923), np.float32(330.23367), np.float32(256.3017), np.float32(260.81186), np.float32(208.66492), np.float32(251.36545), np.float32(260.2148), np.float32(259.12732), np.float32(259.01352), np.float32(328.16147), np.float32(257.31134), np.float32(261.8276), np.float32(260.63156), np.float32(264.34415), np.float32(329.49265), np.float32(328.54446), np.float32(329.87054), np.float32(328.98605), np.float32(327.98492), np.float32(330.3044), np.float32(328.6528), np.float32(328.78522), np.float32(329.30765), np.float32(328.8576), np.float32(330.47702), np.float32(327.86594), np.float32(328.3286), np.float32(329.5687), np.float32(329.17477), np.float32(329.27515), np.float32(328.72653), np.float32(329.09204), np.float32(328.4006), np.float32(328.238), np.float32(329.90054), np.float32(329.2228), np.float32(328.4541), np.float32(328.9877), np.float32(329.18262), np.float32(329.05103), np.float32(329.05032), np.float32(328.72415), np.float32(328.28775), np.float32(329.34833), np.float32(329.5015), np.float32(329.32428), np.float32(329.68076), np.float32(327.8565), np.float32(329.78952), np.float32(328.44058), np.float32(328.50238), np.float32(328.6374), np.float32(171.58469), np.float32(260.45117), np.float32(258.88556), np.float32(255.37352), np.float32(262.88354), np.float32(261.18445), np.float32(263.6032), np.float32(260.84717), np.float32(257.13), np.float32(261.01425), np.float32(259.93527), np.float32(261.90356), np.float32(259.08554), np.float32(260.52005), np.float32(261.76053), np.float32(261.6985), np.float32(260.34097), np.float32(259.54172), np.float32(261.43585), np.float32(258.2467), np.float32(261.17932), np.float32(261.70407), np.float32(261.98083), np.float32(260.75308), np.float32(259.19138), np.float32(780.93604), np.float32(780.99915), np.float32(781.7343), np.float32(260.85446), np.float32(260.75827), np.float32(258.55896), np.float32(782.6954), np.float32(780.6672), np.float32(780.0195), np.float32(780.9887), np.float32(784.1082), np.float32(327.8292), np.float32(329.02896), np.float32(328.25897), np.float32(781.51117), np.float32(779.9566), np.float32(779.3503), np.float32(328.37863), np.float32(330.0188), np.float32(326.45233), np.float32(330.49023), np.float32(329.80826), np.float32(325.82584), np.float32(327.82404), np.float32(204.51962), np.float32(203.30176), np.float32(208.59738), np.float32(218.5747), np.float32(331.52853), np.float32(232.72893), np.float32(328.8703), np.float32(330.9975), np.float32(237.2414), np.float32(216.42145), np.float32(248.57065), np.float32(261.4308), np.float32(243.02986), np.float32(212.55978), np.float32(234.93484), np.float32(330.18277), np.float32(219.84248), np.float32(329.26672), np.float32(330.4163), np.float32(329.4269), np.float32(328.68228), np.float32(235.2305), np.float32(328.9549), np.float32(329.2581), np.float32(328.46844), np.float32(328.07608), np.float32(329.47354), np.float32(329.27652), np.float32(329.64297), np.float32(329.58704), np.float32(328.35062), np.float32(329.74094), np.float32(328.75244), np.float32(328.51074), np.float32(329.5292), np.float32(328.61063), np.float32(328.61365), np.float32(329.1289), np.float32(329.1275), np.float32(329.5052), np.float32(328.7123), np.float32(774.4169), np.float32(774.84186), np.float32(774.6295), np.float32(328.6711), np.float32(221.55275), np.float32(327.90552), np.float32(220.41293), np.float32(773.8601), np.float32(773.9169), np.float32(216.19795), np.float32(214.04967), np.float32(226.57718), np.float32(215.6088), np.float32(227.79189), np.float32(222.70506), np.float32(215.80394), np.float32(225.1687), np.float32(216.71565), np.float32(224.32394), np.float32(214.52739), np.float32(225.76756), np.float32(218.84483), np.float32(217.91675), np.float32(224.61499), np.float32(214.59317), np.float32(227.35751), np.float32(214.97156), np.float32(225.13649), np.float32(215.06985), np.float32(222.93451), np.float32(217.93266), np.float32(217.47942), np.float32(223.48285), np.float32(215.0449), np.float32(221.29672), np.float32(215.74486), np.float32(224.47395), np.float32(215.07771), np.float32(221.65125), np.float32(218.24477), np.float32(218.12749), np.float32(328.5919), np.float32(217.18904), np.float32(223.73628), np.float32(215.75551), np.float32(220.60101), np.float32(328.4863), np.float32(222.65364), np.float32(328.64157), np.float32(329.61804), np.float32(328.94543), np.float32(328.41742), np.float32(218.41576), np.float32(775.8066), np.float32(775.92755), np.float32(775.4437), np.float32(775.02783), np.float32(216.34045), np.float32(217.2022), np.float32(216.61299), np.float32(226.82385), np.float32(777.4875), np.float32(781.0328), np.float32(780.1044), np.float32(248.43489), np.float32(253.06747), np.float32(258.57324), np.float32(248.00491), np.float32(779.4464), np.float32(247.52777), np.float32(263.1547), np.float32(252.99582), np.float32(262.36624), np.float32(250.84198), np.float32(255.54515), np.float32(330.79623), np.float32(254.91219), np.float32(328.14047), np.float32(330.06668), np.float32(328.35904), np.float32(329.21204), np.float32(328.66122), np.float32(329.84506), np.float32(329.57806), np.float32(327.33215), np.float32(329.14014), np.float32(329.40692), np.float32(329.87808), np.float32(328.78107), np.float32(328.78076), np.float32(328.91125), np.float32(329.0961), np.float32(329.6812), np.float32(329.28137), np.float32(328.93533), np.float32(327.62192), np.float32(328.6893), np.float32(329.89447), np.float32(329.23157), np.float32(329.125), np.float32(328.22556), np.float32(328.08017), np.float32(329.71646), np.float32(329.33325), np.float32(329.24078), np.float32(329.17282), np.float32(327.55936), np.float32(329.81955), np.float32(329.4889), np.float32(329.24112), np.float32(536.0341), np.float32(263.7871), np.float32(513.01385), np.float32(518.80597), np.float32(258.31744), np.float32(259.26797), np.float32(259.29013), np.float32(262.71298), np.float32(261.53326), np.float32(262.12897), np.float32(260.37323), np.float32(260.4368), np.float32(260.3557), np.float32(259.66623), np.float32(258.99765), np.float32(261.34506), np.float32(262.6578), np.float32(262.0758), np.float32(261.31604), np.float32(260.90427), np.float32(327.90875), np.float32(329.4767), np.float32(328.91486), np.float32(328.29227), np.float32(330.28964), np.float32(329.09634), np.float32(328.10306), np.float32(328.50647), np.float32(330.5015), np.float32(328.42438), np.float32(328.33868), np.float32(328.67108), np.float32(328.17923), np.float32(329.31958), np.float32(329.70746), np.float32(329.38113), np.float32(328.24075), np.float32(328.42337), np.float32(328.77448), np.float32(329.25705), np.float32(329.3538), np.float32(327.80573), np.float32(328.20264), np.float32(329.0668), np.float32(328.83496), np.float32(328.426), np.float32(330.59543), np.float32(327.30563), np.float32(328.8948), np.float32(328.7565), np.float32(245.94847), np.float32(256.83508), np.float32(261.70697), np.float32(263.5814), np.float32(259.6379), np.float32(258.9573), np.float32(261.7981), np.float32(330.42194), np.float32(328.6194), np.float32(257.9201), np.float32(256.9593), np.float32(328.68686), np.float32(329.77246), np.float32(328.70435), np.float32(327.92987), np.float32(330.3836), np.float32(329.45914), np.float32(327.8205), np.float32(329.36862), np.float32(329.50677), np.float32(328.5531), np.float32(329.02826), np.float32(328.9332), np.float32(329.02545), np.float32(329.2036), np.float32(331.78848), np.float32(331.88367), np.float32(324.5103), np.float32(324.94397), np.float32(323.69757), np.float32(326.17053), np.float32(333.87704), np.float32(330.39932), np.float32(329.03464), np.float32(330.05573), np.float32(328.83917), np.float32(327.85712), np.float32(329.7438), np.float32(328.23523), np.float32(328.28766), np.float32(330.26147), np.float32(329.80826), np.float32(328.30557), np.float32(329.00626), np.float32(330.18988), np.float32(328.67697), np.float32(329.37262), np.float32(370.17844), np.float32(368.27216), np.float32(379.79443), np.float32(387.60495), np.float32(392.86865), np.float32(391.91312), np.float32(386.01627), np.float32(384.562), np.float32(389.23608), np.float32(390.6883), np.float32(764.09906), np.float32(768.88763), np.float32(1149.9923), np.float32(1150.2153), np.float32(1150.5836), np.float32(1158.1516), np.float32(1168.9), np.float32(1179.5079), np.float32(1195.8241), np.float32(1210.1968), np.float32(1216.487), np.float32(1216.4891), np.float32(1210.7115), np.float32(1192.271), np.float32(1170.6559), np.float32(1146.8872), np.float32(1140.9862), np.float32(1142.7922), np.float32(1148.5725), np.float32(1170.5116), np.float32(1189.9668), np.float32(1199.5632), np.float32(1210.4353), np.float32(1212.7754), np.float32(1201.7948), np.float32(395.55936), np.float32(392.61508), np.float32(386.1004), np.float32(382.11942), np.float32(387.56802), np.float32(391.82935), np.float32(396.55084), np.float32(398.44965), np.float32(800.1784), np.float32(795.9983), np.float32(383.81143), np.float32(394.1911), np.float32(391.9446), np.float32(326.5275), np.float32(397.01837), np.float32(402.88098), np.float32(401.44424), np.float32(395.63864), np.float32(379.6061), np.float32(372.9822), np.float32(369.51328), np.float32(370.5701), np.float32(376.56772), np.float32(372.6246), np.float32(390.72043), np.float32(787.98444), np.float32(792.01465), np.float32(792.168), np.float32(1182.1173), np.float32(1174.81), np.float32(1174.4183), np.float32(1173.4316), np.float32(1174.763), np.float32(1175.6852), np.float32(1175.4349), np.float32(1174.2778), np.float32(1175.7715), np.float32(392.6445), np.float32(394.9195), np.float32(794.10596), np.float32(796.7495), np.float32(794.43964), np.float32(790.59717), np.float32(781.42114), np.float32(772.6658), np.float32(753.3114), np.float32(370.90906), np.float32(721.6744), np.float32(337.44135), np.float32(337.25174), np.float32(330.71677), np.float32(327.58618), np.float32(331.8653), np.float32(329.66293), np.float32(327.37766), np.float32(331.3151), np.float32(329.02246), np.float32(327.93292), np.float32(330.0827), np.float32(328.50327), np.float32(329.22678), np.float32(329.71112), np.float32(328.98953), np.float32(330.3461), np.float32(328.52313), np.float32(330.0438), np.float32(658.48425), np.float32(657.50476), np.float32(587.85956), np.float32(293.36923), np.float32(349.54697), np.float32(348.46707), np.float32(348.98248), np.float32(349.0158), np.float32(351.7735), np.float32(356.47607), np.float32(346.69168), np.float32(334.28308), np.float32(345.17285), np.float32(342.8664), np.float32(683.1818), np.float32(682.89685), np.float32(678.3383), np.float32(674.0516), np.float32(679.039), np.float32(336.2445), np.float32(307.35654), np.float32(305.78616), np.float32(347.52725), np.float32(347.9079), np.float32(351.64127), np.float32(345.51138), np.float32(351.6366), np.float32(330.58408), np.float32(324.61282), np.float32(312.93787), np.float32(704.8817), np.float32(372.8344), np.float32(375.44373), np.float32(774.6553), np.float32(787.8549), np.float32(792.69775), np.float32(790.73883), np.float32(784.77344), np.float32(775.2915), np.float32(769.063), np.float32(774.003), np.float32(775.4782), np.float32(786.2548), np.float32(797.6082), np.float32(806.3275), np.float32(809.09985), np.float32(810.8137), np.float32(808.9934), np.float32(798.7423), np.float32(792.17615), np.float32(786.94916), np.float32(779.8826), np.float32(775.83185), np.float32(774.98505), np.float32(778.4743), np.float32(786.1985), np.float32(788.1704), np.float32(790.29504), np.float32(802.63464), np.float32(805.6261), np.float32(809.67395), np.float32(818.22876), np.float32(818.1298), np.float32(815.3242), np.float32(817.8478), np.float32(817.5222), np.float32(816.7266), np.float32(826.77686), np.float32(831.5812), np.float32(844.2549), np.float32(855.1963), np.float32(858.44995), np.float32(867.5626), np.float32(877.7715), np.float32(884.9286), np.float32(885.7859), np.float32(885.76624), np.float32(886.5653), np.float32(221.1304), np.float32(216.16408), np.float32(217.68869), np.float32(218.1277), np.float32(219.32332), np.float32(428.10983), np.float32(428.86914), np.float32(429.59552), np.float32(428.31726), np.float32(217.3694), np.float32(217.91057), np.float32(219.28017), np.float32(216.66527), np.float32(220.28252), np.float32(217.83987), np.float32(218.55006), np.float32(217.46631), np.float32(218.43703), np.float32(218.28404), np.float32(218.14052), np.float32(218.86726), np.float32(217.7829), np.float32(219.11926), np.float32(217.97227), np.float32(219.67363), np.float32(219.86897), np.float32(219.46191), np.float32(219.9466), np.float32(221.60709), np.float32(217.01656), np.float32(227.78639), np.float32(216.86862), np.float32(219.33916), np.float32(217.6838), np.float32(353.64288), np.float32(343.497), np.float32(330.69882), np.float32(328.7348), np.float32(328.78662), np.float32(328.71042), np.float32(329.07742), np.float32(330.3616), np.float32(331.13245), np.float32(329.67975), np.float32(331.39636), np.float32(332.27734), np.float32(330.37305), np.float32(330.42914), np.float32(658.10046), np.float32(657.1141), np.float32(655.84937), np.float32(654.0582), np.float32(652.58044), np.float32(651.4868), np.float32(651.3233), np.float32(649.9956), np.float32(325.42334), np.float32(324.8266), np.float32(324.55222), np.float32(323.82123), np.float32(322.81436), np.float32(632.06195), np.float32(629.40015), np.float32(622.4983), np.float32(613.4288), np.float32(607.5342), np.float32(604.48254), np.float32(603.35046), np.float32(598.1884), np.float32(592.4811), np.float32(291.78354), np.float32(294.79996), np.float32(291.1406), np.float32(295.00955), np.float32(294.82303), np.float32(290.50204), np.float32(299.61337), np.float32(300.06454), np.float32(288.98907), np.float32(302.85513), np.float32(304.19974), np.float32(300.78674), np.float32(602.52545), np.float32(306.49655), np.float32(602.13654), np.float32(599.86816), np.float32(307.4409), np.float32(300.46194), np.float32(592.0124), np.float32(307.47266), np.float32(300.48038), np.float32(290.58395), np.float32(306.8789), np.float32(329.43994), np.float32(326.4906), np.float32(328.688), np.float32(266.1551), np.float32(265.5573), np.float32(260.10672), np.float32(263.5685), np.float32(263.26355), np.float32(262.27396), np.float32(276.95102), np.float32(285.1399), np.float32(288.0609), np.float32(308.8933), np.float32(317.66287), np.float32(324.29303), np.float32(651.968), np.float32(654.16583), np.float32(651.00684), np.float32(647.262), np.float32(638.8301), np.float32(640.324), np.float32(324.1192), np.float32(324.01947), np.float32(327.65094), np.float32(662.56464), np.float32(667.3372), np.float32(671.657), np.float32(672.1758), np.float32(672.9249), np.float32(670.6205), np.float32(329.63385), np.float32(325.80048), np.float32(324.5457), np.float32(321.2067), np.float32(318.86176), np.float32(187.51668), np.float32(321.71445), np.float32(325.65762), np.float32(328.0717), np.float32(331.9732), np.float32(193.14027), np.float32(193.9855), np.float32(194.60971), np.float32(193.87479), np.float32(196.14403), np.float32(195.19545), np.float32(194.53197), np.float32(193.1192), np.float32(193.77599), np.float32(326.31104), np.float32(194.07967), np.float32(191.88953), np.float32(194.62025), np.float32(198.50797), np.float32(193.62535), np.float32(337.04376), np.float32(336.70544), np.float32(333.70053), np.float32(332.64316), np.float32(329.3521), np.float32(325.8257), np.float32(324.73553), np.float32(323.86832), np.float32(323.2783), np.float32(329.1796), np.float32(334.81036), np.float32(339.31836), np.float32(346.81497), np.float32(345.44528), np.float32(367.1889), np.float32(350.05582), np.float32(339.2397), np.float32(193.914), np.float32(196.652), np.float32(195.69133), np.float32(191.19606), np.float32(194.83199), np.float32(197.82362), np.float32(194.85278), np.float32(191.03433), np.float32(654.96484), np.float32(197.9635), np.float32(192.46211), np.float32(194.7819), np.float32(195.37988), np.float32(219.05235), np.float32(216.9826), np.float32(226.687), np.float32(220.0912), np.float32(218.28082), np.float32(223.75995), np.float32(217.595), np.float32(225.77814), np.float32(214.4054), np.float32(224.28789), np.float32(217.97276), np.float32(216.90846), np.float32(219.609), np.float32(220.06029), np.float32(217.61504), np.float32(218.96652), np.float32(221.7395), np.float32(215.80226), np.float32(220.94374), np.float32(215.5273), np.float32(219.92871), np.float32(217.0363), np.float32(220.10687), np.float32(218.57983), np.float32(217.80585), np.float32(218.59038), np.float32(218.13548), np.float32(219.49406), np.float32(217.3907), np.float32(222.62526), np.float32(217.80972), np.float32(219.41624), np.float32(218.16563), np.float32(219.33345), np.float32(217.49663), np.float32(217.40237), np.float32(218.76648), np.float32(217.3856), np.float32(220.5636), np.float32(216.63911), np.float32(220.8408), np.float32(215.41588), np.float32(219.9866), np.float32(216.842), np.float32(220.9982), np.float32(217.23766), np.float32(219.62553), np.float32(217.73808), np.float32(215.59567), np.float32(209.87926), np.float32(217.84679), np.float32(246.95192), np.float32(259.11026), np.float32(236.91904), np.float32(215.16795), np.float32(229.67041), np.float32(214.75287), np.float32(225.89217), np.float32(219.67496), np.float32(216.36565), np.float32(227.13528), np.float32(214.49475), np.float32(229.54008), np.float32(214.60191), np.float32(223.3529), np.float32(216.35907), np.float32(222.3318), np.float32(218.68913), np.float32(216.94273), np.float32(221.3697), np.float32(216.01698), np.float32(221.97237), np.float32(215.6564), np.float32(224.92659), np.float32(215.15123), np.float32(220.21216), np.float32(218.064), np.float32(219.29324), np.float32(219.04865), np.float32(217.30298), np.float32(221.06902), np.float32(216.63608), np.float32(219.33656), np.float32(216.4935), np.float32(220.08102), np.float32(217.59564), np.float32(220.19678), np.float32(217.75037), np.float32(219.1792), np.float32(218.50003), np.float32(217.36281), np.float32(217.08409), np.float32(220.05325), np.float32(219.96295), np.float32(216.24739), np.float32(220.60718), np.float32(214.6052), np.float32(222.21895), np.float32(773.8448), np.float32(777.2328), np.float32(321.78314), np.float32(328.51694), np.float32(332.46487), np.float32(329.165), np.float32(331.2413), np.float32(330.89923), np.float32(327.1877), np.float32(328.42322), np.float32(329.61636), np.float32(328.2632), np.float32(329.43564), np.float32(329.22415), np.float32(327.71378), np.float32(329.5109), np.float32(328.79614), np.float32(328.7837), np.float32(329.51398), np.float32(327.86472), np.float32(328.79648), np.float32(328.946), np.float32(329.07477), np.float32(329.29257), np.float32(328.36398), np.float32(328.64844), np.float32(329.53613), np.float32(328.88794), np.float32(329.1628), np.float32(329.11475), np.float32(328.6892), np.float32(329.3094), np.float32(329.125), np.float32(329.14648), np.float32(329.12418), np.float32(328.4766), np.float32(328.8669), np.float32(329.3689), np.float32(329.8178), np.float32(329.60077), np.float32(328.09354), np.float32(328.24127), np.float32(330.1019), np.float32(329.52838), np.float32(329.4571), np.float32(329.34662), np.float32(327.3472), np.float32(658.62244), np.float32(659.2201), np.float32(776.0679), np.float32(776.0967), np.float32(190.30833), np.float32(185.24962), np.float32(187.2966), np.float32(192.65347), np.float32(194.56514), np.float32(193.62988), np.float32(195.86694), np.float32(193.21837), np.float32(192.92458), np.float32(193.17325), np.float32(194.24957), np.float32(196.77956), np.float32(193.82182), np.float32(193.36446), np.float32(195.38533), np.float32(194.01978), np.float32(194.50664), np.float32(193.71207), np.float32(192.61342), np.float32(193.85081), np.float32(197.25359), np.float32(194.85347), np.float32(192.87425), np.float32(194.39236), np.float32(193.84256), np.float32(194.49706), np.float32(193.0904), np.float32(193.21141), np.float32(196.74857), np.float32(197.31215), np.float32(192.26678), np.float32(191.41356), np.float32(196.39612), np.float32(195.90419), np.float32(191.94005), np.float32(193.19635), np.float32(195.89911), np.float32(197.70836), np.float32(192.99994), np.float32(191.85722), np.float32(195.11488), np.float32(196.13153), np.float32(194.61534), np.float32(192.49753), np.float32(194.82701), np.float32(196.62312), np.float32(195.10323), np.float32(193.4986), np.float32(194.65475), np.float32(193.19002), np.float32(195.74904), np.float32(256.31158), np.float32(279.30847), np.float32(246.42691), np.float32(217.22252), np.float32(219.43948), np.float32(229.77109), np.float32(215.3026), np.float32(222.65327), np.float32(213.98634), np.float32(230.67676), np.float32(215.90724), np.float32(220.06078), np.float32(222.06403), np.float32(214.87749), np.float32(221.47987), np.float32(215.87157), np.float32(220.88367), np.float32(216.77194), np.float32(220.05428), np.float32(215.51295), np.float32(222.18501), np.float32(216.82043), np.float32(218.58893), np.float32(217.98909), np.float32(219.12376), np.float32(220.49298), np.float32(215.55972), np.float32(218.66917), np.float32(217.0581), np.float32(222.38097), np.float32(215.02774), np.float32(220.30885), np.float32(217.12798), np.float32(218.87619), np.float32(217.44139), np.float32(218.19002), np.float32(219.00337), np.float32(218.26941), np.float32(218.2478), np.float32(216.94633), np.float32(221.23183), np.float32(215.69038), np.float32(220.77734), np.float32(216.06479), np.float32(219.85542), np.float32(218.98616), np.float32(218.52834), np.float32(218.41351), np.float32(218.13567), np.float32(219.07335), np.float32(219.93431), np.float32(217.52892), np.float32(220.72234), np.float32(230.77658), np.float32(328.6307), np.float32(236.85461), np.float32(218.38248), np.float32(327.9467), np.float32(327.41995), np.float32(329.65616), np.float32(329.53033), np.float32(328.21173), np.float32(329.48245), np.float32(327.0482), np.float32(329.3621), np.float32(329.6084), np.float32(328.35785), np.float32(329.9527), np.float32(328.1377), np.float32(328.06128), np.float32(330.04703), np.float32(328.78824), np.float32(329.02505), np.float32(328.53845), np.float32(328.0639), np.float32(329.2883), np.float32(329.4797), np.float32(329.09412), np.float32(329.0885), np.float32(327.56784), np.float32(328.97733), np.float32(329.4251), np.float32(329.1492), np.float32(329.18515), np.float32(327.85916), np.float32(328.3021), np.float32(330.1263), np.float32(775.6927), np.float32(774.85925), np.float32(216.52528), np.float32(218.01796), np.float32(216.27785), np.float32(217.20558), np.float32(216.92044), np.float32(775.52014), np.float32(775.3757), np.float32(775.4091), np.float32(223.01085), np.float32(214.10426), np.float32(215.71877), np.float32(266.53564), np.float32(253.93596), np.float32(253.30391), np.float32(330.05914), np.float32(330.4111), np.float32(330.81665), np.float32(329.4476), np.float32(328.15683), np.float32(329.02905), np.float32(328.5565), np.float32(329.35614), np.float32(329.28928), np.float32(327.4709), np.float32(328.7496), np.float32(328.87646), np.float32(329.24103), np.float32(328.51672), np.float32(328.82697), np.float32(328.5979), np.float32(328.84814), np.float32(328.88458), np.float32(329.48532), np.float32(329.14), np.float32(325.93594), np.float32(327.7241), np.float32(340.75226), np.float32(447.61157), np.float32(451.09543), np.float32(493.90616), np.float32(516.83545), np.float32(522.7589), np.float32(519.43494), np.float32(519.66003), np.float32(518.7311), np.float32(517.6109), np.float32(519.7976), np.float32(521.28156), np.float32(522.7926), np.float32(524.16583), np.float32(524.57623), np.float32(523.9357), np.float32(521.7971), np.float32(520.0408), np.float32(519.8442), np.float32(520.66864), np.float32(523.23065), np.float32(527.7303), np.float32(531.8045), np.float32(530.8865), np.float32(525.177), np.float32(522.7502), np.float32(520.2995), np.float32(256.62894), np.float32(251.32393), np.float32(254.35982), np.float32(195.81334), np.float32(194.93073), np.float32(191.37386), np.float32(193.94217), np.float32(260.2698), np.float32(260.8206), np.float32(261.08353), np.float32(262.32806), np.float32(262.28717), np.float32(194.73311), np.float32(193.1775), np.float32(196.34683), np.float32(194.19641), np.float32(190.80295), np.float32(295.41217), np.float32(301.48615), np.float32(311.88882), np.float32(317.72662), np.float32(322.23492), np.float32(322.02917), np.float32(322.0221), np.float32(321.63464), np.float32(322.73502), np.float32(323.931), np.float32(330.2005), np.float32(665.9577), np.float32(666.751), np.float32(663.0643), np.float32(660.12604), np.float32(657.79266), np.float32(655.47327), np.float32(653.8142), np.float32(652.1121), np.float32(651.0783), np.float32(649.52924), np.float32(649.6736), np.float32(651.68115), np.float32(651.1166), np.float32(649.0141), np.float32(648.1768), np.float32(647.1327), np.float32(645.40924), np.float32(957.9708), np.float32(953.27356), np.float32(947.36285), np.float32(631.23395), np.float32(315.69064), np.float32(163.61984), np.float32(932.66473), np.float32(932.924), np.float32(628.83875), np.float32(610.08765), np.float32(617.51263), np.float32(616.80054), np.float32(614.02045), np.float32(612.6496), np.float32(607.3874), np.float32(333.9465), np.float32(328.67578), np.float32(331.3182), np.float32(329.77222), np.float32(328.72244), np.float32(330.37903), np.float32(326.44232), np.float32(327.5548), np.float32(329.77133), np.float32(328.5824), np.float32(330.2056), np.float32(327.34354), np.float32(327.27405), np.float32(329.91052), np.float32(330.11252), np.float32(320.9053), np.float32(318.8216), np.float32(325.031), np.float32(332.23767), np.float32(335.66483), np.float32(333.15408), np.float32(676.1839), np.float32(671.7365), np.float32(666.4044), np.float32(664.1414), np.float32(660.98126), np.float32(660.2859), np.float32(659.99713), np.float32(658.89954), np.float32(657.5057), np.float32(655.5836), np.float32(652.6859), np.float32(649.77014), np.float32(646.12836), np.float32(646.6588), np.float32(650.1379), np.float32(647.27356), np.float32(638.88165), np.float32(636.9331), np.float32(638.8581), np.float32(638.2882), np.float32(634.5516), np.float32(628.5246), np.float32(311.85608), np.float32(323.2097), np.float32(194.79248), np.float32(193.6467), np.float32(192.92816), np.float32(193.83969), np.float32(195.37114), np.float32(196.32144), np.float32(191.71529), np.float32(193.72278), np.float32(194.79532), np.float32(195.47615), np.float32(195.02919), np.float32(193.55896), np.float32(193.20694), np.float32(195.58037), np.float32(195.90504), np.float32(192.72966), np.float32(193.20003), np.float32(327.3608), np.float32(328.98596), np.float32(328.9977), np.float32(328.48138), np.float32(327.02313), np.float32(327.78836), np.float32(330.37164), np.float32(331.78064), np.float32(331.08597), np.float32(674.6506), np.float32(673.84503), np.float32(671.1782), np.float32(664.9496), np.float32(660.28815), np.float32(658.4185), np.float32(658.5383), np.float32(658.1398), np.float32(656.5285), np.float32(656.9216), np.float32(657.225), np.float32(656.55334), np.float32(651.9753), np.float32(646.6879), np.float32(643.0531), np.float32(641.3389), np.float32(640.0559), np.float32(637.72473), np.float32(636.5289), np.float32(634.45624), np.float32(634.69196), np.float32(634.1996), np.float32(634.1605), np.float32(632.15265), np.float32(629.28723), np.float32(628.97797), np.float32(619.2732), np.float32(316.36792), np.float32(314.64627), np.float32(307.29184), np.float32(300.23578), np.float32(305.88657), np.float32(322.583), np.float32(330.72797), np.float32(327.1353), np.float32(327.53943), np.float32(333.01294), np.float32(328.85214), np.float32(327.89752), np.float32(328.88), np.float32(329.23416), np.float32(327.84457), np.float32(327.40082), np.float32(329.8422), np.float32(330.4154), np.float32(328.52942), np.float32(329.4211), np.float32(328.43805), np.float32(328.92084), np.float32(311.7782), np.float32(291.36496), np.float32(294.20474), np.float32(296.76157), np.float32(284.0494), np.float32(287.7394), np.float32(285.97717), np.float32(288.04214), np.float32(286.2739), np.float32(288.23782), np.float32(299.05942), np.float32(295.7308), np.float32(302.73834), np.float32(305.32605), np.float32(303.31653), np.float32(303.47397), np.float32(303.99326), np.float32(300.0002), np.float32(291.42465), np.float32(291.206), np.float32(288.4293), np.float32(288.77493), np.float32(289.16876), np.float32(293.21335), np.float32(299.19678), np.float32(297.43744), np.float32(302.731), np.float32(300.91364), np.float32(342.27686), np.float32(351.66788), np.float32(346.9686), np.float32(352.65128), np.float32(303.9665), np.float32(298.24152), np.float32(302.14084), np.float32(299.39166), np.float32(300.82065), np.float32(301.7968), np.float32(312.0075), np.float32(351.2843), np.float32(325.6591), np.float32(303.93118), np.float32(298.67923), np.float32(289.5282), np.float32(282.21906), np.float32(259.53882), np.float32(259.71252), np.float32(271.80283), np.float32(258.21512), np.float32(268.64896), np.float32(276.23242), np.float32(272.5983), np.float32(249.13812), np.float32(230.50237), np.float32(288.78003), np.float32(290.04443), np.float32(305.04523), np.float32(290.88535), np.float32(288.79712), np.float32(296.507), np.float32(296.44003), np.float32(294.60104), np.float32(291.3804), np.float32(440.2845), np.float32(290.5457), np.float32(290.26804), np.float32(289.6157), np.float32(294.74628), np.float32(302.46365), np.float32(217.85814), np.float32(208.10393), np.float32(213.02393), np.float32(241.94455), np.float32(597.42096), np.float32(581.3219), np.float32(559.90027), np.float32(556.5312), np.float32(569.03033), np.float32(583.61017), np.float32(595.9183), np.float32(591.75507), np.float32(587.1014), np.float32(279.8593), np.float32(581.27856), np.float32(585.8237), np.float32(588.6107), np.float32(305.91327), np.float32(598.2687), np.float32(598.05396), np.float32(306.0868), np.float32(302.08875), np.float32(591.373), np.float32(301.61017), np.float32(289.14044), np.float32(290.48468), np.float32(294.17105), np.float32(286.07364), np.float32(299.996), np.float32(296.6158), np.float32(294.89035), np.float32(303.59814), np.float32(301.56522), np.float32(297.02707), np.float32(302.94125), np.float32(291.8109), np.float32(284.34174), np.float32(279.94128), np.float32(276.55084), np.float32(273.13248), np.float32(277.66312), np.float32(219.44647), np.float32(218.78876), np.float32(219.3461), np.float32(216.58327), np.float32(219.23192), np.float32(217.72813), np.float32(219.50949), np.float32(217.87297), np.float32(220.61995), np.float32(218.35239), np.float32(222.03271), np.float32(213.68806), np.float32(237.86179), np.float32(330.8163), np.float32(331.12692), np.float32(330.68524), np.float32(329.0114), np.float32(327.64468), np.float32(328.57495), np.float32(329.7006), np.float32(326.88977), np.float32(329.40155), np.float32(330.3312), np.float32(327.0564), np.float32(326.87457), np.float32(330.1707), np.float32(330.64362), np.float32(328.07367), np.float32(328.35068), np.float32(329.1299), np.float32(329.07867), np.float32(327.61038), np.float32(330.32925), np.float32(326.24295), np.float32(329.614), np.float32(332.00565), np.float32(412.80566), np.float32(418.4848), np.float32(425.35693), np.float32(328.02966), np.float32(329.82104), np.float32(328.4275), np.float32(326.9944), np.float32(329.41138), np.float32(330.29108), np.float32(327.95328), np.float32(328.36896), np.float32(329.30743), np.float32(329.92932), np.float32(328.2762), np.float32(775.682), np.float32(775.234), np.float32(327.9033), np.float32(327.97113), np.float32(331.35522), np.float32(775.515), np.float32(776.12164), np.float32(775.16736), np.float32(774.0313), np.float32(779.3552), np.float32(506.5029), np.float32(321.74838), np.float32(261.96762), np.float32(332.73257), np.float32(329.88834), np.float32(257.90317), np.float32(254.80177), np.float32(263.75104), np.float32(265.10074), np.float32(265.4711), np.float32(264.00018), np.float32(263.2963), np.float32(260.52036), np.float32(260.91336), np.float32(263.14206), np.float32(259.05426), np.float32(260.66702), np.float32(254.90536), np.float32(250.99126), np.float32(248.64786), np.float32(238.43893), np.float32(231.86746), np.float32(232.56325), np.float32(329.1262), np.float32(328.74756), np.float32(329.0573), np.float32(235.372), np.float32(231.93854), np.float32(235.01068), np.float32(240.1747), np.float32(244.57195), np.float32(253.40038), np.float32(259.56494), np.float32(266.30112), np.float32(266.5245), np.float32(263.81253), np.float32(260.4753), np.float32(256.76047), np.float32(254.38176), np.float32(248.05263), np.float32(243.64958), np.float32(242.70102), np.float32(237.96103), np.float32(232.49396), np.float32(231.64052), np.float32(229.7256), np.float32(225.6976), np.float32(227.24146), np.float32(228.47488), np.float32(228.40819), np.float32(228.04108), np.float32(234.3077), np.float32(215.73822), np.float32(223.21478), np.float32(233.79984), np.float32(216.25827), np.float32(218.75504), np.float32(225.84886), np.float32(231.3626), np.float32(223.86768), np.float32(228.31978), np.float32(232.08438), np.float32(215.58405), np.float32(228.56203), np.float32(228.44463), np.float32(216.3622), np.float32(222.71167), np.float32(225.99991), np.float32(226.29727), np.float32(223.85251), np.float32(229.24379), np.float32(229.93916), np.float32(226.14935), np.float32(231.08742), np.float32(223.82747), np.float32(213.50797), np.float32(212.83936), np.float32(216.14491), np.float32(216.69057), np.float32(214.76025), np.float32(216.594), np.float32(229.8549), np.float32(230.44702), np.float32(234.62029), np.float32(234.10367), np.float32(228.84903), np.float32(232.35641), np.float32(226.83449), np.float32(217.26399), np.float32(215.86076), np.float32(217.31166), np.float32(219.0268), np.float32(211.34357), np.float32(208.75972), np.float32(217.76628), np.float32(226.99768), np.float32(222.08911), np.float32(224.00412), np.float32(231.60452), np.float32(228.96623), np.float32(218.15602), np.float32(333.69424), np.float32(334.2054), np.float32(330.14926), np.float32(331.36182), np.float32(215.342), np.float32(227.4748), np.float32(219.95831), np.float32(221.14015), np.float32(226.24458), np.float32(219.16454), np.float32(226.64626), np.float32(213.90833), np.float32(327.7314), np.float32(328.9135), np.float32(329.73016), np.float32(328.23422), np.float32(329.15314), np.float32(328.92783), np.float32(328.83652), np.float32(329.03668), np.float32(328.94702), np.float32(329.33392), np.float32(215.58887), np.float32(227.16339), np.float32(219.11333), np.float32(220.74713), np.float32(221.09499), np.float32(216.05174), np.float32(225.36252), np.float32(215.4062), np.float32(226.94676), np.float32(216.67285), np.float32(220.16226), np.float32(217.52498), np.float32(215.63039), np.float32(215.9055), np.float32(219.26387), np.float32(218.51842), np.float32(216.53282), np.float32(225.0048), np.float32(218.9731), np.float32(217.06296), np.float32(215.20128), np.float32(217.73027), np.float32(217.2109), np.float32(221.37524), np.float32(220.93956), np.float32(223.17781), np.float32(215.33342), np.float32(211.57254), np.float32(517.3246), np.float32(251.1906), np.float32(659.40955), np.float32(256.6691), np.float32(243.7937), np.float32(215.2209), np.float32(237.58456), np.float32(213.26595), np.float32(248.3998), np.float32(256.53476), np.float32(253.6584), np.float32(245.07513), np.float32(214.64339), np.float32(242.95801), np.float32(214.25563), np.float32(242.85242), np.float32(214.30013), np.float32(244.84154), np.float32(329.64786), np.float32(328.46445), np.float32(222.9157), np.float32(215.2482), np.float32(226.49387), np.float32(329.48114), np.float32(229.642), np.float32(329.24655), np.float32(225.80896), np.float32(220.51915), np.float32(328.4212), np.float32(328.27002), np.float32(329.15894), np.float32(328.48697), np.float32(329.18036), np.float32(328.9215), np.float32(328.9214), np.float32(223.4382), np.float32(216.8602), np.float32(220.84477), np.float32(329.12875), np.float32(328.0358), np.float32(219.39896), np.float32(217.90833), np.float32(221.50644), np.float32(218.08826), np.float32(221.77095), np.float32(217.78342), np.float32(218.1511), np.float32(216.58052), np.float32(220.21786), np.float32(216.23286), np.float32(327.5228), np.float32(333.04483), np.float32(329.53925), np.float32(329.76602), np.float32(330.46402), np.float32(331.4266), np.float32(328.9979), np.float32(327.2471), np.float32(328.84445), np.float32(329.57422), np.float32(328.37668), np.float32(328.62033), np.float32(329.0226), np.float32(328.54565), np.float32(328.89084), np.float32(328.72247), np.float32(329.13922), np.float32(328.71692), np.float32(328.5726), np.float32(328.65622), np.float32(329.22595), np.float32(329.16098), np.float32(328.2932), np.float32(328.88965), np.float32(328.80426), np.float32(328.8517), np.float32(328.91388), np.float32(329.3114), np.float32(329.04916), np.float32(328.50534), np.float32(329.20532), np.float32(328.81915), np.float32(329.18076), np.float32(328.96127), np.float32(328.59552), np.float32(328.77206), np.float32(329.53094), np.float32(329.10822), np.float32(328.88748), np.float32(328.35333), np.float32(328.84305), np.float32(330.047), np.float32(329.02457), np.float32(329.57416), np.float32(327.98972), np.float32(218.64943), np.float32(520.57605), np.float32(776.7443), np.float32(777.1463), np.float32(238.91093), np.float32(197.24643), np.float32(187.94423), np.float32(187.96922), np.float32(192.96988), np.float32(196.41875), np.float32(195.15466), np.float32(193.24783), np.float32(192.51076), np.float32(194.77953), np.float32(194.35818), np.float32(194.02155), np.float32(195.32542), np.float32(193.33272), np.float32(196.08704), np.float32(194.43518), np.float32(193.39609), np.float32(195.13132), np.float32(193.8784), np.float32(193.08585), np.float32(193.6493), np.float32(196.54639), np.float32(195.08372), np.float32(192.9524), np.float32(193.6024), np.float32(194.22655), np.float32(195.11427), np.float32(193.47762), np.float32(192.79709), np.float32(196.56165), np.float32(196.15123), np.float32(192.43881), np.float32(192.71259), np.float32(196.39458), np.float32(195.47049), np.float32(193.20532), np.float32(192.59137), np.float32(197.82257), np.float32(196.16747), np.float32(192.23767), np.float32(191.791), np.float32(196.04932), np.float32(197.67099), np.float32(192.80501), np.float32(191.30966), np.float32(196.79524), np.float32(198.52342), np.float32(192.36734), np.float32(193.48947), np.float32(195.42458), np.float32(190.50569), np.float32(192.28862), np.float32(214.93987), np.float32(234.48622), np.float32(212.88477), np.float32(221.55443), np.float32(214.3905), np.float32(222.95985), np.float32(218.31776), np.float32(220.99466), np.float32(215.89444), np.float32(215.46423), np.float32(225.49011), np.float32(214.73393), np.float32(219.0159), np.float32(219.92749), np.float32(220.32062), np.float32(215.27946), np.float32(219.804), np.float32(213.87257), np.float32(221.71985), np.float32(218.41734), np.float32(216.5635), np.float32(329.3349), np.float32(328.75653), np.float32(328.69955), np.float32(328.85275), np.float32(329.25497), np.float32(329.1698), np.float32(329.00305), np.float32(328.7119), np.float32(328.89047), np.float32(328.9704), np.float32(328.9541), np.float32(329.22717), np.float32(328.71017), np.float32(328.72968), np.float32(329.31088), np.float32(221.51825), np.float32(329.6607), np.float32(328.6651), np.float32(217.11136), np.float32(219.77832), np.float32(217.45366), np.float32(218.242), np.float32(217.92531), np.float32(218.34927), np.float32(218.36215), np.float32(219.21663), np.float32(218.00523), np.float32(215.71806), np.float32(225.87442), np.float32(257.0801), np.float32(258.39517), np.float32(256.1033), np.float32(258.99234), np.float32(242.30107), np.float32(778.6239), np.float32(232.54112), np.float32(213.53609), np.float32(234.14175), np.float32(222.14879), np.float32(216.53195), np.float32(777.77), np.float32(213.94524), np.float32(231.16031), np.float32(215.18741), np.float32(222.84709), np.float32(216.55762), np.float32(224.73451), np.float32(217.4079), np.float32(328.2623), np.float32(329.41122), np.float32(329.69644), np.float32(328.98718), np.float32(328.40457), np.float32(328.57672), np.float32(329.1816), np.float32(328.95026), np.float32(328.8615), np.float32(329.05328), np.float32(329.25043), np.float32(328.56805), np.float32(329.09473), np.float32(328.80753), np.float32(328.9899), np.float32(329.01688), np.float32(328.56842), np.float32(328.81662), np.float32(329.12784), np.float32(328.93042), np.float32(328.63794), np.float32(329.4239), np.float32(328.31564), np.float32(328.89795), np.float32(328.52844), np.float32(328.52887), np.float32(328.68036), np.float32(328.09106), np.float32(328.50314), np.float32(773.83215), np.float32(325.62134), np.float32(248.03856), np.float32(263.18777), np.float32(262.42297), np.float32(328.76413), np.float32(328.92953), np.float32(331.93185), np.float32(328.9295), np.float32(327.45526), np.float32(328.6053), np.float32(328.70023), np.float32(328.13525), np.float32(329.84073), np.float32(327.79416), np.float32(328.15994), np.float32(328.9809), np.float32(328.71167), np.float32(329.27213), np.float32(328.6669), np.float32(327.1075), np.float32(329.11905), np.float32(329.01987), np.float32(329.13757), np.float32(329.2874), np.float32(327.65204), np.float32(328.915), np.float32(328.9277), np.float32(329.28116), np.float32(329.21243), np.float32(328.40097), np.float32(328.1188), np.float32(328.91275), np.float32(329.4241), np.float32(328.8859), np.float32(329.02057), np.float32(327.96494), np.float32(329.0209), np.float32(328.68127), np.float32(329.50928), np.float32(329.4606), np.float32(327.93768), np.float32(327.59418), np.float32(329.89902), np.float32(329.48322), np.float32(328.9717), np.float32(329.0445), np.float32(327.14673), np.float32(329.0996), np.float32(441.71942), np.float32(441.37222), np.float32(777.1968), np.float32(778.77075), np.float32(290.37964), np.float32(172.8492), np.float32(185.59624), np.float32(195.20546), np.float32(200.90495), np.float32(192.00113), np.float32(192.16176), np.float32(192.88377), np.float32(194.4758), np.float32(192.1816), np.float32(192.95555), np.float32(391.2841), np.float32(193.12598), np.float32(192.36667), np.float32(197.32332), np.float32(196.78099), np.float32(194.86458), np.float32(190.92618), np.float32(191.41896), np.float32(194.79863), np.float32(395.3881), np.float32(189.68404), np.float32(193.52548), np.float32(198.40184), np.float32(192.5215), np.float32(192.45981), np.float32(195.03247), np.float32(195.20418), np.float32(329.34106), np.float32(327.22647), np.float32(195.76675), np.float32(193.05695), np.float32(327.77008), np.float32(327.65933), np.float32(329.60886), np.float32(328.0158), np.float32(329.36786), np.float32(330.47818), np.float32(328.63522), np.float32(328.49896), np.float32(327.84506), np.float32(321.099), np.float32(328.58655), np.float32(255.38048), np.float32(517.16254), np.float32(537.2521), np.float32(559.76245), np.float32(564.27936), np.float32(569.3044), np.float32(571.82587), np.float32(577.979), np.float32(281.67435), np.float32(570.38727), np.float32(574.9564), np.float32(581.038), np.float32(583.7144), np.float32(584.233), np.float32(586.2596), np.float32(586.38403), np.float32(584.2827), np.float32(586.1863), np.float32(590.1681), np.float32(593.8247), np.float32(599.2548), np.float32(596.185), np.float32(597.18384), np.float32(285.05246), np.float32(587.7218), np.float32(581.1303), np.float32(284.9779), np.float32(582.422), np.float32(584.47577), np.float32(287.691), np.float32(300.41394), np.float32(607.0253), np.float32(610.1411), np.float32(611.4409), np.float32(610.10516), np.float32(608.76996), np.float32(605.2131), np.float32(599.91516), np.float32(593.48083), np.float32(294.5931), np.float32(300.32556), np.float32(291.19937), np.float32(295.39682), np.float32(295.57977), np.float32(288.7778), np.float32(299.44614), np.float32(299.16452), np.float32(296.95905), np.float32(299.56076), np.float32(295.6267), np.float32(294.7559), np.float32(292.95538), np.float32(286.80478), np.float32(285.2792), np.float32(282.69064), np.float32(275.4453), np.float32(260.56772), np.float32(273.77017), np.float32(279.12378), np.float32(282.9606), np.float32(289.47348), np.float32(581.90967), np.float32(586.8573), np.float32(589.7921), np.float32(174.38667), np.float32(294.42596), np.float32(300.52682), np.float32(287.1123), np.float32(290.48727), np.float32(297.5567), np.float32(285.40524), np.float32(288.5822), np.float32(585.5827), np.float32(291.7417), np.float32(298.28687), np.float32(299.97675), np.float32(289.83847), np.float32(287.01828), np.float32(283.99283), np.float32(276.35373), np.float32(268.76517), np.float32(262.34964), np.float32(265.62753), np.float32(259.53113), np.float32(260.80927), np.float32(259.12085), np.float32(260.00867), np.float32(261.6517), np.float32(261.315), np.float32(262.02255), np.float32(259.16238), np.float32(262.21246), np.float32(260.25153), np.float32(263.25073), np.float32(260.2493), np.float32(262.31485), np.float32(259.8521), np.float32(262.0963), np.float32(261.86765), np.float32(260.21426), np.float32(261.66104), np.float32(260.60052), np.float32(262.6904), np.float32(259.59216), np.float32(264.89685), np.float32(263.17575), np.float32(267.18433), np.float32(543.55164), np.float32(554.1087), np.float32(561.62036), np.float32(563.38007), np.float32(573.65515), np.float32(580.6546), np.float32(586.0585), np.float32(587.40686), np.float32(588.25446), np.float32(588.1821), np.float32(287.34366), np.float32(283.31564), np.float32(585.88556), np.float32(290.2696), np.float32(290.1463), np.float32(596.3273), np.float32(600.1567), np.float32(600.0415), np.float32(595.68024), np.float32(590.7114), np.float32(587.88275), np.float32(584.06165), np.float32(582.4311), np.float32(585.4382), np.float32(587.8202), np.float32(293.06006), np.float32(299.01303), np.float32(604.37463), np.float32(608.1831), np.float32(605.85706), np.float32(606.75385), np.float32(605.1612), np.float32(596.7176), np.float32(294.70007), np.float32(293.00525), np.float32(294.8251), np.float32(291.39917), np.float32(289.4087), np.float32(296.20468), np.float32(295.40494), np.float32(297.71396), np.float32(300.1942), np.float32(297.71246), np.float32(298.68466), np.float32(296.23575), np.float32(289.39017), np.float32(285.81473), np.float32(278.79147), np.float32(251.84085), np.float32(282.05725), np.float32(283.298), np.float32(275.8116), np.float32(235.3412), np.float32(578.59827), np.float32(281.37808), np.float32(587.4639), np.float32(590.208), np.float32(286.7058), np.float32(590.48456), np.float32(291.69598), np.float32(284.03342), np.float32(294.04935), np.float32(291.56863), np.float32(286.89636), np.float32(586.84686), np.float32(585.661), np.float32(286.87292), np.float32(282.83997), np.float32(287.48846), np.float32(282.6227), np.float32(277.3558), np.float32(273.36737), np.float32(273.04413), np.float32(273.0647), np.float32(264.4434), np.float32(252.69609), np.float32(261.0265), np.float32(259.7894), np.float32(259.97363), np.float32(525.15674), np.float32(525.9474), np.float32(524.2737), np.float32(259.3188), np.float32(264.28336), np.float32(255.42426), np.float32(522.0177), np.float32(258.80786), np.float32(527.53156), np.float32(531.9271), np.float32(532.7933), np.float32(531.86145), np.float32(532.18726), np.float32(531.10944), np.float32(525.5972), np.float32(523.2834), np.float32(521.4485), np.float32(521.6008), np.float32(523.2198), np.float32(531.9352), np.float32(539.51135), np.float32(556.69635), np.float32(563.37085), np.float32(570.5246), np.float32(579.43506), np.float32(159.15892), np.float32(879.88403), np.float32(578.06476), np.float32(166.88719), np.float32(163.27435), np.float32(287.54556), np.float32(163.35573), np.float32(161.77994), np.float32(292.8284), np.float32(289.71494), np.float32(166.94608), np.float32(589.19867), np.float32(590.7601), np.float32(165.15205), np.float32(597.11084), np.float32(597.5457), np.float32(889.7479), np.float32(594.4266), np.float32(595.95233), np.float32(592.9861), np.float32(589.6102), np.float32(585.79175), np.float32(581.7458), np.float32(579.9668), np.float32(578.9761), np.float32(581.7565), np.float32(294.20654), np.float32(301.14835), np.float32(302.57898), np.float32(304.33823), np.float32(304.81525), np.float32(306.23193), np.float32(304.50824), np.float32(303.59814), np.float32(297.97992), np.float32(296.8575), np.float32(292.6541), np.float32(289.08395), np.float32(290.12122), np.float32(292.86563), np.float32(292.39124), np.float32(294.6092), np.float32(298.16547), np.float32(295.0291), np.float32(289.41763), np.float32(289.24652), np.float32(282.41577), np.float32(282.90805), np.float32(284.48218), np.float32(285.59015), np.float32(288.8905), np.float32(292.06174), np.float32(586.9405), np.float32(589.25055), np.float32(292.16776), np.float32(292.50598), np.float32(292.81906), np.float32(292.39102), np.float32(289.9658), np.float32(287.78418), np.float32(581.31604), np.float32(580.67566), np.float32(581.13776), np.float32(582.00916), np.float32(581.9919), np.float32(280.18744), np.float32(278.72858), np.float32(281.42432), np.float32(278.8233), np.float32(274.39597), np.float32(263.58203), np.float32(262.25012), np.float32(260.51617), np.float32(258.6061), np.float32(257.11102), np.float32(257.18863), np.float32(258.98785), np.float32(256.7402), np.float32(262.26718), np.float32(258.60406), np.float32(260.05795), np.float32(262.53638), np.float32(524.44525), np.float32(527.4734), np.float32(264.12543), np.float32(527.99243), np.float32(529.2353), np.float32(526.385), np.float32(523.2891), np.float32(523.30566), np.float32(523.969), np.float32(523.4513), np.float32(523.7881), np.float32(525.1479), np.float32(524.0217), np.float32(526.6511), np.float32(267.2078), np.float32(280.38306), np.float32(554.5581), np.float32(565.4046), np.float32(575.2369), np.float32(583.57806), np.float32(583.7356), np.float32(583.813), np.float32(172.53044), np.float32(174.24362), np.float32(583.3256), np.float32(582.2311), np.float32(583.9968), np.float32(588.53094), np.float32(295.97937), np.float32(606.1006), np.float32(607.1349), np.float32(607.3163), np.float32(606.7231), np.float32(605.3358), np.float32(597.9816), np.float32(292.01785), np.float32(288.7154), np.float32(288.03104), np.float32(288.42593), np.float32(290.09283), np.float32(595.5668), np.float32(607.5313), np.float32(304.62686), np.float32(306.32578), np.float32(311.40067), np.float32(311.91528), np.float32(306.1219), np.float32(301.0864), np.float32(293.43442), np.float32(289.4463), np.float32(290.4332), np.float32(293.21518), np.float32(296.63348), np.float32(305.95367), np.float32(220.66902), np.float32(222.98624), np.float32(210.30875), np.float32(224.25574), np.float32(327.77823), np.float32(308.9458), np.float32(307.321), np.float32(305.4077), np.float32(303.92734), np.float32(303.72867), np.float32(295.42245), np.float32(289.34305), np.float32(288.26248), np.float32(291.56226), np.float32(293.64478), np.float32(295.28506), np.float32(296.4182), np.float32(296.03278), np.float32(294.5881), np.float32(293.86227), np.float32(292.29364), np.float32(294.9263), np.float32(297.1164), np.float32(300.0039), np.float32(302.58997), np.float32(308.06555), np.float32(312.772), np.float32(317.43552), np.float32(320.93515), np.float32(324.92764), np.float32(324.07697), np.float32(320.90018), np.float32(308.7681), np.float32(162.09549), np.float32(441.04562), np.float32(440.0351), np.float32(441.3646), np.float32(441.59094), np.float32(440.29462), np.float32(440.3557), np.float32(437.5416), np.float32(443.6809), np.float32(272.80487), np.float32(267.98633), np.float32(259.58865), np.float32(260.09232), np.float32(519.2666), np.float32(519.23816), np.float32(518.50226), np.float32(516.97473), np.float32(515.7053), np.float32(515.61237), np.float32(516.019), np.float32(518.2576), np.float32(520.7492), np.float32(522.3816), np.float32(524.2316), np.float32(521.53516), np.float32(517.0001), np.float32(513.7533), np.float32(514.6193), np.float32(207.56673), np.float32(214.80432), np.float32(235.94064), np.float32(214.43463), np.float32(166.02895), np.float32(165.901), np.float32(165.69397), np.float32(166.71413), np.float32(162.25699), np.float32(212.93396), np.float32(217.90271), np.float32(165.1311), np.float32(166.51176), np.float32(162.37128), np.float32(231.50233), np.float32(232.19284), np.float32(166.46164), np.float32(235.8743), np.float32(217.17136), np.float32(256.70663), np.float32(253.5973), np.float32(262.6929), np.float32(255.56837), np.float32(262.78592), np.float32(256.7401), np.float32(217.78723), np.float32(254.48187), np.float32(260.15942), np.float32(242.56111), np.float32(258.98157), np.float32(247.50125), np.float32(245.69405), np.float32(261.66818), np.float32(250.13936), np.float32(266.8296), np.float32(270.26727), np.float32(279.84756), np.float32(163.71445), np.float32(270.831), np.float32(260.64194), np.float32(255.48685), np.float32(230.76859), np.float32(214.3775), np.float32(163.78493), np.float32(227.7434), np.float32(160.58534), np.float32(168.37), np.float32(229.05833), np.float32(208.50038), np.float32(224.13493), np.float32(160.32132), np.float32(444.72195), np.float32(318.75568), np.float32(439.13934), np.float32(441.3947), np.float32(328.49417), np.float32(441.67255), np.float32(439.81146), np.float32(441.11014), np.float32(441.42538), np.float32(163.56273), np.float32(159.78593), np.float32(254.76053), np.float32(262.3434), np.float32(259.48865), np.float32(261.67798), np.float32(261.1111), np.float32(257.70724), np.float32(441.42856), np.float32(441.37442), np.float32(264.1928), np.float32(254.25858), np.float32(261.47055), np.float32(259.1281), np.float32(443.40936), np.float32(440.8726), np.float32(255.30862), np.float32(262.1585), np.float32(257.71698), np.float32(265.4211), np.float32(256.98044), np.float32(440.85962), np.float32(441.0814), np.float32(441.1824), np.float32(443.3464), np.float32(440.46262), np.float32(776.8043), np.float32(776.1502), np.float32(776.33014), np.float32(164.20432), np.float32(164.11531), np.float32(164.37805), np.float32(164.70741), np.float32(160.57474), np.float32(164.0157), np.float32(162.7608), np.float32(163.32649), np.float32(164.04482), np.float32(162.51167), np.float32(172.4078), np.float32(209.55086), np.float32(185.27368), np.float32(176.95197), np.float32(329.3055), np.float32(166.76918), np.float32(162.13779), np.float32(167.48256), np.float32(163.50702), np.float32(165.09856), np.float32(166.38005), np.float32(164.80804), np.float32(164.79488), np.float32(161.24527), np.float32(162.0375), np.float32(164.5109), np.float32(159.79561), np.float32(228.15115), np.float32(161.67957), np.float32(233.93091), np.float32(166.2157), np.float32(164.74088), np.float32(165.67657), np.float32(221.86359), np.float32(214.19434), np.float32(217.66296), np.float32(165.16664), np.float32(166.36919), np.float32(161.62437), np.float32(171.81496), np.float32(517.1503), np.float32(516.67975), np.float32(439.99863), np.float32(520.51904), np.float32(518.2183), np.float32(326.04242), np.float32(521.01526), np.float32(518.5261), np.float32(327.55283), np.float32(329.34518), np.float32(328.5427), np.float32(329.71082), np.float32(328.74924), np.float32(328.01627), np.float32(329.08432), np.float32(327.75992), np.float32(329.8006), np.float32(329.4417), np.float32(327.59555), np.float32(329.26385), np.float32(326.97794), np.float32(202.66902), np.float32(170.97743), np.float32(170.11812), np.float32(165.02612), np.float32(164.95282), np.float32(163.7028), np.float32(163.92831), np.float32(165.22717), np.float32(163.58765), np.float32(166.62514), np.float32(165.48645), np.float32(163.41708), np.float32(163.5834), np.float32(162.2109), np.float32(163.56761), np.float32(165.51237), np.float32(164.25124), np.float32(164.47536), np.float32(165.70125), np.float32(165.44397), np.float32(165.79898), np.float32(162.17639), np.float32(164.19228), np.float32(160.93494), np.float32(164.37137), np.float32(164.16379), np.float32(163.90283), np.float32(164.85109), np.float32(165.44272), np.float32(165.69649), np.float32(163.95676), np.float32(163.40321), np.float32(163.5448), np.float32(165.32005), np.float32(521.3052), np.float32(439.55692), np.float32(441.5606), np.float32(164.2272), np.float32(163.59239), np.float32(163.31741), np.float32(166.60497), np.float32(163.99951), np.float32(161.35753), np.float32(167.84236), np.float32(228.22173), np.float32(211.76447), np.float32(223.99615), np.float32(210.1703), np.float32(217.84357), np.float32(219.23813), np.float32(218.90941), np.float32(217.8711), np.float32(211.28233), np.float32(239.59964), np.float32(443.26953), np.float32(162.95892), np.float32(166.65096), np.float32(162.29318), np.float32(167.24872), np.float32(163.6515), np.float32(165.41707), np.float32(163.73918), np.float32(162.09483), np.float32(165.97522), np.float32(162.66107), np.float32(254.58507), np.float32(261.3686), np.float32(254.15169), np.float32(263.60175), np.float32(244.17647), np.float32(442.43945), np.float32(246.88905), np.float32(439.61722), np.float32(255.3084), np.float32(258.69107), np.float32(257.94623), np.float32(250.35059), np.float32(441.86005), np.float32(245.58589), np.float32(439.28952), np.float32(443.4624), np.float32(440.50455), np.float32(441.7542), np.float32(442.42038), np.float32(442.17444), np.float32(441.9449), np.float32(439.61215), np.float32(442.45123), np.float32(440.2553), np.float32(441.8161), np.float32(441.16644), np.float32(220.90256), np.float32(215.05453), np.float32(218.29022), np.float32(219.43161), np.float32(216.2521), np.float32(219.50003), np.float32(216.45198), np.float32(218.56657), np.float32(217.65681), np.float32(222.84756), np.float32(233.27399), np.float32(232.36697), np.float32(209.42126), np.float32(248.09184), np.float32(161.13362), np.float32(163.9446), np.float32(164.8595), np.float32(164.28334), np.float32(164.99146), np.float32(163.7426), np.float32(164.73189), np.float32(163.72281), np.float32(162.40536), np.float32(163.36102), np.float32(163.37527), np.float32(165.0239), np.float32(166.22626), np.float32(163.67433), np.float32(165.30042), np.float32(164.65321), np.float32(164.59839), np.float32(163.04066), np.float32(163.04176), np.float32(162.86987), np.float32(163.21587), np.float32(164.08185), np.float32(164.25893), np.float32(166.11491), np.float32(166.14262), np.float32(165.16614), np.float32(164.86488), np.float32(163.55154), np.float32(164.26721), np.float32(164.79779), np.float32(161.79375), np.float32(164.2115), np.float32(165.57535), np.float32(164.4114), np.float32(164.03342), np.float32(163.08421), np.float32(163.76636), np.float32(163.00206), np.float32(164.15894), np.float32(161.66318), np.float32(163.38618), np.float32(163.91939), np.float32(164.74019), np.float32(442.42978), np.float32(440.99225), np.float32(442.02347), np.float32(447.3297), np.float32(470.7139), np.float32(195.59738), np.float32(170.43256), np.float32(166.2073), np.float32(162.66518), np.float32(166.0064), np.float32(165.10936), np.float32(160.35028), np.float32(171.67856), np.float32(168.65532), np.float32(164.19183), np.float32(165.78242), np.float32(169.51784), np.float32(395.6333), np.float32(170.14893), np.float32(398.69925), np.float32(400.918), np.float32(410.15262), np.float32(162.81978), np.float32(169.96292), np.float32(427.6786), np.float32(431.00876), np.float32(433.18594), np.float32(431.91107), np.float32(430.56223), np.float32(430.25385), np.float32(428.3478), np.float32(424.67746), np.float32(424.75534), np.float32(426.32196), np.float32(431.16476), np.float32(434.31644), np.float32(437.72348), np.float32(442.66547), np.float32(444.93774), np.float32(448.1667), np.float32(447.1505), np.float32(448.1583), np.float32(447.39722), np.float32(447.8147), np.float32(446.49286), np.float32(444.0296), np.float32(443.21463), np.float32(442.34366), np.float32(440.64407), np.float32(439.95044), np.float32(439.4978), np.float32(436.39963), np.float32(435.26895), np.float32(437.43933), np.float32(881.8624), np.float32(216.17735), np.float32(175.67284), np.float32(239.07677), np.float32(233.81638), np.float32(166.09604), np.float32(165.1982), np.float32(164.01224), np.float32(517.9593), np.float32(517.80096), np.float32(519.32135), np.float32(520.3633), np.float32(518.10956), np.float32(519.55804), np.float32(522.32635), np.float32(524.94025), np.float32(530.98834), np.float32(537.4681), np.float32(556.39166), np.float32(553.06836), np.float32(542.9137), np.float32(540.7145), np.float32(536.1528), np.float32(527.5326), np.float32(524.73193), np.float32(522.46643), np.float32(526.6969), np.float32(537.40497), np.float32(539.03406), np.float32(538.66223), np.float32(538.8958), np.float32(548.0282), np.float32(548.8146), np.float32(543.5349), np.float32(540.9133), np.float32(269.24905), np.float32(260.4082), np.float32(260.56805), np.float32(254.0639), np.float32(257.0525), np.float32(257.23297), np.float32(258.2008), np.float32(264.8567), np.float32(265.67365), np.float32(270.67313), np.float32(269.54303), np.float32(268.86615), np.float32(266.51904), np.float32(263.79208), np.float32(264.24765), np.float32(261.05646), np.float32(267.75433), np.float32(270.66467), np.float32(279.9831), np.float32(274.68173), np.float32(569.94354), np.float32(570.5583), np.float32(577.4644), np.float32(578.6838), np.float32(581.35236), np.float32(580.3154), np.float32(575.77954), np.float32(578.81287), np.float32(871.2288), np.float32(876.6669), np.float32(885.34467), np.float32(891.4237), np.float32(895.07684), np.float32(1502.396), np.float32(1498.869), np.float32(893.34143), np.float32(889.2223), np.float32(884.61304), np.float32(875.8127), np.float32(1450.3973), np.float32(1451.7289), np.float32(585.8497), np.float32(588.2419), np.float32(893.06006), np.float32(605.6637), np.float32(604.79724), np.float32(605.3862), np.float32(604.4416), np.float32(595.5821), np.float32(588.6459), np.float32(580.3249), np.float32(583.69257), np.float32(587.25305), np.float32(171.10129), np.float32(174.25458), np.float32(171.48018), np.float32(170.51175), np.float32(175.16179), np.float32(168.46889), np.float32(173.27283), np.float32(167.3946), np.float32(174.9232), np.float32(170.54462), np.float32(440.53882), np.float32(442.24338), np.float32(443.06934), np.float32(441.78452), np.float32(437.73517), np.float32(439.90668), np.float32(170.04193), np.float32(175.20042), np.float32(606.67267), np.float32(612.36145), np.float32(618.92926), np.float32(625.4556), np.float32(630.26044), np.float32(622.05096), np.float32(608.302), np.float32(599.1908), np.float32(593.85004), np.float32(590.01013), np.float32(290.3108), np.float32(284.79315), np.float32(301.51797), np.float32(291.82556), np.float32(291.19086), np.float32(300.51428), np.float32(291.02408), np.float32(297.09814), np.float32(296.1484), np.float32(284.41928), np.float32(279.95694), np.float32(277.1167), np.float32(274.32205), np.float32(270.5473), np.float32(273.23093), np.float32(269.15308), np.float32(264.81247), np.float32(266.86536), np.float32(270.1669), np.float32(270.33978), np.float32(267.77194), np.float32(270.04712), np.float32(276.60956), np.float32(275.48965), np.float32(268.93478), np.float32(268.31345), np.float32(267.7759), np.float32(268.56247), np.float32(267.68912), np.float32(269.57434), np.float32(272.20404), np.float32(276.4058), np.float32(277.24835), np.float32(279.35233), np.float32(278.85962), np.float32(283.51788), np.float32(288.054), np.float32(585.2896), np.float32(173.8109), np.float32(172.2464), np.float32(173.60532), np.float32(173.80937), np.float32(174.90753), np.float32(171.7418), np.float32(176.6371), np.float32(168.67058), np.float32(174.07866), np.float32(170.30687), np.float32(177.42944), np.float32(609.40485), np.float32(609.03986), np.float32(606.96313), np.float32(595.0109), np.float32(585.02527), np.float32(574.53357), np.float32(578.1548), np.float32(582.15576), np.float32(584.37537), np.float32(591.681), np.float32(602.45135), np.float32(607.526), np.float32(609.6721), np.float32(608.2024), np.float32(604.66986), np.float32(595.52216), np.float32(587.1538), np.float32(581.19934), np.float32(581.33374), np.float32(287.7549), np.float32(283.35675), np.float32(279.3869), np.float32(236.20561), np.float32(218.32861), np.float32(218.77242), np.float32(210.83698), np.float32(220.75385), np.float32(210.22742), np.float32(225.45943), np.float32(210.3149), np.float32(223.77829), np.float32(215.51138), np.float32(219.28168), np.float32(212.30907), np.float32(217.06122), np.float32(439.56274), np.float32(292.41412), np.float32(282.1653), np.float32(283.24728), np.float32(583.09296), np.float32(585.17957), np.float32(586.99286), np.float32(588.6323), np.float32(591.4691), np.float32(190.57918), np.float32(166.86787), np.float32(286.4291), np.float32(883.3315), np.float32(586.11096), np.float32(285.56766), np.float32(583.5036), np.float32(298.19836), np.float32(286.41022), np.float32(288.2265), np.float32(294.5893), np.float32(286.46475), np.float32(287.5108), np.float32(289.0473), np.float32(281.5736), np.float32(274.67636), np.float32(269.89468), np.float32(264.0767), np.float32(263.88696), np.float32(259.5693), np.float32(260.99005), np.float32(261.6163), np.float32(261.74643), np.float32(262.15515), np.float32(261.36597), np.float32(261.29492), np.float32(258.3223), np.float32(261.4161), np.float32(257.25577), np.float32(260.72076), np.float32(259.92627), np.float32(261.244), np.float32(261.90448), np.float32(261.45615), np.float32(262.41733), np.float32(260.2876), np.float32(263.05603), np.float32(259.31436), np.float32(261.56058), np.float32(258.41193), np.float32(264.74725), np.float32(259.94485), np.float32(270.9292), np.float32(275.83728), np.float32(286.15546), np.float32(287.64188), np.float32(291.3754), np.float32(292.25946), np.float32(292.25745), np.float32(292.56763), np.float32(293.92496), np.float32(291.10657), np.float32(288.47574), np.float32(878.9963), np.float32(886.32904), np.float32(893.7497), np.float32(910.82886), np.float32(910.46155), np.float32(602.55164), np.float32(893.50244), np.float32(584.43536), np.float32(576.0745), np.float32(577.12555), np.float32(577.33844), np.float32(583.3966), np.float32(591.44147), np.float32(602.80743), np.float32(610.7102), np.float32(615.8573), np.float32(611.96466), np.float32(611.545), np.float32(609.05334), np.float32(602.40393), np.float32(593.62366), np.float32(286.92288), np.float32(284.9057), np.float32(221.6562), np.float32(217.52249), np.float32(218.04546), np.float32(218.5086), np.float32(217.26987), np.float32(217.08699), np.float32(216.15575), np.float32(217.62044), np.float32(216.72485), np.float32(218.56886), np.float32(218.46277), np.float32(217.67635), np.float32(216.54929), np.float32(215.98015), np.float32(218.0771), np.float32(215.64806), np.float32(216.58127), np.float32(302.3687), np.float32(297.3563), np.float32(299.29822), np.float32(297.29245), np.float32(296.65924), np.float32(612.5107), np.float32(613.57965), np.float32(613.742), np.float32(609.68445), np.float32(298.5773), np.float32(296.7187), np.float32(295.42706), np.float32(297.21753), np.float32(296.21774), np.float32(297.15585), np.float32(295.25693), np.float32(293.88666), np.float32(291.62698), np.float32(289.7825), np.float32(290.92813), np.float32(290.23544), np.float32(288.38614), np.float32(286.10165), np.float32(281.4235), np.float32(272.53006), np.float32(261.39438), np.float32(267.70038), np.float32(258.4991), np.float32(262.05975), np.float32(261.22568), np.float32(269.79422), np.float32(260.1215), np.float32(264.06546), np.float32(260.2391), np.float32(264.59), np.float32(256.84155), np.float32(261.5608), np.float32(261.32126), np.float32(257.22202), np.float32(263.1462), np.float32(261.58783), np.float32(262.09), np.float32(260.03244), np.float32(266.24698), np.float32(257.37125), np.float32(264.82303), np.float32(263.52414), np.float32(270.3359), np.float32(269.15607), np.float32(280.7855), np.float32(291.3635), np.float32(165.75854), np.float32(293.05685), np.float32(290.58038), np.float32(296.78836), np.float32(296.57266), np.float32(288.8655), np.float32(886.65796), np.float32(886.8036), np.float32(890.2273), np.float32(894.7531), np.float32(902.6855), np.float32(605.77655), np.float32(606.01086), np.float32(606.3302), np.float32(896.1103), np.float32(892.46924), np.float32(888.47656), np.float32(882.1481), np.float32(882.68964), np.float32(888.7447), np.float32(895.97186), np.float32(608.3089), np.float32(617.01746), np.float32(618.0994), np.float32(617.0759), np.float32(611.2145), np.float32(604.93207), np.float32(596.831), np.float32(588.929), np.float32(581.8328), np.float32(582.37195), np.float32(588.2799), np.float32(595.975), np.float32(603.5162), np.float32(606.08307), np.float32(606.4251), np.float32(607.11755), np.float32(606.4298), np.float32(603.3499), np.float32(299.9984), np.float32(293.7042), np.float32(295.09854), np.float32(296.67282), np.float32(290.75876), np.float32(288.38556), np.float32(288.14795), np.float32(287.4357), np.float32(286.91937), np.float32(291.51694), np.float32(295.51324), np.float32(298.25812), np.float32(301.27734), np.float32(304.84305), np.float32(308.51703), np.float32(329.49536), np.float32(329.7482), np.float32(341.41983), np.float32(341.89835), np.float32(336.4011), np.float32(330.8677), np.float32(322.27786), np.float32(663.48914), np.float32(327.34085), np.float32(332.18643), np.float32(328.1495), np.float32(325.1451), np.float32(330.89517), np.float32(329.0351), np.float32(331.8489), np.float32(330.0291), np.float32(326.9021), np.float32(328.8409), np.float32(326.8454), np.float32(329.4958), np.float32(327.55658), np.float32(323.6196), np.float32(330.92834), np.float32(667.3708), np.float32(666.9879), np.float32(665.44055), np.float32(663.5556), np.float32(662.2308), np.float32(662.0724), np.float32(662.47644), np.float32(661.56696), np.float32(660.7308), np.float32(658.68634), np.float32(660.1283), np.float32(662.16785), np.float32(662.99414), np.float32(663.429), np.float32(663.08673), np.float32(661.48145), np.float32(659.7836), np.float32(656.45593), np.float32(655.5504), np.float32(654.81793), np.float32(658.17474), np.float32(661.24274), np.float32(665.1368), np.float32(669.16473), np.float32(674.2044), np.float32(676.55023), np.float32(676.63257), np.float32(675.84174), np.float32(674.0389), np.float32(669.157), np.float32(660.6059), np.float32(654.8085), np.float32(647.351), np.float32(324.55215), np.float32(320.50098), np.float32(192.49394), np.float32(195.39294), np.float32(662.7015), np.float32(667.8933), np.float32(669.4363), np.float32(669.1419), np.float32(668.4615), np.float32(663.8302), np.float32(659.83105), np.float32(324.3806), np.float32(327.5568), np.float32(325.06476), np.float32(321.55936), np.float32(328.46094), np.float32(330.6445), np.float32(328.34753), np.float32(193.46568), np.float32(197.68068), np.float32(191.87698), np.float32(197.29718), np.float32(191.35802), np.float32(196.22227), np.float32(191.85013), np.float32(194.26793), np.float32(195.09167), np.float32(195.09782), np.float32(196.30475), np.float32(192.18411), np.float32(196.4728), np.float32(191.74413), np.float32(265.87268), np.float32(303.28348), np.float32(255.29457), np.float32(241.80884), np.float32(251.2669), np.float32(190.99738), np.float32(267.56064), np.float32(495.42627), np.float32(493.89398), np.float32(494.14462), np.float32(493.28336), np.float32(492.78778), np.float32(492.38843), np.float32(492.6401), np.float32(493.22794), np.float32(492.7633), np.float32(493.81653), np.float32(492.97263), np.float32(493.10013), np.float32(493.72568), np.float32(493.69067), np.float32(493.46265), np.float32(493.76743), np.float32(493.67847), np.float32(493.80954), np.float32(493.19928), np.float32(492.81104), np.float32(493.48425), np.float32(493.1036), np.float32(493.08646), np.float32(493.2849), np.float32(493.08118), np.float32(493.11243), np.float32(492.79218), np.float32(492.76434), np.float32(493.1131), np.float32(492.90268), np.float32(492.89835), np.float32(251.81624), np.float32(242.49313), np.float32(252.63103), np.float32(238.90367), np.float32(255.07231), np.float32(242.34137), np.float32(251.8043), np.float32(247.88525), np.float32(246.5817), np.float32(243.23813), np.float32(248.73341), np.float32(247.86879), np.float32(246.79544), np.float32(248.04112), np.float32(248.829), np.float32(242.5565), np.float32(245.83293), np.float32(249.11171), np.float32(239.30463), np.float32(202.50896), np.float32(189.4216), np.float32(191.19888), np.float32(195.71976), np.float32(194.94746), np.float32(193.07246), np.float32(193.39792), np.float32(195.01512), np.float32(192.85834), np.float32(195.95132), np.float32(191.53127), np.float32(207.80635), np.float32(264.07935), np.float32(493.2341), np.float32(191.44408), np.float32(195.7631), np.float32(193.14946), np.float32(193.93616), np.float32(194.88492), np.float32(193.44508), np.float32(198.80072), np.float32(191.5798), np.float32(198.34868), np.float32(191.8055), np.float32(198.47192), np.float32(191.77557), np.float32(195.13094), np.float32(195.30043), np.float32(195.48634), np.float32(195.37564), np.float32(192.12631), np.float32(197.93677), np.float32(191.7891), np.float32(195.9651), np.float32(191.5643), np.float32(197.09016), np.float32(194.01794), np.float32(195.62003), np.float32(194.45102), np.float32(192.56544), np.float32(196.96333), np.float32(192.35352), np.float32(196.18271), np.float32(191.73178), np.float32(198.06519), np.float32(193.1212), np.float32(196.84564), np.float32(192.9163), np.float32(197.53993), np.float32(211.11713), np.float32(181.51985), np.float32(184.12288), np.float32(189.12671), np.float32(295.6755), np.float32(292.60995), np.float32(295.58377), np.float32(293.21072), np.float32(294.3933), np.float32(294.82272), np.float32(293.70892), np.float32(292.81027), np.float32(293.33685), np.float32(293.60797), np.float32(294.26196), np.float32(492.88318), np.float32(493.2062), np.float32(294.02448), np.float32(255.85239), np.float32(247.61424), np.float32(248.96597), np.float32(245.99178), np.float32(252.87535), np.float32(242.43463), np.float32(254.00406), np.float32(240.44157), np.float32(251.29707), np.float32(243.12305), np.float32(254.29031), np.float32(238.83115), np.float32(252.06465), np.float32(243.04802), np.float32(251.50012), np.float32(246.7464), np.float32(250.15428), np.float32(245.3354), np.float32(250.49947), np.float32(246.79962), np.float32(249.20378), np.float32(246.36328), np.float32(246.70447), np.float32(243.98096), np.float32(249.1845), np.float32(246.16312), np.float32(247.30551), np.float32(246.21025), np.float32(251.54417), np.float32(240.97168), np.float32(251.75978), np.float32(244.59772), np.float32(267.98434), np.float32(189.45512), np.float32(185.11397), np.float32(188.29929), np.float32(194.63635), np.float32(492.6497), np.float32(291.42096), np.float32(193.72792), np.float32(193.43054), np.float32(195.23262), np.float32(290.04022), np.float32(294.20428), np.float32(494.4674), np.float32(492.85812), np.float32(192.5999), np.float32(493.91483), np.float32(193.53001), np.float32(195.25714), np.float32(192.5219), np.float32(192.75946), np.float32(493.56287), np.float32(493.57697), np.float32(194.43085), np.float32(191.01587), np.float32(199.9727), np.float32(192.09297), np.float32(194.91467), np.float32(193.09389), np.float32(196.16742), np.float32(196.63994), np.float32(193.35698), np.float32(193.58028), np.float32(192.27057), np.float32(197.85619), np.float32(192.6585), np.float32(195.61089), np.float32(193.4494), np.float32(195.99713), np.float32(194.64816), np.float32(193.0201), np.float32(194.5095), np.float32(192.6257), np.float32(197.191), np.float32(192.19249), np.float32(196.64613), np.float32(192.64503), np.float32(196.51537), np.float32(193.26822), np.float32(195.6141), np.float32(194.68362), np.float32(190.85043), np.float32(193.20546), np.float32(235.72012), np.float32(494.98227), np.float32(256.55304), np.float32(491.8366), np.float32(242.81891), np.float32(249.0077), np.float32(251.60155), np.float32(245.31586), np.float32(250.72052), np.float32(243.26917), np.float32(251.62402), np.float32(242.46243), np.float32(254.21475), np.float32(243.87628), np.float32(253.7729), np.float32(243.37811), np.float32(254.12187), np.float32(246.83202), np.float32(247.3273), np.float32(247.97165), np.float32(249.44786), np.float32(249.15143), np.float32(245.21103), np.float32(248.1894), np.float32(246.93163), np.float32(246.47095), np.float32(248.94443), np.float32(248.56236), np.float32(248.8151), np.float32(246.29514), np.float32(249.43361), np.float32(243.00587), np.float32(249.70282), np.float32(494.68576), np.float32(493.67944), np.float32(493.489), np.float32(493.21112), np.float32(492.70834), np.float32(494.1393), np.float32(492.53314), np.float32(493.24405), np.float32(494.78036), np.float32(493.97177), np.float32(493.35596), np.float32(495.2752), np.float32(493.2535), np.float32(492.85507), np.float32(493.66043), np.float32(491.3146), np.float32(486.35132), np.float32(260.18268), np.float32(269.40204), np.float32(257.85077), np.float32(262.5131), np.float32(280.96014), np.float32(302.78607), np.float32(288.84885), np.float32(283.80383), np.float32(302.31723), np.float32(282.18936), np.float32(286.34726), np.float32(302.54153), np.float32(282.11255), np.float32(283.53052), np.float32(301.29248), np.float32(283.0431), np.float32(290.3638), np.float32(192.09328), np.float32(282.74612), np.float32(286.9113), np.float32(518.7014), np.float32(283.27365), np.float32(192.32652), np.float32(194.86958), np.float32(194.70201), np.float32(193.34451), np.float32(193.83334), np.float32(191.9035), np.float32(195.93025), np.float32(197.26704), np.float32(193.4476), np.float32(192.74734), np.float32(193.50645), np.float32(196.55637), np.float32(193.74208), np.float32(192.53595), np.float32(193.42587), np.float32(197.26695), np.float32(194.31534), np.float32(194.1114), np.float32(194.45538), np.float32(193.49445), np.float32(193.78094), np.float32(192.37677), np.float32(194.33438), np.float32(195.62473), np.float32(194.1369), np.float32(288.04477), np.float32(194.40936), np.float32(188.88538), np.float32(298.4524), np.float32(295.09473), np.float32(281.34265), np.float32(297.99826), np.float32(289.93146), np.float32(281.64856), np.float32(301.04446), np.float32(293.2627), np.float32(282.0965), np.float32(301.5899), np.float32(285.02777), np.float32(281.90378), np.float32(303.22516), np.float32(283.67065), np.float32(285.23254), np.float32(301.63004), np.float32(285.69006), np.float32(286.43207), np.float32(300.8352), np.float32(284.87442), np.float32(290.413), np.float32(298.96643), np.float32(285.27887), np.float32(519.77783), np.float32(521.63696), np.float32(284.31387), np.float32(521.24945), np.float32(521.20966), np.float32(284.8338), np.float32(520.5056), np.float32(521.8473), np.float32(283.95355), np.float32(522.3635), np.float32(522.49786), np.float32(284.95142), np.float32(520.88007), np.float32(521.62604), np.float32(520.0684), np.float32(521.0557), np.float32(285.26663), np.float32(520.07086), np.float32(521.1198), np.float32(285.29736), np.float32(520.5276), np.float32(393.1419), np.float32(281.01764), np.float32(194.57863), np.float32(298.69904), np.float32(274.1149), np.float32(192.07661), np.float32(190.8286), np.float32(189.82454), np.float32(190.65158), np.float32(265.27466), np.float32(259.4838), np.float32(260.11148), np.float32(262.6034), np.float32(260.74625), np.float32(259.18488), np.float32(259.7459), np.float32(257.9202), np.float32(193.67752), np.float32(190.40309), np.float32(258.48932), np.float32(259.96988), np.float32(258.92688), np.float32(327.28348), np.float32(330.64035), np.float32(303.44818), np.float32(283.84344), np.float32(288.47208), np.float32(293.96094), np.float32(301.01102), np.float32(307.1959), np.float32(318.03757), np.float32(322.21732), np.float32(322.7726), np.float32(322.48688), np.float32(327.11697), np.float32(665.71533), np.float32(666.15564), np.float32(665.0218), np.float32(664.07825), np.float32(660.34485), np.float32(662.1962), np.float32(660.30444), np.float32(658.9836), np.float32(657.3073), np.float32(658.49347), np.float32(656.0), np.float32(657.2099), np.float32(659.34576), np.float32(657.188), np.float32(986.23285), np.float32(989.7177), np.float32(261.31573), np.float32(259.56665), np.float32(262.1128), np.float32(258.68265), np.float32(261.02582), np.float32(259.16232), np.float32(258.18338), np.float32(257.26303), np.float32(259.46045), np.float32(336.28995), np.float32(379.05585), np.float32(382.12198), np.float32(390.21555), np.float32(393.74112), np.float32(395.3992), np.float32(397.1521), np.float32(397.527), np.float32(398.60104), np.float32(396.74008), np.float32(788.76685), np.float32(789.77966), np.float32(791.93176), np.float32(398.08627), np.float32(399.02036), np.float32(398.26028), np.float32(397.60883), np.float32(395.81522), np.float32(395.75793), np.float32(395.99734), np.float32(394.553), np.float32(394.54642), np.float32(394.1002), np.float32(394.33478), np.float32(395.75482), np.float32(395.80936), np.float32(397.84244), np.float32(398.64624), np.float32(398.65372), np.float32(400.83618), np.float32(425.667), np.float32(441.9083), np.float32(331.06857), np.float32(326.90094), np.float32(328.14072), np.float32(330.48776), np.float32(328.19754), np.float32(329.1104), np.float32(330.29202), np.float32(196.4221), np.float32(194.90128), np.float32(203.59822), np.float32(260.39615), np.float32(262.62692), np.float32(260.96756), np.float32(262.64642), np.float32(265.1623), np.float32(263.3162), np.float32(263.68866), np.float32(259.89072), np.float32(258.5373), np.float32(262.3897), np.float32(261.77386), np.float32(261.25375), np.float32(261.2571), np.float32(259.932), np.float32(259.21402), np.float32(396.67053), np.float32(395.8746), np.float32(394.97806), np.float32(394.72134), np.float32(393.16766), np.float32(394.5724), np.float32(395.23862), np.float32(397.66452), np.float32(799.387), np.float32(803.6431), np.float32(814.939), np.float32(806.90106), np.float32(798.4958), np.float32(795.27496), np.float32(789.9008), np.float32(778.6949), np.float32(775.0906), np.float32(782.2075), np.float32(395.7476), np.float32(399.82776), np.float32(812.39575), np.float32(818.68066), np.float32(825.837), np.float32(822.3609), np.float32(821.4556), np.float32(812.83167), np.float32(797.5654), np.float32(786.92847), np.float32(781.5929), np.float32(780.214), np.float32(785.0411), np.float32(791.88446), np.float32(797.00305), np.float32(802.8398), np.float32(805.38007), np.float32(802.01074), np.float32(799.30225), np.float32(791.0052), np.float32(393.16824), np.float32(258.80746), np.float32(191.1494), np.float32(327.29437), np.float32(329.737), np.float32(329.2581), np.float32(327.21866), np.float32(329.04755), np.float32(329.50803), np.float32(1006.8178), np.float32(330.68527), np.float32(1031.0067), np.float32(1021.36304), np.float32(1010.5579), np.float32(1010.3376), np.float32(1006.9576), np.float32(997.17365), np.float32(985.1616), np.float32(259.95346), np.float32(325.92422), np.float32(325.4748), np.float32(326.24274), np.float32(326.22342), np.float32(328.9313), np.float32(328.29858), np.float32(649.41754), np.float32(649.8324), np.float32(335.9425), np.float32(329.659), np.float32(323.25204), np.float32(315.44388), np.float32(609.8199), np.float32(595.45514), np.float32(591.0319), np.float32(270.86166), np.float32(264.61356), np.float32(262.29993), np.float32(262.60806), np.float32(260.86078), np.float32(260.04608), np.float32(260.71313), np.float32(263.3472), np.float32(259.69388), np.float32(260.40915), np.float32(262.56326), np.float32(260.91016), np.float32(260.10846), np.float32(262.0474), np.float32(261.78644), np.float32(260.13623), np.float32(261.1095), np.float32(257.6493), np.float32(264.73996), np.float32(242.96182), np.float32(225.20654), np.float32(223.9396), np.float32(229.53336), np.float32(287.95764), np.float32(296.84598), np.float32(300.97128), np.float32(298.00034), np.float32(300.24194), np.float32(295.77856), np.float32(295.77826), np.float32(301.32272), np.float32(296.83865), np.float32(299.27533), np.float32(298.0112), np.float32(293.53287), np.float32(292.0114), np.float32(287.77502), np.float32(285.281), np.float32(284.96088), np.float32(248.61795), np.float32(293.75772), np.float32(279.10004), np.float32(529.8226), np.float32(532.12054), np.float32(280.77573), np.float32(280.85037), np.float32(351.83463), np.float32(289.84302), np.float32(226.45749), np.float32(229.72495), np.float32(347.30365), np.float32(291.6979), np.float32(295.4643), np.float32(295.96915), np.float32(296.03815), np.float32(346.73282), np.float32(352.5595), np.float32(351.2599), np.float32(283.11795), np.float32(512.94324), np.float32(519.2155), np.float32(521.3474), np.float32(519.5838), np.float32(522.37933), np.float32(522.8071), np.float32(524.3317), np.float32(526.84357), np.float32(528.6565), np.float32(1053.451), np.float32(1058.1542), np.float32(286.66522), np.float32(284.54593), np.float32(283.2445), np.float32(822.71954), np.float32(838.351), np.float32(847.11646), np.float32(869.37756), np.float32(881.65686), np.float32(887.1187), np.float32(887.38074), np.float32(885.2524), np.float32(876.8198), np.float32(293.08032), np.float32(290.4664), np.float32(295.21674), np.float32(290.0262), np.float32(288.64655), np.float32(295.58438), np.float32(294.6984), np.float32(293.54053), np.float32(292.3454), np.float32(292.1795), np.float32(290.79526), np.float32(288.85086), np.float32(347.74518), np.float32(350.69604), np.float32(280.9811), np.float32(346.15704), np.float32(352.36026), np.float32(349.8517), np.float32(351.06982), np.float32(343.7943), np.float32(349.79337), np.float32(351.8682), np.float32(350.7304), np.float32(347.34555), np.float32(218.85416), np.float32(350.13147), np.float32(351.78662), np.float32(349.6816), np.float32(346.7154), np.float32(349.4154), np.float32(349.21808), np.float32(352.28192), np.float32(347.93887), np.float32(348.66824), np.float32(347.3428), np.float32(349.5633), np.float32(351.6719), np.float32(344.90594), np.float32(342.27032), np.float32(347.4474), np.float32(447.40613), np.float32(226.18741), np.float32(225.93938), np.float32(227.01419), np.float32(351.11734), np.float32(228.26273), np.float32(349.46808), np.float32(350.17938), np.float32(348.70145), np.float32(351.18826), np.float32(348.61102), np.float32(347.6132), np.float32(351.0066), np.float32(348.45697), np.float32(224.95166), np.float32(220.27852), np.float32(220.22679), np.float32(351.77652), np.float32(348.77942), np.float32(350.17227), np.float32(345.92487), np.float32(349.81815), np.float32(352.18597), np.float32(349.8877), np.float32(348.75705), np.float32(344.68948), np.float32(351.5799), np.float32(351.82306), np.float32(349.67773), np.float32(347.3316), np.float32(346.54547), np.float32(352.0947), np.float32(351.959), np.float32(350.26428), np.float32(346.32285), np.float32(346.81662), np.float32(351.2288), np.float32(350.4818), np.float32(350.84283), np.float32(349.31982), np.float32(347.3541), np.float32(348.71918), np.float32(348.52133), np.float32(349.28998), np.float32(351.6784), np.float32(348.84735), np.float32(351.59085), np.float32(352.63452), np.float32(348.48666), np.float32(350.311), np.float32(351.24915), np.float32(348.44992), np.float32(350.47134), np.float32(350.49863), np.float32(350.58664), np.float32(351.2622), np.float32(349.08807), np.float32(350.37158), np.float32(350.09604), np.float32(349.0235), np.float32(348.7738), np.float32(350.6946), np.float32(351.7978), np.float32(350.12555), np.float32(348.45123), np.float32(346.0114), np.float32(352.00092), np.float32(351.45007), np.float32(350.93137), np.float32(348.48883), np.float32(345.53375), np.float32(352.2198), np.float32(349.55173), np.float32(350.92868), np.float32(349.26923), np.float32(346.90482), np.float32(351.34116), np.float32(348.74936), np.float32(351.20453), np.float32(348.47253), np.float32(347.59448), np.float32(351.27567), np.float32(347.50952), np.float32(350.39526), np.float32(349.56235), np.float32(290.5214), np.float32(288.35165), np.float32(309.99054), np.float32(280.538), np.float32(279.60126), np.float32(276.18512), np.float32(544.7908), np.float32(273.968), np.float32(276.21573), np.float32(258.3685), np.float32(264.09695), np.float32(270.84598), np.float32(208.9075), np.float32(232.36859), np.float32(215.2137), np.float32(234.66136), np.float32(215.72057), np.float32(230.896), np.float32(214.32149), np.float32(234.51485), np.float32(214.72356), np.float32(219.10603), np.float32(219.176), np.float32(218.07617), np.float32(248.23218), np.float32(261.87115), np.float32(250.68024), np.float32(264.28107), np.float32(232.05386), np.float32(219.8806), np.float32(216.7075), np.float32(217.10655), np.float32(218.60416), np.float32(218.89108), np.float32(216.81322), np.float32(221.6992), np.float32(216.50897), np.float32(217.57048), np.float32(218.11684), np.float32(219.58691), np.float32(215.53412), np.float32(219.30943), np.float32(232.80206), np.float32(261.5197), np.float32(253.48502), np.float32(262.56927), np.float32(270.08786), np.float32(270.85217), np.float32(257.7415), np.float32(265.90826), np.float32(259.07806), np.float32(263.23306), np.float32(251.2433), np.float32(254.93062), np.float32(252.78922), np.float32(243.95328), np.float32(261.91528), np.float32(246.70575), np.float32(254.71823), np.float32(255.23819), np.float32(251.92654), np.float32(259.93774), np.float32(244.73102), np.float32(233.52078), np.float32(245.85852), np.float32(246.20262), np.float32(441.97086), np.float32(443.70767), np.float32(442.10577), np.float32(442.16446), np.float32(234.8265), np.float32(213.6491), np.float32(221.69836), np.float32(217.13948), np.float32(220.4825), np.float32(225.03656), np.float32(214.54984), np.float32(260.78998), np.float32(262.6099), np.float32(328.96793), np.float32(525.9716), np.float32(524.731), np.float32(326.54514), np.float32(211.27763), np.float32(211.55392), np.float32(206.47893), np.float32(208.37772), np.float32(185.17107), np.float32(191.97745), np.float32(208.61873), np.float32(203.32661), np.float32(185.95682), np.float32(205.12386), np.float32(210.15652), np.float32(209.67268), np.float32(206.27878), np.float32(400.40872), np.float32(403.2297), np.float32(207.5873), np.float32(208.23656), np.float32(205.45409), np.float32(186.03522), np.float32(206.30165), np.float32(209.22978), np.float32(208.28198), np.float32(402.72018), np.float32(797.28455), np.float32(792.6398), np.float32(206.59764), np.float32(205.54747), np.float32(392.1277), np.float32(193.97852), np.float32(790.6896), np.float32(794.23846), np.float32(324.10358), np.float32(416.55432), np.float32(405.69446), np.float32(416.37433), np.float32(427.5689), np.float32(436.6203), np.float32(443.69345), np.float32(455.30914), np.float32(484.74435), np.float32(488.7162), np.float32(502.88318), np.float32(514.7194), np.float32(519.9624), np.float32(524.45557), np.float32(528.96277), np.float32(526.3029), np.float32(526.5557), np.float32(524.5503), np.float32(520.9188), np.float32(519.40704), np.float32(518.9465), np.float32(521.8356), np.float32(525.72864), np.float32(529.1996), np.float32(532.8406), np.float32(267.47528), np.float32(265.50986), np.float32(266.987), np.float32(262.4337), np.float32(262.345), np.float32(260.80978), np.float32(256.6088), np.float32(255.21713), np.float32(253.62671), np.float32(256.05472), np.float32(254.65028), np.float32(253.57193), np.float32(255.51236), np.float32(258.8983), np.float32(261.51993), np.float32(270.02106), np.float32(276.84552), np.float32(281.96356), np.float32(282.9063), np.float32(291.5316), np.float32(296.82874), np.float32(292.8561), np.float32(291.0203), np.float32(290.67126), np.float32(276.79584), np.float32(282.46014), np.float32(581.75), np.float32(586.4573), np.float32(587.88367), np.float32(591.3599), np.float32(301.2299), np.float32(307.97787), np.float32(597.87415), np.float32(288.5785), np.float32(309.81082), np.float32(592.2276), np.float32(294.3277), np.float32(312.0152), np.float32(284.73987), np.float32(300.47806), np.float32(291.3854), np.float32(300.93274), np.float32(304.7943), np.float32(294.01376), np.float32(301.5025), np.float32(302.842), np.float32(292.42667), np.float32(301.9049), np.float32(301.51755), np.float32(287.40225), np.float32(300.78268), np.float32(303.23038), np.float32(590.7286), np.float32(305.12094), np.float32(592.1673), np.float32(589.24615), np.float32(587.5278), np.float32(585.9122), np.float32(584.4574), np.float32(584.0651), np.float32(583.4307), np.float32(584.218), np.float32(583.08795), np.float32(583.265), np.float32(584.95544), np.float32(586.34705), np.float32(586.1216), np.float32(585.9645), np.float32(586.5542), np.float32(586.37524), np.float32(587.58575), np.float32(586.79724), np.float32(586.9883), np.float32(585.86774), np.float32(286.10733), np.float32(174.5992), np.float32(168.17741), np.float32(178.0191), np.float32(171.71822), np.float32(305.1268), np.float32(292.83292), np.float32(304.1935), np.float32(299.0052), np.float32(298.45697), np.float32(301.47055), np.float32(304.25064), np.float32(298.1862), np.float32(162.73355), np.float32(288.98553), np.float32(164.68076), np.float32(182.22603), np.float32(167.06978), np.float32(174.68471), np.float32(166.92218), np.float32(297.98834), np.float32(309.73105), np.float32(305.7602), np.float32(308.82382), np.float32(310.2918), np.float32(304.05377), np.float32(306.77728), np.float32(293.0675), np.float32(294.58533), np.float32(288.06177), np.float32(283.98035), np.float32(299.35464), np.float32(299.29385), np.float32(299.4248), np.float32(304.44846), np.float32(303.25757), np.float32(306.54974), np.float32(311.93857), np.float32(307.19724), np.float32(314.72937), np.float32(306.43005), np.float32(299.18527), np.float32(297.54907), np.float32(296.56116), np.float32(287.448), np.float32(309.5001), np.float32(298.22882), np.float32(320.23532), np.float32(298.2584), np.float32(698.6768), np.float32(348.19876), np.float32(328.80673), np.float32(347.61893), np.float32(350.28516), np.float32(348.35596), np.float32(350.62515), np.float32(349.21848), np.float32(351.45627), np.float32(349.21027), np.float32(351.755), np.float32(346.68228), np.float32(351.33786), np.float32(348.34665), np.float32(353.03348), np.float32(346.46112), np.float32(351.23013), np.float32(347.05048), np.float32(350.73898), np.float32(348.45145), np.float32(349.71286), np.float32(349.87064), np.float32(350.8185), np.float32(349.28857), np.float32(349.3565), np.float32(349.77216), np.float32(349.6299), np.float32(350.64627), np.float32(348.82996), np.float32(349.6723), np.float32(170.53868), np.float32(171.60901), np.float32(166.51483), np.float32(170.24176), np.float32(172.05428), np.float32(167.29482), np.float32(175.06377), np.float32(169.66136), np.float32(174.35376), np.float32(166.74504), np.float32(351.3854), np.float32(163.0848), np.float32(350.19568), np.float32(347.30136), np.float32(351.12848), np.float32(349.09445), np.float32(350.91412), np.float32(347.8431), np.float32(348.13498), np.float32(349.959), np.float32(350.33218), np.float32(218.3489), np.float32(202.3088), np.float32(244.17326), np.float32(247.06117), np.float32(214.51027), np.float32(235.48323), np.float32(214.14775), np.float32(228.97682), np.float32(212.67581), np.float32(224.30382), np.float32(214.02443), np.float32(216.66205), np.float32(219.64851), np.float32(209.64104), np.float32(349.87463), np.float32(348.06454), np.float32(350.7022), np.float32(348.8194), np.float32(350.2283), np.float32(348.7469), np.float32(351.85886), np.float32(348.1181), np.float32(351.139), np.float32(348.56375), np.float32(350.24142), np.float32(349.83533), np.float32(349.41263), np.float32(349.93896), np.float32(349.23846), np.float32(349.41528), np.float32(349.5151), np.float32(350.65015), np.float32(348.42154), np.float32(350.3781), np.float32(349.4492), np.float32(350.75998), np.float32(347.20068), np.float32(349.11194), np.float32(349.4616), np.float32(350.19928), np.float32(349.96793), np.float32(350.26242), np.float32(349.45874), np.float32(349.56216), np.float32(349.66357), np.float32(349.2314), np.float32(349.4054), np.float32(348.72324), np.float32(350.73453), np.float32(347.85672), np.float32(442.66278), np.float32(351.99417), np.float32(348.33188), np.float32(349.5152), np.float32(350.57977), np.float32(349.98038), np.float32(349.18973), np.float32(229.20828), np.float32(351.10367), np.float32(350.6022), np.float32(348.05096), np.float32(350.5783), np.float32(349.3591), np.float32(351.73468), np.float32(348.934), np.float32(348.92743), np.float32(349.00363), np.float32(351.55887), np.float32(348.94183), np.float32(349.61493), np.float32(349.57547), np.float32(347.13678), np.float32(359.97314), np.float32(372.70514), np.float32(381.57877), np.float32(374.96774), np.float32(376.62244), np.float32(383.17822), np.float32(373.39792), np.float32(395.53793), np.float32(394.06137), np.float32(376.68735), np.float32(768.60724), np.float32(364.99542), np.float32(771.3972), np.float32(770.9781), np.float32(770.87244), np.float32(770.99896), np.float32(771.33203), np.float32(773.2206), np.float32(776.1894), np.float32(778.80194), np.float32(781.6465), np.float32(784.98846), np.float32(398.40945), np.float32(391.36545), np.float32(399.63324), np.float32(392.42963), np.float32(397.03836), np.float32(392.41437), np.float32(393.6109), np.float32(387.72934), np.float32(376.2411), np.float32(374.9302), np.float32(350.51007), np.float32(348.33514), np.float32(326.10065), np.float32(323.4308), np.float32(327.95117), np.float32(329.18286), np.float32(327.64255), np.float32(329.8668), np.float32(326.08572), np.float32(328.55588), np.float32(329.7337), np.float32(327.7963), np.float32(329.41388), np.float32(329.04935), np.float32(327.60037), np.float32(328.92377), np.float32(329.26447), np.float32(329.39233), np.float32(327.21307), np.float32(320.7589), np.float32(324.50894), np.float32(326.93085), np.float32(328.6457), np.float32(330.01794), np.float32(331.26736), np.float32(334.54742), np.float32(331.3739), np.float32(329.57565), np.float32(328.5879), np.float32(321.98355), np.float32(303.869), np.float32(291.75827), np.float32(325.46112), np.float32(328.5306), np.float32(328.8162), np.float32(325.31378), np.float32(325.78293), np.float32(330.30518), np.float32(324.9731), np.float32(325.96994), np.float32(326.05832), np.float32(195.24748), np.float32(914.08624), np.float32(913.7849), np.float32(259.0835), np.float32(262.9063), np.float32(264.9066), np.float32(262.68036), np.float32(264.99985), np.float32(259.1321), np.float32(260.10156), np.float32(407.71973), np.float32(405.80936), np.float32(406.09058), np.float32(402.80838), np.float32(400.62747), np.float32(397.35385), np.float32(395.86365), np.float32(394.288), np.float32(393.92764), np.float32(394.72205), np.float32(395.0181), np.float32(393.14972), np.float32(393.0877), np.float32(394.1076), np.float32(394.92734), np.float32(393.0833), np.float32(391.11554), np.float32(390.9299), np.float32(390.2925), np.float32(388.76865), np.float32(384.27237), np.float32(380.6543), np.float32(382.96863), np.float32(376.14148), np.float32(377.8788), np.float32(372.37857), np.float32(373.6396), np.float32(352.98013), np.float32(355.50223), np.float32(705.9674), np.float32(697.2892), np.float32(686.5814), np.float32(337.1251), np.float32(678.0715), np.float32(676.11237), np.float32(674.5092), np.float32(677.17834), np.float32(679.0945), np.float32(679.5692), np.float32(677.4202), np.float32(676.12555), np.float32(676.3), np.float32(674.75305), np.float32(671.85944), np.float32(668.2684), np.float32(665.69965), np.float32(666.7032), np.float32(669.82), np.float32(674.0284), np.float32(672.42346), np.float32(669.8008), np.float32(666.2144), np.float32(662.3617), np.float32(660.9973), np.float32(661.91547), np.float32(664.53735), np.float32(666.23773), np.float32(665.61554), np.float32(660.51404), np.float32(655.4259), np.float32(653.50903), np.float32(652.223), np.float32(658.0345), np.float32(329.31042), np.float32(329.7126), np.float32(327.82846), np.float32(328.33582), np.float32(328.8893), np.float32(330.6164), np.float32(328.2023), np.float32(328.56403), np.float32(344.5452), np.float32(311.5746), np.float32(309.44345), np.float32(307.13345), np.float32(295.09708), np.float32(307.69992), np.float32(300.56918), np.float32(265.7964), np.float32(254.3097), np.float32(269.5724), np.float32(192.53008), np.float32(193.86472), np.float32(193.40782), np.float32(261.9828), np.float32(655.86786), np.float32(657.9341), np.float32(658.7031), np.float32(194.86227), np.float32(193.17368), np.float32(190.54587), np.float32(195.5264), np.float32(195.44632), np.float32(195.39526), np.float32(193.82835), np.float32(193.76369), np.float32(191.58296), np.float32(260.05276), np.float32(261.57715), np.float32(264.7213), np.float32(322.40585), np.float32(325.42834), np.float32(325.5337), np.float32(326.16855), np.float32(327.07602), np.float32(328.27463), np.float32(657.5057), np.float32(329.69214), np.float32(330.5049), np.float32(331.35434), np.float32(330.65228), np.float32(328.8256), np.float32(328.15005), np.float32(658.01306), np.float32(656.72644), np.float32(326.31097), np.float32(327.897), np.float32(327.45343), np.float32(327.7396), np.float32(327.1929), np.float32(652.2117), np.float32(654.4334), np.float32(652.40704), np.float32(650.4198), np.float32(645.86554), np.float32(640.55426), np.float32(636.83154), np.float32(632.91425), np.float32(629.4066), np.float32(624.03284), np.float32(612.5708), np.float32(605.7412), np.float32(602.8996), np.float32(602.79004), np.float32(592.0104), np.float32(584.8645), np.float32(576.2978), np.float32(575.4381), np.float32(570.8475), np.float32(568.64276), np.float32(287.11166), np.float32(286.89883), np.float32(285.0294), np.float32(281.87845), np.float32(287.80527), np.float32(290.75995), np.float32(288.89175), np.float32(201.63322), np.float32(231.75821), np.float32(216.37526), np.float32(351.77084), np.float32(441.65402), np.float32(216.66164), np.float32(220.21516), np.float32(297.22366), np.float32(300.65402), np.float32(298.35043), np.float32(298.51746), np.float32(298.21384), np.float32(295.9222), np.float32(301.87442), np.float32(299.58734), np.float32(300.6584), np.float32(288.2103), np.float32(285.91153), np.float32(440.6902), np.float32(441.83438), np.float32(440.7301), np.float32(440.90558), np.float32(440.9862), np.float32(227.93248), np.float32(274.4226), np.float32(253.08958), np.float32(254.4082), np.float32(266.22464), np.float32(250.00195), np.float32(262.83112), np.float32(253.67046), np.float32(236.3497), np.float32(221.63997), np.float32(211.9066), np.float32(221.61066), np.float32(218.53134), np.float32(352.06757), np.float32(349.89694), np.float32(217.95888), np.float32(217.09242), np.float32(214.74821), np.float32(349.7265), np.float32(352.53336), np.float32(353.1017), np.float32(347.55676), np.float32(216.90025), np.float32(219.72221), np.float32(216.66133), np.float32(217.0454), np.float32(222.53181), np.float32(351.3993), np.float32(232.57777), np.float32(241.4526), np.float32(349.6148), np.float32(283.02527), np.float32(283.1405), np.float32(302.302), np.float32(296.9541), np.float32(284.72382), np.float32(352.92752), np.float32(307.62595), np.float32(286.03653), np.float32(286.76904), np.float32(349.53143), np.float32(352.07538), np.float32(346.24045), np.float32(290.24164), np.float32(296.57236), np.float32(295.22565), np.float32(294.925), np.float32(887.4935), np.float32(889.32874), np.float32(889.7088), np.float32(887.38586), np.float32(885.605), np.float32(886.16174), np.float32(888.06824), np.float32(889.89655), np.float32(889.74414), np.float32(350.32315), np.float32(350.0015), np.float32(350.69104), np.float32(348.64215), np.float32(348.03677), np.float32(350.32443), np.float32(350.26004), np.float32(350.4291), np.float32(347.98163), np.float32(224.28076), np.float32(219.61592), np.float32(349.93555), np.float32(350.9992), np.float32(218.2935), np.float32(218.77257), np.float32(216.50764), np.float32(219.67445), np.float32(217.74359), np.float32(218.24701), np.float32(219.87573), np.float32(349.90247), np.float32(348.3586), np.float32(351.0133), np.float32(347.9135), np.float32(346.81226), np.float32(351.67526), np.float32(351.54025), np.float32(344.78806), np.float32(219.90228), np.float32(292.50287), np.float32(352.17786), np.float32(351.39398), np.float32(294.34146), np.float32(295.7665), np.float32(294.09454), np.float32(292.79266), np.float32(349.74194), np.float32(292.93008), np.float32(214.57616), np.float32(215.71681), np.float32(216.51605), np.float32(216.13014), np.float32(218.43408), np.float32(217.20287), np.float32(218.94632), np.float32(217.86006), np.float32(215.36473), np.float32(215.23656), np.float32(351.1601), np.float32(225.74377), np.float32(227.77342), np.float32(228.9685), np.float32(227.75822), np.float32(223.85779), np.float32(220.22652), np.float32(217.07755), np.float32(216.53416), np.float32(214.06587), np.float32(213.7331), np.float32(213.1396), np.float32(215.1701), np.float32(218.40132), np.float32(220.33452), np.float32(225.17912), np.float32(227.9597), np.float32(228.73648), np.float32(230.16722), np.float32(227.99963), np.float32(221.85033), np.float32(217.61913), np.float32(214.53453), np.float32(214.5161), np.float32(213.62894), np.float32(223.87155), np.float32(223.45378), np.float32(352.8872), np.float32(294.76), np.float32(224.80345), np.float32(219.42009), np.float32(218.89607), np.float32(216.09985), np.float32(214.47212), np.float32(356.68954), np.float32(406.3722), np.float32(371.36884), np.float32(361.40726), np.float32(366.835), np.float32(204.32484), np.float32(372.13763), np.float32(400.643), np.float32(388.4855), np.float32(400.22662), np.float32(391.5899), np.float32(397.99835), np.float32(395.9859), np.float32(396.67728), np.float32(386.3711), np.float32(378.3658), np.float32(395.6022), np.float32(395.01788), np.float32(397.03015), np.float32(392.4419), np.float32(400.71442), np.float32(390.4103), np.float32(399.04608), np.float32(388.31033), np.float32(398.87875), np.float32(389.19077), np.float32(401.2407), np.float32(393.88135), np.float32(405.88773), np.float32(404.12537), np.float32(416.53564), np.float32(429.96143), np.float32(445.36588), np.float32(230.31319), np.float32(235.65501), np.float32(253.34608), np.float32(255.21999), np.float32(255.45056), np.float32(267.25867), np.float32(264.21783), np.float32(273.39633), np.float32(262.12906), np.float32(328.29974), np.float32(330.529), np.float32(330.75873), np.float32(330.94006), np.float32(326.85464), np.float32(327.97263), np.float32(330.10526), np.float32(328.83322), np.float32(329.31192), np.float32(328.9713), np.float32(328.51944), np.float32(328.8384), np.float32(217.08081), np.float32(219.77254), np.float32(220.50807), np.float32(218.32948), np.float32(217.67085), np.float32(217.94313), np.float32(216.40912), np.float32(328.6653), np.float32(328.86948), np.float32(215.98952), np.float32(218.92485), np.float32(218.30348), np.float32(219.50305), np.float32(216.0782), np.float32(218.07954), np.float32(214.65642), np.float32(220.68134), np.float32(220.71764), np.float32(530.8065), np.float32(219.33698), np.float32(216.65556), np.float32(216.75043), np.float32(222.44551), np.float32(535.8725), np.float32(529.33), np.float32(525.5407), np.float32(526.56604), np.float32(524.42883), np.float32(523.1526), np.float32(521.7193), np.float32(522.5959), np.float32(522.33014), np.float32(519.2348), np.float32(518.5644), np.float32(519.68097), np.float32(518.0621), np.float32(232.01343), np.float32(314.90146), np.float32(329.60904), np.float32(251.60275), np.float32(255.32602), np.float32(244.66582), np.float32(232.62042), np.float32(220.33653), np.float32(328.85123), np.float32(329.04395), np.float32(328.5148), np.float32(329.8928), np.float32(329.30203), np.float32(327.46536), np.float32(329.93176), np.float32(328.6228), np.float32(329.99625), np.float32(330.3492), np.float32(324.9887), np.float32(331.2645), np.float32(328.76868), np.float32(328.9881), np.float32(329.64978), np.float32(327.7107), np.float32(329.47003), np.float32(327.60532), np.float32(330.15155), np.float32(328.47113), np.float32(328.48184), np.float32(327.79932), np.float32(329.94586), np.float32(192.86269), np.float32(192.7741), np.float32(197.95348), np.float32(192.12259), np.float32(193.87842), np.float32(202.59924), np.float32(195.432), np.float32(188.04617), np.float32(197.62816), np.float32(199.01152), np.float32(192.16023), np.float32(193.41199), np.float32(193.74727), np.float32(193.06926), np.float32(584.8364), np.float32(585.2344), np.float32(587.8922), np.float32(588.6046), np.float32(593.98846), np.float32(593.07697), np.float32(256.42325), np.float32(189.13791), np.float32(589.16113), np.float32(586.211), np.float32(585.54395), np.float32(584.27454), np.float32(581.1262), np.float32(584.64465), np.float32(589.993), np.float32(599.19305), np.float32(613.39246), np.float32(628.86957), np.float32(671.7193), np.float32(689.8781), np.float32(713.7274), np.float32(992.1934), np.float32(1009.8646), np.float32(1027.241), np.float32(1050.3291), np.float32(1055.9695), np.float32(1057.9067), np.float32(1053.8496), np.float32(1049.1436), np.float32(1045.7207), np.float32(1045.6016), np.float32(1045.7537), np.float32(1044.1217), np.float32(1039.403), np.float32(1037.9197), np.float32(1042.4371), np.float32(783.40216), np.float32(784.09485), np.float32(784.9166), np.float32(783.59106), np.float32(784.55206), np.float32(521.1561), np.float32(519.33813), np.float32(520.7647), np.float32(523.33795), np.float32(520.0775), np.float32(257.61377), np.float32(233.10612), np.float32(230.46545), np.float32(227.10129), np.float32(221.01912), np.float32(216.90086), np.float32(215.12979), np.float32(214.88014), np.float32(219.89604), np.float32(232.64693), np.float32(253.60385), np.float32(254.17465), np.float32(278.77545), np.float32(586.4845), np.float32(606.16315), np.float32(609.0834), np.float32(605.5232), np.float32(603.7698), np.float32(596.64105), np.float32(591.43), np.float32(585.8043), np.float32(585.207), np.float32(587.65515), np.float32(309.54803), np.float32(590.7358), np.float32(594.802), np.float32(311.03827), np.float32(596.2166), np.float32(596.27295), np.float32(307.46362), np.float32(590.6906), np.float32(584.2917), np.float32(299.67892), np.float32(570.45105), np.float32(562.3182), np.float32(563.90295), np.float32(564.6122), np.float32(567.29755), np.float32(572.0823), np.float32(581.0592), np.float32(586.78845), np.float32(592.49896), np.float32(595.43695), np.float32(595.62524), np.float32(599.6804), np.float32(599.4881), np.float32(592.2984), np.float32(588.70905), np.float32(586.0632), np.float32(587.224), np.float32(586.77277), np.float32(586.32733), np.float32(586.1564), np.float32(586.094), np.float32(584.92035), np.float32(585.47614), np.float32(586.4516), np.float32(586.9224), np.float32(587.06976), np.float32(586.84375), np.float32(586.5451), np.float32(584.83215), np.float32(174.09271), np.float32(172.93526), np.float32(173.30194), np.float32(169.64137), np.float32(173.55025), np.float32(168.54573), np.float32(191.58879), np.float32(165.37558), np.float32(198.96375), np.float32(161.38014), np.float32(180.26053), np.float32(163.71278), np.float32(174.83278), np.float32(170.60785), np.float32(174.93379), np.float32(171.56883), np.float32(169.81134), np.float32(171.00194), np.float32(167.67712), np.float32(172.83388), np.float32(169.00197), np.float32(172.86696), np.float32(170.80348), np.float32(171.84747), np.float32(170.81451), np.float32(169.22546), np.float32(172.70227), np.float32(168.65564), np.float32(173.82364), np.float32(165.54353), np.float32(174.28864), np.float32(166.02478), np.float32(172.26442), np.float32(168.77731), np.float32(172.23894), np.float32(349.5286), np.float32(350.33722), np.float32(349.61624), np.float32(347.65305), np.float32(349.74933), np.float32(205.8277), np.float32(349.71307), np.float32(349.0376), np.float32(225.43839), np.float32(209.86697), np.float32(219.52052), np.float32(211.15305), np.float32(330.9821), np.float32(342.43005), np.float32(347.21988), np.float32(351.2357), np.float32(348.85184), np.float32(351.32318), np.float32(219.4527), np.float32(216.17082), np.float32(224.44803), np.float32(350.51193), np.float32(347.54868), np.float32(350.7876), np.float32(349.84732), np.float32(350.7642), np.float32(348.9178), np.float32(350.34995), np.float32(346.69705), np.float32(350.6694), np.float32(349.02048), np.float32(349.91776), np.float32(348.7768), np.float32(350.43317), np.float32(349.53424), np.float32(349.5157), np.float32(348.64163), np.float32(350.40967), np.float32(241.75708), np.float32(265.95132), np.float32(270.68265), np.float32(277.37616), np.float32(275.87686), np.float32(275.8085), np.float32(274.73843), np.float32(549.6859), np.float32(349.77393), np.float32(793.23944), np.float32(523.55725), np.float32(525.8542), np.float32(523.0953), np.float32(525.73706), np.float32(529.41034), np.float32(526.9476), np.float32(524.97125), np.float32(526.4529), np.float32(527.5527), np.float32(522.54803), np.float32(517.73505), np.float32(513.96387), np.float32(253.15768), np.float32(241.03421), np.float32(252.53133), np.float32(259.21506), np.float32(240.51553), np.float32(780.814), np.float32(790.51), np.float32(351.37613), np.float32(570.21014), np.float32(588.54254), np.float32(602.52795), np.float32(607.1389), np.float32(606.2155), np.float32(605.7777), np.float32(604.7813), np.float32(603.6612), np.float32(606.4334), np.float32(608.7559), np.float32(612.9246), np.float32(625.0721), np.float32(641.9575), np.float32(648.1362), np.float32(658.6619), np.float32(661.48035), np.float32(654.3769), np.float32(657.45966), np.float32(653.8838), np.float32(657.557), np.float32(656.6657), np.float32(660.83673), np.float32(681.40814), np.float32(345.30804), np.float32(347.6012), np.float32(350.59702), np.float32(351.37567), np.float32(348.4362), np.float32(349.47003), np.float32(349.97134), np.float32(350.33072), np.float32(347.8399), np.float32(349.692), np.float32(349.3284), np.float32(350.4284), np.float32(348.93414), np.float32(347.58173), np.float32(312.10748), np.float32(300.1379), np.float32(307.78265), np.float32(300.9485), np.float32(304.7019), np.float32(296.91977), np.float32(289.81635), np.float32(254.38524), np.float32(252.77016), np.float32(246.24121), np.float32(349.7775), np.float32(349.68802), np.float32(350.46167), np.float32(349.6539), np.float32(348.51892), np.float32(351.73566), np.float32(230.92043), np.float32(349.29913), np.float32(348.58453), np.float32(349.33087), np.float32(350.3102), np.float32(351.0878), np.float32(348.3534), np.float32(349.96878), np.float32(348.80307), np.float32(350.45966), np.float32(349.37964), np.float32(350.72525), np.float32(350.38992), np.float32(349.32053), np.float32(349.41412), np.float32(349.79938), np.float32(349.80893), np.float32(349.95178), np.float32(349.37454), np.float32(350.00717), np.float32(350.18332), np.float32(349.1385), np.float32(349.61856), np.float32(349.3407), np.float32(350.3598), np.float32(349.09525), np.float32(350.67133), np.float32(350.9284), np.float32(351.94046), np.float32(336.1423), np.float32(612.6842), np.float32(615.2449), np.float32(616.5723), np.float32(615.5229), np.float32(611.79736), np.float32(611.7323), np.float32(610.5159), np.float32(611.29645), np.float32(610.52606), np.float32(612.1195), np.float32(614.6932), np.float32(624.9888), np.float32(632.19855), np.float32(633.95764), np.float32(644.6384), np.float32(653.54736), np.float32(658.7659), np.float32(663.1939), np.float32(668.42334), np.float32(673.6839), np.float32(674.8432), np.float32(677.4922), np.float32(678.3831), np.float32(673.6496), np.float32(668.9414), np.float32(664.4685), np.float32(663.0906), np.float32(663.06726), np.float32(665.91266), np.float32(668.47845), np.float32(669.21783), np.float32(669.7398), np.float32(668.1682), np.float32(671.4761), np.float32(672.11664), np.float32(669.88776), np.float32(667.772), np.float32(664.9692), np.float32(662.5046), np.float32(661.3534), np.float32(661.72363), np.float32(661.2227), np.float32(661.7804), np.float32(661.55176), np.float32(660.23956), np.float32(660.2458), np.float32(660.2953), np.float32(661.5529), np.float32(662.00604), np.float32(662.343), np.float32(661.8407), np.float32(663.23987), np.float32(662.56036), np.float32(665.9472), np.float32(667.05914), np.float32(665.45044), np.float32(663.62946), np.float32(662.3548), np.float32(662.9495), np.float32(661.4803), np.float32(662.2867), np.float32(661.38617), np.float32(660.20874), np.float32(659.3939), np.float32(659.1945), np.float32(658.22076), np.float32(657.1161), np.float32(656.3034), np.float32(657.5484), np.float32(658.50214), np.float32(660.2936), np.float32(659.27655), np.float32(659.3442), np.float32(658.54755), np.float32(657.5803), np.float32(658.0823), np.float32(658.5561), np.float32(659.33124), np.float32(658.63525), np.float32(656.4204), np.float32(655.3958), np.float32(655.21173), np.float32(655.0169), np.float32(656.05164), np.float32(657.27216), np.float32(658.0117), np.float32(658.6003), np.float32(657.81793), np.float32(656.7248), np.float32(656.9256), np.float32(657.9828), np.float32(658.27795), np.float32(658.1522), np.float32(656.04926), np.float32(656.0236), np.float32(655.8943), np.float32(656.6002), np.float32(656.2605), np.float32(656.3801), np.float32(658.0303), np.float32(659.641), np.float32(658.9462), np.float32(658.88367), np.float32(658.72205), np.float32(659.1429), np.float32(658.48035), np.float32(658.7085), np.float32(657.1772), np.float32(656.9056), np.float32(656.9685), np.float32(658.0201), np.float32(657.4782), np.float32(656.6876), np.float32(656.60394), np.float32(656.7139), np.float32(656.1342), np.float32(656.28455), np.float32(656.9494), np.float32(656.5481), np.float32(656.4367), np.float32(656.23627), np.float32(656.3994), np.float32(656.5768), np.float32(656.68555), np.float32(656.83124), np.float32(656.82446), np.float32(655.4676), np.float32(654.88153), np.float32(655.33655), np.float32(656.06323), np.float32(657.22156), np.float32(657.8388), np.float32(657.87213), np.float32(656.52374), np.float32(655.52673), np.float32(656.0945), np.float32(656.9458), np.float32(657.09454), np.float32(656.6874), np.float32(657.3509), np.float32(658.1815), np.float32(657.97205), np.float32(657.29254), np.float32(657.04474), np.float32(655.89813), np.float32(654.74023), np.float32(653.18915), np.float32(653.6484), np.float32(653.848), np.float32(655.057), np.float32(656.6795), np.float32(657.5979), np.float32(658.31964), np.float32(657.65454), np.float32(657.2853), np.float32(657.90967), np.float32(658.1792), np.float32(659.031), np.float32(659.6292), np.float32(659.2964), np.float32(658.8884), np.float32(657.28595), np.float32(656.3872), np.float32(653.6348), np.float32(656.6269), np.float32(653.92786), np.float32(655.27106), np.float32(653.69806), np.float32(656.42126), np.float32(658.31335), np.float32(657.74506), np.float32(663.5639), np.float32(655.7789), np.float32(661.35596), np.float32(658.1606), np.float32(658.2428), np.float32(656.87396), np.float32(655.2664), np.float32(657.12805), np.float32(654.4826), np.float32(657.13196), np.float32(653.8733), np.float32(656.0411), np.float32(652.2779), np.float32(655.5645), np.float32(654.41254), np.float32(655.65717), np.float32(655.8377), np.float32(655.99), np.float32(659.1488), np.float32(655.6629), np.float32(655.84015), np.float32(655.6499), np.float32(657.0434), np.float32(655.6954), np.float32(655.94965), np.float32(656.30005), np.float32(655.3692), np.float32(655.7179), np.float32(655.40094), np.float32(657.68304), np.float32(656.80743), np.float32(657.98175), np.float32(658.11255), np.float32(657.0247), np.float32(657.3749), np.float32(654.8176), np.float32(656.0487), np.float32(652.3271), np.float32(652.6363), np.float32(651.12787), np.float32(653.1521), np.float32(652.6352), np.float32(658.6358), np.float32(657.491), np.float32(658.46545), np.float32(658.9189), np.float32(658.95166), np.float32(660.86975), np.float32(659.44867), np.float32(658.5729), np.float32(660.4398), np.float32(221.29637), np.float32(659.58594), np.float32(658.45154), np.float32(656.98303), np.float32(218.67177), np.float32(220.41447), np.float32(216.35703), np.float32(220.90594), np.float32(215.65303), np.float32(219.39262), np.float32(216.41037), np.float32(222.54938), np.float32(215.16286), np.float32(660.7628), np.float32(660.55054), np.float32(659.72375), np.float32(658.81), np.float32(657.9161), np.float32(658.6668), np.float32(657.4972), np.float32(657.20605), np.float32(657.4897), np.float32(658.61884), np.float32(659.53546), np.float32(659.94684), np.float32(658.62726), np.float32(659.1854), np.float32(659.2915), np.float32(661.4824), np.float32(662.0064), np.float32(661.4997), np.float32(659.6188), np.float32(658.47394), np.float32(657.8748), np.float32(656.3038), np.float32(655.4556), np.float32(655.38983), np.float32(655.8308), np.float32(656.45764), np.float32(658.34467), np.float32(661.74603), np.float32(664.61505), np.float32(669.8428), np.float32(674.9687), np.float32(678.3321), np.float32(678.27295), np.float32(669.7365), np.float32(663.33966), np.float32(658.9707), np.float32(655.0442), np.float32(652.5004), np.float32(651.80475), np.float32(653.63354), np.float32(657.0871), np.float32(663.3406), np.float32(666.24915), np.float32(667.79193), np.float32(669.6273), np.float32(669.3053), np.float32(665.6441), np.float32(660.9293), np.float32(658.18335), np.float32(654.93665), np.float32(652.2453), np.float32(652.22906), np.float32(653.02936), np.float32(656.11646), np.float32(660.2051), np.float32(666.63104), np.float32(675.00867), np.float32(680.6203), np.float32(681.8061), np.float32(676.2488), np.float32(670.94867), np.float32(663.3225), np.float32(657.4187), np.float32(653.90247), np.float32(652.39655), np.float32(651.849), np.float32(654.3626), np.float32(659.2408), np.float32(662.79474), np.float32(667.277), np.float32(671.652), np.float32(672.89557), np.float32(675.0073), np.float32(672.55774), np.float32(661.1666), np.float32(656.17804), np.float32(653.0764), np.float32(649.84955), np.float32(651.5973), np.float32(653.316), np.float32(653.99426), np.float32(658.87286), np.float32(670.29846), np.float32(677.2454), np.float32(678.07654), np.float32(678.15796), np.float32(678.3549), np.float32(677.46344), np.float32(673.6891), np.float32(663.08905), np.float32(658.36334), np.float32(656.4333), np.float32(655.8077), np.float32(656.99475), np.float32(658.72266), np.float32(662.234), np.float32(670.9661), np.float32(676.5532), np.float32(677.62146), np.float32(680.3011), np.float32(683.0084), np.float32(674.70044), np.float32(663.66766), np.float32(659.1728), np.float32(657.6799), np.float32(657.73486), np.float32(659.3782), np.float32(660.8591), np.float32(660.53973), np.float32(659.6521), np.float32(659.1007), np.float32(658.9267), np.float32(657.8723), np.float32(656.0849), np.float32(651.0623), np.float32(635.14935), np.float32(618.8431), np.float32(613.0577), np.float32(606.6323), np.float32(607.0697), np.float32(608.16425), np.float32(608.5346), np.float32(608.9106), np.float32(609.2543), np.float32(612.1536), np.float32(612.8484), np.float32(615.9424), np.float32(640.83594), np.float32(302.1511), np.float32(305.07953), np.float32(323.3987), np.float32(324.24918), np.float32(194.01442), np.float32(200.15591), np.float32(326.872), np.float32(325.92587), np.float32(192.31982), np.float32(196.41624), np.float32(327.0161), np.float32(330.74915), np.float32(326.28366), np.float32(324.45032), np.float32(331.44073), np.float32(326.94952), np.float32(328.36566), np.float32(331.26535), np.float32(326.40985), np.float32(330.28427), np.float32(326.46945), np.float32(326.75516), np.float32(330.7058), np.float32(327.59442), np.float32(328.89597), np.float32(330.02213), np.float32(327.83685), np.float32(329.43555), np.float32(324.21082), np.float32(308.40863), np.float32(607.976), np.float32(616.55273), np.float32(612.9909), np.float32(608.8565), np.float32(606.13824), np.float32(602.87524), np.float32(593.2829), np.float32(586.9635), np.float32(587.7212), np.float32(303.6599), np.float32(293.55472), np.float32(299.53946), np.float32(302.24268), np.float32(596.06104), np.float32(299.25177), np.float32(302.03326), np.float32(295.09082), np.float32(304.20905), np.float32(306.71887), np.float32(605.838), np.float32(303.50934), np.float32(311.94333), np.float32(249.34091), np.float32(284.7425), np.float32(313.0009), np.float32(221.09222), np.float32(214.07115), np.float32(323.52048), np.float32(331.7908), np.float32(317.1607), np.float32(216.79897), np.float32(217.27753), np.float32(316.36615), np.float32(316.47437), np.float32(218.70323), np.float32(318.43002), np.float32(313.42258), np.float32(317.80536), np.float32(281.86212), np.float32(307.05206), np.float32(327.9163), np.float32(219.02206), np.float32(215.89696), np.float32(325.17917), np.float32(308.55093), np.float32(284.03738), np.float32(309.63202), np.float32(309.23254), np.float32(303.4087), np.float32(299.75583), np.float32(310.41565), np.float32(309.4109), np.float32(220.3122), np.float32(214.61667), np.float32(303.10666), np.float32(284.03482), np.float32(291.78384), np.float32(285.29178), np.float32(219.32932), np.float32(306.2677), np.float32(293.48553), np.float32(300.03302), np.float32(308.09595), np.float32(304.0041), np.float32(301.6391), np.float32(304.54477), np.float32(306.70245), np.float32(296.53717), np.float32(296.56918), np.float32(303.16052), np.float32(299.28638), np.float32(291.01532), np.float32(296.80844), np.float32(301.68723), np.float32(300.45676), np.float32(301.0269), np.float32(284.068), np.float32(276.77234), np.float32(252.90231), np.float32(327.6504), np.float32(263.0539), np.float32(253.33482), np.float32(260.96304), np.float32(257.70612), np.float32(259.24704), np.float32(264.0476), np.float32(247.98106), np.float32(328.07648), np.float32(329.37372), np.float32(230.66405), np.float32(233.2917), np.float32(327.94916), np.float32(329.2826), np.float32(329.5273), np.float32(326.79852), np.float32(218.38661), np.float32(213.5136), np.float32(328.72455), np.float32(328.7149), np.float32(328.36856), np.float32(329.85135), np.float32(329.08353), np.float32(326.9542), np.float32(217.79048), np.float32(216.5586), np.float32(219.80115), np.float32(217.20871), np.float32(216.81657), np.float32(220.8717), np.float32(217.97008), np.float32(220.25858), np.float32(214.07234), np.float32(219.91472), np.float32(218.01573), np.float32(218.56833), np.float32(218.49495), np.float32(216.26741), np.float32(219.94124), np.float32(215.6795), np.float32(218.30606), np.float32(208.33864), np.float32(211.49762), np.float32(239.60648), np.float32(329.9494), np.float32(329.6054), np.float32(330.06238), np.float32(331.0448), np.float32(328.78894), np.float32(328.09357), np.float32(225.56679), np.float32(213.38028), np.float32(328.02963), np.float32(329.4749), np.float32(328.50842), np.float32(327.58466), np.float32(330.15604), np.float32(328.17303), np.float32(328.83224), np.float32(328.85846), np.float32(328.58942), np.float32(328.82617), np.float32(328.7741), np.float32(329.76364), np.float32(328.3848), np.float32(329.12515), np.float32(328.29858), np.float32(329.2899), np.float32(329.96262), np.float32(329.25607), np.float32(329.7883), np.float32(327.30817), np.float32(329.64056), np.float32(328.9278), np.float32(329.20276), np.float32(329.55704), np.float32(326.90262), np.float32(330.398), np.float32(329.84027), np.float32(327.58157), np.float32(217.48007), np.float32(218.47527), np.float32(218.17215), np.float32(217.83365), np.float32(216.2827), np.float32(220.29395), np.float32(219.71666), np.float32(219.12163), np.float32(216.15384), np.float32(220.07477), np.float32(210.06801), np.float32(524.63245), np.float32(179.65352), np.float32(190.08029), np.float32(197.81685), np.float32(195.45447), np.float32(189.64305), np.float32(195.94939), np.float32(195.26459), np.float32(191.96196), np.float32(190.5978), np.float32(196.24161), np.float32(205.55008), np.float32(190.81668), np.float32(189.76486), np.float32(196.6077), np.float32(201.48193), np.float32(191.18759), np.float32(190.63948), np.float32(194.39636), np.float32(201.09734), np.float32(191.54202), np.float32(192.50076), np.float32(193.43529), np.float32(200.74821), np.float32(327.7651), np.float32(328.14844), np.float32(201.82076), np.float32(200.96979), np.float32(328.06052), np.float32(328.0208), np.float32(202.32082), np.float32(326.51236), np.float32(329.1715), np.float32(327.8712), np.float32(324.76358), np.float32(331.44452), np.float32(327.4486), np.float32(328.84238), np.float32(332.18048), np.float32(325.2835), np.float32(330.16397), np.float32(326.41507), np.float32(214.77039), np.float32(331.18808), np.float32(326.55078), np.float32(330.73517), np.float32(215.45917), np.float32(324.4866), np.float32(248.96004), np.float32(233.11037), np.float32(237.0296), np.float32(265.49936), np.float32(326.51898), np.float32(333.2871), np.float32(327.7326), np.float32(330.98007), np.float32(330.89175), np.float32(329.1284), np.float32(328.1704), np.float32(329.48315), np.float32(328.4013), np.float32(328.2305), np.float32(329.46683), np.float32(328.93796), np.float32(328.88797), np.float32(328.90134), np.float32(329.14624), np.float32(329.1572), np.float32(328.8), np.float32(328.63272), np.float32(329.0811), np.float32(329.00912), np.float32(329.09897), np.float32(328.40955), np.float32(328.20163), np.float32(328.99478), np.float32(329.38437), np.float32(329.71124), np.float32(328.9225), np.float32(328.32822), np.float32(328.47003), np.float32(329.32703), np.float32(329.2961), np.float32(329.64795), np.float32(328.26923), np.float32(327.53497), np.float32(330.02606), np.float32(328.8635), np.float32(219.50372), np.float32(215.5623), np.float32(219.4268), np.float32(216.2281), np.float32(219.99039), np.float32(216.20831), np.float32(219.09775), np.float32(218.7411), np.float32(217.66728), np.float32(218.11903), np.float32(217.1786), np.float32(217.94876), np.float32(220.10956), np.float32(228.78528), np.float32(241.22072), np.float32(775.4938), np.float32(776.987), np.float32(254.2817), np.float32(263.27982), np.float32(249.92903), np.float32(324.92505), np.float32(330.36804), np.float32(777.7278), np.float32(261.80008), np.float32(260.8776), np.float32(264.33502), np.float32(330.2535), np.float32(327.62714), np.float32(330.005), np.float32(330.27118), np.float32(329.1117), np.float32(328.882), np.float32(326.6784), np.float32(329.17645), np.float32(329.65125), np.float32(329.0208), np.float32(329.04004), np.float32(328.5607), np.float32(329.74295), np.float32(328.57935), np.float32(329.00366), np.float32(328.91165), np.float32(328.7682), np.float32(328.61133), np.float32(328.64212), np.float32(329.35593), np.float32(328.956), np.float32(329.86636), np.float32(328.33905), np.float32(328.82028), np.float32(329.04764), np.float32(329.35724), np.float32(329.3662), np.float32(328.95078), np.float32(328.90134), np.float32(329.8673), np.float32(330.08115), np.float32(219.74738), np.float32(328.66052), np.float32(219.42836), np.float32(216.66687), np.float32(216.79361), np.float32(217.55136), np.float32(204.37502), np.float32(334.6296), np.float32(329.54764), np.float32(328.99808), np.float32(331.27713), np.float32(329.55423), np.float32(330.5723), np.float32(331.24393), np.float32(327.71848), np.float32(328.3571), np.float32(329.5394), np.float32(329.21786), np.float32(328.3001), np.float32(329.81326), np.float32(327.8151), np.float32(328.48264), np.float32(329.283), np.float32(329.19897), np.float32(329.3734), np.float32(327.57303), np.float32(329.66992), np.float32(328.75903), np.float32(329.1995), np.float32(329.50064), np.float32(328.66925), np.float32(328.55148), np.float32(328.60672), np.float32(329.2478), np.float32(330.2644), np.float32(328.68707), np.float32(328.8193), np.float32(328.8843), np.float32(329.53192), np.float32(329.77576), np.float32(328.28528), np.float32(329.35342), np.float32(328.12915), np.float32(329.69055), np.float32(329.32272), np.float32(329.23877), np.float32(329.55692), np.float32(327.77136), np.float32(219.58372), np.float32(219.58046), np.float32(221.46301), np.float32(217.76247), np.float32(216.77388), np.float32(220.52354), np.float32(215.54361), np.float32(219.55383), np.float32(217.86185), np.float32(222.26665), np.float32(236.27538), np.float32(262.68875), np.float32(255.98105), np.float32(241.17816), np.float32(331.9369), np.float32(330.29498), np.float32(329.76224), np.float32(328.29672), np.float32(328.9855), np.float32(328.8872), np.float32(329.19138), np.float32(329.07956), np.float32(328.5679), np.float32(329.19696), np.float32(328.97592), np.float32(329.26785), np.float32(329.25287), np.float32(328.48032), np.float32(327.90512), np.float32(329.32935), np.float32(329.84308), np.float32(329.18008), np.float32(328.58926), np.float32(328.64294), np.float32(328.89682), np.float32(328.67477), np.float32(329.74326), np.float32(329.68863), np.float32(328.65353), np.float32(329.1915), np.float32(328.5626), np.float32(329.73352), np.float32(328.4965), np.float32(329.18372), np.float32(329.25204), np.float32(328.0724), np.float32(329.6057), np.float32(222.05875), np.float32(218.21053), np.float32(217.34657), np.float32(220.86122), np.float32(216.41385), np.float32(220.18169), np.float32(216.95076), np.float32(223.06297), np.float32(217.06143), np.float32(221.50876), np.float32(222.78564), np.float32(212.84633), np.float32(195.691), np.float32(171.59323), np.float32(244.21446), np.float32(437.80527), np.float32(163.11758), np.float32(166.08838), np.float32(225.92047), np.float32(205.21323), np.float32(375.08633), np.float32(397.1259), np.float32(399.06345), np.float32(401.505), np.float32(402.058), np.float32(400.76016), np.float32(400.99197), np.float32(398.57974), np.float32(397.7542), np.float32(393.736), np.float32(393.78073), np.float32(390.47354), np.float32(392.59323), np.float32(393.86157), np.float32(397.90088), np.float32(398.27597), np.float32(405.73242), np.float32(422.1118), np.float32(426.3884), np.float32(434.33237), np.float32(441.29117), np.float32(443.08774), np.float32(446.0268), np.float32(444.9017), np.float32(445.52017), np.float32(446.16528), np.float32(445.31076), np.float32(445.6683), np.float32(445.9597), np.float32(444.5126), np.float32(445.43036), np.float32(442.5069), np.float32(443.99335), np.float32(441.3499), np.float32(442.65186), np.float32(442.24725), np.float32(441.7385), np.float32(441.31976), np.float32(441.4158), np.float32(442.0885), np.float32(442.86176), np.float32(440.95258), np.float32(441.72485), np.float32(442.18237), np.float32(441.87286), np.float32(440.00027), np.float32(440.51062), np.float32(441.2996), np.float32(441.3967), np.float32(441.6799), np.float32(442.98834), np.float32(442.76886), np.float32(444.74783), np.float32(444.40424), np.float32(445.31168), np.float32(444.9225), np.float32(444.4477), np.float32(443.90454), np.float32(443.52856), np.float32(443.72577), np.float32(443.03586), np.float32(441.70065), np.float32(442.36), np.float32(441.73648), np.float32(441.92816), np.float32(442.3507), np.float32(441.47565), np.float32(443.14526), np.float32(442.83386), np.float32(442.4807), np.float32(441.72433), np.float32(442.78915), np.float32(442.06717), np.float32(442.93857), np.float32(441.88107), np.float32(442.5315), np.float32(443.06906), np.float32(441.90677), np.float32(442.8197), np.float32(442.50412), np.float32(441.82645), np.float32(442.18658), np.float32(442.0593), np.float32(442.8844), np.float32(441.9224), np.float32(441.9155), np.float32(441.7449), np.float32(441.7086), np.float32(441.14435), np.float32(441.0913), np.float32(440.69775), np.float32(441.07782), np.float32(440.2661), np.float32(440.88132), np.float32(442.55307), np.float32(442.44965), np.float32(442.2128), np.float32(442.61002), np.float32(442.45404), np.float32(443.0129), np.float32(442.82993), np.float32(442.9591), np.float32(443.41193), np.float32(442.99258), np.float32(442.63785), np.float32(442.26004), np.float32(442.84195), np.float32(442.2912), np.float32(441.75995), np.float32(441.24234), np.float32(441.37515), np.float32(439.84024), np.float32(440.94943), np.float32(439.30817), np.float32(439.56198), np.float32(439.3508), np.float32(438.95364), np.float32(438.5324), np.float32(438.36713), np.float32(438.33405), np.float32(439.6418), np.float32(441.38873), np.float32(442.3172), np.float32(443.37152), np.float32(444.2949), np.float32(444.57874), np.float32(445.53012), np.float32(446.12534), np.float32(446.0086), np.float32(445.989), np.float32(446.58447), np.float32(446.081), np.float32(446.28918), np.float32(445.9243), np.float32(445.47183), np.float32(445.66367), np.float32(444.64954), np.float32(443.72223), np.float32(442.56366), np.float32(441.3392), np.float32(440.39737), np.float32(438.11996), np.float32(440.29355), np.float32(440.65753), np.float32(445.33606), np.float32(450.74475), np.float32(461.92624), np.float32(475.06458), np.float32(490.49463), np.float32(498.9914), np.float32(512.986), np.float32(524.40784), np.float32(530.32166), np.float32(536.4793), np.float32(539.40704), np.float32(543.3567), np.float32(551.9764), np.float32(554.1264), np.float32(547.48895), np.float32(535.4133), np.float32(511.6166), np.float32(494.64453), np.float32(484.08453), np.float32(171.30377), np.float32(173.53937), np.float32(171.08858), np.float32(173.06076), np.float32(173.69127), np.float32(175.13748), np.float32(173.27527), np.float32(173.23747), np.float32(175.84181), np.float32(171.73952), np.float32(174.04396), np.float32(442.05984), np.float32(173.85278), np.float32(171.36583), np.float32(176.1222), np.float32(173.92708), np.float32(431.29074), np.float32(430.4475), np.float32(429.9882), np.float32(426.67462), np.float32(424.93726), np.float32(418.65598), np.float32(398.63303), np.float32(389.53043), np.float32(388.71793), np.float32(379.7645), np.float32(379.43286), np.float32(382.0324), np.float32(381.60583), np.float32(384.6245), np.float32(388.13016), np.float32(391.83478), np.float32(391.2368), np.float32(395.1359), np.float32(393.7263), np.float32(399.5338), np.float32(397.76917), np.float32(399.78027), np.float32(397.67218), np.float32(397.74255), np.float32(395.80347), np.float32(394.55267), np.float32(391.0957), np.float32(394.47086), np.float32(389.4441), np.float32(395.12155), np.float32(395.49335), np.float32(400.51605), np.float32(402.2456), np.float32(408.26654), np.float32(417.23633), np.float32(415.66373), np.float32(413.2444), np.float32(411.90198), np.float32(401.73163), np.float32(393.14136), np.float32(382.5987), np.float32(376.8877), np.float32(376.34622), np.float32(376.56192), np.float32(384.38455), np.float32(389.60345), np.float32(396.74677), np.float32(398.5401), np.float32(407.32596), np.float32(413.33728), np.float32(418.01166), np.float32(423.17126), np.float32(422.296), np.float32(421.09766), np.float32(408.4333), np.float32(394.84802), np.float32(391.47043), np.float32(380.29807), np.float32(381.02417), np.float32(384.2394), np.float32(380.50043), np.float32(394.98056), np.float32(398.49432), np.float32(406.6628), np.float32(402.46072), np.float32(413.74365), np.float32(420.50287), np.float32(395.23532), np.float32(408.55518), np.float32(164.33823), np.float32(163.15773), np.float32(164.47739), np.float32(165.83496), np.float32(163.31459), np.float32(164.80968), np.float32(163.20016), np.float32(165.27118), np.float32(162.1069), np.float32(167.02498), np.float32(163.04544), np.float32(229.55269), np.float32(167.02856), np.float32(162.42566), np.float32(228.34149), np.float32(164.3697), np.float32(163.95656), np.float32(166.2555), np.float32(162.34848), np.float32(166.94954), np.float32(163.21509), np.float32(164.692), np.float32(168.78256), np.float32(163.8869), np.float32(168.26813), np.float32(162.81744), np.float32(168.38689), np.float32(321.23904), np.float32(353.33835), np.float32(321.09558), np.float32(267.63528), np.float32(258.3133), np.float32(261.56152), np.float32(260.6268), np.float32(516.9828), np.float32(522.6927), np.float32(529.20636), np.float32(266.20886), np.float32(267.33368), np.float32(267.45636), np.float32(265.69977), np.float32(263.16165), np.float32(259.54514), np.float32(261.61426), np.float32(254.08057), np.float32(257.27988), np.float32(255.3925), np.float32(254.04668), np.float32(257.07727), np.float32(254.50397), np.float32(256.9107), np.float32(260.91467), np.float32(257.4253), np.float32(265.74893), np.float32(265.4764), np.float32(281.25476), np.float32(293.83984), np.float32(299.34155), np.float32(303.55203), np.float32(312.74564), np.float32(324.43213), np.float32(326.8311), np.float32(324.075), np.float32(323.89285), np.float32(321.37473), np.float32(319.8346), np.float32(315.3385), np.float32(305.28772), np.float32(307.85858), np.float32(301.49976), np.float32(298.9545), np.float32(300.11707), np.float32(303.31018), np.float32(301.74884), np.float32(299.87833), np.float32(300.8917), np.float32(297.35843), np.float32(289.6081), np.float32(289.3815), np.float32(289.22092), np.float32(286.47342), np.float32(296.68384), np.float32(329.8322), np.float32(323.35678), np.float32(306.45102), np.float32(287.2817), np.float32(302.24924), np.float32(287.2292), np.float32(300.24188), np.float32(313.5461), np.float32(606.4523), np.float32(606.8356), np.float32(604.21204), np.float32(600.68976), np.float32(297.3889), np.float32(297.29852), np.float32(296.6649), np.float32(290.92194), np.float32(300.5013), np.float32(294.90836), np.float32(288.14075), np.float32(297.58566), np.float32(291.27975), np.float32(298.60403), np.float32(298.57816), np.float32(288.43213), np.float32(882.5155), np.float32(879.97144), np.float32(875.907), np.float32(167.23784), np.float32(158.71335), np.float32(164.86826), np.float32(165.76), np.float32(889.6589), np.float32(890.1752), np.float32(891.8132), np.float32(893.0723), np.float32(887.5077), np.float32(302.15558), np.float32(163.3786), np.float32(583.98206), np.float32(166.25636), np.float32(154.43732), np.float32(165.40308), np.float32(162.76425), np.float32(157.64055), np.float32(165.13106), np.float32(217.69531), np.float32(215.65479), np.float32(218.05347), np.float32(218.39223), np.float32(219.8329), np.float32(216.37502), np.float32(218.53137), np.float32(216.66765), np.float32(596.94025), np.float32(590.2269), np.float32(587.2552), np.float32(585.1887), np.float32(582.611), np.float32(581.2101), np.float32(581.1514), np.float32(578.866), np.float32(579.7164), np.float32(582.0334), np.float32(583.063), np.float32(583.6632), np.float32(218.51369), np.float32(162.66951), np.float32(895.15497), np.float32(606.9318), np.float32(606.219), np.float32(605.63605), np.float32(605.1433), np.float32(610.9407), np.float32(604.86346), np.float32(592.02936), np.float32(292.60327), np.float32(570.6631), np.float32(580.67926), np.float32(573.3374), np.float32(565.09503), np.float32(589.14056), np.float32(596.0202), np.float32(605.48816), np.float32(608.3617), np.float32(608.29974), np.float32(599.62067), np.float32(313.51538), np.float32(307.36224), np.float32(309.31323), np.float32(323.2952), np.float32(881.0543), np.float32(884.9989), np.float32(293.881), np.float32(291.19055), np.float32(294.55945), np.float32(296.5115), np.float32(294.56442), np.float32(293.59836), np.float32(299.75272), np.float32(301.70874), np.float32(304.75867), np.float32(302.59912), np.float32(303.4571), np.float32(302.53723), np.float32(301.24307), np.float32(296.0357), np.float32(288.27597), np.float32(283.1249), np.float32(280.27313), np.float32(281.31525), np.float32(302.49255), np.float32(305.26752), np.float32(308.9525), np.float32(307.02762), np.float32(307.75134), np.float32(308.85718), np.float32(305.2602), np.float32(300.6184), np.float32(302.49072), np.float32(295.10684), np.float32(179.00505), np.float32(296.8965), np.float32(292.50708), np.float32(295.1649), np.float32(294.93896), np.float32(298.4446), np.float32(204.57436), np.float32(165.75551), np.float32(310.79486), np.float32(303.361), np.float32(192.37543), np.float32(167.24202), np.float32(199.8934), np.float32(299.95166), np.float32(300.08862), np.float32(297.34265), np.float32(300.94595), np.float32(298.00906), np.float32(304.0268), np.float32(299.815), np.float32(302.67416), np.float32(293.286), np.float32(261.7418), np.float32(253.61595), np.float32(232.69627), np.float32(225.81659), np.float32(219.12675), np.float32(215.8062), np.float32(281.8612), np.float32(546.66504), np.float32(538.2481), np.float32(522.13446), np.float32(515.95325), np.float32(515.45703), np.float32(510.81393), np.float32(502.3261), np.float32(241.78288), np.float32(240.79454), np.float32(241.25026), np.float32(240.11513), np.float32(241.92911), np.float32(234.5737), np.float32(227.5563), np.float32(216.97537), np.float32(217.95093), np.float32(218.49693), np.float32(220.97417), np.float32(221.25885), np.float32(217.01768), np.float32(219.19366), np.float32(217.81924), np.float32(217.43715), np.float32(221.36981), np.float32(221.33984), np.float32(221.61493), np.float32(220.21454), np.float32(217.08788), np.float32(222.7173), np.float32(221.5541), np.float32(226.36443), np.float32(208.4051), np.float32(209.86996), np.float32(223.89748), np.float32(208.90399), np.float32(223.75047), np.float32(687.32465), np.float32(690.42786), np.float32(459.3462), np.float32(463.33438), np.float32(681.81287), np.float32(163.54222), np.float32(207.76018), np.float32(229.17902), np.float32(220.44852), np.float32(215.46939), np.float32(221.77222), np.float32(216.04443), np.float32(222.53857), np.float32(226.80202), np.float32(228.57788), np.float32(229.28563), np.float32(231.43526), np.float32(232.66074), np.float32(227.94562), np.float32(224.82246), np.float32(223.72177), np.float32(222.54842), np.float32(218.23944), np.float32(222.49716), np.float32(221.46881), np.float32(226.80644), np.float32(237.27382), np.float32(231.3087), np.float32(227.82846), np.float32(233.29059), np.float32(231.52826), np.float32(158.96178), np.float32(446.17975), np.float32(450.4145), np.float32(226.99062), np.float32(215.98643), np.float32(224.53973), np.float32(210.50264), np.float32(219.15598), np.float32(213.0182), np.float32(209.07037), np.float32(219.86758), np.float32(164.3973), np.float32(155.19946), np.float32(186.34991), np.float32(165.7892), np.float32(165.6614), np.float32(180.50261), np.float32(185.1005), np.float32(164.68057), np.float32(206.73659), np.float32(231.35776), np.float32(220.12706), np.float32(218.94371), np.float32(351.88412), np.float32(200.48871), np.float32(159.35707), np.float32(176.08862), np.float32(186.5147), np.float32(161.64162), np.float32(354.13037), np.float32(356.6727), np.float32(153.78534), np.float32(223.3814), np.float32(214.78294), np.float32(222.51546), np.float32(209.2121), np.float32(158.91043), np.float32(223.15181), np.float32(153.4136), np.float32(229.05553), np.float32(216.06795), np.float32(152.81375), np.float32(219.16629), np.float32(214.07469), np.float32(218.71465), np.float32(218.21393), np.float32(213.9129), np.float32(226.71584), np.float32(223.02628), np.float32(183.51965), np.float32(441.75375), np.float32(157.31906), np.float32(157.16634), np.float32(293.55344), np.float32(188.99023), np.float32(161.18254), np.float32(162.40648), np.float32(189.98589), np.float32(163.90851), np.float32(165.01436), np.float32(162.17552), np.float32(190.9601), np.float32(161.72699), np.float32(157.95665), np.float32(195.93634), np.float32(165.27963), np.float32(160.296), np.float32(184.75903), np.float32(444.47498), np.float32(161.09291), np.float32(153.49196), np.float32(189.1076), np.float32(438.1946), np.float32(440.27765), np.float32(441.81976), np.float32(182.91847), np.float32(156.29674), np.float32(159.13637), np.float32(185.2665), np.float32(445.08167), np.float32(335.32098), np.float32(354.2473), np.float32(282.73856), np.float32(305.47794), np.float32(277.89374), np.float32(286.5684), np.float32(357.13855), np.float32(280.00516), np.float32(300.41327), np.float32(291.0142), np.float32(287.30844), np.float32(299.3721), np.float32(155.56921), np.float32(291.82382), np.float32(441.30106), np.float32(283.71243), np.float32(296.77176), np.float32(293.26614), np.float32(293.08817), np.float32(153.34096), np.float32(175.70116), np.float32(196.27411), np.float32(241.51837), np.float32(206.95166), np.float32(159.38658), np.float32(166.24277), np.float32(231.1253), np.float32(164.00504), np.float32(154.92113), np.float32(196.07095), np.float32(441.93143), np.float32(155.52333), np.float32(161.20442), np.float32(191.3869), np.float32(157.55537), np.float32(163.76149), np.float32(181.36095), np.float32(880.3313), np.float32(154.20528), np.float32(352.06387), np.float32(222.80234), np.float32(440.7761), np.float32(159.28938), np.float32(441.4135), np.float32(176.47673), np.float32(158.35817), np.float32(436.94144), np.float32(441.40814), np.float32(212.65125), np.float32(353.43845), np.float32(159.25536), np.float32(188.48622), np.float32(442.4374), np.float32(156.05513), np.float32(355.51324), np.float32(356.1327), np.float32(440.8244), np.float32(438.70663), np.float32(442.5248), np.float32(183.58298), np.float32(158.91223), np.float32(287.47232), np.float32(183.12076), np.float32(153.18681), np.float32(285.72012), np.float32(153.6399), np.float32(281.36633), np.float32(266.9322), np.float32(161.08781), np.float32(299.6529), np.float32(193.37018), np.float32(153.56433), np.float32(160.89944), np.float32(163.27733), np.float32(164.82823), np.float32(161.88464), np.float32(165.90904), np.float32(165.14397), np.float32(160.919), np.float32(167.96722), np.float32(162.47914), np.float32(161.87732), np.float32(164.44644), np.float32(168.34384), np.float32(160.91083), np.float32(164.9195), np.float32(167.69112), np.float32(158.5546), np.float32(167.4849), np.float32(165.70988), np.float32(163.21959), np.float32(163.22916), np.float32(169.28197), np.float32(161.24684), np.float32(164.95203), np.float32(170.91528), np.float32(155.04407), np.float32(168.43698), np.float32(172.9806), np.float32(170.58212), np.float32(157.49472), np.float32(179.42027), np.float32(205.00116), np.float32(159.82962), np.float32(176.48007), np.float32(153.44215), np.float32(165.81058), np.float32(169.18819), np.float32(168.48595), np.float32(159.41084), np.float32(172.92337), np.float32(167.90462), np.float32(155.48972), np.float32(173.3524), np.float32(157.05713), np.float32(163.0703), np.float32(169.90437), np.float32(160.3204), np.float32(166.4187), np.float32(166.78438), np.float32(165.16397), np.float32(157.1704), np.float32(163.57666), np.float32(161.01382), np.float32(160.71268), np.float32(168.45062), np.float32(159.2896), np.float32(166.49852), np.float32(167.49501), np.float32(160.6504), np.float32(165.93463), np.float32(163.43108), np.float32(165.19603), np.float32(161.33224), np.float32(169.9882), np.float32(162.5258), np.float32(164.23193), np.float32(169.01602), np.float32(161.18672), np.float32(165.64975), np.float32(164.44131), np.float32(167.17831), np.float32(159.27077), np.float32(167.70996), np.float32(164.80896), np.float32(160.28304), np.float32(171.30818), np.float32(161.25534), np.float32(165.74635), np.float32(162.93878), np.float32(168.35387), np.float32(158.83075), np.float32(165.6396), np.float32(168.20311), np.float32(155.0117), np.float32(172.28648), np.float32(161.4939), np.float32(164.83762), np.float32(162.85951), np.float32(167.96432), np.float32(161.09314), np.float32(166.11226), np.float32(181.49664), np.float32(220.78705), np.float32(186.04814), np.float32(181.16534), np.float32(247.28131), np.float32(248.07822), np.float32(182.69441), np.float32(415.88528), np.float32(420.44662), np.float32(418.2484), np.float32(426.22702), np.float32(432.68094), np.float32(432.83194), np.float32(429.176), np.float32(422.8551), np.float32(407.37088), np.float32(404.6585), np.float32(405.83603), np.float32(402.26953), np.float32(403.79297), np.float32(399.84067), np.float32(400.70135), np.float32(397.48657), np.float32(399.9809), np.float32(400.57806), np.float32(402.70398), np.float32(412.69934), np.float32(416.1629), np.float32(416.1681), np.float32(420.36954), np.float32(424.99927), np.float32(430.5753), np.float32(433.22226), np.float32(430.26373), np.float32(429.02475), np.float32(429.44803), np.float32(430.09164), np.float32(429.6273), np.float32(432.0009), np.float32(435.2479), np.float32(434.90488), np.float32(436.0301), np.float32(439.66812), np.float32(440.6238), np.float32(440.4749), np.float32(439.96353), np.float32(441.08774), np.float32(442.2168), np.float32(442.03735), np.float32(444.38794), np.float32(444.51114), np.float32(442.40485), np.float32(441.88834), np.float32(439.0468), np.float32(439.20532), np.float32(438.42715), np.float32(438.0055), np.float32(440.63626), np.float32(440.651), np.float32(439.15598), np.float32(441.82812), np.float32(443.3424), np.float32(438.94928), np.float32(439.09537), np.float32(439.34903), np.float32(438.59772), np.float32(438.95352), np.float32(436.79858), np.float32(437.18332), np.float32(438.406), np.float32(438.43588), np.float32(438.4903), np.float32(440.81784), np.float32(439.71585), np.float32(440.0882), np.float32(440.08072), np.float32(438.76422), np.float32(438.43185), np.float32(439.6602), np.float32(439.67416), np.float32(439.45966), np.float32(439.9567), np.float32(438.83804), np.float32(438.31384), np.float32(438.0696), np.float32(437.42648), np.float32(436.56906), np.float32(438.646), np.float32(439.37842), np.float32(440.25635), np.float32(442.66852), np.float32(441.50287), np.float32(441.0752), np.float32(438.8662), np.float32(436.5273), np.float32(437.10287), np.float32(437.4033), np.float32(441.79025), np.float32(443.9945), np.float32(447.80255), np.float32(450.39944), np.float32(450.33017), np.float32(449.82095), np.float32(447.9159), np.float32(446.60245), np.float32(444.59665), np.float32(441.4956), np.float32(439.24353), np.float32(435.5794), np.float32(428.90652), np.float32(428.93674), np.float32(435.6557), np.float32(441.118), np.float32(445.84442), np.float32(454.00354), np.float32(456.22583), np.float32(450.46396), np.float32(449.19904), np.float32(446.50253), np.float32(443.31546), np.float32(439.3613), np.float32(435.25784), np.float32(429.3053), np.float32(426.9007), np.float32(426.2469), np.float32(431.27115), np.float32(438.39175), np.float32(442.15002), np.float32(448.79984), np.float32(450.75897), np.float32(449.07318), np.float32(447.82523), np.float32(447.8174), np.float32(445.99417), np.float32(442.17075), np.float32(438.17575), np.float32(434.48553), np.float32(431.51645), np.float32(434.44672), np.float32(439.58746), np.float32(441.35263), np.float32(443.91083), np.float32(445.53546), np.float32(444.65463), np.float32(443.86276), np.float32(441.247), np.float32(437.01157), np.float32(427.07568), np.float32(424.18768), np.float32(427.20746), np.float32(430.47195), np.float32(437.01456), np.float32(444.10135), np.float32(449.57877), np.float32(457.66437), np.float32(460.9602), np.float32(463.7357), np.float32(467.7003), np.float32(471.71188), np.float32(467.67737), np.float32(469.78677), np.float32(484.94598), np.float32(485.7136), np.float32(493.91754), np.float32(498.29156), np.float32(507.77646), np.float32(514.8006), np.float32(516.52356), np.float32(517.2801), np.float32(519.35535), np.float32(517.6469), np.float32(517.01776), np.float32(518.7945), np.float32(516.1664), np.float32(516.11255), np.float32(517.05347), np.float32(516.40466), np.float32(517.32654), np.float32(517.1834), np.float32(515.3393), np.float32(513.79596), np.float32(513.57733), np.float32(514.50726), np.float32(511.16837), np.float32(511.23563), np.float32(446.34662), np.float32(493.42633), np.float32(471.84827), np.float32(470.7854), np.float32(467.8522), np.float32(454.8083), np.float32(448.56924), np.float32(444.1404), np.float32(438.37387), np.float32(433.2275), np.float32(428.8369), np.float32(421.51093), np.float32(412.41278), np.float32(404.88382), np.float32(403.02014), np.float32(398.75714), np.float32(399.26987), np.float32(394.219), np.float32(394.45154), np.float32(391.144), np.float32(391.2782), np.float32(387.32626), np.float32(380.36816), np.float32(381.391), np.float32(191.08005), np.float32(170.66872), np.float32(169.08517), np.float32(225.10826), np.float32(383.48807), np.float32(385.43704), np.float32(387.45032), np.float32(169.97379), np.float32(164.21434), np.float32(168.53685), np.float32(160.72574), np.float32(390.06104), np.float32(385.47214), np.float32(382.48682), np.float32(387.59085), np.float32(386.9468), np.float32(388.7437), np.float32(389.3713), np.float32(389.7896), np.float32(389.03134), np.float32(386.5907), np.float32(385.73834), np.float32(386.86398), np.float32(389.92624), np.float32(387.07593), np.float32(386.65717), np.float32(388.57498), np.float32(389.83044), np.float32(392.04166), np.float32(389.80484), np.float32(392.4581), np.float32(391.98413), np.float32(399.63235), np.float32(215.62643), np.float32(215.98215), np.float32(218.69756), np.float32(219.68567), np.float32(217.92085), np.float32(212.6345), np.float32(217.9012), np.float32(215.59906), np.float32(216.39621), np.float32(220.39787), np.float32(221.40326), np.float32(215.20732), np.float32(215.15353), np.float32(212.50284), np.float32(217.92638), np.float32(217.35675), np.float32(220.0014), np.float32(230.54068), np.float32(209.6524), np.float32(177.67862), np.float32(169.43811), np.float32(159.1546), np.float32(166.2851), np.float32(161.45598), np.float32(163.42795), np.float32(166.82167), np.float32(161.02136), np.float32(167.77126), np.float32(160.78612), np.float32(163.13092), np.float32(164.3701), np.float32(159.6615), np.float32(167.72122), np.float32(155.61343), np.float32(165.111), np.float32(164.67754), np.float32(162.31448), np.float32(167.43826), np.float32(157.06511), np.float32(164.51796), np.float32(265.8408), np.float32(257.7697), np.float32(162.48982), np.float32(154.11995), np.float32(165.60526), np.float32(165.23027), np.float32(162.70819), np.float32(166.04266), np.float32(256.14026), np.float32(261.0024), np.float32(265.97), np.float32(260.52112), np.float32(261.08954), np.float32(259.70877), np.float32(261.09027), np.float32(254.16533), np.float32(244.28421), np.float32(206.8445), np.float32(222.65689), np.float32(166.70343), np.float32(157.24326), np.float32(773.34045), np.float32(773.4473), np.float32(216.19933), np.float32(229.28603), np.float32(219.73274), np.float32(272.76215), np.float32(258.9403), np.float32(263.4544), np.float32(183.85895), np.float32(179.30617), np.float32(330.8508), np.float32(168.9343), np.float32(162.47876), np.float32(162.44124), np.float32(1017.51373), np.float32(1021.47174), np.float32(1017.38104), np.float32(1010.76776), np.float32(998.5411), np.float32(650.67065), np.float32(639.2563), np.float32(637.05365), np.float32(621.2246), np.float32(624.1368), np.float32(629.84534), np.float32(305.11044), np.float32(298.705), np.float32(301.94214), np.float32(303.9809), np.float32(297.94046), np.float32(296.84128), np.float32(291.51013), np.float32(292.3269), np.float32(296.8067), np.float32(289.88632), np.float32(286.44373), np.float32(294.68625), np.float32(296.81714), np.float32(295.93604), np.float32(299.55945), np.float32(297.39133), np.float32(297.55328), np.float32(300.95746), np.float32(299.0633), np.float32(296.77603), np.float32(298.0268), np.float32(295.2634), np.float32(287.26874), np.float32(280.2885), np.float32(294.4356), np.float32(299.4008), np.float32(296.73254), np.float32(297.34134), np.float32(298.9139), np.float32(296.34973), np.float32(299.023), np.float32(300.8), np.float32(294.4862), np.float32(301.00687), np.float32(305.3831), np.float32(216.13202), np.float32(227.62819), np.float32(224.53719), np.float32(303.89478), np.float32(215.07983), np.float32(243.8238), np.float32(266.22552), np.float32(250.04976), np.float32(265.92014), np.float32(238.38258), np.float32(237.31924), np.float32(253.38754), np.float32(254.2894), np.float32(228.5643), np.float32(222.827), np.float32(206.10059), np.float32(220.9663), np.float32(222.00493), np.float32(322.62485), np.float32(306.2099), np.float32(300.5292), np.float32(303.88245), np.float32(301.4865), np.float32(588.93414), np.float32(590.96313), np.float32(588.05597), np.float32(295.92444), np.float32(298.4695), np.float32(295.6412), np.float32(290.56223), np.float32(232.79622), np.float32(217.71648), np.float32(214.23958), np.float32(219.017), np.float32(217.65054), np.float32(218.09366), np.float32(219.43275), np.float32(218.7145), np.float32(218.70529), np.float32(215.90253), np.float32(215.77444), np.float32(221.6381), np.float32(215.86731), np.float32(217.83302), np.float32(222.3294), np.float32(220.15569), np.float32(211.6758), np.float32(214.09026), np.float32(230.00876), np.float32(436.67294), np.float32(157.2644), np.float32(159.47531), np.float32(210.79549), np.float32(221.71472), np.float32(163.57458), np.float32(586.7696), np.float32(592.101), np.float32(595.32904), np.float32(890.29645), np.float32(889.74774), np.float32(587.87756), np.float32(586.7329), np.float32(584.8464), np.float32(584.1272), np.float32(585.21643), np.float32(586.35785), np.float32(586.72424), np.float32(588.4656), np.float32(593.7163), np.float32(598.97314), np.float32(600.1036), np.float32(600.44934), np.float32(600.3236), np.float32(600.56555), np.float32(890.72656), np.float32(890.42804), np.float32(888.4985), np.float32(579.9419), np.float32(581.3182), np.float32(579.29193), np.float32(566.0317), np.float32(571.3304), np.float32(584.0569), np.float32(586.76886), np.float32(589.94037), np.float32(594.7269), np.float32(602.4024), np.float32(280.4648), np.float32(296.19684), np.float32(301.7222), np.float32(297.7588), np.float32(283.71518), np.float32(300.42245), np.float32(301.59293), np.float32(300.30164), np.float32(302.2166), np.float32(306.031), np.float32(307.5439), np.float32(306.33945), np.float32(301.50598), np.float32(298.4417), np.float32(297.57233), np.float32(297.88867), np.float32(299.326), np.float32(298.4458), np.float32(300.34415), np.float32(302.62265), np.float32(303.9678), np.float32(325.89334), np.float32(304.46768), np.float32(301.63583), np.float32(298.77365), np.float32(295.1706), np.float32(291.95383), np.float32(290.61346), np.float32(293.7119), np.float32(296.41586), np.float32(297.32056), np.float32(291.95956), np.float32(286.6858), np.float32(302.56735), np.float32(298.54456), np.float32(287.5736), np.float32(285.79596), np.float32(201.28517), np.float32(231.29842), np.float32(231.09166), np.float32(229.12955), np.float32(176.33003), np.float32(245.79193), np.float32(249.54494), np.float32(256.93994), np.float32(259.97968), np.float32(256.195), np.float32(536.5705), np.float32(543.27924), np.float32(543.7801), np.float32(527.665), np.float32(513.3932), np.float32(509.90274), np.float32(750.29626), np.float32(738.37415), np.float32(726.4776), np.float32(475.68256), np.float32(698.28314), np.float32(682.86176), np.float32(220.51549), np.float32(222.7123), np.float32(214.70712), np.float32(217.99413), np.float32(208.65471), np.float32(216.78317), np.float32(218.73793), np.float32(217.3771), np.float32(218.57904), np.float32(230.6281), np.float32(208.16843), np.float32(228.53642), np.float32(210.96347), np.float32(216.99821), np.float32(215.688), np.float32(214.53891), np.float32(215.67827), np.float32(219.73897), np.float32(219.35895), np.float32(230.5781), np.float32(164.67584), np.float32(168.4641), np.float32(696.6566), np.float32(703.3435), np.float32(704.1237), np.float32(233.13647), np.float32(229.46086), np.float32(222.68372), np.float32(221.96315), np.float32(215.49243), np.float32(215.58923), np.float32(217.04431), np.float32(216.72792), np.float32(225.50677), np.float32(231.5639), np.float32(255.08405), np.float32(237.20282), np.float32(229.82346), np.float32(231.09903), np.float32(229.1155), np.float32(228.32173), np.float32(219.55814), np.float32(224.13567), np.float32(221.6435), np.float32(219.31317), np.float32(223.57922), np.float32(217.66443), np.float32(224.3246), np.float32(253.75887), np.float32(223.15317), np.float32(227.29695), np.float32(214.96034), np.float32(231.64156), np.float32(232.52988), np.float32(230.89847), np.float32(232.46327), np.float32(232.03851), np.float32(232.49817), np.float32(233.38828), np.float32(260.4896), np.float32(159.28665), np.float32(168.53644), np.float32(202.12587), np.float32(165.23962), np.float32(168.16925), np.float32(178.58249), np.float32(183.97401), np.float32(161.88574), np.float32(157.9859), np.float32(444.02078), np.float32(153.4587), np.float32(161.07574), np.float32(191.75285), np.float32(225.09572), np.float32(167.80132), np.float32(223.05057), np.float32(217.33507), np.float32(216.9143), np.float32(224.02295), np.float32(217.78366), np.float32(440.77838), np.float32(157.69757), np.float32(163.69513), np.float32(189.19438), np.float32(167.94458), np.float32(218.81276), np.float32(213.7861), np.float32(214.7088), np.float32(225.69029), np.float32(214.62244), np.float32(214.91156), np.float32(223.51158), np.float32(208.67406), np.float32(227.96765), np.float32(159.39697), np.float32(211.5863), np.float32(223.91116), np.float32(210.06853), np.float32(225.62756), np.float32(211.82503), np.float32(216.4732), np.float32(223.95882), np.float32(232.90526), np.float32(233.9334), np.float32(220.72925), np.float32(173.91841), np.float32(181.80803), np.float32(170.49568), np.float32(167.52597), np.float32(293.76758), np.float32(293.44897), np.float32(164.04872), np.float32(168.32452), np.float32(179.4203), np.float32(171.64613), np.float32(171.18639), np.float32(180.20872), np.float32(178.33067), np.float32(167.40964), np.float32(171.58128), np.float32(348.78064), np.float32(161.5571), np.float32(163.27791), np.float32(174.94409), np.float32(180.45386), np.float32(168.45251), np.float32(167.99265), np.float32(191.32584), np.float32(162.13916), np.float32(166.39078), np.float32(348.82797), np.float32(349.83133), np.float32(160.36455), np.float32(161.174), np.float32(439.9798), np.float32(177.3417), np.float32(158.90428), np.float32(349.6265), np.float32(354.29306), np.float32(443.12128), np.float32(217.6865), np.float32(438.79593), np.float32(351.8405), np.float32(354.77725), np.float32(439.54947), np.float32(208.23541), np.float32(440.00946), np.float32(352.488), np.float32(352.97064), np.float32(354.6617), np.float32(443.22006), np.float32(328.09265), np.float32(233.11436), np.float32(153.33311), np.float32(292.0021), np.float32(292.9139), np.float32(291.96524), np.float32(295.87006), np.float32(295.56717), np.float32(291.79294), np.float32(295.88843), np.float32(293.6461), np.float32(293.56357), np.float32(293.71027), np.float32(291.03702), np.float32(295.121), np.float32(156.6072), np.float32(293.51712), np.float32(292.79547), np.float32(290.47644), np.float32(291.52142), np.float32(294.24582), np.float32(296.49777), np.float32(153.0601), np.float32(290.44513), np.float32(442.23773), np.float32(153.77525), np.float32(442.3159), np.float32(440.97067), np.float32(439.8894), np.float32(442.33817), np.float32(440.96478), np.float32(442.74176), np.float32(154.00636), np.float32(439.76086), np.float32(443.9073), np.float32(157.77191), np.float32(440.3248), np.float32(443.3102), np.float32(438.03668), np.float32(441.4027), np.float32(441.1038), np.float32(441.1541), np.float32(155.28928), np.float32(161.45432), np.float32(186.29884), np.float32(292.2095), np.float32(158.41872), np.float32(288.6034), np.float32(440.38266), np.float32(300.83694), np.float32(440.21762), np.float32(212.00977), np.float32(185.70358), np.float32(169.10408), np.float32(168.81102), np.float32(181.01694), np.float32(171.13104), np.float32(170.13593), np.float32(171.3872), np.float32(185.93228), np.float32(171.01501), np.float32(169.5794), np.float32(186.98813), np.float32(172.7165), np.float32(172.08578), np.float32(173.27211), np.float32(181.9898), np.float32(167.42607), np.float32(172.29398), np.float32(171.79906), np.float32(174.52832), np.float32(165.49586), np.float32(187.223), np.float32(440.96405), np.float32(204.61713), np.float32(441.166), np.float32(211.7253), np.float32(441.98215), np.float32(440.27893), np.float32(440.5517), np.float32(442.32217), np.float32(440.66656), np.float32(440.7366), np.float32(441.8512), np.float32(440.6384), np.float32(440.92014), np.float32(441.2657), np.float32(218.30685), np.float32(441.31927), np.float32(440.75064), np.float32(441.58936), np.float32(441.3003), np.float32(439.55865), np.float32(442.6849), np.float32(440.80017), np.float32(216.69339), np.float32(218.011), np.float32(218.49321), np.float32(212.20169), np.float32(444.73047), np.float32(180.03365), np.float32(191.95229), np.float32(193.73457), np.float32(173.44888), np.float32(226.95537), np.float32(188.53773), np.float32(190.5631), np.float32(169.37376), np.float32(170.47397), np.float32(174.78888), np.float32(189.50253), np.float32(170.83058), np.float32(164.53886), np.float32(170.63986), np.float32(186.08066), np.float32(177.87532), np.float32(168.9326), np.float32(169.84142), np.float32(191.96133), np.float32(173.53381), np.float32(165.63846), np.float32(217.42363), np.float32(196.28528), np.float32(169.73543), np.float32(212.2586), np.float32(216.99805), np.float32(198.81984), np.float32(168.91248), np.float32(444.32874), np.float32(447.57187), np.float32(444.88773), np.float32(174.45102), np.float32(521.0051), np.float32(447.9478), np.float32(448.57388), np.float32(437.64807), np.float32(438.4228), np.float32(220.87257), np.float32(207.08548), np.float32(443.1319), np.float32(440.59402), np.float32(215.33531), np.float32(201.39543), np.float32(440.23312), np.float32(441.17413), np.float32(213.36269), np.float32(209.30403), np.float32(788.88196), np.float32(790.0673), np.float32(787.71185), np.float32(786.46155), np.float32(437.55292), np.float32(437.35065), np.float32(440.4038), np.float32(218.53587), np.float32(218.23155), np.float32(165.8184), np.float32(163.59567), np.float32(208.14331), np.float32(218.86305), np.float32(208.1303), np.float32(627.12823), np.float32(636.7887), np.float32(432.33826), np.float32(437.2317), np.float32(440.40552), np.float32(659.8463), np.float32(657.7768), np.float32(660.087), np.float32(658.83636), np.float32(660.2971), np.float32(661.55927), np.float32(662.48413), np.float32(438.75095), np.float32(426.63715), np.float32(444.49677), np.float32(224.37372), np.float32(225.92831), np.float32(224.83371), np.float32(226.67786), np.float32(229.81892), np.float32(465.3389), np.float32(475.75964), np.float32(488.99252), np.float32(494.5538), np.float32(489.9945), np.float32(492.5798), np.float32(491.98798), np.float32(232.13696), np.float32(491.08194), np.float32(490.33264), np.float32(232.7066), np.float32(489.31882), np.float32(487.8687), np.float32(487.56488), np.float32(234.81696), np.float32(241.84618), np.float32(484.91876), np.float32(485.62146), np.float32(230.63684), np.float32(472.4649), np.float32(467.90112), np.float32(455.22522), np.float32(440.79315), np.float32(437.58215), np.float32(435.63907), np.float32(654.8681), np.float32(656.9071), np.float32(658.424), np.float32(659.0796), np.float32(660.2352), np.float32(660.96027), np.float32(661.9694), np.float32(662.401), np.float32(661.10565), np.float32(660.40173), np.float32(659.3705), np.float32(660.4046), np.float32(663.39667), np.float32(169.69049), np.float32(198.01884), np.float32(212.8546), np.float32(442.4478), np.float32(436.01074), np.float32(442.1854), np.float32(497.23096), np.float32(497.26022), np.float32(491.8602), np.float32(487.26517), np.float32(476.23108), np.float32(481.47202), np.float32(491.21216), np.float32(221.59741), np.float32(218.41722), np.float32(212.89595), np.float32(215.94073), np.float32(436.75327), np.float32(445.82684), np.float32(204.82227), np.float32(442.54294), np.float32(441.61444), np.float32(442.6732), np.float32(426.96674), np.float32(201.66284), np.float32(415.6088), np.float32(412.9475), np.float32(411.5005), np.float32(423.39835), np.float32(431.8231), np.float32(436.84842), np.float32(437.96536), np.float32(438.90936), np.float32(444.25284), np.float32(662.5336), np.float32(663.6918), np.float32(663.8193), np.float32(659.02094), np.float32(658.969), np.float32(656.37976), np.float32(657.05975), np.float32(656.3058), np.float32(666.6537), np.float32(441.85782), np.float32(437.22742), np.float32(427.6799), np.float32(432.9325), np.float32(216.25941), np.float32(185.90395), np.float32(170.02625), np.float32(182.27023), np.float32(187.10959), np.float32(168.92079), np.float32(232.54517), np.float32(495.31427), np.float32(493.28845), np.float32(483.63403), np.float32(239.44951), np.float32(248.3452), np.float32(252.13464), np.float32(236.9406), np.float32(242.13263), np.float32(236.97926), np.float32(242.29846), np.float32(236.03102), np.float32(235.46729), np.float32(238.30081), np.float32(225.86984), np.float32(222.0667), np.float32(226.67773), np.float32(445.6247), np.float32(442.6048), np.float32(441.83932), np.float32(650.71094), np.float32(649.33746), np.float32(646.90106), np.float32(653.6153), np.float32(653.7896), np.float32(656.48193), np.float32(658.3063), np.float32(659.7146), np.float32(659.7755), np.float32(659.38574), np.float32(655.9873), np.float32(657.9809), np.float32(162.31355), np.float32(652.09796), np.float32(659.4885), np.float32(217.26472), np.float32(438.44202), np.float32(436.08414), np.float32(434.71713), np.float32(225.1338), np.float32(227.70253), np.float32(232.37218), np.float32(237.6904), np.float32(160.08908), np.float32(235.19225), np.float32(232.5537), np.float32(224.43234), np.float32(220.54292), np.float32(209.28516), np.float32(222.64468), np.float32(210.0476), np.float32(221.35503), np.float32(223.58812), np.float32(221.13008), np.float32(221.04176), np.float32(215.03769), np.float32(222.67665), np.float32(702.98553), np.float32(708.6527), np.float32(718.3053), np.float32(724.6016), np.float32(728.9684), np.float32(731.3676), np.float32(732.64355), np.float32(737.4235), np.float32(739.4288), np.float32(738.4156), np.float32(615.0523), np.float32(629.69336), np.float32(513.2806), np.float32(509.64606), np.float32(506.3932), np.float32(755.5601), np.float32(760.5507), np.float32(757.1632), np.float32(749.3233), np.float32(749.2367), np.float32(752.8864), np.float32(764.33295), np.float32(771.66), np.float32(1555.1592), np.float32(1561.9095), np.float32(157.85698), np.float32(166.01048), np.float32(182.23718), np.float32(170.09209), np.float32(170.23044), np.float32(183.98671), np.float32(170.36827), np.float32(162.11195), np.float32(790.0773), np.float32(788.4416), np.float32(789.15424), np.float32(785.80066), np.float32(781.13544), np.float32(779.30774), np.float32(777.0554), np.float32(775.6855), np.float32(781.59094), np.float32(791.70776), np.float32(780.31573), np.float32(788.3763), np.float32(792.4961), np.float32(790.52747), np.float32(168.42833), np.float32(171.53947), np.float32(169.85965), np.float32(168.36794), np.float32(254.00931), np.float32(263.93594), np.float32(257.39532), np.float32(247.92006), np.float32(258.1565), np.float32(260.43484), np.float32(259.17523), np.float32(255.92789), np.float32(263.0746), np.float32(250.0355), np.float32(236.19876), np.float32(215.85872), np.float32(302.636), np.float32(305.07007), np.float32(304.18317), np.float32(303.564), np.float32(298.63147), np.float32(295.5971), np.float32(285.74078), np.float32(281.63803), np.float32(288.08395), np.float32(562.52783), np.float32(556.913), np.float32(545.9448), np.float32(545.66), np.float32(255.77467), np.float32(258.6958), np.float32(788.979), np.float32(783.50037), np.float32(781.38556), np.float32(777.6692), np.float32(775.8626), np.float32(778.14923), np.float32(776.97565), np.float32(781.9603), np.float32(783.4469), np.float32(781.5753), np.float32(778.4224), np.float32(778.0908), np.float32(781.2141), np.float32(1044.8768), np.float32(1042.0419), np.float32(520.9294), np.float32(520.0459), np.float32(516.0525), np.float32(515.22125), np.float32(517.5487), np.float32(517.5712), np.float32(520.8433), np.float32(263.37228), np.float32(266.0546), np.float32(271.0263), np.float32(283.54272), np.float32(493.70972), np.float32(496.1824), np.float32(275.6038), np.float32(500.53033), np.float32(499.64792), np.float32(500.26477), np.float32(290.08585), np.float32(291.0119), np.float32(282.02905), np.float32(289.77557), np.float32(296.60968), np.float32(283.90732), np.float32(300.37262), np.float32(292.4052), np.float32(297.5524), np.float32(286.99164), np.float32(231.8283), np.float32(261.2892), np.float32(562.41003), np.float32(555.47845), np.float32(540.30884), np.float32(521.7681), np.float32(777.2016), np.float32(779.2255), np.float32(778.627), np.float32(781.35535), np.float32(788.4271), np.float32(792.2381), np.float32(794.02075), np.float32(796.1408), np.float32(795.92303), np.float32(530.4435), np.float32(529.009), np.float32(523.11774), np.float32(523.2993), np.float32(519.475), np.float32(512.7706), np.float32(251.48975), np.float32(261.79053), np.float32(250.65271), np.float32(259.6837), np.float32(269.767), np.float32(263.66373), np.float32(267.0275), np.float32(261.78818), np.float32(255.05664), np.float32(254.36087), np.float32(249.80429), np.float32(244.60571), np.float32(256.6004), np.float32(265.6847), np.float32(281.1594), np.float32(295.73642), np.float32(300.119), np.float32(288.02332), np.float32(284.6572), np.float32(295.97086), np.float32(291.9629), np.float32(295.83508), np.float32(288.27786), np.float32(281.207), np.float32(290.51782), np.float32(280.73737), np.float32(287.33978), np.float32(283.6924), np.float32(267.45016), np.float32(239.23785), np.float32(257.53683), np.float32(257.31018), np.float32(256.28033), np.float32(519.1796), np.float32(517.2303), np.float32(252.25612), np.float32(253.34874), np.float32(261.6954), np.float32(261.46588), np.float32(257.37424), np.float32(260.1997), np.float32(261.94), np.float32(255.23848), np.float32(263.7147), np.float32(255.49332), np.float32(264.86716), np.float32(256.56522), np.float32(251.44185), np.float32(170.16695), np.float32(179.49431), np.float32(169.97925), np.float32(176.0363), np.float32(173.51935), np.float32(295.259), np.float32(295.32132), np.float32(298.94556), np.float32(283.1985), np.float32(304.6939), np.float32(274.268), np.float32(275.16858), np.float32(296.97992), np.float32(277.09454), np.float32(173.2958), np.float32(173.81448), np.float32(171.7711), np.float32(174.19792), np.float32(171.60938), np.float32(305.94003), np.float32(298.36145), np.float32(178.76003), np.float32(172.66985), np.float32(181.20178), np.float32(174.06738), np.float32(173.59872), np.float32(171.69403), np.float32(171.44104), np.float32(176.75795), np.float32(173.83078), np.float32(178.46165), np.float32(170.78859), np.float32(182.02252), np.float32(168.9241), np.float32(182.9199), np.float32(175.35745), np.float32(185.77055), np.float32(167.87921), np.float32(171.90327), np.float32(165.08643), np.float32(170.13191), np.float32(167.24585), np.float32(215.78864), np.float32(224.16452), np.float32(216.44377), np.float32(220.28598), np.float32(213.40437), np.float32(219.53683), np.float32(212.9134), np.float32(221.24295), np.float32(217.39485), np.float32(218.42973), np.float32(217.6927), np.float32(210.35973), np.float32(219.43462), np.float32(298.53537), np.float32(303.84814), np.float32(300.60892), np.float32(297.0074), np.float32(586.6564), np.float32(585.1483), np.float32(581.59106), np.float32(575.62744), np.float32(576.5299), np.float32(574.4591), np.float32(574.4009), np.float32(576.4928), np.float32(581.7438), np.float32(587.81085), np.float32(599.0226), np.float32(610.0136), np.float32(622.748), np.float32(640.59436), np.float32(647.6631), np.float32(652.7718), np.float32(656.68256), np.float32(654.4479), np.float32(653.30774), np.float32(653.54877), np.float32(651.42566), np.float32(649.8598), np.float32(652.45844), np.float32(655.998), np.float32(660.6779), np.float32(675.3265), np.float32(682.7336), np.float32(690.67004), np.float32(698.29346), np.float32(698.6333), np.float32(695.9941), np.float32(688.46234), np.float32(672.2954), np.float32(654.0733), np.float32(324.894), np.float32(325.39716), np.float32(326.0256), np.float32(327.03952), np.float32(326.49176), np.float32(329.85574), np.float32(334.46857), np.float32(339.6717), np.float32(351.02368), np.float32(356.58112), np.float32(350.49353), np.float32(346.9676), np.float32(346.97086), np.float32(339.33118), np.float32(329.30215), np.float32(218.99944), np.float32(217.84383), np.float32(325.66278), np.float32(327.48956), np.float32(221.88576), np.float32(216.30673), np.float32(217.57196), np.float32(222.7089), np.float32(339.76086), np.float32(339.03784), np.float32(339.21268), np.float32(336.32538), np.float32(335.01212), np.float32(329.39807), np.float32(327.36664), np.float32(320.99683), np.float32(323.03305), np.float32(307.276), np.float32(215.39499), np.float32(222.00575), np.float32(279.63428), np.float32(274.73557), np.float32(282.21542), np.float32(218.03596), np.float32(223.83366), np.float32(210.44261), np.float32(221.9241), np.float32(222.60057), np.float32(226.36357), np.float32(217.7572), np.float32(210.94069), np.float32(231.5357), np.float32(167.68932), np.float32(164.54594), np.float32(163.38617), np.float32(166.93979), np.float32(162.7189), np.float32(165.2655), np.float32(165.17842), np.float32(164.31296), np.float32(647.30536), np.float32(646.2783), np.float32(648.7059), np.float32(647.04175), np.float32(650.5501), np.float32(653.9955), np.float32(656.21454), np.float32(658.74316), np.float32(664.7495), np.float32(673.1858), np.float32(679.4645), np.float32(683.2687), np.float32(688.3349), np.float32(688.8244), np.float32(689.1557), np.float32(686.12866), np.float32(674.1689), np.float32(658.4964), np.float32(647.38324), np.float32(635.4699), np.float32(637.18536), np.float32(641.68427), np.float32(653.41943), np.float32(661.1257), np.float32(668.4136), np.float32(674.8728), np.float32(682.0402), np.float32(686.999), np.float32(693.9975), np.float32(696.42993), np.float32(342.5352), np.float32(682.319), np.float32(665.1903), np.float32(657.9263), np.float32(653.48645), np.float32(322.33844), np.float32(327.21143), np.float32(323.35553), np.float32(326.55692), np.float32(216.24464), np.float32(658.90533), np.float32(669.37384), np.float32(676.3472), np.float32(679.11456), np.float32(336.1608), np.float32(334.87488), np.float32(335.12537), np.float32(340.02734), np.float32(339.44446), np.float32(341.31915), np.float32(332.39066), np.float32(330.678), np.float32(253.51064), np.float32(324.88745), np.float32(330.24527), np.float32(331.96893), np.float32(329.7014), np.float32(248.22662), np.float32(264.3129), np.float32(253.53638), np.float32(334.6901), np.float32(332.11365), np.float32(332.59283), np.float32(219.22017), np.float32(227.3802), np.float32(329.0761), np.float32(236.79306), np.float32(329.1255), np.float32(230.3729), np.float32(326.8619), np.float32(220.32315), np.float32(221.01826), np.float32(213.16983), np.float32(239.74886), np.float32(214.11426), np.float32(225.69524), np.float32(217.38248), np.float32(216.90535), np.float32(219.47087), np.float32(215.73076), np.float32(222.86894), np.float32(214.75716), np.float32(224.88559), np.float32(217.85391), np.float32(219.6553), np.float32(215.97032), np.float32(217.24428), np.float32(222.12645), np.float32(220.17958), np.float32(173.6089), np.float32(163.80135), np.float32(165.69391), np.float32(159.76984), np.float32(329.89484), np.float32(327.14456), np.float32(329.6365), np.float32(327.5905), np.float32(328.6859), np.float32(329.00745), np.float32(328.1956), np.float32(327.5383), np.float32(327.73035), np.float32(329.63553), np.float32(328.8285), np.float32(329.6921), np.float32(326.90683), np.float32(328.76117), np.float32(330.5307), np.float32(328.97012), np.float32(329.29874), np.float32(328.80054), np.float32(328.3702), np.float32(329.11337), np.float32(328.6685), np.float32(329.49707), np.float32(329.02573), np.float32(329.96085), np.float32(330.29303), np.float32(328.3093), np.float32(329.64047), np.float32(328.925), np.float32(328.87012), np.float32(326.2937), np.float32(329.13672), np.float32(221.78763), np.float32(329.56772), np.float32(329.06216), np.float32(217.42381), np.float32(213.77982), np.float32(221.96236), np.float32(214.87547), np.float32(221.92538), np.float32(215.72375), np.float32(219.69595), np.float32(219.17395), np.float32(203.93066), np.float32(165.13031), np.float32(155.8096), np.float32(227.15346), np.float32(212.87987), np.float32(332.55234), np.float32(328.85144), np.float32(329.4551), np.float32(332.26523), np.float32(329.47516), np.float32(328.0091), np.float32(328.6186), np.float32(329.65506), np.float32(328.76163), np.float32(329.43222), np.float32(328.38455), np.float32(328.95422), np.float32(329.9483), np.float32(329.45032), np.float32(328.5888), np.float32(329.03183), np.float32(328.21878), np.float32(330.05966), np.float32(328.12622), np.float32(328.11182), np.float32(330.26694), np.float32(328.60397), np.float32(329.83658), np.float32(328.20114), np.float32(328.82138), np.float32(329.52817), np.float32(328.25717), np.float32(330.1447), np.float32(327.54602), np.float32(329.8622), np.float32(328.88626), np.float32(329.0037), np.float32(329.40182), np.float32(327.27225), np.float32(330.40048), np.float32(164.96077), np.float32(162.07332), np.float32(166.90851), np.float32(162.7817), np.float32(167.18948), np.float32(164.80966), np.float32(162.34642), np.float32(165.62032), np.float32(164.44836), np.float32(165.61476), np.float32(163.81001), np.float32(164.56294), np.float32(165.15569), np.float32(164.5353), np.float32(244.52092), np.float32(318.64108), np.float32(260.02155), np.float32(330.28433), np.float32(330.29688), np.float32(258.16275), np.float32(329.19318), np.float32(327.01797), np.float32(329.72833), np.float32(329.25443), np.float32(328.02704), np.float32(330.16202), np.float32(327.11502), np.float32(329.53162), np.float32(329.08295), np.float32(328.08957), np.float32(329.60883), np.float32(327.37012), np.float32(328.64545), np.float32(328.91437), np.float32(329.8905), np.float32(328.1605), np.float32(328.84), np.float32(328.84274), np.float32(328.01645), np.float32(330.62738), np.float32(328.4843), np.float32(330.96335), np.float32(328.36877), np.float32(327.5198), np.float32(329.9857), np.float32(326.9336), np.float32(331.45697), np.float32(328.1627), np.float32(328.8487), np.float32(329.39496), np.float32(328.18652), np.float32(330.27545), np.float32(232.07675), np.float32(212.82582), np.float32(221.6658), np.float32(216.4846), np.float32(214.17348), np.float32(220.56357), np.float32(212.82983), np.float32(231.58307), np.float32(213.94127), np.float32(221.11603), np.float32(217.51482), np.float32(223.07988), np.float32(239.87657), np.float32(267.7942), np.float32(259.80743), np.float32(330.0895), np.float32(328.98465), np.float32(331.8183), np.float32(228.67725), np.float32(217.50513), np.float32(218.41669), np.float32(326.45184), np.float32(329.88797), np.float32(234.39061), np.float32(324.67557), np.float32(224.99294), np.float32(214.11082), np.float32(221.27083), np.float32(216.52701), np.float32(219.4722), np.float32(327.47815), np.float32(330.02295), np.float32(328.59818), np.float32(328.2206), np.float32(226.74387), np.float32(326.791), np.float32(218.99957), np.float32(326.91272), np.float32(328.0257), np.float32(221.75905), np.float32(210.53206), np.float32(221.36584), np.float32(517.5381), np.float32(337.0702), np.float32(332.3151), np.float32(326.97598), np.float32(223.94), np.float32(220.63774), np.float32(232.85204), np.float32(212.73788), np.float32(332.92508), np.float32(168.68283), np.float32(208.91956), np.float32(226.4837), np.float32(217.24222), np.float32(226.22754), np.float32(219.14757), np.float32(214.47287), np.float32(225.34322), np.float32(216.03494), np.float32(229.62222), np.float32(272.44595), np.float32(205.8745), np.float32(215.96106), np.float32(168.21361), np.float32(225.75967), np.float32(203.48845), np.float32(164.5996), np.float32(204.67816), np.float32(185.41293), np.float32(176.31885), np.float32(209.97292), np.float32(419.26654), np.float32(208.17262), np.float32(157.16733), np.float32(217.28275), np.float32(218.34106), np.float32(221.45604), np.float32(221.492), np.float32(217.95132), np.float32(225.46396), np.float32(219.5855), np.float32(218.09515), np.float32(222.06064), np.float32(218.26122), np.float32(216.54445), np.float32(214.74129), np.float32(214.97334), np.float32(215.73093), np.float32(208.97624), np.float32(219.37724), np.float32(209.1563), np.float32(214.25328), np.float32(216.18703), np.float32(217.04239), np.float32(226.13448), np.float32(227.42107), np.float32(229.54239), np.float32(226.12444), np.float32(488.7669), np.float32(491.56842), np.float32(491.04562), np.float32(491.65045), np.float32(491.59375), np.float32(489.4424), np.float32(245.90984), np.float32(248.19438), np.float32(255.18845), np.float32(245.8466), np.float32(244.33974), np.float32(252.10443), np.float32(241.19354), np.float32(237.32826), np.float32(247.61006), np.float32(237.54619), np.float32(238.69685), np.float32(229.34488), np.float32(678.94525), np.float32(668.79126), np.float32(662.095), np.float32(662.2862), np.float32(662.36127), np.float32(660.27954), np.float32(658.91345), np.float32(658.65063), np.float32(659.3038), np.float32(658.6602), np.float32(658.1832), np.float32(657.3764), np.float32(655.4312), np.float32(653.6312), np.float32(655.8785), np.float32(208.07974), np.float32(159.19879), np.float32(661.5377), np.float32(224.65141), np.float32(238.90994), np.float32(345.42706), np.float32(208.59105), np.float32(227.04012), np.float32(236.7545), np.float32(490.37708), np.float32(489.77133), np.float32(488.7592), np.float32(490.1172), np.float32(492.99084), np.float32(489.60312), np.float32(233.61404), np.float32(229.80504), np.float32(484.0844), np.float32(489.14386), np.float32(490.3744), np.float32(482.809), np.float32(493.47836), np.float32(161.06306), np.float32(351.2653), np.float32(348.92053), np.float32(153.05069), np.float32(881.8516), np.float32(234.71533), np.float32(490.6301), np.float32(348.79095), np.float32(200.83852), np.float32(213.8919), np.float32(159.29547), np.float32(231.41922), np.float32(220.66191), np.float32(215.11092), np.float32(216.84137), np.float32(220.11154), np.float32(213.41956), np.float32(220.99307), np.float32(214.07674), np.float32(222.21419), np.float32(444.14368), np.float32(443.3984), np.float32(443.51044), np.float32(350.9685), np.float32(352.24487), np.float32(160.9111), np.float32(185.72267), np.float32(184.26973), np.float32(514.68805), np.float32(505.63715), np.float32(494.9739), np.float32(480.6315), np.float32(484.23257), np.float32(494.22122), np.float32(493.65475), np.float32(490.7987), np.float32(486.36636), np.float32(478.82437), np.float32(468.02762), np.float32(451.47205), np.float32(440.85364), np.float32(446.3066), np.float32(435.22543), np.float32(443.6737), np.float32(435.22104), np.float32(660.9019), np.float32(660.2701), np.float32(654.9111), np.float32(657.2395), np.float32(656.3928), np.float32(662.16345), np.float32(882.89545), np.float32(874.55664), np.float32(875.251), np.float32(878.54016), np.float32(880.1702), np.float32(878.36206), np.float32(706.7283), np.float32(699.711), np.float32(862.3899), np.float32(189.11938), np.float32(163.8606), np.float32(155.27235), np.float32(672.9269), np.float32(671.54694), np.float32(686.62775), np.float32(686.507), np.float32(686.52783), np.float32(682.02673), np.float32(673.0042), np.float32(655.3841), np.float32(637.91534), np.float32(621.2193), np.float32(610.43475), np.float32(606.08453), np.float32(608.12714), np.float32(616.0281), np.float32(437.77438), np.float32(445.34796), np.float32(447.84277), np.float32(449.1375), np.float32(451.0869), np.float32(445.335), np.float32(436.86536), np.float32(422.94736), np.float32(412.42123), np.float32(423.8436), np.float32(422.785), np.float32(440.54105), np.float32(447.5396), np.float32(431.23392), np.float32(416.11673), np.float32(214.40942), np.float32(155.25175), np.float32(454.61823), np.float32(465.35144), np.float32(475.5371), np.float32(484.23398), np.float32(490.05853), np.float32(492.9213), np.float32(497.36508), np.float32(500.76648), np.float32(239.31656), np.float32(155.89076), np.float32(215.72638), np.float32(209.43289), np.float32(360.9663), np.float32(367.26605), np.float32(159.29436), np.float32(192.98923), np.float32(208.61867), np.float32(161.92386), np.float32(160.63976), np.float32(347.1628), np.float32(361.18976), np.float32(169.66484), np.float32(178.91908), np.float32(182.53593), np.float32(171.30005), np.float32(610.98834), np.float32(636.91907), np.float32(652.05597), np.float32(157.41568), np.float32(685.37683), np.float32(701.75397), np.float32(707.4551), np.float32(718.2917), np.float32(748.4877), np.float32(747.44476), np.float32(755.78687), np.float32(752.55707), np.float32(747.79675), np.float32(753.297), np.float32(757.91235), np.float32(763.0551), np.float32(769.9343), np.float32(775.1861), np.float32(777.31964), np.float32(780.6368), np.float32(782.9627), np.float32(517.53107), np.float32(510.25073), np.float32(255.39792), np.float32(235.41829), np.float32(219.6737), np.float32(226.27925), np.float32(348.93085), np.float32(348.23474), np.float32(349.39462), np.float32(253.84042), np.float32(257.9073), np.float32(264.94604), np.float32(271.68457), np.float32(565.1073), np.float32(288.44296), np.float32(585.47876), np.float32(514.2666), np.float32(511.06775), np.float32(286.26382), np.float32(278.05975), np.float32(286.68793), np.float32(272.72583), np.float32(278.13858), np.float32(288.2298), np.float32(278.47046), np.float32(284.88422), np.float32(273.70923), np.float32(262.75076), np.float32(241.89198), np.float32(532.5964), np.float32(522.851), np.float32(519.91455), np.float32(771.8634), np.float32(772.99023), np.float32(776.45026), np.float32(777.65314), np.float32(781.1527), np.float32(782.40515), np.float32(780.1018), np.float32(521.56665), np.float32(520.6871), np.float32(520.17413), np.float32(515.4194), np.float32(511.92627), np.float32(447.86725), np.float32(443.21814), np.float32(256.18463), np.float32(261.02533), np.float32(252.55849), np.float32(251.81886), np.float32(257.5745), np.float32(251.345), np.float32(285.90717), np.float32(289.6208), np.float32(175.53636), np.float32(175.18828), np.float32(173.28606), np.float32(190.08324), np.float32(173.03755), np.float32(182.61603), np.float32(170.29124), np.float32(179.71567), np.float32(171.5454), np.float32(176.60335), np.float32(171.72859), np.float32(174.31749), np.float32(174.21672), np.float32(173.96065), np.float32(173.62021), np.float32(173.47829), np.float32(178.69254), np.float32(248.3192), np.float32(253.10222), np.float32(530.6821), np.float32(533.63153), np.float32(1063.8064), np.float32(794.60474), np.float32(794.55804), np.float32(793.1467), np.float32(791.8392), np.float32(790.9494), np.float32(788.91034), np.float32(780.81824), np.float32(774.5077), np.float32(773.42535), np.float32(772.8357), np.float32(511.03186), np.float32(167.22804), np.float32(261.3416), np.float32(261.05783), np.float32(271.4971), np.float32(267.13138), np.float32(563.0067), np.float32(569.7178), np.float32(578.7091), np.float32(584.50037), np.float32(586.14264), np.float32(586.1769), np.float32(584.29083), np.float32(579.76855), np.float32(567.1901), np.float32(260.39548), np.float32(166.5015), np.float32(188.34596), np.float32(156.77377), np.float32(233.48026), np.float32(230.94234), np.float32(189.50551), np.float32(176.95912), np.float32(513.69934), np.float32(523.8758), np.float32(525.3461), np.float32(784.9661), np.float32(784.99976), np.float32(788.2929), np.float32(788.53204), np.float32(789.6849), np.float32(791.0162), np.float32(790.1191), np.float32(785.0062), np.float32(780.7282), np.float32(521.1098), np.float32(522.5781), np.float32(521.0718), np.float32(519.6771), np.float32(516.9749), np.float32(521.6022), np.float32(262.125), np.float32(254.6894), np.float32(438.38498), np.float32(441.30255), np.float32(519.26685), np.float32(263.4399), np.float32(261.81485), np.float32(441.00217), np.float32(442.54987), np.float32(523.3549), np.float32(521.18445), np.float32(523.8385), np.float32(523.73737), np.float32(352.27002), np.float32(281.2244), np.float32(286.35788), np.float32(297.59357), np.float32(297.71323), np.float32(292.52158), np.float32(293.76578), np.float32(290.0271), np.float32(286.9833), np.float32(288.17484), np.float32(583.6882), np.float32(283.16568), np.float32(587.2336), np.float32(290.43408), np.float32(285.75735), np.float32(302.10687), np.float32(289.7261), np.float32(301.5653), np.float32(284.8365), np.float32(248.86185), np.float32(157.12517), np.float32(245.92567), np.float32(161.82957), np.float32(179.83478), np.float32(169.75275), np.float32(170.22311), np.float32(178.26952), np.float32(168.82745), np.float32(175.59543), np.float32(169.64836), np.float32(190.72418), np.float32(168.8833), np.float32(182.38863), np.float32(178.45834), np.float32(248.21562), np.float32(219.04825), np.float32(185.26686), np.float32(182.71971), np.float32(190.23804), np.float32(256.2961), np.float32(236.27354), np.float32(242.72525), np.float32(246.50075), np.float32(248.521), np.float32(241.45012), np.float32(251.65779), np.float32(185.83492), np.float32(238.90106), np.float32(246.35738), np.float32(244.9745), np.float32(323.73218), np.float32(327.5124), np.float32(329.38437), np.float32(663.0517), np.float32(665.30066), np.float32(664.51056), np.float32(661.1455), np.float32(660.20984), np.float32(656.9965), np.float32(654.22955), np.float32(656.8216), np.float32(661.00714), np.float32(663.887), np.float32(664.58453), np.float32(660.6156), np.float32(654.764), np.float32(649.7955), np.float32(652.8919), np.float32(654.0934), np.float32(654.6846), np.float32(656.5461), np.float32(659.7646), np.float32(663.0357), np.float32(670.27277), np.float32(677.562), np.float32(690.66254), np.float32(697.8056), np.float32(696.39746), np.float32(700.71564), np.float32(697.64355), np.float32(691.9559), np.float32(684.113), np.float32(668.98944), np.float32(654.33856), np.float32(320.0605), np.float32(324.01718), np.float32(249.56285), np.float32(329.24756), np.float32(251.9439), np.float32(344.78195), np.float32(349.37338), np.float32(351.97018), np.float32(353.42154), np.float32(349.9108), np.float32(344.6786), np.float32(343.2894), np.float32(330.64926), np.float32(246.96169), np.float32(251.42548), np.float32(247.28764), np.float32(245.18263), np.float32(244.26657), np.float32(249.06512), np.float32(249.18892), np.float32(257.8043), np.float32(258.51102), np.float32(264.3372), np.float32(262.3626), np.float32(255.60182), np.float32(253.35922), np.float32(254.01273), np.float32(242.68057), np.float32(248.77887), np.float32(243.82054), np.float32(249.35947), np.float32(244.8643), np.float32(256.43726), np.float32(257.16263), np.float32(262.2497), np.float32(261.8456), np.float32(256.2988), np.float32(257.17755), np.float32(255.32382), np.float32(246.18478), np.float32(235.69218), np.float32(228.79132), np.float32(236.8343), np.float32(216.70612), np.float32(189.50713), np.float32(191.69174), np.float32(192.5975), np.float32(188.02896), np.float32(213.45688), np.float32(191.20743), np.float32(223.47202), np.float32(227.13454), np.float32(493.27356), np.float32(496.29224), np.float32(248.42403), np.float32(243.18301), np.float32(235.08766), np.float32(245.80302), np.float32(242.696), np.float32(324.2079), np.float32(236.68953), np.float32(248.05368), np.float32(651.3624), np.float32(650.14624), np.float32(650.58685), np.float32(653.9283), np.float32(656.5672), np.float32(659.5467), np.float32(666.20355), np.float32(670.864), np.float32(675.82635), np.float32(682.2051), np.float32(343.47775), np.float32(682.93567), np.float32(677.892), np.float32(335.35333), np.float32(332.8774), np.float32(328.92346), np.float32(328.28464), np.float32(327.37573), np.float32(325.72565), np.float32(329.8131), np.float32(331.22937), np.float32(333.87628), np.float32(337.00983), np.float32(341.78632), np.float32(345.60486), np.float32(346.97958), np.float32(348.8215), np.float32(348.8526), np.float32(687.9241), np.float32(343.30438), np.float32(325.28064), np.float32(324.5249), np.float32(327.8457), np.float32(321.69302), np.float32(325.6755), np.float32(333.7125), np.float32(324.9077), np.float32(303.96622), np.float32(291.2889), np.float32(295.72845), np.float32(294.80792), np.float32(298.38577), np.float32(292.73322), np.float32(339.93756), np.float32(351.89417), np.float32(343.79163), np.float32(492.69104), np.float32(297.40167), np.float32(493.2691), np.float32(304.40555), np.float32(493.0583), np.float32(492.68393), np.float32(493.12112), np.float32(493.8321), np.float32(491.88992), np.float32(495.19965), np.float32(494.02264), np.float32(491.51096), np.float32(319.8308), np.float32(331.0948), np.float32(328.52774), np.float32(326.5268), np.float32(494.1589), np.float32(315.82584), np.float32(491.81564), np.float32(494.26794), np.float32(327.65134), np.float32(342.48254), np.float32(334.4995), np.float32(350.68753), np.float32(195.25732), np.float32(197.30144), np.float32(188.63329), np.float32(258.7201), np.float32(348.12466), np.float32(200.42435), np.float32(189.86703), np.float32(193.48347), np.float32(195.02977), np.float32(196.28668), np.float32(194.03967), np.float32(189.92676), np.float32(194.96953), np.float32(198.65137), np.float32(197.22252), np.float32(201.90532), np.float32(202.35179), np.float32(189.4606), np.float32(193.15866), np.float32(193.9458), np.float32(194.94414), np.float32(194.3042), np.float32(195.25362), np.float32(191.99713), np.float32(195.93694), np.float32(191.5627), np.float32(198.28967), np.float32(192.25389), np.float32(196.41614), np.float32(194.38681), np.float32(198.01903), np.float32(192.86784), np.float32(192.869), np.float32(193.50964), np.float32(194.54129), np.float32(196.56052), np.float32(190.74562), np.float32(196.79587), np.float32(193.93068), np.float32(198.03033), np.float32(189.18658), np.float32(197.6325), np.float32(192.47507), np.float32(197.64452), np.float32(189.90715), np.float32(195.69557), np.float32(195.51665), np.float32(195.43942), np.float32(190.64339), np.float32(194.04745), np.float32(200.92194), np.float32(192.30035), np.float32(191.40543), np.float32(191.21086), np.float32(196.09656), np.float32(193.60643), np.float32(192.84143), np.float32(190.83485), np.float32(193.62105), np.float32(196.84245), np.float32(195.30388), np.float32(191.39825), np.float32(196.03264), np.float32(199.76141), np.float32(195.04668), np.float32(169.13574), np.float32(169.63414), np.float32(188.58249), np.float32(188.53386), np.float32(491.8296), np.float32(492.68176), np.float32(492.8512), np.float32(194.19261), np.float32(193.04893), np.float32(192.84067), np.float32(194.83952), np.float32(493.40823), np.float32(196.45299), np.float32(190.61792), np.float32(197.97223), np.float32(190.2093), np.float32(195.97565), np.float32(189.58722), np.float32(197.8687), np.float32(189.34888), np.float32(197.4142), np.float32(192.84422), np.float32(195.01425), np.float32(193.09148), np.float32(190.96327), np.float32(194.23068), np.float32(193.15074), np.float32(196.23674), np.float32(187.73744), np.float32(196.31697), np.float32(192.22922), np.float32(197.5019), np.float32(191.64957), np.float32(194.70325), np.float32(183.72662), np.float32(186.67854), np.float32(208.42613), np.float32(192.89793), np.float32(189.0655), np.float32(195.13226), np.float32(193.21422), np.float32(193.17055), np.float32(186.71591), np.float32(196.72253), np.float32(194.30542), np.float32(247.39304), np.float32(187.9635), np.float32(199.23842), np.float32(491.61356), np.float32(191.27853), np.float32(181.87407), np.float32(492.9581), np.float32(277.65097), np.float32(172.22838), np.float32(186.97025), np.float32(194.92287), np.float32(195.34473), np.float32(193.17773), np.float32(194.39056), np.float32(185.43114), np.float32(265.73685), np.float32(264.40112), np.float32(203.5954), np.float32(282.35892), np.float32(193.81941), np.float32(258.67316), np.float32(193.885), np.float32(169.05058), np.float32(192.01224), np.float32(277.23572), np.float32(510.09512), np.float32(261.6254), np.float32(205.69221), np.float32(501.24136), np.float32(291.1236), np.float32(259.47333), np.float32(249.30176), np.float32(259.9705), np.float32(221.21901), np.float32(506.42218), np.float32(237.97661), np.float32(255.14427), np.float32(246.96068), np.float32(255.84492), np.float32(297.70483), np.float32(214.52313), np.float32(256.70715), np.float32(249.63292), np.float32(251.94247), np.float32(229.22868), np.float32(258.24564), np.float32(298.3607), np.float32(259.2977), np.float32(239.81468), np.float32(256.3667), np.float32(233.0867), np.float32(247.49808), np.float32(230.17073), np.float32(256.51022), np.float32(236.0015), np.float32(237.41791), np.float32(156.09058), np.float32(264.14642), np.float32(255.71132), np.float32(255.14912), np.float32(276.11227), np.float32(299.83072), np.float32(299.10324), np.float32(280.67664), np.float32(252.81595), np.float32(263.19196), np.float32(282.74927), np.float32(302.32895), np.float32(292.70544), np.float32(153.08344), np.float32(207.70055), np.float32(182.94019), np.float32(289.7969), np.float32(185.97282), np.float32(195.43967), np.float32(185.018), np.float32(205.88011), np.float32(189.96527), np.float32(191.62868), np.float32(185.43996), np.float32(181.53441), np.float32(179.65817), np.float32(177.85301), np.float32(521.3524), np.float32(295.5505), np.float32(203.62732), np.float32(254.77496), np.float32(200.61555), np.float32(252.36897), np.float32(211.42659), np.float32(162.58603), np.float32(210.27177), np.float32(183.98543), np.float32(193.17769), np.float32(166.6156), np.float32(206.82718), np.float32(183.08987), np.float32(198.82004), np.float32(181.2383), np.float32(207.26514), np.float32(190.59471), np.float32(178.74873), np.float32(189.68726), np.float32(197.65811), np.float32(191.35823), np.float32(185.66698), np.float32(186.28133), np.float32(320.08743), np.float32(332.43948), np.float32(186.18488), np.float32(191.24382), np.float32(330.1026), np.float32(328.84564), np.float32(329.6127), np.float32(326.81613), np.float32(330.32816), np.float32(328.46118), np.float32(327.38834), np.float32(329.53876), np.float32(326.48294), np.float32(328.47263), np.float32(329.33313), np.float32(325.9677), np.float32(330.13892), np.float32(327.90744), np.float32(326.79282), np.float32(330.74255), np.float32(326.58688), np.float32(329.80753), np.float32(193.86725), np.float32(193.96848), np.float32(193.80563), np.float32(192.09868), np.float32(192.70963), np.float32(193.13269), np.float32(609.706), np.float32(617.8491), np.float32(631.10535), np.float32(638.58856), np.float32(635.5471), np.float32(639.46375), np.float32(645.16223), np.float32(651.4596), np.float32(654.7151), np.float32(657.6002), np.float32(661.2), np.float32(663.2469), np.float32(665.7881), np.float32(667.44995), np.float32(670.48773), np.float32(669.4343), np.float32(664.81287), np.float32(662.7047), np.float32(662.5903), np.float32(662.67926), np.float32(1325.6676), np.float32(195.22578), np.float32(194.10764), np.float32(1668.3496), np.float32(1673.5613), np.float32(1682.0221), np.float32(1681.4664), np.float32(1682.5863), np.float32(332.7876), np.float32(336.7365), np.float32(710.8531), np.float32(725.53406), np.float32(1861.4531), np.float32(1906.1823), np.float32(783.3991), np.float32(793.91766), np.float32(796.78204), np.float32(796.0152), np.float32(1575.3346), np.float32(1570.0824), np.float32(1568.2039), np.float32(1566.1708), np.float32(1562.5966), np.float32(1558.4614), np.float32(1553.5587), np.float32(1554.504), np.float32(1559.8492), np.float32(1561.9089), np.float32(392.7904), np.float32(1968.1201), np.float32(1974.7882), np.float32(1982.3887), np.float32(1984.2148), np.float32(1983.9232), np.float32(395.69586), np.float32(404.58978), np.float32(476.34113), np.float32(481.99158), np.float32(466.85553), np.float32(328.16998), np.float32(332.21295), np.float32(263.38687), np.float32(258.61606), np.float32(258.49277), np.float32(260.45047), np.float32(260.24042), np.float32(262.13858), np.float32(262.48932), np.float32(259.79895), np.float32(259.10043), np.float32(261.2668), np.float32(381.73065), np.float32(334.6973), np.float32(332.65637), np.float32(331.53677), np.float32(327.39886), np.float32(347.48785), np.float32(374.3637), np.float32(386.0485), np.float32(395.2595), np.float32(1574.32), np.float32(1577.1672), np.float32(793.00385), np.float32(794.1908), np.float32(795.1343), np.float32(1189.8407), np.float32(1179.7792), np.float32(1175.5455), np.float32(1175.1895), np.float32(1175.5782), np.float32(1178.1422), np.float32(1188.7432), np.float32(1197.2852), np.float32(1207.444), np.float32(1213.1107), np.float32(1218.666), np.float32(1227.8469), np.float32(1217.7059), np.float32(1196.1279), np.float32(771.1285), np.float32(760.3687), np.float32(757.7872), np.float32(765.2028), np.float32(774.69666), np.float32(789.2955), np.float32(796.9809), np.float32(799.3566), np.float32(798.10077), np.float32(794.4157), np.float32(1580.4656), np.float32(1563.6372), np.float32(1546.3007), np.float32(1530.7751), np.float32(1533.6449), np.float32(1546.8676), np.float32(1556.0895), np.float32(1567.1263), np.float32(772.10864), np.float32(967.6552), np.float32(982.13055), np.float32(980.72424), np.float32(966.92957), np.float32(920.6987), np.float32(859.5365), np.float32(821.9229), np.float32(1048.0918), np.float32(1036.824), np.float32(1032.676), np.float32(1019.32935), np.float32(1007.7838), np.float32(1003.6202), np.float32(998.9977), np.float32(994.22144), np.float32(989.33936), np.float32(985.7685), np.float32(984.77203), np.float32(984.98096), np.float32(985.1836), np.float32(983.9851), np.float32(982.12714), np.float32(981.14276), np.float32(1645.0807), np.float32(1649.1243), np.float32(1647.9332), np.float32(631.468), np.float32(629.74304), np.float32(257.574), np.float32(262.49463), np.float32(256.72748), np.float32(262.83035), np.float32(635.4188), np.float32(622.54065), np.float32(607.9885), np.float32(272.392), np.float32(259.26974), np.float32(255.54762), np.float32(260.58856), np.float32(264.45056), np.float32(263.81558), np.float32(258.84778), np.float32(260.49286), np.float32(260.02243), np.float32(259.60443), np.float32(261.38278), np.float32(261.33572), np.float32(259.10294), np.float32(261.22107), np.float32(259.66086), np.float32(259.8493), np.float32(260.5406), np.float32(259.94202), np.float32(252.40405), np.float32(329.8362), np.float32(349.9737), np.float32(583.1985), np.float32(302.6327), np.float32(600.7211), np.float32(294.33923), np.float32(302.5717), np.float32(293.49103), np.float32(294.2442), np.float32(296.69452), np.float32(584.87195), np.float32(587.0705), np.float32(589.9001), np.float32(296.96088), np.float32(299.15063), np.float32(297.67615), np.float32(297.19562), np.float32(295.93076), np.float32(296.93762), np.float32(292.86755), np.float32(291.28894), np.float32(287.6302), np.float32(279.47073), np.float32(345.1836), np.float32(272.09747), np.float32(269.20526), np.float32(521.27527), np.float32(523.1899), np.float32(524.3968), np.float32(523.2746), np.float32(515.87946), np.float32(228.03905), np.float32(224.69235), np.float32(298.33572), np.float32(292.87637), np.float32(292.59274), np.float32(294.74805), np.float32(296.9287), np.float32(294.23422), np.float32(294.58163), np.float32(299.3291), np.float32(294.86118), np.float32(297.5112), np.float32(296.57007), np.float32(296.808), np.float32(295.20297), np.float32(293.63376), np.float32(297.50943), np.float32(297.27066), np.float32(297.32315), np.float32(298.36398), np.float32(742.9287), np.float32(768.61255), np.float32(778.15826), np.float32(774.55396), np.float32(771.95593), np.float32(765.9985), np.float32(762.48267), np.float32(770.0166), np.float32(781.42267), np.float32(795.5499), np.float32(812.8947), np.float32(833.1532), np.float32(864.25275), np.float32(886.91815), np.float32(901.2024), np.float32(908.73773), np.float32(909.96436), np.float32(905.1849), np.float32(895.77203), np.float32(888.28204), np.float32(875.9365), np.float32(866.3999), np.float32(859.42456), np.float32(852.45166), np.float32(840.9498), np.float32(842.1232), np.float32(815.3004), np.float32(792.09033), np.float32(506.54932), np.float32(737.12836), np.float32(229.96889), np.float32(222.56131), np.float32(216.31906), np.float32(215.8362), np.float32(217.86998), np.float32(219.70288), np.float32(219.41988), np.float32(217.40991), np.float32(218.07819), np.float32(218.1562), np.float32(217.2384), np.float32(218.87732), np.float32(219.58182), np.float32(218.60902), np.float32(218.19977), np.float32(219.2611), np.float32(218.39937), np.float32(214.75816), np.float32(211.57597), np.float32(215.76465), np.float32(430.71875), np.float32(431.69717), np.float32(438.67175), np.float32(441.98465), np.float32(444.18903), np.float32(443.01456), np.float32(443.451), np.float32(443.82565), np.float32(441.2064), np.float32(440.22327), np.float32(217.77177), np.float32(218.0957), np.float32(218.47884), np.float32(218.43756), np.float32(220.83644), np.float32(221.46535), np.float32(222.5757), np.float32(224.22313), np.float32(223.62158), np.float32(221.42725), np.float32(220.81569), np.float32(217.65425), np.float32(215.74083), np.float32(215.85165), np.float32(353.7706), np.float32(352.7747), np.float32(352.19), np.float32(343.7376), np.float32(347.2858), np.float32(353.29953), np.float32(350.14865), np.float32(352.65417), np.float32(292.81863), np.float32(350.40643), np.float32(354.26318), np.float32(351.62384), np.float32(352.75833), np.float32(295.249), np.float32(288.74228), np.float32(353.54868), np.float32(351.7544), np.float32(353.2786), np.float32(292.45636), np.float32(288.59854), np.float32(285.84833), np.float32(350.21), np.float32(352.98596), np.float32(353.11832), np.float32(347.12885), np.float32(288.97092), np.float32(336.73346), np.float32(344.8255), np.float32(347.3605), np.float32(349.61813), np.float32(352.28333), np.float32(348.75174), np.float32(350.8395), np.float32(350.19058), np.float32(348.3591), np.float32(351.11478), np.float32(344.38434), np.float32(351.65308), np.float32(350.44073), np.float32(351.64972), np.float32(349.3485), np.float32(343.63727), np.float32(351.40955), np.float32(351.41544), np.float32(352.20895), np.float32(344.16226), np.float32(298.3672), np.float32(348.81302), np.float32(350.7754), np.float32(352.03992), np.float32(346.52768), np.float32(351.03815), np.float32(346.91583), np.float32(348.16995), np.float32(350.41327), np.float32(346.2766), np.float32(350.64148), np.float32(348.3397), np.float32(467.48206), np.float32(479.4874), np.float32(503.99915), np.float32(521.30994), np.float32(532.283), np.float32(537.74915), np.float32(804.3624), np.float32(795.5118), np.float32(783.21906), np.float32(776.6207), np.float32(1289.7484), np.float32(1292.7972), np.float32(788.2719), np.float32(797.8239), np.float32(809.39325), np.float32(819.91), np.float32(563.00195), np.float32(574.0924), np.float32(582.69696), np.float32(585.8853), np.float32(298.94366), np.float32(325.01752), np.float32(550.36554), np.float32(785.9174), np.float32(767.5764), np.float32(325.8042), np.float32(323.21075), np.float32(239.12637), np.float32(320.99976), np.float32(262.24326), np.float32(325.60934), np.float32(329.66803), np.float32(327.17776), np.float32(330.05518), np.float32(326.86157), np.float32(329.65814), np.float32(326.8829), np.float32(330.2616), np.float32(328.86023), np.float32(328.40778), np.float32(328.6581), np.float32(245.89958), np.float32(328.7198), np.float32(329.7518), np.float32(329.64886), np.float32(327.31573), np.float32(328.6563), np.float32(329.08768), np.float32(329.0928), np.float32(329.4567), np.float32(329.66245), np.float32(328.0213), np.float32(225.94257), np.float32(263.26767), np.float32(255.01657), np.float32(535.31744), np.float32(532.4235), np.float32(522.8839), np.float32(515.9845), np.float32(514.299), np.float32(514.39844), np.float32(516.9294), np.float32(517.0891), np.float32(516.74), np.float32(256.15912), np.float32(266.30746), np.float32(259.64722), np.float32(263.51785), np.float32(255.57912), np.float32(260.59628), np.float32(494.77524), np.float32(232.13376), np.float32(235.37541), np.float32(231.1722), np.float32(442.64487), np.float32(225.10643), np.float32(216.39633), np.float32(222.60321), np.float32(215.7707), np.float32(221.8215), np.float32(442.1985), np.float32(445.32535), np.float32(443.36212), np.float32(443.3191), np.float32(437.9046), np.float32(426.93817), np.float32(225.48425), np.float32(223.14735), np.float32(216.00392), np.float32(213.92477), np.float32(208.54971), np.float32(218.83742), np.float32(217.53731), np.float32(224.82771), np.float32(217.39177), np.float32(222.2293), np.float32(396.18494), np.float32(394.45505), np.float32(391.7578), np.float32(393.47592), np.float32(395.21365), np.float32(399.70233), np.float32(400.36914), np.float32(402.2138), np.float32(401.44934), np.float32(399.80215), np.float32(401.29614), np.float32(397.63483), np.float32(394.31158), np.float32(389.25494), np.float32(385.15503), np.float32(381.91724), np.float32(377.4877), np.float32(380.86417), np.float32(372.75677), np.float32(216.35109), np.float32(219.14246), np.float32(216.77577), np.float32(226.10675), np.float32(222.57397), np.float32(327.52155), np.float32(327.88773), np.float32(331.7962), np.float32(330.99966), np.float32(609.4684), np.float32(621.5903), np.float32(619.72974), np.float32(329.4024), np.float32(330.15704), np.float32(327.1608), np.float32(501.22934), np.float32(513.16565), np.float32(520.3673), np.float32(521.9304), np.float32(522.1452), np.float32(523.9011), np.float32(521.7075), np.float32(520.72424), np.float32(519.6382), np.float32(518.56946), np.float32(517.8653), np.float32(518.37915), np.float32(520.34955), np.float32(520.576), np.float32(520.8719), np.float32(522.96765), np.float32(522.7461), np.float32(522.3415), np.float32(521.6959), np.float32(520.62317), np.float32(518.09784), np.float32(516.8361), np.float32(517.71594), np.float32(517.8647), np.float32(258.50018), np.float32(257.5696), np.float32(250.7805), np.float32(257.89352), np.float32(514.57654), np.float32(516.1482), np.float32(517.49524), np.float32(522.0801), np.float32(531.21265), np.float32(539.057), np.float32(561.85175), np.float32(566.72894), np.float32(583.75446), np.float32(590.8234), np.float32(293.75372), np.float32(234.16502), np.float32(278.29227), np.float32(306.4519), np.float32(569.50757), np.float32(571.82477), np.float32(276.31326), np.float32(301.12704), np.float32(328.90558), np.float32(280.90598), np.float32(273.23895), np.float32(270.48425), np.float32(260.24194), np.float32(261.69965), np.float32(259.03406), np.float32(260.7525), np.float32(257.1809), np.float32(254.23808), np.float32(259.36786), np.float32(255.72261), np.float32(261.11203), np.float32(259.6581), np.float32(260.97858), np.float32(261.1027), np.float32(259.96512), np.float32(266.18945), np.float32(260.51248), np.float32(265.74985), np.float32(261.5818), np.float32(266.8566), np.float32(259.05475), np.float32(264.86935), np.float32(255.16904), np.float32(273.42032), np.float32(546.11743), np.float32(561.7497), np.float32(565.4817), np.float32(573.505), np.float32(583.613), np.float32(589.2655), np.float32(595.15643), np.float32(605.8187), np.float32(608.2763), np.float32(612.40094), np.float32(625.20764), np.float32(641.752), np.float32(646.28174), np.float32(652.8769), np.float32(639.81665), np.float32(618.1166), np.float32(608.1431), np.float32(593.3783), np.float32(585.4051), np.float32(578.83563), np.float32(580.96826), np.float32(584.82837), np.float32(587.55896), np.float32(589.1324), np.float32(590.46185), np.float32(591.563), np.float32(595.67914), np.float32(606.69135), np.float32(1201.1305), np.float32(599.4844), np.float32(601.16266), np.float32(1205.4591), np.float32(167.36082), np.float32(182.20064), np.float32(167.58504), np.float32(177.54814), np.float32(164.12456), np.float32(978.182), np.float32(973.1896), np.float32(966.65295), np.float32(174.49753), np.float32(169.75085), np.float32(173.09695), np.float32(167.13708), np.float32(297.20096), np.float32(166.08308), np.float32(176.72244), np.float32(165.89348), np.float32(306.38846), np.float32(333.7517), np.float32(340.84857), np.float32(1001.4532), np.float32(997.8752), np.float32(333.70743), np.float32(333.74255), np.float32(303.30313), np.float32(308.27875), np.float32(345.92084), np.float32(269.36594), np.float32(265.8956), np.float32(347.76465), np.float32(349.31824), np.float32(344.67804), np.float32(351.80237), np.float32(344.92026), np.float32(351.22522), np.float32(354.62033), np.float32(348.47855), np.float32(347.03467), np.float32(262.9744), np.float32(258.83948), np.float32(344.2537), np.float32(352.57196), np.float32(344.42725), np.float32(350.6488), np.float32(350.8374), np.float32(348.73535), np.float32(350.56674), np.float32(348.03702), np.float32(349.70386), np.float32(350.95612), np.float32(352.00027), np.float32(348.394), np.float32(347.26138), np.float32(348.75308), np.float32(350.58777), np.float32(348.12643), np.float32(347.88126), np.float32(349.28177), np.float32(350.74405), np.float32(351.8606), np.float32(166.70285), np.float32(349.83072), np.float32(348.49152), np.float32(351.3057), np.float32(347.5359), np.float32(168.013), np.float32(178.80368), np.float32(167.27644), np.float32(179.94171), np.float32(167.1915), np.float32(183.2174), np.float32(351.5419), np.float32(349.30984), np.float32(262.6678), np.float32(170.2805), np.float32(349.43408), np.float32(349.55573), np.float32(347.4691), np.float32(351.70325), np.float32(347.57004), np.float32(350.6747), np.float32(349.09988), np.float32(350.98657), np.float32(257.0181), np.float32(260.96362), np.float32(258.0652), np.float32(356.63022), np.float32(354.74814), np.float32(350.5665), np.float32(348.30786), np.float32(349.10507), np.float32(354.4267), np.float32(208.10957), np.float32(232.84428), np.float32(203.6414), np.float32(349.1119), np.float32(348.32184), np.float32(349.74338), np.float32(348.51382), np.float32(351.439), np.float32(348.9551), np.float32(348.435), np.float32(350.56796), np.float32(349.3788), np.float32(350.37198), np.float32(348.71652), np.float32(349.28796), np.float32(350.3992), np.float32(350.8119), np.float32(349.17755), np.float32(349.51114), np.float32(349.21997), np.float32(351.10132), np.float32(347.87723), np.float32(348.79068), np.float32(350.08926), np.float32(349.94202), np.float32(349.3616), np.float32(349.0592), np.float32(349.97675), np.float32(349.4999), np.float32(350.3234), np.float32(349.34433), np.float32(349.7311), np.float32(347.07306), np.float32(351.3289), np.float32(350.99176), np.float32(349.22812), np.float32(348.1085), np.float32(350.6033), np.float32(348.3466), np.float32(347.57922), np.float32(347.888), np.float32(350.38333), np.float32(349.32578), np.float32(348.29428), np.float32(348.7294), np.float32(342.8662), np.float32(349.6964), np.float32(349.11957), np.float32(349.98767), np.float32(349.87103), np.float32(348.9648), np.float32(255.29437), np.float32(350.96463), np.float32(351.1855), np.float32(348.9278), np.float32(349.48907), np.float32(347.57452), np.float32(350.57184), np.float32(349.36975), np.float32(350.63055), np.float32(348.86887), np.float32(349.44025), np.float32(348.14017), np.float32(348.8418), np.float32(350.67032), np.float32(368.6748), np.float32(393.92987), np.float32(375.4643), np.float32(389.2054), np.float32(395.2642), np.float32(394.47806), np.float32(397.41888), np.float32(390.32578), np.float32(406.73282), np.float32(265.29037), np.float32(267.43582), np.float32(266.11774), np.float32(267.68442), np.float32(1966.6116), np.float32(1965.3164), np.float32(544.3811), np.float32(539.94147), np.float32(533.64655), np.float32(527.12506), np.float32(528.52905), np.float32(526.50073), np.float32(526.0952), np.float32(528.1503), np.float32(523.88525), np.float32(520.95215), np.float32(520.6869), np.float32(522.1124), np.float32(523.36975), np.float32(773.2437), np.float32(255.68706), np.float32(241.02655), np.float32(723.8826), np.float32(704.2688), np.float32(678.67896), np.float32(659.9354), np.float32(655.5116), np.float32(653.16626), np.float32(648.3674), np.float32(328.3236), np.float32(325.15045), np.float32(327.8629), np.float32(327.70627), np.float32(327.70273), np.float32(328.89966), np.float32(327.55573), np.float32(330.1491), np.float32(329.36478), np.float32(327.67145), np.float32(187.53423), np.float32(190.07535), np.float32(196.5643), np.float32(193.4523), np.float32(196.49307), np.float32(203.08676), np.float32(206.22643), np.float32(212.02994), np.float32(440.80527), np.float32(439.6007), np.float32(439.6731), np.float32(430.9638), np.float32(190.25478), np.float32(673.54425), np.float32(674.2269), np.float32(678.3051), np.float32(685.13916), np.float32(318.41904), np.float32(192.8876), np.float32(191.97688), np.float32(196.10521), np.float32(196.53128), np.float32(196.93428), np.float32(192.36148), np.float32(191.07455), np.float32(194.13332), np.float32(194.88892), np.float32(189.5483), np.float32(195.06248), np.float32(199.31857), np.float32(193.80927), np.float32(196.31647), np.float32(194.23593), np.float32(184.73083), np.float32(258.23853), np.float32(673.1857), np.float32(677.8614), np.float32(2081.7878), np.float32(2096.1318), np.float32(334.23666), np.float32(261.65674), np.float32(261.1941), np.float32(2147.432), np.float32(264.22485), np.float32(268.65933), np.float32(273.20435), np.float32(280.09558), np.float32(279.5265), np.float32(288.58685), np.float32(279.05075), np.float32(274.2696), np.float32(261.41998), np.float32(255.99524), np.float32(256.5524), np.float32(257.61185), np.float32(262.2016), np.float32(270.581), np.float32(275.44464), np.float32(1982.5277), np.float32(564.6144), np.float32(561.834), np.float32(558.3582), np.float32(800.85364), np.float32(795.3123), np.float32(781.7168), np.float32(759.0129), np.float32(757.518), np.float32(769.0097), np.float32(774.4477), np.float32(534.4522), np.float32(394.89352), np.float32(393.27444), np.float32(798.0603), np.float32(797.4755), np.float32(394.82266), np.float32(526.20325), np.float32(518.0812), np.float32(511.53043), np.float32(497.97958), np.float32(484.98193), np.float32(482.09222), np.float32(774.94104), np.float32(778.7156), np.float32(777.5996), np.float32(774.1529), np.float32(1567.6626), np.float32(1590.7808), np.float32(1614.9412), np.float32(854.76086), np.float32(888.995), np.float32(900.6283), np.float32(914.42816), np.float32(916.0257), np.float32(918.3416), np.float32(918.15454), np.float32(904.9616), np.float32(896.4726), np.float32(896.01654), np.float32(898.20056), np.float32(585.73413), np.float32(577.35046), np.float32(575.48096), np.float32(577.3918), np.float32(323.6103), np.float32(328.05804), np.float32(329.0272), np.float32(327.87997), np.float32(328.37006), np.float32(328.01205), np.float32(336.09674), np.float32(352.2163), np.float32(520.1673), np.float32(659.5401), np.float32(659.4674), np.float32(663.31555), np.float32(210.92734), np.float32(439.18015), np.float32(435.04138), np.float32(207.67375), np.float32(196.40143), np.float32(193.92183), np.float32(195.20909), np.float32(191.42609), np.float32(192.98125), np.float32(197.20811), np.float32(195.46658), np.float32(192.42824), np.float32(193.31313), np.float32(193.11589), np.float32(194.3709), np.float32(194.99069), np.float32(261.53568), np.float32(263.06863), np.float32(403.91177), np.float32(430.6839), np.float32(440.28937), np.float32(432.98825), np.float32(417.44406), np.float32(396.408), np.float32(706.7203), np.float32(689.1353), np.float32(681.5394), np.float32(662.0119), np.float32(657.16956), np.float32(656.3141), np.float32(327.12015), np.float32(655.6947), np.float32(658.2997), np.float32(658.5444), np.float32(656.9694), np.float32(652.9616), np.float32(195.29855), np.float32(328.8118), np.float32(326.36142), np.float32(653.7558), np.float32(652.33356), np.float32(651.0192), np.float32(644.2849), np.float32(197.00954), np.float32(608.4918), np.float32(601.2048), np.float32(593.0273), np.float32(587.99347), np.float32(583.435), np.float32(581.9974), np.float32(583.66986), np.float32(581.9345), np.float32(190.58482), np.float32(191.82382), np.float32(328.1728), np.float32(327.2046), np.float32(332.8134), np.float32(190.54134), np.float32(189.3067), np.float32(194.0774), np.float32(197.86746), np.float32(191.82494), np.float32(194.13615), np.float32(195.80351), np.float32(194.66498), np.float32(193.60323), np.float32(195.28435), np.float32(190.18256), np.float32(190.42847), np.float32(442.63354), np.float32(439.85513), np.float32(282.5475), np.float32(300.3286), np.float32(299.55902), np.float32(287.57422), np.float32(304.81494), np.float32(294.06573), np.float32(288.24115), np.float32(296.26987), np.float32(294.2026), np.float32(288.66803), np.float32(305.03156), np.float32(592.92694), np.float32(594.1014), np.float32(593.2477), np.float32(593.5305), np.float32(594.6732), np.float32(282.12796), np.float32(289.0514), np.float32(300.31122), np.float32(288.53003), np.float32(301.86865), np.float32(297.2135), np.float32(289.59296), np.float32(295.5129), np.float32(302.3925), np.float32(519.22235), np.float32(515.28595), np.float32(505.83167), np.float32(496.81555), np.float32(493.6737), np.float32(232.13158), np.float32(226.56207), np.float32(349.08817), np.float32(349.7102), np.float32(349.70486), np.float32(291.2471), np.float32(289.20282), np.float32(289.99112), np.float32(290.5066), np.float32(353.4473), np.float32(296.3098), np.float32(295.05164), np.float32(295.237), np.float32(291.92365), np.float32(295.1385), np.float32(296.00043), np.float32(291.30463), np.float32(289.48077), np.float32(296.54758), np.float32(287.48148), np.float32(293.25037), np.float32(295.55554), np.float32(794.63245), np.float32(796.65814), np.float32(795.80237), np.float32(792.70636), np.float32(786.9499), np.float32(785.73364), np.float32(790.7772), np.float32(797.43524), np.float32(803.2279), np.float32(810.6411), np.float32(821.96814), np.float32(846.1372), np.float32(864.0532), np.float32(872.0095), np.float32(887.4468), np.float32(884.93774), np.float32(880.3988), np.float32(885.43384), np.float32(885.5957), np.float32(885.783), np.float32(882.8256), np.float32(883.4592), np.float32(154.92564), np.float32(351.6042), np.float32(561.95514), np.float32(555.12054), np.float32(540.2338), np.float32(519.964), np.float32(343.74576), np.float32(352.50613), np.float32(351.44168), np.float32(346.32913), np.float32(344.26718), np.float32(354.97253), np.float32(350.73605), np.float32(298.62106), np.float32(300.15668), np.float32(295.63907), np.float32(292.46753), np.float32(294.06442), np.float32(294.15176), np.float32(298.51242), np.float32(295.1741), np.float32(291.72162), np.float32(286.26822), np.float32(296.40613), np.float32(292.908), np.float32(290.37314), np.float32(291.1157), np.float32(293.7272), np.float32(295.93506), np.float32(293.80786), np.float32(294.32523), np.float32(218.00986), np.float32(438.69025), np.float32(443.7765), np.float32(444.83093), np.float32(441.76694), np.float32(438.8672), np.float32(437.84995), np.float32(436.7521), np.float32(437.80286), np.float32(441.88858), np.float32(446.71793), np.float32(227.99472), np.float32(231.43146), np.float32(471.56485), np.float32(473.10632), np.float32(237.43216), np.float32(234.48953), np.float32(446.97977), np.float32(442.37833), np.float32(438.4611), np.float32(435.64957), np.float32(441.22446), np.float32(441.90027), np.float32(225.7406), np.float32(226.99144), np.float32(226.12207), np.float32(222.1419), np.float32(227.1646), np.float32(223.90157), np.float32(353.78162), np.float32(449.4409), np.float32(292.71344), np.float32(291.69055), np.float32(351.73645), np.float32(284.5441), np.float32(285.74918), np.float32(472.46243), np.float32(468.16577), np.float32(286.49826), np.float32(294.36838), np.float32(419.00156), np.float32(410.22778), np.float32(392.26944), np.float32(289.2332), np.float32(297.92468), np.float32(396.76913), np.float32(378.71838), np.float32(376.41956), np.float32(291.71243), np.float32(380.70288), np.float32(389.8222), np.float32(388.05197), np.float32(383.26605), np.float32(390.5327), np.float32(384.30716), np.float32(386.69562), np.float32(389.0378), np.float32(400.39456), np.float32(400.97998), np.float32(402.06186), np.float32(403.63507), np.float32(402.1988), np.float32(401.3601), np.float32(402.1304), np.float32(399.8404), np.float32(397.9005), np.float32(385.73346), np.float32(397.42102), np.float32(289.22), np.float32(298.56537), np.float32(374.2096), np.float32(287.864), np.float32(296.32153), np.float32(294.91147), np.float32(288.57965), np.float32(391.17938), np.float32(290.99985), np.float32(295.07544), np.float32(291.71967), np.float32(287.97818), np.float32(289.92618), np.float32(293.32132), np.float32(299.14957), np.float32(492.43823), np.float32(498.5951), np.float32(507.2355), np.float32(502.0924), np.float32(295.96512), np.float32(514.19855), np.float32(513.68225), np.float32(518.7149), np.float32(525.9985), np.float32(526.04767), np.float32(524.6932), np.float32(525.5158), np.float32(531.1778), np.float32(527.8523), np.float32(521.9687), np.float32(516.30664), np.float32(519.1777), np.float32(217.6763), np.float32(219.25864), np.float32(213.82631), np.float32(221.81735), np.float32(217.42497), np.float32(218.84123), np.float32(221.70975), np.float32(219.3796), np.float32(219.31546), np.float32(217.14522), np.float32(217.14426), np.float32(217.17793), np.float32(219.6894), np.float32(217.01219), np.float32(221.32706), np.float32(217.1566), np.float32(218.3413), np.float32(216.78246), np.float32(217.41745), np.float32(219.96565), np.float32(215.89911), np.float32(216.93246), np.float32(215.00404), np.float32(216.40341), np.float32(217.71753), np.float32(491.14264), np.float32(519.9664), np.float32(541.88855), np.float32(552.5772), np.float32(554.3276), np.float32(566.3456), np.float32(220.41576), np.float32(215.407), np.float32(219.76958), np.float32(890.0506), np.float32(890.0821), np.float32(889.4012), np.float32(891.06836), np.float32(891.83795), np.float32(890.8541), np.float32(890.10693), np.float32(888.60834), np.float32(585.9129), np.float32(588.5774), np.float32(587.5334), np.float32(585.63696), np.float32(585.5223), np.float32(586.1336), np.float32(580.30695), np.float32(575.9493), np.float32(215.88892), np.float32(225.09659), np.float32(219.62389), np.float32(217.55092), np.float32(221.62799), np.float32(220.08586), np.float32(221.56909), np.float32(217.9528), np.float32(221.56894), np.float32(216.3701), np.float32(220.15828), np.float32(219.04956), np.float32(217.84752), np.float32(218.89973), np.float32(222.42564), np.float32(218.17805), np.float32(214.16931), np.float32(225.13434), np.float32(218.45712), np.float32(216.05309), np.float32(217.91246), np.float32(304.56497), np.float32(300.17648), np.float32(308.72028), np.float32(314.11847), np.float32(324.41718), np.float32(326.3715), np.float32(647.8626), np.float32(650.96826), np.float32(652.3987), np.float32(648.3966), np.float32(638.46027), np.float32(650.15686), np.float32(653.68353), np.float32(658.02045), np.float32(658.60345), np.float32(658.15546), np.float32(657.7458), np.float32(656.31836), np.float32(655.57495), np.float32(653.2111), np.float32(648.7848), np.float32(649.227), np.float32(652.9418), np.float32(656.7986), np.float32(656.68665), np.float32(657.31476), np.float32(651.8247), np.float32(647.9507), np.float32(225.36537), np.float32(924.65125), np.float32(913.11816), np.float32(904.2366), np.float32(899.34235), np.float32(895.0443), np.float32(896.13916), np.float32(894.26337), np.float32(891.91223), np.float32(894.308), np.float32(895.015), np.float32(895.5059), np.float32(899.8463), np.float32(910.68677), np.float32(942.53516), np.float32(955.0643), np.float32(974.50854), np.float32(981.7138), np.float32(984.08185), np.float32(989.7258), np.float32(992.20557), np.float32(993.9965), np.float32(997.05225), np.float32(992.82697), np.float32(986.8684), np.float32(983.3734), np.float32(979.37427), np.float32(975.45856), np.float32(975.6976), np.float32(980.4224), np.float32(978.8823), np.float32(977.0081), np.float32(982.40924), np.float32(988.79736), np.float32(991.07983), np.float32(983.9502), np.float32(959.8827), np.float32(932.8551), np.float32(913.864), np.float32(897.363), np.float32(892.2181), np.float32(895.49896), np.float32(902.56793), np.float32(905.9607), np.float32(1199.2733), np.float32(231.8781), np.float32(223.52328), np.float32(221.22195), np.float32(218.8971), np.float32(219.61078), np.float32(225.66289), np.float32(216.34569), np.float32(223.07239), np.float32(216.88783), np.float32(218.82162), np.float32(346.0694), np.float32(218.9736), np.float32(241.13747), np.float32(264.7537), np.float32(331.8792), np.float32(330.33984), np.float32(511.509), np.float32(510.5975), np.float32(516.6009), np.float32(525.8992), np.float32(529.9108), np.float32(352.26758), np.float32(367.73416), np.float32(368.04984), np.float32(354.35294), np.float32(517.85297), np.float32(511.86356), np.float32(510.69244), np.float32(526.7685), np.float32(511.31113), np.float32(511.0425), np.float32(257.00073), np.float32(267.03836), np.float32(254.56387), np.float32(543.0612), np.float32(540.9781), np.float32(537.92017), np.float32(547.017), np.float32(557.90576), np.float32(524.3762), np.float32(521.6594), np.float32(519.1457), np.float32(755.8786), np.float32(753.40045), np.float32(757.0693), np.float32(768.31415), np.float32(521.9604), np.float32(519.9599), np.float32(523.1015), np.float32(709.8304), np.float32(689.4799), np.float32(662.95264), np.float32(658.7254), np.float32(665.5257), np.float32(672.1345), np.float32(675.2627), np.float32(668.57324), np.float32(657.9843), np.float32(660.91583), np.float32(219.76285), np.float32(217.68091), np.float32(217.49289), np.float32(216.74342), np.float32(214.87265), np.float32(194.32645), np.float32(167.85437), np.float32(178.6791), np.float32(171.74286), np.float32(170.12152), np.float32(169.05707), np.float32(170.79774), np.float32(174.00026), np.float32(167.88432), np.float32(176.67863), np.float32(170.10196), np.float32(169.81052), np.float32(172.53421), np.float32(173.16357), np.float32(172.03513), np.float32(172.45871), np.float32(169.40887), np.float32(174.03271), np.float32(175.68376), np.float32(164.4701), np.float32(177.71616), np.float32(169.38803), np.float32(174.16464), np.float32(170.34573), np.float32(352.1608), np.float32(347.59726), np.float32(350.24023), np.float32(347.24637), np.float32(349.926), np.float32(349.1634), np.float32(348.2564), np.float32(349.59967), np.float32(349.43613), np.float32(349.49033), np.float32(347.29163), np.float32(339.50397), np.float32(334.58435), np.float32(347.31967), np.float32(350.11496), np.float32(350.65918), np.float32(350.22916), np.float32(350.17776), np.float32(349.71692), np.float32(351.02597), np.float32(349.00394), np.float32(349.09534), np.float32(350.2479), np.float32(351.48203), np.float32(348.36392), np.float32(350.4773), np.float32(350.34598), np.float32(348.95258), np.float32(348.56366), np.float32(349.37366), np.float32(349.13864), np.float32(350.18738), np.float32(349.02762), np.float32(350.26407), np.float32(350.87064), np.float32(347.38547), np.float32(351.80026), np.float32(349.17236), np.float32(350.1992), np.float32(348.26404), np.float32(193.87097), np.float32(164.00133), np.float32(193.22452), np.float32(164.0949), np.float32(188.18199), np.float32(164.89261), np.float32(188.94704), np.float32(166.24887), np.float32(183.73991), np.float32(169.12755), np.float32(180.8226), np.float32(173.29092), np.float32(171.80644), np.float32(181.99573), np.float32(752.38727), np.float32(753.1746), np.float32(755.12634), np.float32(504.55643), np.float32(509.626), np.float32(510.7661), np.float32(508.55936), np.float32(508.64178), np.float32(504.26996), np.float32(500.1515), np.float32(498.54422), np.float32(506.82297), np.float32(507.7693), np.float32(498.72775), np.float32(492.41696), np.float32(494.3297), np.float32(492.13547), np.float32(498.48044), np.float32(513.48566), np.float32(518.63043), np.float32(513.0967), np.float32(984.4031), np.float32(999.54126), np.float32(1095.4806), np.float32(1126.2483), np.float32(1163.6028), np.float32(1182.4781), np.float32(1191.9343), np.float32(1192.939), np.float32(1188.296), np.float32(1177.3163), np.float32(1171.8424), np.float32(1173.2266), np.float32(1175.3763), np.float32(1181.8799), np.float32(1198.5043), np.float32(1223.346), np.float32(1247.3947), np.float32(1292.3313), np.float32(1317.843), np.float32(1335.1354), np.float32(1341.9479), np.float32(1343.2587), np.float32(1336.7096), np.float32(1330.8928), np.float32(988.2994), np.float32(986.604), np.float32(984.87933), np.float32(1647.2811), np.float32(342.58875), np.float32(349.53973), np.float32(171.62039), np.float32(174.16342), np.float32(178.8335), np.float32(170.44049), np.float32(182.84734), np.float32(168.46904), np.float32(189.88501), np.float32(213.08812), np.float32(200.84686), np.float32(349.49945), np.float32(347.7509), np.float32(345.19278), np.float32(353.97766), np.float32(260.66733), np.float32(257.0643), np.float32(353.97043), np.float32(345.21765), np.float32(349.1041), np.float32(258.14822), np.float32(263.24808), np.float32(259.11646), np.float32(262.26053), np.float32(349.41333), np.float32(349.76413), np.float32(351.1836), np.float32(348.13574), np.float32(349.61725), np.float32(349.90353), np.float32(350.32703), np.float32(348.07162), np.float32(349.57208), np.float32(349.81854), np.float32(347.7813), np.float32(350.24106), np.float32(348.4511), np.float32(349.85666), np.float32(349.55356), np.float32(349.37506), np.float32(347.94916), np.float32(349.63504), np.float32(349.58817), np.float32(349.71994), np.float32(350.36417), np.float32(348.4621), np.float32(348.62256), np.float32(348.02222), np.float32(349.8402), np.float32(349.68018), np.float32(350.1363), np.float32(349.03326), np.float32(349.5581), np.float32(347.57785), np.float32(351.0639), np.float32(608.51636), np.float32(608.9434), np.float32(608.28326), np.float32(606.0969), np.float32(603.555), np.float32(599.201), np.float32(591.2152), np.float32(585.81946), np.float32(582.24146), np.float32(585.1181), np.float32(589.6844), np.float32(186.61072), np.float32(603.41174), np.float32(611.23114), np.float32(632.5045), np.float32(648.8274), np.float32(655.4574), np.float32(666.2886), np.float32(670.09515), np.float32(672.4269), np.float32(673.8921), np.float32(669.1353), np.float32(662.56177), np.float32(658.6322), np.float32(655.5133), np.float32(652.91956), np.float32(652.88666), np.float32(653.1736), np.float32(648.86847), np.float32(648.3854), np.float32(650.52905), np.float32(653.7536), np.float32(653.90704), np.float32(655.5794), np.float32(657.30237), np.float32(656.0622), np.float32(655.44116), np.float32(654.7977), np.float32(656.76807), np.float32(657.5186), np.float32(658.5441), np.float32(660.85425), np.float32(662.3754), np.float32(664.3093), np.float32(665.0729), np.float32(664.42926), np.float32(664.4044), np.float32(663.2201), np.float32(661.1431), np.float32(658.6335), np.float32(658.0499), np.float32(656.4387), np.float32(656.0283), np.float32(656.3224), np.float32(658.26117), np.float32(656.7299), np.float32(657.0123), np.float32(656.17035), np.float32(658.1516), np.float32(659.126), np.float32(659.023), np.float32(658.4068), np.float32(658.82495), np.float32(658.0484), np.float32(657.6651), np.float32(657.1186), np.float32(657.85785), np.float32(657.73267), np.float32(658.20087), np.float32(658.9624), np.float32(658.7101), np.float32(658.8796), np.float32(660.9449), np.float32(660.673), np.float32(659.9329), np.float32(660.6244), np.float32(659.72565), np.float32(658.8111), np.float32(658.37714), np.float32(657.82306), np.float32(657.12256), np.float32(656.9225), np.float32(657.1684), np.float32(658.05994), np.float32(657.3679), np.float32(656.47), np.float32(656.3418), np.float32(656.05035), np.float32(657.6569), np.float32(658.1943), np.float32(657.6075), np.float32(657.9776), np.float32(658.20636), np.float32(658.432), np.float32(658.3685), np.float32(658.4821), np.float32(659.2342), np.float32(659.6913), np.float32(658.8326), np.float32(658.28986), np.float32(658.8478), np.float32(658.87067), np.float32(659.30945), np.float32(659.15955), np.float32(659.0387), np.float32(658.28284), np.float32(657.88824), np.float32(658.4136), np.float32(657.5921), np.float32(657.3844), np.float32(657.8517), np.float32(657.4437), np.float32(658.43787), np.float32(657.9185), np.float32(658.13477), np.float32(658.33685), np.float32(658.17834), np.float32(657.9736), np.float32(658.20166), np.float32(658.2248), np.float32(657.6732), np.float32(657.9172), np.float32(656.9324), np.float32(657.5778), np.float32(657.54315), np.float32(657.3038), np.float32(657.3533), np.float32(657.2671), np.float32(657.0228), np.float32(656.54364), np.float32(656.8154), np.float32(658.2861), np.float32(658.35156), np.float32(658.1878), np.float32(659.15283), np.float32(660.0695), np.float32(660.0734), np.float32(660.3542), np.float32(659.7804), np.float32(659.34534), np.float32(659.67883), np.float32(659.7689), np.float32(659.5935), np.float32(659.3606), np.float32(658.72345), np.float32(658.2257), np.float32(658.28705), np.float32(658.31555), np.float32(657.7474), np.float32(657.41797), np.float32(656.8334), np.float32(656.63727), np.float32(657.0947), np.float32(656.8194), np.float32(656.58813), np.float32(657.6254), np.float32(658.46985), np.float32(656.87164), np.float32(657.9457), np.float32(657.57495), np.float32(657.59863), np.float32(658.00006), np.float32(658.0361), np.float32(657.7476), np.float32(658.7708), np.float32(658.6029), np.float32(659.6525), np.float32(659.9489), np.float32(659.6252), np.float32(659.6116), np.float32(659.76215), np.float32(660.20123), np.float32(660.07886), np.float32(660.74664), np.float32(660.5198), np.float32(660.9664), np.float32(662.59296), np.float32(662.3234), np.float32(661.0592), np.float32(659.67615), np.float32(658.774), np.float32(657.7081), np.float32(657.7147), np.float32(657.9127), np.float32(657.2417), np.float32(656.5467), np.float32(656.7448), np.float32(654.92944), np.float32(656.00116), np.float32(656.38696), np.float32(657.0195), np.float32(656.9899), np.float32(656.8631), np.float32(656.63635), np.float32(656.0021), np.float32(656.94684), np.float32(656.6764), np.float32(657.73724), np.float32(657.8506), np.float32(657.80945), np.float32(657.8795), np.float32(659.847), np.float32(659.7171), np.float32(659.274), np.float32(659.2733), np.float32(659.8887), np.float32(659.0624), np.float32(659.2477), np.float32(655.8024), np.float32(660.0515), np.float32(656.11505), np.float32(657.80493), np.float32(656.9261), np.float32(657.0485), np.float32(659.5952), np.float32(655.6381), np.float32(659.75684), np.float32(656.2558), np.float32(658.6276), np.float32(656.45215), np.float32(657.0886), np.float32(658.49414), np.float32(656.45233), np.float32(662.6867), np.float32(656.85376), np.float32(661.1223), np.float32(658.45636), np.float32(659.5742), np.float32(661.2957), np.float32(658.581), np.float32(661.0933), np.float32(660.0406), np.float32(660.7476), np.float32(662.3542), np.float32(659.44995), np.float32(660.8016), np.float32(661.40546), np.float32(659.1249), np.float32(659.5492), np.float32(660.1392), np.float32(658.26697), np.float32(658.9351), np.float32(657.2625), np.float32(658.1894), np.float32(658.25543), np.float32(658.06305), np.float32(658.76843), np.float32(656.34515), np.float32(658.6152), np.float32(657.908), np.float32(659.034), np.float32(658.1475), np.float32(657.39386), np.float32(658.67975), np.float32(656.93475), np.float32(658.6258), np.float32(654.57733), np.float32(654.87195), np.float32(656.9328), np.float32(657.0928), np.float32(659.75745), np.float32(656.1895), np.float32(659.38525), np.float32(656.7594), np.float32(658.6153), np.float32(660.68695), np.float32(658.2354), np.float32(663.0013), np.float32(659.0037), np.float32(660.40796), np.float32(661.51746), np.float32(657.3607), np.float32(660.8308), np.float32(655.85443), np.float32(657.17847), np.float32(653.5896), np.float32(652.8501), np.float32(652.0032), np.float32(651.20386), np.float32(649.62524), np.float32(652.58325), np.float32(653.51196), np.float32(657.2926), np.float32(659.0258), np.float32(661.3997), np.float32(671.3732), np.float32(671.05035), np.float32(673.41364), np.float32(673.6175), np.float32(666.8454), np.float32(660.46423), np.float32(657.2754), np.float32(653.41125), np.float32(650.5281), np.float32(650.8156), np.float32(651.60144), np.float32(355.425), np.float32(349.6111), np.float32(656.9924), np.float32(660.99677), np.float32(666.29443), np.float32(672.1746), np.float32(675.9613), np.float32(674.4437), np.float32(669.40186), np.float32(659.0636), np.float32(656.4), np.float32(658.1704), np.float32(650.37415), np.float32(655.4477), np.float32(651.74585), np.float32(652.27216), np.float32(1960.385), np.float32(663.3118), np.float32(658.1827), np.float32(662.6866), np.float32(667.4193), np.float32(661.0943), np.float32(666.20526), np.float32(664.2728), np.float32(657.4664), np.float32(660.50824), np.float32(655.1141), np.float32(657.95074), np.float32(656.87024), np.float32(1964.7683), np.float32(1965.3302), np.float32(1966.8274), np.float32(1965.5725), np.float32(654.3767), np.float32(659.1664), np.float32(655.6483), np.float32(657.395), np.float32(656.63544), np.float32(658.1231), np.float32(660.5663), np.float32(660.14435), np.float32(666.71924), np.float32(671.0799), np.float32(659.60486), np.float32(658.07684), np.float32(656.8275), np.float32(657.7472), np.float32(660.0403), np.float32(657.4363), np.float32(659.3216), np.float32(291.71796), np.float32(354.74002), np.float32(1988.2092), np.float32(288.83414), np.float32(292.3955), np.float32(655.11584), np.float32(652.99274), np.float32(347.30267), np.float32(1974.3358), np.float32(1977.5377), np.float32(658.003), np.float32(658.7676), np.float32(674.7885), np.float32(683.7696), np.float32(1996.0833), np.float32(1986.4094), np.float32(1972.2544), np.float32(1961.4543), np.float32(1950.7504), np.float32(297.29187), np.float32(656.0222), np.float32(660.5555), np.float32(674.1926), np.float32(677.2545), np.float32(687.8443), np.float32(700.23694), np.float32(714.0589), np.float32(726.601), np.float32(746.76984), np.float32(772.51654), np.float32(788.197), np.float32(797.0131), np.float32(799.68024), np.float32(794.5521), np.float32(785.4261), np.float32(773.04376), np.float32(773.8797), np.float32(771.485), np.float32(781.5475), np.float32(825.05707), np.float32(846.2957), np.float32(1006.2643), np.float32(1023.17926), np.float32(1041.0642), np.float32(1050.6334), np.float32(1050.3043), np.float32(1048.26), np.float32(292.624), np.float32(293.31772), np.float32(843.9953), np.float32(828.39124), np.float32(817.4022), np.float32(808.7062), np.float32(803.66266), np.float32(800.5868), np.float32(799.54364), np.float32(802.37335), np.float32(814.0121), np.float32(829.0497), np.float32(844.89294), np.float32(859.82404), np.float32(869.1118), np.float32(882.0448), np.float32(887.95233), np.float32(888.09064), np.float32(888.97314), np.float32(888.4824), np.float32(885.9466), np.float32(880.003), np.float32(870.9656), np.float32(870.50757), np.float32(872.2417), np.float32(872.3528), np.float32(873.49835), np.float32(874.7168), np.float32(877.68085), np.float32(879.4848), np.float32(882.7895), np.float32(884.8249), np.float32(885.74536), np.float32(884.51263), np.float32(885.2616), np.float32(886.91064), np.float32(885.3388), np.float32(885.285), np.float32(886.96686), np.float32(882.54144), np.float32(878.78516), np.float32(873.68), np.float32(871.6159), np.float32(869.1855), np.float32(872.5008), np.float32(873.95703), np.float32(873.8044), np.float32(873.06665), np.float32(872.53455), np.float32(872.78674), np.float32(873.69403), np.float32(875.95935), np.float32(879.5741), np.float32(882.0958), np.float32(883.9282), np.float32(884.7002), np.float32(884.73065), np.float32(886.2488), np.float32(886.2998), np.float32(883.6959), np.float32(879.37994), np.float32(879.572), np.float32(879.2428), np.float32(879.0234), np.float32(879.20557), np.float32(876.6289), np.float32(874.9967), np.float32(874.74915), np.float32(875.05707), np.float32(875.08307), np.float32(874.62354), np.float32(873.4467), np.float32(873.1), np.float32(874.66815), np.float32(875.40204), np.float32(874.96954), np.float32(875.51154), np.float32(875.34424), np.float32(875.0841), np.float32(876.52124), np.float32(876.401), np.float32(876.138), np.float32(878.03076), np.float32(880.8861), np.float32(881.2647), np.float32(882.28973), np.float32(882.73535), np.float32(883.57104), np.float32(883.753), np.float32(883.33954), np.float32(882.276), np.float32(880.9421), np.float32(880.53314), np.float32(879.8345), np.float32(880.4537), np.float32(878.9747), np.float32(877.6533), np.float32(878.77466), np.float32(878.7502), np.float32(877.66516), np.float32(878.2828), np.float32(878.96893), np.float32(880.67816), np.float32(883.1673), np.float32(883.1357), np.float32(881.7648), np.float32(882.6641), np.float32(881.0397), np.float32(877.68744), np.float32(875.97833), np.float32(875.90674), np.float32(877.5499), np.float32(877.8823), np.float32(877.29913), np.float32(878.0372), np.float32(877.3576), np.float32(875.6188), np.float32(875.5176), np.float32(876.07935), np.float32(877.24255), np.float32(880.746), np.float32(883.43774), np.float32(884.3817), np.float32(883.78754), np.float32(882.5757), np.float32(879.8282), np.float32(879.2507), np.float32(879.1981), np.float32(877.6581), np.float32(878.90515), np.float32(879.7501), np.float32(881.0014), np.float32(882.2104), np.float32(881.8789), np.float32(882.4917), np.float32(884.5047), np.float32(884.33887), np.float32(885.2946), np.float32(887.69116), np.float32(888.64954), np.float32(888.2444), np.float32(887.02313), np.float32(886.3225), np.float32(886.821), np.float32(886.9327), np.float32(886.4974), np.float32(885.01404), np.float32(885.2499), np.float32(884.3124), np.float32(883.1629), np.float32(882.44086), np.float32(881.74207), np.float32(881.15814), np.float32(882.1268), np.float32(882.7411), np.float32(877.22485), np.float32(871.98706), np.float32(871.3472), np.float32(873.7843), np.float32(872.9651), np.float32(872.5234), np.float32(873.48486), np.float32(875.1715), np.float32(876.3535), np.float32(877.0241), np.float32(875.0951), np.float32(874.641), np.float32(876.08417), np.float32(877.4851), np.float32(879.45557), np.float32(882.57715), np.float32(883.683), np.float32(884.1726), np.float32(883.3948), np.float32(884.40576), np.float32(885.54205), np.float32(887.36884), np.float32(888.6472), np.float32(889.50446), np.float32(890.75964), np.float32(894.1104), np.float32(897.48315), np.float32(906.86896), np.float32(917.92346), np.float32(927.7503), np.float32(946.51416), np.float32(967.93463), np.float32(985.6877), np.float32(998.15985), np.float32(1007.8169), np.float32(1023.8418), np.float32(1053.8412), np.float32(1064.4697), np.float32(1073.6753), np.float32(1074.6342), np.float32(1068.5051), np.float32(1052.1334), np.float32(1039.959), np.float32(1052.032), np.float32(1065.1782), np.float32(1080.9907), np.float32(214.4417), np.float32(224.02649), np.float32(214.48323), np.float32(1126.7), np.float32(1113.1486), np.float32(998.0589), np.float32(998.0767), np.float32(896.0972), np.float32(881.1828), np.float32(829.44214), np.float32(810.23676), np.float32(795.65424), np.float32(782.2064), np.float32(204.6459), np.float32(249.15028), np.float32(772.24097), np.float32(771.25964), np.float32(770.2069), np.float32(769.5064), np.float32(768.4598), np.float32(769.84375), np.float32(771.3241), np.float32(772.7877), np.float32(775.1322), np.float32(779.4269), np.float32(786.23926), np.float32(794.03876), np.float32(804.2127), np.float32(816.05035), np.float32(820.8597), np.float32(821.47534), np.float32(820.8066), np.float32(818.2051), np.float32(811.9252), np.float32(796.4921), np.float32(777.297), np.float32(756.7648), np.float32(747.62494), np.float32(745.0142), np.float32(743.3773), np.float32(749.0961), np.float32(756.7423), np.float32(770.12024), np.float32(785.96796), np.float32(800.0129), np.float32(817.7642), np.float32(349.386), np.float32(349.56473), np.float32(348.36765), np.float32(349.5758), np.float32(817.1448), np.float32(349.0013), np.float32(349.86133), np.float32(350.87595), np.float32(347.36127), np.float32(351.66943), np.float32(351.01413), np.float32(348.3974), np.float32(352.56787), np.float32(347.10898), np.float32(351.2511), np.float32(347.47424), np.float32(349.96265), np.float32(230.96892), np.float32(354.57306), np.float32(344.7836), np.float32(351.45804), np.float32(163.04868), np.float32(187.27354), np.float32(163.29982), np.float32(184.93106), np.float32(166.1826), np.float32(358.60654), np.float32(438.06992), np.float32(171.5155), np.float32(424.29672), np.float32(353.1444), np.float32(217.43802), np.float32(214.25826), np.float32(217.04219), np.float32(350.70706), np.float32(347.8612), np.float32(351.6353), np.float32(347.80573), np.float32(353.69794), np.float32(349.90982), np.float32(349.71854), np.float32(351.6468), np.float32(348.16052), np.float32(350.40225), np.float32(348.93173), np.float32(348.9513), np.float32(350.02774), np.float32(349.51965), np.float32(348.55057), np.float32(350.9747), np.float32(348.36783), np.float32(350.45517), np.float32(347.90848), np.float32(349.63147), np.float32(349.4504), np.float32(349.61996), np.float32(349.07236), np.float32(349.75098), np.float32(348.52255), np.float32(350.24506), np.float32(349.0208), np.float32(350.20966), np.float32(349.6602), np.float32(348.2176), np.float32(172.06491), np.float32(173.82423), np.float32(173.48428), np.float32(172.1149), np.float32(178.8101), np.float32(181.34389), np.float32(164.88913), np.float32(171.94298), np.float32(169.70976), np.float32(171.99771), np.float32(185.7897), np.float32(168.29889), np.float32(187.61322), np.float32(167.52827), np.float32(182.38506), np.float32(168.42416), np.float32(183.21988), np.float32(172.68523), np.float32(179.97804), np.float32(166.3797), np.float32(348.41138), np.float32(350.23218), np.float32(348.9727), np.float32(350.9297), np.float32(348.09933), np.float32(348.5939), np.float32(349.7052), np.float32(349.9137), np.float32(349.80438), np.float32(349.05603), np.float32(349.72845), np.float32(349.44385), np.float32(349.05954), np.float32(349.94424), np.float32(349.25415), np.float32(349.81223), np.float32(348.7836), np.float32(349.82358), np.float32(349.3286), np.float32(349.4266), np.float32(348.0662), np.float32(350.09195), np.float32(348.47287), np.float32(350.704), np.float32(349.10666), np.float32(350.3474), np.float32(348.47388), np.float32(350.01752), np.float32(349.34836), np.float32(349.77878), np.float32(349.10602), np.float32(173.50993), np.float32(172.72246), np.float32(181.17998), np.float32(167.45561), np.float32(253.89598), np.float32(438.20013), np.float32(182.47333), np.float32(167.94286), np.float32(187.96552), np.float32(168.631), np.float32(188.4464), np.float32(168.52077), np.float32(187.45859), np.float32(172.02072), np.float32(172.49113), np.float32(622.82574), np.float32(635.41394), np.float32(657.09186), np.float32(680.6159), np.float32(693.8334), np.float32(707.421), np.float32(722.2674), np.float32(741.49963), np.float32(757.4493), np.float32(777.2837), np.float32(791.9193), np.float32(799.18335), np.float32(809.4357), np.float32(818.3481), np.float32(813.5844), np.float32(1021.11035), np.float32(1044.1786), np.float32(1048.7446), np.float32(1040.2997), np.float32(1024.0812), np.float32(1002.86017), np.float32(982.11285), np.float32(348.61813), np.float32(864.1313), np.float32(804.4456), np.float32(690.48413), np.float32(636.5615), np.float32(610.79224), np.float32(600.2127), np.float32(591.7637), np.float32(588.5496), np.float32(584.9834), np.float32(587.0925), np.float32(594.2557), np.float32(604.6523), np.float32(610.7819), np.float32(623.9758), np.float32(641.40814), np.float32(653.2487), np.float32(656.64856), np.float32(661.4452), np.float32(659.776), np.float32(659.02423), np.float32(660.7052), np.float32(656.8176), np.float32(655.6133), np.float32(656.46747), np.float32(656.6406), np.float32(658.7165), np.float32(659.6504), np.float32(662.64746), np.float32(662.9226), np.float32(661.25226), np.float32(661.22186), np.float32(659.0484), np.float32(658.58905), np.float32(658.6136), np.float32(657.87524), np.float32(657.8865), np.float32(656.5127), np.float32(657.54724), np.float32(655.39264), np.float32(655.61176), np.float32(656.0762), np.float32(656.2714), np.float32(657.4712), np.float32(656.1006), np.float32(656.2591), np.float32(657.8186), np.float32(658.45795), np.float32(658.5409), np.float32(658.4439), np.float32(658.9683), np.float32(658.9544), np.float32(658.37787), np.float32(657.70526), np.float32(657.21783), np.float32(659.1962), np.float32(659.2926), np.float32(658.328), np.float32(657.31647), np.float32(659.57446), np.float32(659.08014), np.float32(658.3692), np.float32(658.4408), np.float32(659.0418), np.float32(659.17334), np.float32(659.5828), np.float32(658.5157), np.float32(658.1277), np.float32(657.8359), np.float32(657.6216), np.float32(657.7599), np.float32(658.4302), np.float32(657.95593), np.float32(657.41614), np.float32(656.8005), np.float32(657.3502), np.float32(658.3479), np.float32(658.08923), np.float32(656.16327), np.float32(656.1015), np.float32(657.4282), np.float32(657.3049), np.float32(657.31366), np.float32(657.3738), np.float32(659.1693), np.float32(659.9477), np.float32(659.7091), np.float32(659.30365), np.float32(659.6732), np.float32(660.863), np.float32(659.89545), np.float32(659.71454), np.float32(658.5515), np.float32(658.89124), np.float32(659.25397), np.float32(658.7869), np.float32(658.77045), np.float32(659.54517), np.float32(659.75476), np.float32(659.3827), np.float32(659.2719), np.float32(659.69147), np.float32(660.3214), np.float32(659.71), np.float32(659.6812), np.float32(659.769), np.float32(659.3434), np.float32(658.4667), np.float32(658.3654), np.float32(657.65436), np.float32(657.46423), np.float32(657.4443), np.float32(657.683), np.float32(658.0757), np.float32(658.1119), np.float32(658.2681), np.float32(659.22266), np.float32(659.84686), np.float32(659.8984), np.float32(659.60297), np.float32(658.42444), np.float32(658.79175), np.float32(658.86804), np.float32(658.8599), np.float32(659.3231), np.float32(658.33685), np.float32(656.76355), np.float32(656.92834), np.float32(656.1764), np.float32(655.06146), np.float32(654.3125), np.float32(655.77875), np.float32(657.54047), np.float32(657.69794), np.float32(656.5706), np.float32(656.2128), np.float32(656.33026), np.float32(657.50226), np.float32(657.62964), np.float32(658.35657), np.float32(659.1331), np.float32(659.8156), np.float32(660.6632), np.float32(660.55084), np.float32(659.95294), np.float32(660.0346), np.float32(659.6557), np.float32(658.71405), np.float32(659.3035), np.float32(659.34143), np.float32(659.5734), np.float32(659.5576), np.float32(658.6878), np.float32(658.8196), np.float32(658.95404), np.float32(659.81683), np.float32(659.5652), np.float32(657.44763), np.float32(657.1043), np.float32(657.3905), np.float32(657.8801), np.float32(657.7431), np.float32(657.6574), np.float32(657.56244), np.float32(657.32), np.float32(657.951), np.float32(658.7358), np.float32(658.98706), np.float32(658.4598), np.float32(658.7871), np.float32(658.4439), np.float32(657.7499), np.float32(657.3978), np.float32(658.5884), np.float32(657.91113), np.float32(657.4447), np.float32(657.7655), np.float32(657.47534), np.float32(657.24036), np.float32(657.7595), np.float32(657.9977), np.float32(657.99146), np.float32(657.85693), np.float32(657.71814), np.float32(657.1555), np.float32(657.17816), np.float32(656.97955), np.float32(657.51404), np.float32(657.7796), np.float32(657.67645), np.float32(656.928), np.float32(656.4641), np.float32(656.401), np.float32(656.4546), np.float32(656.88794), np.float32(656.1028), np.float32(1969.9832), np.float32(1972.5862), np.float32(1973.1763), np.float32(1972.0443), np.float32(1973.3635), np.float32(1979.7415), np.float32(662.0058), np.float32(663.8612), np.float32(662.62823), np.float32(661.5007), np.float32(660.2635), np.float32(659.972), np.float32(659.80524), np.float32(659.039), np.float32(659.36804), np.float32(660.4883), np.float32(660.5513), np.float32(658.6341), np.float32(657.4369), np.float32(656.77026), np.float32(656.04565), np.float32(657.2578), np.float32(663.71124), np.float32(655.69934), np.float32(662.0212), np.float32(657.7739), np.float32(658.0642), np.float32(660.30396), np.float32(657.6794), np.float32(664.3028), np.float32(660.0706), np.float32(660.946), np.float32(663.8684), np.float32(657.4935), np.float32(662.98425), np.float32(658.37134), np.float32(660.14307), np.float32(1976.7184), np.float32(1974.1947), np.float32(1972.0614), np.float32(1970.9135), np.float32(1971.2937), np.float32(1971.3577), np.float32(1972.5413), np.float32(1973.759), np.float32(1976.1713), np.float32(1978.0262), np.float32(658.0566), np.float32(657.7295), np.float32(657.8678), np.float32(655.32495), np.float32(655.2531), np.float32(1966.013), np.float32(1966.1044), np.float32(1966.1204), np.float32(656.2429), np.float32(656.30273), np.float32(1969.5941), np.float32(1970.8643), np.float32(1971.2307), np.float32(1972.2026), np.float32(1974.2266), np.float32(1973.4772), np.float32(1971.9556), np.float32(1973.8932), np.float32(1974.7764), np.float32(1974.4688), np.float32(1975.2598), np.float32(1977.1727), np.float32(660.0347), np.float32(658.88617), np.float32(658.8218), np.float32(665.41064), np.float32(658.29456), np.float32(657.5583), np.float32(660.8275), np.float32(656.9935), np.float32(661.2561), np.float32(657.9435), np.float32(660.3179), np.float32(662.4337), np.float32(657.83246), np.float32(662.51825), np.float32(1985.1521), np.float32(1985.1171), np.float32(1986.8344), np.float32(658.8358), np.float32(663.12695), np.float32(661.1829), np.float32(1987.1388), np.float32(1983.5549), np.float32(1982.3098), np.float32(1979.891), np.float32(1976.6808), np.float32(1974.9277), np.float32(1973.9502), np.float32(1971.3427), np.float32(1968.5072), np.float32(1968.7913), np.float32(1969.1854), np.float32(1971.0056), np.float32(1971.3312), np.float32(1971.3036), np.float32(1969.7333), np.float32(1968.0184), np.float32(1966.2407), np.float32(1965.6096), np.float32(1967.4502), np.float32(1969.2909), np.float32(1969.8142), np.float32(1969.5786), np.float32(1969.9174), np.float32(1971.2532), np.float32(1972.3707), np.float32(1972.8182), np.float32(1971.3331), np.float32(1969.5747), np.float32(1967.7097), np.float32(1964.9656), np.float32(653.0386), np.float32(651.9196), np.float32(647.30945), np.float32(645.58307), np.float32(637.3126), np.float32(632.4718), np.float32(610.7526), np.float32(295.47723), np.float32(216.36273), np.float32(220.05272), np.float32(217.48514), np.float32(217.66554), np.float32(293.43503), np.float32(295.35782), np.float32(293.2884), np.float32(220.18312), np.float32(219.12292), np.float32(603.22125), np.float32(594.9789), np.float32(220.35428), np.float32(863.5835), np.float32(864.9377), np.float32(878.074), np.float32(888.57776), np.float32(351.52548), np.float32(350.81107), np.float32(353.87488), np.float32(798.6134), np.float32(775.5663), np.float32(772.1436), np.float32(771.72577), np.float32(773.41077), np.float32(774.54944), np.float32(772.6562), np.float32(771.90857), np.float32(774.53046), np.float32(774.715), np.float32(775.0749), np.float32(779.66547), np.float32(785.3426), np.float32(288.73535), np.float32(353.68045), np.float32(301.6537), np.float32(286.9938), np.float32(289.32327), np.float32(797.6891), np.float32(353.26434), np.float32(285.8538), np.float32(801.09174), np.float32(801.198), np.float32(802.56793), np.float32(351.32617), np.float32(356.58884), np.float32(357.98383), np.float32(347.69666), np.float32(296.6924), np.float32(293.70895), np.float32(294.3195), np.float32(295.95114), np.float32(294.1088), np.float32(293.61392), np.float32(295.69452), np.float32(293.29303), np.float32(296.6926), np.float32(294.1059), np.float32(294.9253), np.float32(298.11642), np.float32(295.95255), np.float32(297.02014), np.float32(295.5126), np.float32(296.26907), np.float32(295.11908), np.float32(297.27203), np.float32(296.0846), np.float32(292.9173), np.float32(297.72186), np.float32(299.05792), np.float32(291.32632), np.float32(297.05206), np.float32(299.29214), np.float32(289.077), np.float32(293.1907), np.float32(346.14954), np.float32(290.13797), np.float32(287.95374), np.float32(291.59988), np.float32(351.44125), np.float32(350.31464), np.float32(349.06192), np.float32(290.33667), np.float32(290.79553), np.float32(352.03244), np.float32(352.14713), np.float32(351.7206), np.float32(289.82144), np.float32(290.97137), np.float32(289.81696), np.float32(353.07108), np.float32(352.08377), np.float32(353.86633), np.float32(300.2174), np.float32(294.14932), np.float32(606.1038), np.float32(206.64108), np.float32(233.04956), np.float32(236.41231), np.float32(219.09558), np.float32(220.58328), np.float32(219.74416), np.float32(223.91264), np.float32(216.06836), np.float32(219.47513), np.float32(212.76137), np.float32(224.54541), np.float32(216.9471), np.float32(217.54439), np.float32(219.91275), np.float32(216.54059), np.float32(220.96516), np.float32(215.67845), np.float32(217.94946), np.float32(216.236), np.float32(218.80635), np.float32(216.76765), np.float32(220.8257), np.float32(216.47778), np.float32(218.85344), np.float32(219.6916), np.float32(215.78444), np.float32(219.10178), np.float32(216.136), np.float32(220.85065), np.float32(216.50412), np.float32(220.03574), np.float32(216.85875), np.float32(216.33228), np.float32(219.21121), np.float32(216.49135), np.float32(220.98242), np.float32(215.31502), np.float32(219.46056), np.float32(217.79599), np.float32(217.49393), np.float32(218.34326), np.float32(215.36407), np.float32(221.02408), np.float32(216.85916), np.float32(220.01225), np.float32(216.3236), np.float32(218.93037), np.float32(217.71158), np.float32(215.29776), np.float32(210.50879), np.float32(201.99443), np.float32(290.16565), np.float32(257.894), np.float32(244.2883), np.float32(212.73712), np.float32(226.56093), np.float32(213.95854), np.float32(231.02579), np.float32(212.8226), np.float32(220.93788), np.float32(218.11882), np.float32(217.22012), np.float32(233.95047), np.float32(209.84834), np.float32(226.17932), np.float32(214.14676), np.float32(222.4029), np.float32(215.13733), np.float32(221.22058), np.float32(220.7791), np.float32(215.90106), np.float32(221.6036), np.float32(214.11493), np.float32(220.14095), np.float32(216.40724), np.float32(223.02032), np.float32(219.34135), np.float32(218.00476), np.float32(219.72095), np.float32(217.7507), np.float32(220.12788), np.float32(215.85593), np.float32(220.76527), np.float32(217.18895), np.float32(219.56046), np.float32(217.55936), np.float32(219.26228), np.float32(220.29242), np.float32(215.36658), np.float32(222.39095), np.float32(214.4011), np.float32(221.36534), np.float32(217.84004), np.float32(219.34106), np.float32(220.08893), np.float32(215.55684), np.float32(225.10748), np.float32(211.2269), np.float32(228.19615), np.float32(230.43785), np.float32(214.7169), np.float32(220.99423), np.float32(329.87912), np.float32(330.33798), np.float32(265.40967), np.float32(260.81415), np.float32(329.339), np.float32(327.25378), np.float32(329.59702), np.float32(326.73312), np.float32(330.37814), np.float32(330.77795), np.float32(326.1635), np.float32(330.34424), np.float32(328.8311), np.float32(328.62314), np.float32(328.80228), np.float32(329.31985), np.float32(328.49698), np.float32(328.93958), np.float32(329.52704), np.float32(328.6573), np.float32(329.4219), np.float32(326.9097), np.float32(330.8163), np.float32(329.8454), np.float32(327.3383), np.float32(329.3301), np.float32(327.683), np.float32(329.739), np.float32(330.0319), np.float32(328.5838), np.float32(330.0841), np.float32(328.19434), np.float32(328.0677), np.float32(329.86124), np.float32(329.34384), np.float32(328.96146), np.float32(327.93643), np.float32(327.79462), np.float32(328.18295), np.float32(659.02124), np.float32(222.93881), np.float32(214.5855), np.float32(229.42314), np.float32(220.86586), np.float32(214.61243), np.float32(219.59764), np.float32(215.69025), np.float32(209.60121), np.float32(326.96817), np.float32(330.8286), np.float32(330.18512), np.float32(330.39117), np.float32(331.0306), np.float32(330.08658), np.float32(329.5113), np.float32(327.95435), np.float32(329.23776), np.float32(328.36243), np.float32(328.89548), np.float32(330.26874), np.float32(327.00494), np.float32(330.05002), np.float32(328.5948), np.float32(328.8779), np.float32(329.7317), np.float32(327.0694), np.float32(329.30792), np.float32(328.0375), np.float32(330.37805), np.float32(328.69617), np.float32(328.5181), np.float32(328.43228), np.float32(328.5266), np.float32(330.05307), np.float32(330.04346), np.float32(328.69073), np.float32(327.24356), np.float32(328.91904), np.float32(222.45924), np.float32(329.6053), np.float32(330.00598), np.float32(327.40735), np.float32(328.5872), np.float32(222.84386), np.float32(214.75229), np.float32(224.26923), np.float32(217.32332), np.float32(215.99925), np.float32(218.20198), np.float32(216.78656), np.float32(220.18486), np.float32(213.71425), np.float32(225.22246), np.float32(217.21654), np.float32(217.96057), np.float32(218.59946), np.float32(213.07889), np.float32(514.0355), np.float32(173.28516), np.float32(347.87845), np.float32(350.87), np.float32(161.14325), np.float32(172.27545), np.float32(173.16504), np.float32(213.96198), np.float32(212.47495), np.float32(215.81175), np.float32(212.12454), np.float32(220.6125), np.float32(211.45125), np.float32(167.05), np.float32(174.02089), np.float32(171.39124), np.float32(177.9058), np.float32(173.23737), np.float32(171.25772), np.float32(168.50208), np.float32(169.35493), np.float32(172.35484), np.float32(168.50691), np.float32(176.06367), np.float32(167.38655), np.float32(178.80342), np.float32(165.1031), np.float32(174.24129), np.float32(165.84732), np.float32(177.3795), np.float32(166.95903), np.float32(173.63397), np.float32(166.22554), np.float32(173.11842), np.float32(168.5355), np.float32(169.23482), np.float32(172.52171), np.float32(168.90027), np.float32(175.32574), np.float32(164.90565), np.float32(348.41098), np.float32(165.29759), np.float32(348.0392), np.float32(168.65295), np.float32(166.72581), np.float32(351.24536), np.float32(347.2817), np.float32(349.54956), np.float32(348.7924), np.float32(349.84308), np.float32(345.65985), np.float32(344.07953), np.float32(346.42444), np.float32(348.20837), np.float32(350.20312), np.float32(350.54764), np.float32(349.1079), np.float32(349.5286), np.float32(350.89343), np.float32(349.988), np.float32(348.6096), np.float32(349.04428), np.float32(349.9353), np.float32(350.0237), np.float32(349.76202), np.float32(349.0259), np.float32(349.25278), np.float32(349.23093), np.float32(349.61658), np.float32(348.51083), np.float32(350.09927), np.float32(167.57164), np.float32(171.87633), np.float32(349.03784), np.float32(172.54028), np.float32(175.73724), np.float32(166.05952), np.float32(175.10074), np.float32(167.26031), np.float32(175.70787), np.float32(169.21944), np.float32(175.40398), np.float32(170.27007), np.float32(168.90263), np.float32(175.89297), np.float32(167.7322), np.float32(528.69946), np.float32(166.3671), np.float32(181.25107), np.float32(164.84737), np.float32(184.41116), np.float32(261.97455), np.float32(261.80997), np.float32(264.37863), np.float32(259.6032), np.float32(271.151), np.float32(259.02283), np.float32(272.55264), np.float32(287.7905), np.float32(282.8589), np.float32(266.3948), np.float32(257.80023), np.float32(217.03), np.float32(210.7556), np.float32(246.36868), np.float32(255.8918), np.float32(248.06154), np.float32(255.63705), np.float32(258.74823), np.float32(275.94437), np.float32(285.84042), np.float32(289.27155), np.float32(345.9048), np.float32(605.22144), np.float32(605.21246), np.float32(898.6642), np.float32(902.15106), np.float32(1201.2335), np.float32(1197.1412), np.float32(1194.1405), np.float32(1190.3138), np.float32(1189.3706), np.float32(1196.3563), np.float32(1195.398), np.float32(1200.9622), np.float32(1226.0398), np.float32(1274.343), np.float32(984.62585), np.float32(990.17035), np.float32(999.0994), np.float32(1000.00916), np.float32(1330.9421), np.float32(1318.3423), np.float32(1313.4878), np.float32(978.1388), np.float32(345.5773), np.float32(252.38112), np.float32(633.8918), np.float32(338.551), np.float32(224.31288), np.float32(352.13736), np.float32(350.04065), np.float32(347.49106), np.float32(349.49112), np.float32(348.85336), np.float32(350.2354), np.float32(349.37476), np.float32(348.29105), np.float32(347.9725), np.float32(348.92297), np.float32(349.662), np.float32(352.0229), np.float32(325.6406), np.float32(316.01572), np.float32(260.84802), np.float32(253.78197), np.float32(314.02316), np.float32(444.39325), np.float32(442.61234), np.float32(442.4883), np.float32(440.1169), np.float32(437.51273), np.float32(261.60162), np.float32(258.63724), np.float32(248.8515), np.float32(351.21613), np.float32(528.7014), np.float32(427.98624), np.float32(523.1209), np.float32(183.30609), np.float32(177.84204), np.float32(179.1185), np.float32(175.48354), np.float32(348.99698), np.float32(350.6209), np.float32(170.53322), np.float32(348.64682), np.float32(175.33075), np.float32(177.02812), np.float32(177.24892), np.float32(173.01682), np.float32(348.1489), np.float32(349.47214), np.float32(349.60922), np.float32(350.93085), np.float32(348.96646), np.float32(172.1491), np.float32(174.99231), np.float32(174.5987), np.float32(175.76158), np.float32(174.1823), np.float32(174.06342), np.float32(262.77667), np.float32(262.17758), np.float32(261.54672), np.float32(543.68036), np.float32(540.0758), np.float32(538.3459), np.float32(513.3396), np.float32(183.22098), np.float32(185.16695), np.float32(508.88437), np.float32(515.4741), np.float32(522.5516), np.float32(190.8295), np.float32(184.94977), np.float32(518.5986), np.float32(519.20917), np.float32(256.63983), np.float32(188.05165), np.float32(264.43326), np.float32(262.72363), np.float32(552.6048), np.float32(581.98346), np.float32(538.6145), np.float32(263.98923), np.float32(262.3673), np.float32(260.68204), np.float32(259.2353), np.float32(258.60193), np.float32(260.75262), np.float32(258.71262), np.float32(259.97067), np.float32(258.60437), np.float32(258.16425), np.float32(261.13974), np.float32(530.3669), np.float32(539.40094), np.float32(190.88475), np.float32(196.45601), np.float32(193.80045), np.float32(191.7195), np.float32(514.42346), np.float32(513.1782), np.float32(511.9608), np.float32(250.76547), np.float32(202.27682), np.float32(204.76724), np.float32(202.81943), np.float32(195.67111), np.float32(189.81314), np.float32(188.95242), np.float32(194.00385), np.float32(199.54045), np.float32(193.36711), np.float32(191.52379), np.float32(198.73245), np.float32(204.56833), np.float32(203.82285), np.float32(517.17377), np.float32(518.25555), np.float32(209.1069), np.float32(204.21213), np.float32(195.15144), np.float32(196.67043), np.float32(197.15671), np.float32(193.02472), np.float32(189.43208), np.float32(191.18413), np.float32(194.68439), np.float32(261.10257), np.float32(261.1661), np.float32(260.7806), np.float32(264.9647), np.float32(263.0657), np.float32(268.36783), np.float32(398.28168), np.float32(397.68588), np.float32(394.0917), np.float32(202.51416), np.float32(200.62737), np.float32(191.22153), np.float32(262.80322), np.float32(257.168), np.float32(202.59369), np.float32(191.32043), np.float32(186.14252), np.float32(198.6779), np.float32(199.85909), np.float32(187.16943), np.float32(397.8929), np.float32(276.90588), np.float32(196.39514), np.float32(203.5745), np.float32(194.2351), np.float32(195.68898), np.float32(202.38466), np.float32(186.99069), np.float32(188.0623), np.float32(196.42361), np.float32(193.10675), np.float32(191.301), np.float32(260.73874), np.float32(253.77863), np.float32(190.86696), np.float32(782.90674), np.float32(781.9383), np.float32(190.99377), np.float32(197.12177), np.float32(189.98209), np.float32(191.73131), np.float32(199.14891), np.float32(176.80186), np.float32(339.89258), np.float32(331.4671), np.float32(185.12872), np.float32(329.67993), np.float32(264.2357), np.float32(327.69858), np.float32(329.37317), np.float32(330.27026), np.float32(327.94278), np.float32(329.44107), np.float32(328.94885), np.float32(329.3672), np.float32(328.85956), np.float32(327.8639), np.float32(328.46893), np.float32(329.53244), np.float32(328.2198), np.float32(328.92847), np.float32(329.46298), np.float32(327.6299), np.float32(329.14197), np.float32(329.761), np.float32(329.0159), np.float32(328.4013), np.float32(327.77313), np.float32(330.0812), np.float32(329.21722), np.float32(328.79327), np.float32(330.39792), np.float32(327.26736), np.float32(328.43744), np.float32(330.67813), np.float32(328.942), np.float32(329.01328), np.float32(329.7504), np.float32(326.08624), np.float32(331.58414), np.float32(330.54086), np.float32(331.5531), np.float32(259.31702), np.float32(262.6079), np.float32(258.3469), np.float32(257.89468), np.float32(260.2086), np.float32(261.2083), np.float32(257.33557), np.float32(260.8957), np.float32(180.2102), np.float32(257.5309), np.float32(265.61392), np.float32(259.00305), np.float32(257.73877), np.float32(261.36588), np.float32(255.03929), np.float32(259.1001), np.float32(261.97797), np.float32(259.9966), np.float32(261.04865), np.float32(260.98257), np.float32(253.59453), np.float32(259.13693), np.float32(259.7663), np.float32(258.48254), np.float32(259.3546), np.float32(260.08334), np.float32(262.25836), np.float32(261.2443), np.float32(261.85126), np.float32(257.36374), np.float32(262.79), np.float32(186.03122), np.float32(257.85477), np.float32(261.5946), np.float32(265.6928), np.float32(257.4628), np.float32(268.11722), np.float32(268.4365), np.float32(326.20163), np.float32(266.48383), np.float32(180.46765), np.float32(256.98312), np.float32(263.46936), np.float32(331.92603), np.float32(194.85931), np.float32(513.62054), np.float32(253.8353), np.float32(263.6714), np.float32(346.8125), np.float32(367.56775), np.float32(271.54578), np.float32(657.1662), np.float32(248.56664), np.float32(271.07242), np.float32(257.47006), np.float32(259.56863), np.float32(261.6446), np.float32(512.1723), np.float32(508.3116), np.float32(400.39572), np.float32(379.7808), np.float32(154.0868), np.float32(434.91177), np.float32(443.1725), np.float32(346.86523), np.float32(347.37085), np.float32(442.1561), np.float32(440.4056), np.float32(349.63852), np.float32(351.775), np.float32(347.56387), np.float32(352.51724), np.float32(347.88223), np.float32(350.01013), np.float32(350.59555), np.float32(350.68933), np.float32(351.422), np.float32(346.07755), np.float32(349.16934), np.float32(350.09747), np.float32(348.1327), np.float32(350.75885), np.float32(350.5466), np.float32(346.24863), np.float32(350.10577), np.float32(345.8741), np.float32(351.74017), np.float32(348.3309), np.float32(346.81683), np.float32(352.82724), np.float32(347.47415), np.float32(290.1895), np.float32(292.81427), np.float32(295.3019), np.float32(290.32013), np.float32(304.1297), np.float32(291.28198), np.float32(292.16995), np.float32(296.5622), np.float32(291.2662), np.float32(291.66708), np.float32(294.42145), np.float32(292.66052), np.float32(291.72183), np.float32(290.96597), np.float32(291.6159), np.float32(294.6409), np.float32(296.27368), np.float32(292.71582), np.float32(291.13864), np.float32(294.36392), np.float32(291.51935), np.float32(292.60785), np.float32(295.49106), np.float32(293.80124), np.float32(289.85806), np.float32(293.645), np.float32(295.36578), np.float32(292.05948), np.float32(296.21405), np.float32(289.84036), np.float32(288.351), np.float32(291.59235), np.float32(291.28467), np.float32(298.12543), np.float32(154.81227), np.float32(289.33914), np.float32(288.94028), np.float32(290.54456), np.float32(296.99152), np.float32(289.9245), np.float32(292.8956), np.float32(288.20978), np.float32(153.43573), np.float32(294.43356), np.float32(293.0136), np.float32(294.1723), np.float32(293.39502), np.float32(287.62482), np.float32(293.81693), np.float32(296.19934), np.float32(290.96536), np.float32(295.25967), np.float32(292.4482), np.float32(288.38412), np.float32(154.85632), np.float32(162.6643), np.float32(292.78308), np.float32(160.4312), np.float32(181.77596), np.float32(878.80817), np.float32(164.65952), np.float32(285.39774), np.float32(881.15625), np.float32(287.49985), np.float32(294.98624), np.float32(163.46683), np.float32(287.7137), np.float32(301.94086), np.float32(199.61926), np.float32(297.88583), np.float32(161.27415), np.float32(204.29303), np.float32(347.7005), np.float32(350.297), np.float32(352.82794), np.float32(349.85583), np.float32(350.30402), np.float32(349.56448), np.float32(349.43997), np.float32(349.9003), np.float32(348.35458), np.float32(350.55658), np.float32(346.1393), np.float32(347.6107), np.float32(349.54816), np.float32(351.0239), np.float32(152.49643), np.float32(346.12592), np.float32(347.5709), np.float32(349.22305), np.float32(353.15826), np.float32(349.4332), np.float32(344.04398), np.float32(153.67563), np.float32(349.15057), np.float32(441.5266), np.float32(441.3238), np.float32(440.99637), np.float32(153.1307), np.float32(440.05167), np.float32(439.7171), np.float32(441.24936), np.float32(441.7702), np.float32(283.92163), np.float32(441.9388), np.float32(442.72205), np.float32(159.22069), np.float32(440.70593), np.float32(440.43198), np.float32(618.0655), np.float32(607.0891), np.float32(597.3247), np.float32(590.88947), np.float32(585.7917), np.float32(585.3225), np.float32(589.8414), np.float32(592.08545), np.float32(592.2833), np.float32(590.4931), np.float32(590.95734), np.float32(593.824), np.float32(597.5892), np.float32(600.69135), np.float32(605.1056), np.float32(613.8752), np.float32(628.6413), np.float32(637.5022), np.float32(634.8377), np.float32(634.54175), np.float32(638.9418), np.float32(637.9204), np.float32(632.7087), np.float32(621.59467), np.float32(607.55566), np.float32(594.4767), np.float32(593.5149), np.float32(589.2811), np.float32(585.75287), np.float32(586.49243), np.float32(586.22906), np.float32(586.9396), np.float32(585.3491), np.float32(584.485), np.float32(584.2689), np.float32(585.30664), np.float32(585.8797), np.float32(588.86755), np.float32(589.8124), np.float32(591.71783), np.float32(590.5464), np.float32(588.6423), np.float32(587.45276), np.float32(584.4557), np.float32(584.9555), np.float32(584.98193), np.float32(585.37213), np.float32(587.721), np.float32(586.32684), np.float32(585.30414), np.float32(585.9469), np.float32(585.9892), np.float32(586.67896), np.float32(586.06604), np.float32(585.367), np.float32(584.86633), np.float32(584.6428), np.float32(584.131), np.float32(585.21027), np.float32(584.76416), np.float32(583.934), np.float32(583.1514), np.float32(583.90515), np.float32(584.80084), np.float32(583.39264), np.float32(582.49963), np.float32(583.3738), np.float32(581.41254), np.float32(583.97406), np.float32(585.6819), np.float32(587.2267), np.float32(587.6063), np.float32(587.2829), np.float32(589.1673), np.float32(587.1093), np.float32(586.54987), np.float32(587.04474), np.float32(586.67725), np.float32(587.5046), np.float32(585.62146), np.float32(584.06396), np.float32(584.5019), np.float32(583.78174), np.float32(585.9593), np.float32(586.0992), np.float32(587.6124), np.float32(587.5567), np.float32(586.17896), np.float32(587.40796), np.float32(586.9237), np.float32(586.63763), np.float32(587.79095), np.float32(587.01263), np.float32(586.9312), np.float32(586.7126), np.float32(587.6656), np.float32(587.78235), np.float32(586.4411), np.float32(587.3109), np.float32(585.3427), np.float32(584.55316), np.float32(584.4409), np.float32(584.15344), np.float32(585.02234), np.float32(585.9791), np.float32(585.3194), np.float32(587.1028), np.float32(587.9577), np.float32(592.2657), np.float32(598.0597), np.float32(1193.4481), np.float32(605.85803), np.float32(601.276), np.float32(600.2069), np.float32(600.31866), np.float32(600.4088), np.float32(598.85754), np.float32(589.85956), np.float32(579.8374), np.float32(571.9962), np.float32(572.9402), np.float32(572.8648), np.float32(575.0642), np.float32(580.3867), np.float32(587.4841), np.float32(594.5879), np.float32(605.5954), np.float32(609.3667), np.float32(612.8238), np.float32(628.7895), np.float32(634.01154), np.float32(617.0758), np.float32(604.2656), np.float32(597.59503), np.float32(591.64374), np.float32(581.0205), np.float32(566.51526), np.float32(577.2354), np.float32(575.57635), np.float32(572.47015), np.float32(581.26666), np.float32(587.8246), np.float32(601.0273), np.float32(612.7393), np.float32(621.66235), np.float32(624.0677), np.float32(615.8113), np.float32(604.37604), np.float32(600.62994), np.float32(596.3473), np.float32(575.5158), np.float32(579.8125), np.float32(580.8206), np.float32(567.7566), np.float32(570.4031), np.float32(581.32587), np.float32(586.0053), np.float32(587.506), np.float32(593.09753), np.float32(614.03046), np.float32(609.71075), np.float32(608.53015), np.float32(610.0346), np.float32(609.9136), np.float32(606.6392), np.float32(603.5273), np.float32(595.1165), np.float32(588.11633), np.float32(578.61664), np.float32(580.8612), np.float32(581.3692), np.float32(330.008), np.float32(328.178), np.float32(328.915), np.float32(329.8663), np.float32(326.67517), np.float32(591.295), np.float32(587.62585), np.float32(328.6153), np.float32(329.23404), np.float32(578.02423), np.float32(569.4527), np.float32(328.24243), np.float32(542.0403), np.float32(544.27936), np.float32(328.50385), np.float32(328.18253), np.float32(328.98566), np.float32(330.16513), np.float32(327.84888), np.float32(329.80228), np.float32(327.84488), np.float32(328.9352), np.float32(220.59328), np.float32(216.73834), np.float32(224.57123), np.float32(218.046), np.float32(220.01538), np.float32(219.50237), np.float32(216.73892), np.float32(219.9899), np.float32(218.46909), np.float32(223.92302), np.float32(217.16971), np.float32(217.97063), np.float32(217.69926), np.float32(219.72572), np.float32(218.91022), np.float32(218.14459), np.float32(220.3659), np.float32(214.99208), np.float32(218.43266), np.float32(216.19301), np.float32(220.73663), np.float32(214.51134), np.float32(218.54503), np.float32(224.42809), np.float32(217.36223), np.float32(224.90881), np.float32(219.28209), np.float32(218.02505), np.float32(220.63268), np.float32(215.07422), np.float32(222.05884), np.float32(214.45267), np.float32(219.42747), np.float32(222.22679), np.float32(223.55646), np.float32(215.19705), np.float32(217.16522), np.float32(220.45572), np.float32(213.02235), np.float32(221.52737), np.float32(218.31253), np.float32(218.2665), np.float32(218.02022), np.float32(222.39189), np.float32(216.46497), np.float32(220.35863), np.float32(215.19482), np.float32(218.7092), np.float32(228.85907), np.float32(218.13301), np.float32(218.80733), np.float32(211.91896), np.float32(273.35706), np.float32(220.94624), np.float32(225.28246), np.float32(221.55522), np.float32(217.5726), np.float32(214.36778), np.float32(225.63808), np.float32(219.33395), np.float32(207.6135), np.float32(222.94528), np.float32(222.07439), np.float32(224.9086), np.float32(225.52501), np.float32(215.08559), np.float32(219.95242), np.float32(213.87547), np.float32(214.32196), np.float32(214.611), np.float32(256.25476), np.float32(172.09518), np.float32(170.13693), np.float32(180.39417), np.float32(169.7807), np.float32(173.50868), np.float32(170.66974), np.float32(173.5462), np.float32(348.54666), np.float32(249.54834), np.float32(350.37177), np.float32(257.1449), np.float32(257.8573), np.float32(350.0616), np.float32(167.12706), np.float32(174.77402), np.float32(175.68929), np.float32(172.65132), np.float32(170.30946), np.float32(170.11072), np.float32(166.26546), np.float32(177.7713), np.float32(177.30116), np.float32(174.02596), np.float32(171.75734), np.float32(170.80305), np.float32(170.7971), np.float32(170.34436), np.float32(171.71494), np.float32(173.37119), np.float32(172.28778), np.float32(170.89804), np.float32(170.76778), np.float32(175.02956), np.float32(167.23227), np.float32(171.0819), np.float32(174.80565), np.float32(169.0545), np.float32(172.6041), np.float32(175.32774), np.float32(169.28589), np.float32(170.27348), np.float32(174.65842), np.float32(170.15889), np.float32(169.43987), np.float32(172.22615), np.float32(171.72151), np.float32(173.88283), np.float32(172.73975), np.float32(170.4912), np.float32(171.34056), np.float32(169.2063), np.float32(169.6067), np.float32(175.14932), np.float32(171.18997), np.float32(173.48526), np.float32(169.81456), np.float32(182.36165), np.float32(171.60555), np.float32(168.35075), np.float32(177.24416), np.float32(171.70229), np.float32(176.46082), np.float32(171.59659), np.float32(253.94502), np.float32(173.23639), np.float32(174.66263), np.float32(168.19711), np.float32(173.43893), np.float32(174.43759), np.float32(176.29477), np.float32(171.81621), np.float32(172.343), np.float32(169.57976), np.float32(171.21136), np.float32(176.63167), np.float32(172.234), np.float32(172.99608), np.float32(167.5823), np.float32(177.56383), np.float32(170.72379), np.float32(172.53448), np.float32(168.4228), np.float32(167.64665), np.float32(177.84781), np.float32(175.64618), np.float32(173.73512), np.float32(172.73505), np.float32(170.60164), np.float32(164.59363), np.float32(166.9616), np.float32(161.45436), np.float32(164.89232), np.float32(180.52032), np.float32(165.44333), np.float32(172.64671), np.float32(167.35889), np.float32(184.10376), np.float32(355.11856), np.float32(169.83737), np.float32(168.74973), np.float32(182.90945), np.float32(164.40126), np.float32(161.26912), np.float32(177.19113), np.float32(166.0195), np.float32(170.79904), np.float32(170.33295), np.float32(174.40192), np.float32(167.79726), np.float32(170.78082), np.float32(169.78146), np.float32(167.63881), np.float32(175.61488), np.float32(173.02263), np.float32(172.16075), np.float32(169.51709), np.float32(176.6353), np.float32(169.378), np.float32(169.61145), np.float32(170.27274), np.float32(169.76756), np.float32(182.0042), np.float32(168.69012), np.float32(178.77913), np.float32(169.71877), np.float32(174.74371), np.float32(169.8246), np.float32(170.95807), np.float32(172.772), np.float32(174.82867), np.float32(179.04456), np.float32(170.09618), np.float32(172.40887), np.float32(168.73868), np.float32(183.4663), np.float32(168.10823), np.float32(181.65143), np.float32(166.0357), np.float32(183.27869), np.float32(165.94261), np.float32(188.60327), np.float32(165.8426), np.float32(179.80225), np.float32(175.27525), np.float32(185.48083), np.float32(185.24712), np.float32(175.27077), np.float32(190.53766), np.float32(167.70782), np.float32(189.76195), np.float32(166.27725), np.float32(188.69849), np.float32(167.94205), np.float32(177.88365), np.float32(169.87743), np.float32(175.68015), np.float32(173.80937), np.float32(174.01974), np.float32(171.08345), np.float32(172.32115), np.float32(175.3869), np.float32(171.9426), np.float32(174.70282), np.float32(170.21349), np.float32(174.7123), np.float32(168.83325), np.float32(176.90968), np.float32(170.97026), np.float32(175.1709), np.float32(172.6928), np.float32(174.43738), np.float32(172.46498), np.float32(173.39162), np.float32(172.9279), np.float32(172.5624), np.float32(176.19905), np.float32(171.57732), np.float32(174.85243), np.float32(171.51408), np.float32(175.73445), np.float32(170.95367), np.float32(174.89798), np.float32(171.00452), np.float32(174.9418), np.float32(173.00981), np.float32(175.55295), np.float32(173.88185), np.float32(176.0869), np.float32(173.55376), np.float32(172.11781), np.float32(174.5222), np.float32(170.92365), np.float32(175.57748), np.float32(171.965), np.float32(179.51654), np.float32(172.24022), np.float32(178.70155), np.float32(171.05257), np.float32(175.64989), np.float32(170.78226), np.float32(177.35213), np.float32(171.84027), np.float32(175.63565), np.float32(177.83531), np.float32(172.93256), np.float32(176.16725), np.float32(171.58199), np.float32(177.14072), np.float32(170.98756), np.float32(179.9058), np.float32(169.76537), np.float32(178.58047), np.float32(168.23358), np.float32(178.3855), np.float32(170.74713), np.float32(174.64189), np.float32(171.38667), np.float32(174.60689), np.float32(174.62834), np.float32(173.60655), np.float32(175.39705), np.float32(170.42596), np.float32(176.79074), np.float32(171.60583), np.float32(176.85735), np.float32(169.03322), np.float32(178.8228), np.float32(169.8547), np.float32(179.48885), np.float32(168.41237), np.float32(177.31705), np.float32(169.7252), np.float32(173.5948), np.float32(173.81596), np.float32(157.50755), np.float32(182.08595), np.float32(350.9599), np.float32(189.43571), np.float32(351.3066), np.float32(187.5702), np.float32(157.6645), np.float32(185.49431), np.float32(786.6412), np.float32(185.40317), np.float32(784.5956), np.float32(183.41632), np.float32(162.16623), np.float32(170.99243), np.float32(176.07027), np.float32(175.4349), np.float32(170.12955), np.float32(169.7097), np.float32(177.19223), np.float32(166.7199), np.float32(179.73615), np.float32(167.85143), np.float32(176.16621), np.float32(166.54254), np.float32(179.06586), np.float32(167.52174), np.float32(175.88043), np.float32(167.7255), np.float32(174.10435), np.float32(172.59677), np.float32(171.30226), np.float32(173.48549), np.float32(168.6018), np.float32(178.11324), np.float32(165.81294), np.float32(176.81705), np.float32(164.70969), np.float32(178.27028), np.float32(168.91885), np.float32(177.48792), np.float32(172.74521), np.float32(175.29921), np.float32(172.69887), np.float32(172.4072), np.float32(175.34557), np.float32(170.88647), np.float32(178.0213), np.float32(168.75456), np.float32(177.61319), np.float32(167.91666), np.float32(179.86372), np.float32(170.55968), np.float32(178.30013), np.float32(165.54869), np.float32(174.92354), np.float32(170.61424), np.float32(176.18326), np.float32(175.13583), np.float32(166.75307), np.float32(176.86879), np.float32(165.04558), np.float32(179.84631), np.float32(165.8953), np.float32(179.36249), np.float32(162.49413), np.float32(179.7421), np.float32(161.29782), np.float32(175.59824), np.float32(161.34972), np.float32(176.68108), np.float32(159.5591), np.float32(171.02235), np.float32(171.54224), np.float32(163.58852), np.float32(178.61755), np.float32(158.7216), np.float32(181.83511), np.float32(161.5568), np.float32(181.97081), np.float32(162.30112), np.float32(180.20216), np.float32(156.57434), np.float32(180.59267), np.float32(784.94116), np.float32(782.86786), np.float32(251.12181), np.float32(782.9579), np.float32(182.50357), np.float32(786.0942), np.float32(184.28387), np.float32(785.7903), np.float32(188.31807), np.float32(785.09467), np.float32(189.59671), np.float32(263.66895), np.float32(235.27495), np.float32(215.41415), np.float32(520.7484), np.float32(438.74936), np.float32(252.05394), np.float32(265.67395), np.float32(254.4568), np.float32(520.0987), np.float32(247.83878), np.float32(443.85764), np.float32(439.31366), np.float32(520.9974), np.float32(522.9627), np.float32(229.40999), np.float32(205.63596), np.float32(234.56364), np.float32(208.94243), np.float32(220.85342), np.float32(208.80687), np.float32(785.8939), np.float32(210.43823), np.float32(211.7073), np.float32(220.8454), np.float32(786.3168), np.float32(784.8713), np.float32(785.6093), np.float32(784.2198), np.float32(211.27032), np.float32(784.89575), np.float32(211.76549), np.float32(218.49207), np.float32(214.2185), np.float32(214.88153), np.float32(214.7175), np.float32(213.38463), np.float32(223.42963), np.float32(217.64894), np.float32(212.80945), np.float32(213.64401), np.float32(216.65385), np.float32(211.26587), np.float32(216.92574), np.float32(784.80304), np.float32(210.00473), np.float32(204.89311), np.float32(215.69539), np.float32(200.48125), np.float32(227.42271), np.float32(201.51176), np.float32(225.91277), np.float32(200.83148), np.float32(225.55507), np.float32(202.31274), np.float32(187.97408), np.float32(205.24986), np.float32(214.25085), np.float32(210.15218), np.float32(210.32593), np.float32(216.75723), np.float32(207.04266), np.float32(220.57169), np.float32(206.50554), np.float32(219.74928), np.float32(205.11417), np.float32(214.17947), np.float32(205.26283), np.float32(219.02872), np.float32(209.10384), np.float32(209.02502), np.float32(217.2583), np.float32(205.82309), np.float32(220.86227), np.float32(204.97798), np.float32(223.90863), np.float32(206.94388), np.float32(220.84958), np.float32(206.56136), np.float32(217.8275), np.float32(211.21461), np.float32(214.43571), np.float32(215.18657), np.float32(211.58112), np.float32(222.95807), np.float32(213.63664), np.float32(223.02872), np.float32(213.5005), np.float32(216.97113), np.float32(216.42398), np.float32(212.65903), np.float32(220.09177), np.float32(208.90898), np.float32(222.09798), np.float32(205.77321), np.float32(221.0635), np.float32(202.45511), np.float32(228.75374), np.float32(506.2971), np.float32(329.79932), np.float32(355.98547), np.float32(348.69302), np.float32(168.14853), np.float32(163.57071), np.float32(176.00809), np.float32(168.77168), np.float32(173.78445), np.float32(170.51256), np.float32(169.01567), np.float32(170.67207), np.float32(166.95457), np.float32(177.25662), np.float32(168.0873), np.float32(179.22664), np.float32(167.61923), np.float32(177.27812), np.float32(167.28342), np.float32(175.33694), np.float32(168.838), np.float32(172.80345), np.float32(173.66176), np.float32(172.11641), np.float32(174.02425), np.float32(170.84541), np.float32(174.64046), np.float32(167.93369), np.float32(175.49147), np.float32(166.0517), np.float32(178.46027), np.float32(168.00154), np.float32(178.94106), np.float32(169.69307), np.float32(175.24805), np.float32(167.99783), np.float32(173.79181), np.float32(172.79396), np.float32(172.14479), np.float32(172.4311), np.float32(170.2684), np.float32(175.90752), np.float32(168.5008), np.float32(177.54436), np.float32(167.00587), np.float32(178.72464), np.float32(166.17589), np.float32(178.58688), np.float32(166.08469), np.float32(178.85866), np.float32(164.86893), np.float32(173.26967), np.float32(171.09514), np.float32(173.85948), np.float32(170.78853), np.float32(167.63652), np.float32(177.35158), np.float32(165.77657), np.float32(179.39082), np.float32(162.27274), np.float32(182.84569), np.float32(166.12189), np.float32(179.77434), np.float32(165.40445), np.float32(179.44647), np.float32(163.90044), np.float32(178.88719), np.float32(165.94559), np.float32(176.23424), np.float32(155.63406), np.float32(181.25145), np.float32(518.3201), np.float32(176.00273), np.float32(517.6647), np.float32(182.38878), np.float32(521.67285), np.float32(182.46843), np.float32(521.81616), np.float32(185.20576), np.float32(229.83028), np.float32(172.76352), np.float32(170.21121), np.float32(171.75992), np.float32(173.65549), np.float32(170.49059), np.float32(178.57303), np.float32(171.40599), np.float32(179.38812), np.float32(169.31601), np.float32(177.3719), np.float32(169.6162), np.float32(173.35199), np.float32(172.11948), np.float32(175.46762), np.float32(172.25397), np.float32(171.52438), np.float32(173.24841), np.float32(176.76799), np.float32(173.09306), np.float32(172.10825), np.float32(172.26591), np.float32(174.36862), np.float32(174.75844), np.float32(171.81937), np.float32(176.69958), np.float32(173.73729), np.float32(170.48152), np.float32(171.2615), np.float32(173.76984), np.float32(175.42758), np.float32(171.81241), np.float32(171.38052), np.float32(175.84874), np.float32(173.10889), np.float32(174.55292), np.float32(174.01707), np.float32(173.54941), np.float32(177.16412), np.float32(174.28021), np.float32(173.53474), np.float32(169.86426), np.float32(173.72583), np.float32(168.11118), np.float32(180.92015), np.float32(170.86699), np.float32(175.53055), np.float32(170.99945), np.float32(174.55516), np.float32(170.2087), np.float32(177.80576), np.float32(169.23734), np.float32(178.56216), np.float32(178.64093), np.float32(174.53015), np.float32(177.581), np.float32(174.29358), np.float32(174.62952), np.float32(170.45288), np.float32(176.34453), np.float32(173.09329), np.float32(175.796), np.float32(176.9741), np.float32(172.82782), np.float32(172.08514), np.float32(172.26468), np.float32(173.32463), np.float32(178.35385), np.float32(175.58043), np.float32(172.01408), np.float32(176.6373), np.float32(174.4086), np.float32(173.33423), np.float32(171.33134), np.float32(173.6568), np.float32(169.85886), np.float32(173.05122), np.float32(171.97462), np.float32(171.54112), np.float32(177.4563), np.float32(171.61287), np.float32(173.86775), np.float32(170.81201), np.float32(176.84305), np.float32(169.85023), np.float32(176.44287), np.float32(171.7309), np.float32(175.25163), np.float32(171.91936), np.float32(172.46803), np.float32(172.5667), np.float32(172.25948), np.float32(173.66447), np.float32(169.86714), np.float32(176.95287), np.float32(168.8659), np.float32(178.7748), np.float32(168.30812), np.float32(178.38434), np.float32(167.49547), np.float32(178.62624), np.float32(167.87596), np.float32(175.60658), np.float32(171.30035), np.float32(174.40154), np.float32(172.31578), np.float32(172.38795), np.float32(174.94247), np.float32(168.64496), np.float32(176.71896), np.float32(167.35005), np.float32(179.26988), np.float32(164.05179), np.float32(179.68086), np.float32(165.21953), np.float32(178.28712), np.float32(166.68538), np.float32(173.82347), np.float32(169.50227), np.float32(168.35971), np.float32(177.7044), np.float32(160.16508), np.float32(182.77078), np.float32(155.86043), np.float32(181.67436), np.float32(156.42108), np.float32(185.84685), np.float32(235.01736), np.float32(174.90779), np.float32(159.40536), np.float32(179.36937), np.float32(158.4783), np.float32(253.53473), np.float32(186.12723), np.float32(232.56801), np.float32(177.15742), np.float32(247.10014), np.float32(186.35075), np.float32(247.99144), np.float32(260.8123), np.float32(251.77478), np.float32(257.44098), np.float32(256.9221), np.float32(154.50743), np.float32(260.86118), np.float32(254.9372), np.float32(261.5473), np.float32(257.02274), np.float32(166.53871), np.float32(172.79466), np.float32(168.95107), np.float32(176.28406), np.float32(165.50735), np.float32(176.36179), np.float32(169.63147), np.float32(173.58864), np.float32(166.93326), np.float32(172.25558), np.float32(173.7595), np.float32(173.2188), np.float32(173.2597), np.float32(170.71686), np.float32(174.46065), np.float32(171.4744), np.float32(174.46065), np.float32(170.12059), np.float32(174.31715), np.float32(170.82826), np.float32(171.3104), np.float32(171.19124), np.float32(173.32022), np.float32(173.32602), np.float32(172.2676), np.float32(173.03331), np.float32(173.67334), np.float32(172.5558), np.float32(171.46846), np.float32(170.72485), np.float32(172.99503), np.float32(169.73445), np.float32(174.61354), np.float32(170.3399), np.float32(175.61324), np.float32(169.73189), np.float32(174.34964), np.float32(172.11047), np.float32(173.9167), np.float32(171.08702), np.float32(171.79099), np.float32(172.5109), np.float32(172.18715), np.float32(173.01645), np.float32(171.3232), np.float32(175.09103), np.float32(173.8244), np.float32(173.87746), np.float32(170.90698), np.float32(172.98882), np.float32(172.37805), np.float32(172.80101), np.float32(172.94753), np.float32(174.52692), np.float32(172.75061), np.float32(173.84068), np.float32(172.321), np.float32(172.88272), np.float32(172.71935), np.float32(171.88246), np.float32(172.37236), np.float32(174.0023), np.float32(173.76001), np.float32(172.65103), np.float32(172.7283), np.float32(173.29854), np.float32(173.45355), np.float32(172.82364), np.float32(171.7165), np.float32(173.85301), np.float32(173.18065), np.float32(173.22403), np.float32(171.16731), np.float32(174.54324), np.float32(171.68628), np.float32(174.40831), np.float32(170.66736), np.float32(174.41132), np.float32(170.33586), np.float32(173.29514), np.float32(171.45866), np.float32(174.59732), np.float32(172.55714), np.float32(174.54268), np.float32(171.91243), np.float32(172.18541), np.float32(171.2147), np.float32(173.17145), np.float32(170.35017), np.float32(170.5406), np.float32(174.45262), np.float32(160.23164), np.float32(557.11237)]
2025-05-13 00:36:07,140 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:36:07,141 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:36:07,280 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:36:07,283 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:36:07,283 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:36:07,285 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:36:07,285 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:36:10,789 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.5s)
2025-05-13 00:36:14,389 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:36:14,448 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:36:14,480 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:36:14,480 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:36:14,480 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:36:16,658 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747089355.mp4
2025-05-13 00:36:16,658 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:36:16,661 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747089355.wav
2025-05-13 00:36:16,665 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747089355_enhanced.mp4
2025-05-13 00:36:16,665 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747089355_enhanced.mp4
2025-05-13 00:37:20,720 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:37:20,721 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:37:20,721 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:37:20,721 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:37:20,723 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:37:20,723 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:37:20,723 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:37:20,724 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:37:20,724 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:37:20,724 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:37:20,724 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:37:20,725 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:37:21,846 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:37:21,898 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:37:29,029 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:37:29,030 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:37:32,046 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:37:32,060 - TikSimPro - INFO - melody: [np.float32(741.77515), np.float32(225.24574), np.float32(793.2856), np.float32(833.8967), np.float32(192.77617), np.float32(331.99884), np.float32(350.57538), np.float32(350.84702), np.float32(220.51794), np.float32(187.50398), np.float32(271.4959), np.float32(265.74103), np.float32(265.32318), np.float32(260.20837), np.float32(260.16656), np.float32(260.18234), np.float32(327.77393), np.float32(329.55463), np.float32(257.89407), np.float32(258.50116), np.float32(329.8356), np.float32(329.2402), np.float32(329.12408), np.float32(329.4769), np.float32(328.9293), np.float32(328.47855), np.float32(330.14102), np.float32(328.54233), np.float32(328.77417), np.float32(329.66623), np.float32(328.4502), np.float32(328.78754), np.float32(329.8537), np.float32(328.35028), np.float32(329.8024), np.float32(329.2404), np.float32(327.8187), np.float32(329.80676), np.float32(330.01923), np.float32(328.02338), np.float32(329.4574), np.float32(328.5783), np.float32(328.70657), np.float32(329.60104), np.float32(328.7082), np.float32(328.41104), np.float32(329.4908), np.float32(783.0729), np.float32(782.4767), np.float32(782.8188), np.float32(782.9287), np.float32(782.6856), np.float32(782.4098), np.float32(782.5901), np.float32(783.01886), np.float32(782.0722), np.float32(782.2062), np.float32(782.0138), np.float32(781.3417), np.float32(781.03876), np.float32(246.56795), np.float32(254.6952), np.float32(327.05032), np.float32(195.31529), np.float32(196.18857), np.float32(194.61884), np.float32(193.53151), np.float32(193.76395), np.float32(193.961), np.float32(192.77953), np.float32(328.3684), np.float32(329.374), np.float32(329.5772), np.float32(327.97778), np.float32(329.18762), np.float32(328.72348), np.float32(328.80707), np.float32(328.95438), np.float32(328.47345), np.float32(329.01492), np.float32(329.05484), np.float32(328.75192), np.float32(329.48325), np.float32(328.45718), np.float32(327.87167), np.float32(329.86063), np.float32(329.3292), np.float32(328.68396), np.float32(329.3776), np.float32(328.5131), np.float32(329.5552), np.float32(329.47757), np.float32(329.21964), np.float32(328.8136), np.float32(329.2511), np.float32(327.97266), np.float32(329.15405), np.float32(330.0467), np.float32(328.78323), np.float32(328.78098), np.float32(329.37347), np.float32(195.92693), np.float32(194.84204), np.float32(193.91272), np.float32(192.39116), np.float32(194.06763), np.float32(193.44289), np.float32(193.45673), np.float32(195.58545), np.float32(191.1222), np.float32(188.3162), np.float32(187.45883), np.float32(187.04285), np.float32(192.39795), np.float32(194.60094), np.float32(194.45973), np.float32(193.13338), np.float32(193.56683), np.float32(193.77805), np.float32(192.80276), np.float32(194.30083), np.float32(329.48425), np.float32(328.88187), np.float32(192.3487), np.float32(194.93687), np.float32(328.74045), np.float32(328.70303), np.float32(193.05434), np.float32(327.9306), np.float32(328.08337), np.float32(329.7536), np.float32(327.90866), np.float32(192.03584), np.float32(329.80463), np.float32(327.08682), np.float32(329.37897), np.float32(330.03906), np.float32(328.9728), np.float32(329.0736), np.float32(329.0735), np.float32(193.13396), np.float32(192.8337), np.float32(195.4417), np.float32(194.2532), np.float32(193.15016), np.float32(328.1677), np.float32(328.0755), np.float32(195.52832), np.float32(193.85817), np.float32(192.61111), np.float32(193.18965), np.float32(195.62779), np.float32(194.85416), np.float32(193.72516), np.float32(193.43909), np.float32(194.08191), np.float32(193.56479), np.float32(194.8296), np.float32(195.60474), np.float32(192.86859), np.float32(197.45122), np.float32(333.32272), np.float32(350.12173), np.float32(347.10965), np.float32(351.2823), np.float32(292.95178), np.float32(297.11545), np.float32(297.53574), np.float32(296.19336), np.float32(293.4627), np.float32(292.83035), np.float32(294.26437), np.float32(294.91354), np.float32(294.2147), np.float32(351.95636), np.float32(300.4837), np.float32(292.33365), np.float32(294.4271), np.float32(292.43973), np.float32(351.14844), np.float32(346.15308), np.float32(295.13144), np.float32(292.50864), np.float32(293.02454), np.float32(350.4025), np.float32(347.16183), np.float32(351.04697), np.float32(349.72546), np.float32(292.71576), np.float32(350.97134), np.float32(347.02997), np.float32(350.5141), np.float32(348.64423), np.float32(348.17596), np.float32(351.23093), np.float32(348.31467), np.float32(350.6191), np.float32(347.53067), np.float32(347.69513), np.float32(351.81473), np.float32(440.94852), np.float32(350.06583), np.float32(346.76895), np.float32(440.99326), np.float32(440.97174), np.float32(441.09613), np.float32(441.4985), np.float32(441.60947), np.float32(440.60507), np.float32(441.08224), np.float32(303.8442), np.float32(221.16725), np.float32(225.3966), np.float32(221.72699), np.float32(216.76906), np.float32(226.80449), np.float32(217.0201), np.float32(221.74918), np.float32(216.71796), np.float32(223.93616), np.float32(216.93083), np.float32(217.64827), np.float32(219.53836), np.float32(214.88074), np.float32(221.64093), np.float32(217.68259), np.float32(218.8932), np.float32(217.74829), np.float32(220.25906), np.float32(215.61975), np.float32(220.76544), np.float32(218.10703), np.float32(218.56485), np.float32(218.19879), np.float32(218.39642), np.float32(220.35277), np.float32(216.35909), np.float32(219.02075), np.float32(217.7709), np.float32(219.08568), np.float32(215.84348), np.float32(220.45076), np.float32(218.69598), np.float32(218.17917), np.float32(218.2141), np.float32(217.29556), np.float32(218.15126), np.float32(218.29686), np.float32(220.14488), np.float32(217.78923), np.float32(219.84094), np.float32(216.29445), np.float32(219.43239), np.float32(216.20969), np.float32(220.23657), np.float32(218.84589), np.float32(217.85927), np.float32(218.51523), np.float32(218.0248), np.float32(218.43692), np.float32(215.31888), np.float32(215.61777), np.float32(218.38748), np.float32(217.53644), np.float32(224.11795), np.float32(219.48514), np.float32(216.69708), np.float32(221.86287), np.float32(217.55803), np.float32(220.60835), np.float32(215.89833), np.float32(224.77061), np.float32(215.8288), np.float32(222.6278), np.float32(217.86143), np.float32(217.14194), np.float32(221.74156), np.float32(216.92328), np.float32(221.07149), np.float32(216.22772), np.float32(223.15118), np.float32(215.73096), np.float32(220.13539), np.float32(217.17477), np.float32(219.11781), np.float32(218.11374), np.float32(217.38458), np.float32(221.57101), np.float32(215.61804), np.float32(221.81966), np.float32(217.79431), np.float32(218.85786), np.float32(328.6682), np.float32(328.76443), np.float32(328.5837), np.float32(328.90933), np.float32(329.0255), np.float32(328.5356), np.float32(328.79117), np.float32(329.4913), np.float32(329.1936), np.float32(327.72437), np.float32(220.31377), np.float32(216.62244), np.float32(221.27367), np.float32(218.06477), np.float32(218.61664), np.float32(220.05893), np.float32(214.9016), np.float32(217.72635), np.float32(213.71776), np.float32(215.51), np.float32(212.17953), np.float32(223.30655), np.float32(230.73903), np.float32(212.08644), np.float32(232.52107), np.float32(218.23538), np.float32(219.05278), np.float32(217.92648), np.float32(221.59406), np.float32(222.51108), np.float32(214.5338), np.float32(228.95589), np.float32(213.02094), np.float32(231.3175), np.float32(217.67273), np.float32(220.9686), np.float32(217.1328), np.float32(218.23459), np.float32(226.62216), np.float32(329.13763), np.float32(223.62236), np.float32(215.11429), np.float32(223.01509), np.float32(328.63242), np.float32(328.34518), np.float32(328.7617), np.float32(329.04404), np.float32(330.00824), np.float32(329.01324), np.float32(328.6963), np.float32(328.50452), np.float32(328.7646), np.float32(329.17294), np.float32(329.19583), np.float32(328.75507), np.float32(328.3073), np.float32(328.8065), np.float32(329.2597), np.float32(329.20258), np.float32(329.01035), np.float32(328.44684), np.float32(215.45378), np.float32(220.08994), np.float32(216.19083), np.float32(221.29317), np.float32(217.97018), np.float32(218.45891), np.float32(215.60294), np.float32(779.5859), np.float32(783.0853), np.float32(167.00917), np.float32(174.77937), np.float32(186.01357), np.float32(204.31636), np.float32(259.33527), np.float32(260.9507), np.float32(192.24371), np.float32(195.02943), np.float32(194.18112), np.float32(258.36356), np.float32(259.71942), np.float32(260.8253), np.float32(260.17325), np.float32(260.4201), np.float32(257.969), np.float32(202.05536), np.float32(194.04924), np.float32(188.5869), np.float32(192.47826), np.float32(200.94281), np.float32(257.7164), np.float32(187.6305), np.float32(195.20615), np.float32(201.09326), np.float32(194.56303), np.float32(329.45465), np.float32(193.11919), np.float32(198.29482), np.float32(328.0846), np.float32(328.867), np.float32(192.02153), np.float32(194.97084), np.float32(328.99115), np.float32(328.7367), np.float32(329.1855), np.float32(327.93176), np.float32(328.84583), np.float32(329.7707), np.float32(328.6126), np.float32(328.835), np.float32(329.08557), np.float32(327.13297), np.float32(198.26279), np.float32(329.0166), np.float32(780.80035), np.float32(779.7305), np.float32(200.73312), np.float32(195.97052), np.float32(187.03142), np.float32(212.12872), np.float32(216.60268), np.float32(213.72481), np.float32(228.43243), np.float32(221.59175), np.float32(216.54489), np.float32(224.68289), np.float32(218.08597), np.float32(222.3348), np.float32(214.5321), np.float32(220.14531), np.float32(217.21667), np.float32(219.62842), np.float32(217.97234), np.float32(215.25352), np.float32(224.01532), np.float32(217.02504), np.float32(219.2309), np.float32(216.17534), np.float32(219.0687), np.float32(217.47583), np.float32(218.82402), np.float32(218.75836), np.float32(219.53989), np.float32(218.12321), np.float32(217.72304), np.float32(219.42651), np.float32(216.7736), np.float32(217.81892), np.float32(217.53911), np.float32(220.96101), np.float32(217.12585), np.float32(219.69566), np.float32(218.09303), np.float32(218.27715), np.float32(217.66188), np.float32(218.83707), np.float32(218.82317), np.float32(218.54721), np.float32(219.76634), np.float32(217.22386), np.float32(219.67085), np.float32(215.76942), np.float32(218.69182), np.float32(218.08011), np.float32(219.01315), np.float32(218.99568), np.float32(218.41628), np.float32(217.57788), np.float32(217.3316), np.float32(223.51573), np.float32(215.72046), np.float32(222.39093), np.float32(226.2107), np.float32(215.59392), np.float32(227.5284), np.float32(216.24359), np.float32(221.69513), np.float32(214.811), np.float32(222.19711), np.float32(222.22842), np.float32(216.21754), np.float32(223.63896), np.float32(213.91931), np.float32(224.8832), np.float32(215.60147), np.float32(223.14035), np.float32(215.02061), np.float32(222.64615), np.float32(219.41502), np.float32(217.21443), np.float32(221.95995), np.float32(215.64085), np.float32(220.47556), np.float32(215.08824), np.float32(777.9221), np.float32(777.5692), np.float32(222.22174), np.float32(217.78795), np.float32(221.61208), np.float32(216.29839), np.float32(217.4209), np.float32(777.3631), np.float32(776.644), np.float32(776.97424), np.float32(216.38734), np.float32(226.27502), np.float32(328.24664), np.float32(219.36241), np.float32(776.72186), np.float32(775.8475), np.float32(775.1886), np.float32(774.6704), np.float32(220.89717), np.float32(216.74222), np.float32(223.4094), np.float32(216.53136), np.float32(774.91675), np.float32(775.3429), np.float32(775.5738), np.float32(209.24141), np.float32(329.9084), np.float32(323.10898), np.float32(331.20746), np.float32(331.26157), np.float32(329.1774), np.float32(331.973), np.float32(328.9598), np.float32(326.55484), np.float32(329.54092), np.float32(329.01813), np.float32(328.73297), np.float32(329.8609), np.float32(327.82983), np.float32(328.22168), np.float32(329.71393), np.float32(328.38583), np.float32(328.92114), np.float32(329.2111), np.float32(327.7475), np.float32(329.5307), np.float32(329.23123), np.float32(328.8107), np.float32(329.24014), np.float32(327.87442), np.float32(329.08453), np.float32(329.30447), np.float32(329.23636), np.float32(329.3735), np.float32(328.64777), np.float32(328.7464), np.float32(329.31525), np.float32(329.668), np.float32(328.96683), np.float32(328.51987), np.float32(328.48703), np.float32(329.59952), np.float32(329.82974), np.float32(329.23944), np.float32(329.0219), np.float32(328.2458), np.float32(328.9753), np.float32(777.20355), np.float32(776.52783), np.float32(329.46246), np.float32(328.56973), np.float32(441.20303), np.float32(441.2184), np.float32(440.93753), np.float32(776.22076), np.float32(443.32776), np.float32(234.10547), np.float32(191.02652), np.float32(188.47992), np.float32(190.86479), np.float32(193.77757), np.float32(195.06148), np.float32(194.59482), np.float32(192.44385), np.float32(193.59862), np.float32(194.6966), np.float32(194.33528), np.float32(195.77869), np.float32(194.23267), np.float32(193.2372), np.float32(195.6673), np.float32(193.01105), np.float32(193.9782), np.float32(194.5222), np.float32(193.68152), np.float32(192.79742), np.float32(196.89943), np.float32(195.87772), np.float32(192.68468), np.float32(193.68626), np.float32(193.76364), np.float32(194.57701), np.float32(194.67241), np.float32(193.07031), np.float32(193.9886), np.float32(197.48575), np.float32(193.7498), np.float32(192.63242), np.float32(194.87218), np.float32(194.57727), np.float32(193.70186), np.float32(193.97601), np.float32(194.51645), np.float32(195.7003), np.float32(193.88292), np.float32(193.22755), np.float32(193.91531), np.float32(195.35017), np.float32(194.16748), np.float32(193.44469), np.float32(195.69102), np.float32(195.30612), np.float32(193.59653), np.float32(194.56206), np.float32(195.82472), np.float32(190.43901), np.float32(192.76935), np.float32(212.32417), np.float32(215.95758), np.float32(228.80173), np.float32(218.6253), np.float32(218.35713), np.float32(220.78914), np.float32(219.875), np.float32(219.50908), np.float32(214.85527), np.float32(220.75992), np.float32(217.2358), np.float32(222.134), np.float32(217.23587), np.float32(216.62762), np.float32(220.75363), np.float32(218.02219), np.float32(218.8205), np.float32(217.11455), np.float32(218.97232), np.float32(217.4388), np.float32(218.71233), np.float32(218.24632), np.float32(220.17186), np.float32(217.26021), np.float32(218.33505), np.float32(218.2081), np.float32(217.60353), np.float32(218.9989), np.float32(218.21542), np.float32(218.87282), np.float32(216.46758), np.float32(220.38982), np.float32(217.68216), np.float32(218.3721), np.float32(217.53596), np.float32(218.83168), np.float32(218.68658), np.float32(219.0296), np.float32(217.5448), np.float32(218.24724), np.float32(218.18863), np.float32(217.52194), np.float32(219.87515), np.float32(217.05766), np.float32(219.2801), np.float32(218.45445), np.float32(218.10068), np.float32(217.8431), np.float32(218.1222), np.float32(216.88518), np.float32(217.03287), np.float32(266.18665), np.float32(238.83292), np.float32(215.24408), np.float32(219.51477), np.float32(218.89742), np.float32(217.79874), np.float32(221.62874), np.float32(215.77121), np.float32(226.2295), np.float32(215.31407), np.float32(226.59224), np.float32(216.67296), np.float32(220.00287), np.float32(218.94456), np.float32(218.28903), np.float32(219.58353), np.float32(215.69247), np.float32(222.0442), np.float32(216.06908), np.float32(222.47537), np.float32(216.7518), np.float32(219.40245), np.float32(217.18956), np.float32(219.47235), np.float32(218.82681), np.float32(217.10683), np.float32(220.3662), np.float32(216.88185), np.float32(221.29869), np.float32(215.92725), np.float32(219.86227), np.float32(217.09207), np.float32(219.2564), np.float32(218.3978), np.float32(219.2621), np.float32(218.11028), np.float32(219.00572), np.float32(218.58891), np.float32(216.99228), np.float32(218.64983), np.float32(216.74142), np.float32(220.47119), np.float32(216.47307), np.float32(222.63867), np.float32(217.53622), np.float32(218.32127), np.float32(216.76443), np.float32(219.52408), np.float32(215.61049), np.float32(207.86708), np.float32(222.16547), np.float32(216.75995), np.float32(219.68689), np.float32(233.39911), np.float32(215.25078), np.float32(225.45953), np.float32(215.75194), np.float32(223.11736), np.float32(216.01907), np.float32(220.29549), np.float32(222.4375), np.float32(216.8128), np.float32(225.40865), np.float32(214.58003), np.float32(227.16537), np.float32(214.32625), np.float32(224.6779), np.float32(215.89365), np.float32(220.71152), np.float32(221.14272), np.float32(215.44783), np.float32(221.16911), np.float32(216.64014), np.float32(220.74437), np.float32(214.9019), np.float32(223.1684), np.float32(328.6832), np.float32(329.7859), np.float32(328.84183), np.float32(328.65012), np.float32(328.58072), np.float32(328.53894), np.float32(329.39456), np.float32(328.9877), np.float32(328.91953), np.float32(329.0872), np.float32(328.64966), np.float32(328.71906), np.float32(328.38553), np.float32(328.353), np.float32(328.89233), np.float32(330.23346), np.float32(219.90779), np.float32(219.1321), np.float32(216.62329), np.float32(218.9793), np.float32(775.2233), np.float32(774.6995), np.float32(211.33896), np.float32(526.5612), np.float32(167.0139), np.float32(179.86578), np.float32(185.93495), np.float32(205.8696), np.float32(200.72601), np.float32(194.1999), np.float32(187.95413), np.float32(196.05304), np.float32(197.53511), np.float32(190.32004), np.float32(261.23605), np.float32(780.54724), np.float32(778.96857), np.float32(779.8131), np.float32(782.17346), np.float32(200.37563), np.float32(199.0952), np.float32(189.89255), np.float32(188.1601), np.float32(779.8164), np.float32(780.13776), np.float32(191.01923), np.float32(190.14023), np.float32(197.70062), np.float32(203.2158), np.float32(193.66478), np.float32(779.90625), np.float32(778.15765), np.float32(205.62373), np.float32(190.89275), np.float32(187.70222), np.float32(199.30238), np.float32(205.10555), np.float32(328.3018), np.float32(327.24454), np.float32(329.60416), np.float32(330.18518), np.float32(329.29498), np.float32(327.6493), np.float32(199.3029), np.float32(205.93399), np.float32(328.425), np.float32(328.2582), np.float32(202.64241), np.float32(328.45944), np.float32(327.54605), np.float32(329.23697), np.float32(202.8871), np.float32(201.70264), np.float32(255.41249), np.float32(259.98975), np.float32(260.85757), np.float32(259.93585), np.float32(330.73718), np.float32(197.76807), np.float32(330.79037), np.float32(330.12433), np.float32(328.11258), np.float32(329.22208), np.float32(330.4327), np.float32(328.38968), np.float32(328.32416), np.float32(330.1209), np.float32(328.8999), np.float32(329.084), np.float32(329.41208), np.float32(328.81024), np.float32(329.2476), np.float32(328.838), np.float32(328.57153), np.float32(329.80112), np.float32(329.12552), np.float32(328.20233), np.float32(329.57333), np.float32(329.0755), np.float32(329.00067), np.float32(329.40326), np.float32(328.99228), np.float32(328.6494), np.float32(328.72073), np.float32(329.72195), np.float32(328.67575), np.float32(329.20947), np.float32(328.61157), np.float32(328.86835), np.float32(329.04816), np.float32(328.74512), np.float32(329.0556), np.float32(329.00778), np.float32(782.8495), np.float32(782.6486), np.float32(782.06885), np.float32(782.10516), np.float32(782.3844), np.float32(781.86786), np.float32(781.85236), np.float32(781.9071), np.float32(782.05927), np.float32(781.714), np.float32(781.42303), np.float32(325.34177), np.float32(324.47614), np.float32(331.145), np.float32(330.66833), np.float32(330.94598), np.float32(330.5023), np.float32(328.8546), np.float32(328.06485), np.float32(329.98727), np.float32(329.47693), np.float32(328.20468), np.float32(330.48013), np.float32(328.54446), np.float32(328.86694), np.float32(328.9708), np.float32(329.2451), np.float32(329.35468), np.float32(329.04053), np.float32(328.5651), np.float32(329.22412), np.float32(329.28726), np.float32(329.59836), np.float32(329.04443), np.float32(327.72), np.float32(329.7371), np.float32(329.0559), np.float32(329.51962), np.float32(329.12933), np.float32(328.07794), np.float32(329.54797), np.float32(329.35406), np.float32(328.6102), np.float32(329.69473), np.float32(328.97623), np.float32(328.2195), np.float32(329.05103), np.float32(329.85342), np.float32(329.4302), np.float32(328.60757), np.float32(327.91333), np.float32(330.07693), np.float32(196.46127), np.float32(193.66725), np.float32(191.40799), np.float32(192.62903), np.float32(196.5225), np.float32(195.41614), np.float32(192.62787), np.float32(195.2352), np.float32(522.15155), np.float32(523.3646), np.float32(303.0343), np.float32(181.76082), np.float32(190.33076), np.float32(329.33066), np.float32(331.33868), np.float32(330.25433), np.float32(326.72455), np.float32(329.56955), np.float32(330.38495), np.float32(327.81052), np.float32(329.51886), np.float32(329.50757), np.float32(327.70908), np.float32(329.66553), np.float32(328.6619), np.float32(328.1359), np.float32(330.0815), np.float32(327.95807), np.float32(328.6687), np.float32(330.11926), np.float32(328.57883), np.float32(329.52847), np.float32(328.3876), np.float32(327.86398), np.float32(329.26627), np.float32(329.56635), np.float32(329.4958), np.float32(328.5544), np.float32(328.79636), np.float32(329.78726), np.float32(328.57635), np.float32(329.9652), np.float32(328.9567), np.float32(328.26306), np.float32(329.01025), np.float32(329.0275), np.float32(329.77167), np.float32(329.48203), np.float32(328.38602), np.float32(328.59937), np.float32(330.094), np.float32(328.85742), np.float32(330.1428), np.float32(329.3421), np.float32(327.40222), np.float32(331.24527), np.float32(329.22623), np.float32(194.55603), np.float32(198.49017), np.float32(443.08908), np.float32(348.61276), np.float32(347.90466), np.float32(349.98526), np.float32(346.88925), np.float32(295.51126), np.float32(298.95926), np.float32(292.38092), np.float32(295.7025), np.float32(300.66058), np.float32(293.32788), np.float32(296.2866), np.float32(350.6325), np.float32(351.13388), np.float32(346.11493), np.float32(351.8313), np.float32(345.78473), np.float32(351.17728), np.float32(349.88293), np.float32(346.10785), np.float32(351.83832), np.float32(346.87134), np.float32(352.19153), np.float32(348.59894), np.float32(347.6482), np.float32(351.67953), np.float32(348.0417), np.float32(350.45016), np.float32(348.64978), np.float32(348.39606), np.float32(351.8692), np.float32(348.25046), np.float32(349.3619), np.float32(348.659), np.float32(349.74954), np.float32(441.39804), np.float32(346.3263), np.float32(350.4133), np.float32(348.92224), np.float32(441.07117), np.float32(440.83908), np.float32(441.90622), np.float32(440.81918), np.float32(439.93753), np.float32(441.66492), np.float32(441.29514), np.float32(441.03476), np.float32(441.10474), np.float32(441.6153), np.float32(215.45653), np.float32(237.36494), np.float32(235.28654), np.float32(270.35284), np.float32(325.60852), np.float32(329.42657), np.float32(333.5065), np.float32(328.22818), np.float32(329.1583), np.float32(328.071), np.float32(327.5151), np.float32(330.61255), np.float32(328.54825), np.float32(328.49933), np.float32(329.7071), np.float32(328.0584), np.float32(330.0799), np.float32(329.07254), np.float32(328.46817), np.float32(329.16254), np.float32(328.01685), np.float32(329.44568), np.float32(329.2041), np.float32(328.5617), np.float32(329.4717), np.float32(328.41806), np.float32(329.1662), np.float32(329.15002), np.float32(328.6638), np.float32(329.54272), np.float32(328.5625), np.float32(328.5369), np.float32(329.3406), np.float32(329.02298), np.float32(329.1127), np.float32(329.0925), np.float32(328.24133), np.float32(328.9342), np.float32(328.89056), np.float32(329.53934), np.float32(329.2325), np.float32(327.74713), np.float32(329.46677), np.float32(329.9659), np.float32(328.46555), np.float32(217.88892), np.float32(328.2552), np.float32(217.67122), np.float32(219.38655), np.float32(220.82019), np.float32(214.43617), np.float32(216.3182), np.float32(210.46268), np.float32(225.70502), np.float32(215.73987), np.float32(227.1227), np.float32(228.66095), np.float32(216.06871), np.float32(221.12096), np.float32(215.19467), np.float32(228.56468), np.float32(213.92131), np.float32(227.33263), np.float32(217.27077), np.float32(219.21422), np.float32(224.19174), np.float32(215.49867), np.float32(222.88206), np.float32(215.49951), np.float32(225.00179), np.float32(215.56729), np.float32(222.23947), np.float32(216.27916), np.float32(219.55704), np.float32(218.35406), np.float32(218.05246), np.float32(222.1928), np.float32(215.15666), np.float32(222.01404), np.float32(216.48987), np.float32(220.54066), np.float32(216.73558), np.float32(328.35992), np.float32(328.8698), np.float32(328.75912), np.float32(219.49269), np.float32(329.04953), np.float32(328.96622), np.float32(329.26657), np.float32(329.04285), np.float32(328.5006), np.float32(328.38702), np.float32(329.06607), np.float32(329.59097), np.float32(328.71896), np.float32(775.27594), np.float32(775.16235), np.float32(775.24646), np.float32(774.60614), np.float32(220.73637), np.float32(215.85744), np.float32(213.55562), np.float32(776.1143), np.float32(778.7616), np.float32(659.52356), np.float32(659.2765), np.float32(240.29312), np.float32(261.2936), np.float32(240.58167), np.float32(215.62411), np.float32(237.41556), np.float32(257.84723), np.float32(256.99112), np.float32(256.1063), np.float32(261.47513), np.float32(246.2478), np.float32(329.21713), np.float32(777.2437), np.float32(777.2265), np.float32(330.77518), np.float32(327.79697), np.float32(328.0372), np.float32(329.96484), np.float32(328.7975), np.float32(329.5244), np.float32(328.86624), np.float32(327.87912), np.float32(329.405), np.float32(328.77884), np.float32(329.7021), np.float32(329.37827), np.float32(327.5911), np.float32(328.79892), np.float32(328.5232), np.float32(329.61508), np.float32(330.23257), np.float32(328.14264), np.float32(327.48715), np.float32(328.317), np.float32(329.54852), np.float32(330.1011), np.float32(328.43066), np.float32(327.2243), np.float32(328.78806), np.float32(329.4501), np.float32(329.28955), np.float32(329.29193), np.float32(327.34332), np.float32(326.8018), np.float32(329.43704), np.float32(519.8152), np.float32(520.1564), np.float32(201.66663), np.float32(186.31117), np.float32(188.82823), np.float32(193.94595), np.float32(194.96704), np.float32(194.14664), np.float32(194.78494), np.float32(193.39221), np.float32(193.43047), np.float32(192.97725), np.float32(196.01552), np.float32(196.69266), np.float32(193.53348), np.float32(194.09119), np.float32(194.7203), np.float32(194.59581), np.float32(193.79964), np.float32(192.7636), np.float32(194.3046), np.float32(329.22742), np.float32(328.6242), np.float32(192.82942), np.float32(194.04202), np.float32(328.18518), np.float32(328.85812), np.float32(194.58418), np.float32(195.42154), np.float32(194.02455), np.float32(193.25035), np.float32(194.95349), np.float32(194.52817), np.float32(193.96973), np.float32(193.43965), np.float32(193.9898), np.float32(196.16528), np.float32(195.33612), np.float32(192.7049), np.float32(194.18576), np.float32(196.3935), np.float32(194.00839), np.float32(191.85199), np.float32(195.34413), np.float32(197.05774), np.float32(193.6913), np.float32(191.993), np.float32(195.61095), np.float32(198.14474), np.float32(196.04675), np.float32(193.03958), np.float32(215.93356), np.float32(215.65646), np.float32(215.81985), np.float32(230.34395), np.float32(215.67102), np.float32(220.76826), np.float32(220.9854), np.float32(218.04523), np.float32(221.17548), np.float32(216.28082), np.float32(219.42067), np.float32(214.78134), np.float32(223.06848), np.float32(215.73091), np.float32(218.35326), np.float32(219.42177), np.float32(218.62383), np.float32(220.18718), np.float32(216.34175), np.float32(218.58124), np.float32(218.0141), np.float32(218.26645), np.float32(218.50235), np.float32(219.86679), np.float32(216.92505), np.float32(220.4234), np.float32(217.57991), np.float32(216.38646), np.float32(218.36018), np.float32(219.66074), np.float32(219.95274), np.float32(216.2472), np.float32(220.13098), np.float32(217.5088), np.float32(218.38794), np.float32(216.12164), np.float32(220.3785), np.float32(219.05624), np.float32(219.57552), np.float32(218.08939), np.float32(217.33014), np.float32(218.70796), np.float32(217.65076), np.float32(219.31348), np.float32(217.65202), np.float32(219.47987), np.float32(217.77219), np.float32(218.8861), np.float32(216.99603), np.float32(217.74677), np.float32(217.63043), np.float32(219.5394), np.float32(217.36713), np.float32(217.23512), np.float32(228.87294), np.float32(212.55525), np.float32(227.50314), np.float32(217.24384), np.float32(220.22997), np.float32(217.7251), np.float32(219.21626), np.float32(222.82585), np.float32(214.28833), np.float32(226.4887), np.float32(213.1169), np.float32(226.58878), np.float32(216.36244), np.float32(220.36444), np.float32(217.66226), np.float32(218.77225), np.float32(220.27629), np.float32(216.71278), np.float32(221.67183), np.float32(215.85985), np.float32(221.82608), np.float32(215.43396), np.float32(222.69577), np.float32(216.44131), np.float32(219.9007), np.float32(220.84453), np.float32(216.78537), np.float32(221.12317), np.float32(215.39954), np.float32(221.94818), np.float32(216.07625), np.float32(220.76236), np.float32(218.27458), np.float32(221.4601), np.float32(217.3705), np.float32(217.66971), np.float32(219.43031), np.float32(217.13164), np.float32(219.83049), np.float32(218.31892), np.float32(219.81308), np.float32(218.12271), np.float32(220.757), np.float32(216.00261), np.float32(219.66066), np.float32(216.00673), np.float32(225.1145), np.float32(230.94472), np.float32(342.63055), np.float32(326.02206), np.float32(330.38626), np.float32(331.2711), np.float32(329.89816), np.float32(331.1384), np.float32(330.27365), np.float32(327.15054), np.float32(328.66522), np.float32(329.83725), np.float32(328.30347), np.float32(329.00186), np.float32(328.51608), np.float32(328.01004), np.float32(330.13385), np.float32(327.83237), np.float32(328.50656), np.float32(330.26364), np.float32(328.2582), np.float32(328.3915), np.float32(328.68634), np.float32(329.17654), np.float32(329.74637), np.float32(328.16284), np.float32(328.75113), np.float32(329.0838), np.float32(329.14618), np.float32(329.33112), np.float32(328.9831), np.float32(328.68927), np.float32(329.23697), np.float32(329.423), np.float32(329.63733), np.float32(328.79062), np.float32(328.17093), np.float32(329.39426), np.float32(329.23816), np.float32(328.83005), np.float32(329.62994), np.float32(328.22003), np.float32(327.5261), np.float32(329.83182), np.float32(328.71518), np.float32(330.0896), np.float32(329.11905), np.float32(326.7457), np.float32(522.4313), np.float32(522.04614), np.float32(520.7572), np.float32(242.03485), np.float32(214.3217), np.float32(187.91275), np.float32(188.54279), np.float32(194.37099), np.float32(196.06146), np.float32(194.8328), np.float32(192.87918), np.float32(192.51343), np.float32(194.55751), np.float32(193.33182), np.float32(193.72346), np.float32(196.92679), np.float32(194.17586), np.float32(193.73572), np.float32(193.92117), np.float32(194.70895), np.float32(195.4463), np.float32(193.06561), np.float32(192.6842), np.float32(197.15865), np.float32(201.3958), np.float32(189.8426), np.float32(191.3854), np.float32(196.18053), np.float32(194.96231), np.float32(191.9966), np.float32(193.9875), np.float32(194.31802), np.float32(197.62726), np.float32(193.02759), np.float32(192.385), np.float32(193.94408), np.float32(196.82158), np.float32(193.06575), np.float32(192.47522), np.float32(196.07245), np.float32(196.19092), np.float32(193.89424), np.float32(193.03001), np.float32(193.74467), np.float32(195.68355), np.float32(194.7252), np.float32(193.00586), np.float32(194.48189), np.float32(195.89037), np.float32(194.46523), np.float32(192.56241), np.float32(195.67317), np.float32(194.55853), np.float32(194.02733), np.float32(202.52226), np.float32(193.67554), np.float32(187.61519), np.float32(329.32034), np.float32(330.36835), np.float32(331.24402), np.float32(329.24112), np.float32(328.21054), np.float32(328.79022), np.float32(328.57144), np.float32(328.7329), np.float32(328.48877), np.float32(328.50085), np.float32(328.20447), np.float32(329.08838), np.float32(329.56653), np.float32(328.83197), np.float32(328.3212), np.float32(329.15442), np.float32(328.90698), np.float32(329.38647), np.float32(329.04947), np.float32(328.40662), np.float32(328.6379), np.float32(328.7263), np.float32(329.13846), np.float32(329.64853), np.float32(328.87634), np.float32(328.62982), np.float32(328.82187), np.float32(328.16663), np.float32(329.90585), np.float32(329.01636), np.float32(328.74915), np.float32(329.22708), np.float32(328.753), np.float32(328.44357), np.float32(329.35825), np.float32(329.05554), np.float32(329.18988), np.float32(329.0169), np.float32(328.0611), np.float32(215.88113), np.float32(217.68745), np.float32(216.39082), np.float32(220.13576), np.float32(774.1618), np.float32(773.97504), np.float32(773.21967), np.float32(213.62415), np.float32(221.50447), np.float32(215.24352), np.float32(219.62251), np.float32(230.26158), np.float32(330.2286), np.float32(231.58792), np.float32(218.50134), np.float32(219.04991), np.float32(216.6526), np.float32(220.16203), np.float32(224.29707), np.float32(214.54831), np.float32(225.7345), np.float32(327.6668), np.float32(328.585), np.float32(329.03113), np.float32(329.06714), np.float32(329.34982), np.float32(327.7269), np.float32(328.50528), np.float32(329.6916), np.float32(329.40002), np.float32(328.73447), np.float32(328.22653), np.float32(328.15393), np.float32(328.89642), np.float32(329.00778), np.float32(329.20087), np.float32(329.29877), np.float32(328.06317), np.float32(328.36435), np.float32(329.1029), np.float32(329.1811), np.float32(329.0307), np.float32(328.70807), np.float32(328.41962), np.float32(328.77682), np.float32(328.95325), np.float32(328.56598), np.float32(659.20795), np.float32(774.4554), np.float32(774.48566), np.float32(773.1816), np.float32(659.4946), np.float32(658.4571), np.float32(658.87415), np.float32(771.2803), np.float32(772.6076), np.float32(772.98267), np.float32(772.8367), np.float32(771.8293), np.float32(321.24567), np.float32(258.51318), np.float32(254.824), np.float32(329.45914), np.float32(330.72647), np.float32(331.3346), np.float32(327.7153), np.float32(327.8306), np.float32(329.30304), np.float32(328.47702), np.float32(329.42505), np.float32(329.11484), np.float32(327.14395), np.float32(328.66565), np.float32(329.04233), np.float32(328.45874), np.float32(329.22504), np.float32(328.4212), np.float32(328.0693), np.float32(329.37195), np.float32(328.32684), np.float32(329.72543), np.float32(329.20187), np.float32(327.19147), np.float32(328.9212), np.float32(329.04065), np.float32(329.61026), np.float32(329.24594), np.float32(328.3271), np.float32(328.4522), np.float32(328.54498), np.float32(329.4037), np.float32(329.80966), np.float32(328.9148), np.float32(327.1921), np.float32(329.27704), np.float32(329.53647), np.float32(329.81433), np.float32(329.04755), np.float32(326.91058), np.float32(328.09335), np.float32(329.09573), np.float32(775.79596), np.float32(776.5982), np.float32(776.7323), np.float32(776.4848), np.float32(521.49664), np.float32(520.5362), np.float32(235.26746), np.float32(213.47362), np.float32(193.67842), np.float32(187.62764), np.float32(189.48369), np.float32(194.12373), np.float32(197.23468), np.float32(196.54388), np.float32(192.27834), np.float32(191.84227), np.float32(194.94673), np.float32(192.79216), np.float32(194.20973), np.float32(195.41681), np.float32(195.94603), np.float32(194.67111), np.float32(193.93086), np.float32(193.74301), np.float32(195.28465), np.float32(192.87013), np.float32(192.74287), np.float32(196.60252), np.float32(197.51057), np.float32(192.96007), np.float32(192.08339), np.float32(195.37035), np.float32(195.64323), np.float32(193.75647), np.float32(190.42929), np.float32(196.47372), np.float32(199.69493), np.float32(194.56293), np.float32(190.32333), np.float32(195.81966), np.float32(197.4802), np.float32(192.68091), np.float32(191.69539), np.float32(197.38402), np.float32(198.74089), np.float32(192.77513), np.float32(191.38042), np.float32(196.19765), np.float32(196.97444), np.float32(192.91661), np.float32(192.724), np.float32(195.8867), np.float32(196.4565), np.float32(191.15483), np.float32(195.05579), np.float32(198.52647), np.float32(193.9597), np.float32(206.51982), np.float32(257.997), np.float32(268.6098), np.float32(265.37915), np.float32(255.04932), np.float32(331.23215), np.float32(330.67947), np.float32(329.8316), np.float32(327.86865), np.float32(329.18457), np.float32(328.63696), np.float32(329.9854), np.float32(328.29373), np.float32(329.77377), np.float32(329.26187), np.float32(329.09973), np.float32(328.86014), np.float32(329.76804), np.float32(328.94547), np.float32(328.1778), np.float32(330.27127), np.float32(328.231), np.float32(329.0431), np.float32(329.78177), np.float32(327.91473), np.float32(329.44772), np.float32(329.47235), np.float32(328.64734), np.float32(331.15164), np.float32(858.5641), np.float32(866.84247), np.float32(876.4821), np.float32(891.9823), np.float32(886.8735), np.float32(887.4545), np.float32(898.9397), np.float32(912.21826), np.float32(928.60205), np.float32(954.9788), np.float32(965.8644), np.float32(974.9253), np.float32(980.5301), np.float32(984.2375), np.float32(984.301), np.float32(982.8868), np.float32(982.8928), np.float32(985.58136), np.float32(988.41364), np.float32(991.5867), np.float32(660.47876), np.float32(668.98926), np.float32(683.32166), np.float32(352.92618), np.float32(188.18367), np.float32(372.8189), np.float32(379.88635), np.float32(393.71948), np.float32(396.73328), np.float32(395.34924), np.float32(393.8027), np.float32(392.38776), np.float32(391.28903), np.float32(391.16928), np.float32(390.04315), np.float32(389.72952), np.float32(391.98093), np.float32(391.70255), np.float32(390.67618), np.float32(390.3505), np.float32(1561.94), np.float32(1563.5441), np.float32(1565.1381), np.float32(1567.7712), np.float32(1568.4601), np.float32(1568.6099), np.float32(1568.3164), np.float32(1568.4448), np.float32(1569.3789), np.float32(1567.0989), np.float32(1553.3217), np.float32(782.9162), np.float32(1541.4993), np.float32(1546.1863), np.float32(1551.1957), np.float32(1554.4639), np.float32(1167.9368), np.float32(1164.3237), np.float32(1160.4481), np.float32(1161.3969), np.float32(1165.0288), np.float32(1168.717), np.float32(1173.1582), np.float32(1184.5864), np.float32(1195.4829), np.float32(1200.2336), np.float32(1213.5961), np.float32(1222.3344), np.float32(1242.0537), np.float32(1249.7582), np.float32(1250.302), np.float32(1240.578), np.float32(1218.197), np.float32(1177.7855), np.float32(1141.0685), np.float32(1125.9028), np.float32(1122.5354), np.float32(1127.9872), np.float32(1148.3477), np.float32(1181.6805), np.float32(1204.6624), np.float32(810.9356), np.float32(820.97485), np.float32(823.48395), np.float32(816.4203), np.float32(815.90765), np.float32(795.6845), np.float32(784.4203), np.float32(777.239), np.float32(773.886), np.float32(775.54034), np.float32(392.36307), np.float32(392.2213), np.float32(392.2226), np.float32(389.9584), np.float32(384.46393), np.float32(385.22562), np.float32(385.7832), np.float32(383.29532), np.float32(375.47083), np.float32(364.95694), np.float32(351.53488), np.float32(354.4617), np.float32(675.8287), np.float32(787.4856), np.float32(331.44708), np.float32(653.37897), np.float32(646.9413), np.float32(646.4714), np.float32(649.45355), np.float32(651.84076), np.float32(330.6082), np.float32(328.68076), np.float32(331.23492), np.float32(331.1435), np.float32(330.76193), np.float32(329.4359), np.float32(328.71613), np.float32(327.8137), np.float32(328.40683), np.float32(325.23154), np.float32(325.3634), np.float32(318.86383), np.float32(311.97357), np.float32(350.02765), np.float32(353.3696), np.float32(349.3046), np.float32(351.35193), np.float32(588.42426), np.float32(587.9704), np.float32(587.7067), np.float32(587.5956), np.float32(588.6357), np.float32(589.15344), np.float32(587.7763), np.float32(586.0163), np.float32(582.5732), np.float32(580.6241), np.float32(580.8279), np.float32(582.9082), np.float32(584.69086), np.float32(585.7751), np.float32(351.6596), np.float32(342.96286), np.float32(280.8912), np.float32(299.93146), np.float32(296.82443), np.float32(302.99487), np.float32(288.4578), np.float32(282.94772), np.float32(284.21252), np.float32(268.50412), np.float32(542.8847), np.float32(272.99127), np.float32(285.70105), np.float32(301.27454), np.float32(291.12167), np.float32(296.51614), np.float32(299.7556), np.float32(293.6748), np.float32(292.36884), np.float32(353.53436), np.float32(348.28888), np.float32(582.19214), np.float32(584.7379), np.float32(587.24457), np.float32(352.14346), np.float32(348.0995), np.float32(350.38754), np.float32(348.68515), np.float32(440.90155), np.float32(441.3676), np.float32(442.60266), np.float32(211.62297), np.float32(227.92458), np.float32(233.41864), np.float32(329.82983), np.float32(252.73593), np.float32(248.12076), np.float32(262.4503), np.float32(265.85876), np.float32(270.93912), np.float32(262.29272), np.float32(266.5131), np.float32(261.60046), np.float32(265.70447), np.float32(263.3988), np.float32(276.85883), np.float32(278.13748), np.float32(292.13565), np.float32(301.86716), np.float32(290.30774), np.float32(304.90585), np.float32(304.62827), np.float32(294.29388), np.float32(304.17847), np.float32(301.6711), np.float32(286.52106), np.float32(298.43918), np.float32(285.82803), np.float32(291.29535), np.float32(287.2568), np.float32(287.3516), np.float32(289.12384), np.float32(278.29422), np.float32(259.72595), np.float32(267.42282), np.float32(256.68387), np.float32(259.5462), np.float32(233.61273), np.float32(227.80107), np.float32(228.93756), np.float32(216.94676), np.float32(214.1597), np.float32(216.60115), np.float32(216.94444), np.float32(219.42958), np.float32(221.8029), np.float32(222.29932), np.float32(217.82123), np.float32(216.14078), np.float32(215.72372), np.float32(213.36708), np.float32(220.17212), np.float32(293.46622), np.float32(325.2478), np.float32(331.86148), np.float32(230.37502), np.float32(215.2402), np.float32(256.84897), np.float32(443.5195), np.float32(446.0185), np.float32(447.51877), np.float32(447.4834), np.float32(446.05917), np.float32(443.66977), np.float32(440.32355), np.float32(438.4679), np.float32(437.3948), np.float32(435.46347), np.float32(328.8864), np.float32(329.0878), np.float32(327.70062), np.float32(328.14435), np.float32(329.02643), np.float32(329.9343), np.float32(328.33008), np.float32(328.18063), np.float32(328.09744), np.float32(329.66266), np.float32(474.1985), np.float32(473.7597), np.float32(236.70631), np.float32(228.01218), np.float32(226.19952), np.float32(328.4985), np.float32(219.56221), np.float32(327.2914), np.float32(327.55017), np.float32(445.6798), np.float32(444.33264), np.float32(444.836), np.float32(776.6142), np.float32(775.66754), np.float32(775.6362), np.float32(327.79742), np.float32(331.21255), np.float32(327.71152), np.float32(774.6745), np.float32(775.59283), np.float32(775.41614), np.float32(219.03647), np.float32(212.37326), np.float32(429.70306), np.float32(319.95135), np.float32(329.06116), np.float32(331.151), np.float32(326.78943), np.float32(331.85498), np.float32(329.8248), np.float32(326.9961), np.float32(328.50458), np.float32(329.49966), np.float32(328.20987), np.float32(328.15125), np.float32(329.95944), np.float32(327.416), np.float32(329.29932), np.float32(329.24292), np.float32(328.39783), np.float32(328.5437), np.float32(328.62323), np.float32(328.81192), np.float32(328.95526), np.float32(328.70996), np.float32(328.79773), np.float32(329.14313), np.float32(328.6744), np.float32(329.0365), np.float32(329.0809), np.float32(329.31168), np.float32(328.65143), np.float32(328.36572), np.float32(328.99597), np.float32(329.6703), np.float32(328.68326), np.float32(328.94937), np.float32(328.7613), np.float32(328.2115), np.float32(329.8153), np.float32(329.22043), np.float32(328.70255), np.float32(329.36697), np.float32(328.04425), np.float32(329.59924), np.float32(329.86462), np.float32(329.4627), np.float32(328.82062), np.float32(328.7422), np.float32(775.7116), np.float32(659.23267), np.float32(657.8117), np.float32(657.12646), np.float32(662.49506), np.float32(168.61435), np.float32(178.16125), np.float32(186.8811), np.float32(191.18701), np.float32(198.41745), np.float32(195.99078), np.float32(191.6198), np.float32(192.5389), np.float32(192.9543), np.float32(191.3667), np.float32(260.35907), np.float32(263.73407), np.float32(193.4946), np.float32(194.79799), np.float32(262.3674), np.float32(193.60399), np.float32(195.89091), np.float32(192.65231), np.float32(189.30904), np.float32(329.53827), np.float32(327.89737), np.float32(329.6178), np.float32(330.91483), np.float32(327.17932), np.float32(329.37085), np.float32(329.78433), np.float32(328.51776), np.float32(329.47983), np.float32(328.99826), np.float32(328.4752), np.float32(329.80032), np.float32(329.0926), np.float32(329.20407), np.float32(328.9758), np.float32(328.21838), np.float32(329.1416), np.float32(329.45422), np.float32(328.48154), np.float32(328.33072), np.float32(328.90625), np.float32(329.6382), np.float32(329.3126), np.float32(329.502), np.float32(329.23105), np.float32(327.8163), np.float32(329.14865), np.float32(658.82196), np.float32(658.4059), np.float32(656.88257), np.float32(657.5638), np.float32(215.26526), np.float32(208.70483), np.float32(224.28772), np.float32(226.42162), np.float32(215.19025), np.float32(221.43477), np.float32(216.63864), np.float32(225.477), np.float32(215.96869), np.float32(219.72037), np.float32(215.27022), np.float32(220.75742), np.float32(218.63199), np.float32(214.11963), np.float32(221.51878), np.float32(218.69649), np.float32(220.67357), np.float32(215.60057), np.float32(218.75859), np.float32(217.574), np.float32(220.00133), np.float32(217.0104), np.float32(219.8572), np.float32(218.41052), np.float32(218.34949), np.float32(219.68796), np.float32(216.08487), np.float32(217.71785), np.float32(218.36424), np.float32(220.97498), np.float32(215.87242), np.float32(221.15044), np.float32(218.58168), np.float32(217.2906), np.float32(217.03651), np.float32(218.2417), np.float32(219.49933), np.float32(217.79874), np.float32(219.74257), np.float32(218.15266), np.float32(219.28326), np.float32(215.71545), np.float32(220.52466), np.float32(217.82312), np.float32(218.55994), np.float32(217.98505), np.float32(218.07242), np.float32(218.51256), np.float32(216.67316), np.float32(221.84431), np.float32(226.91577), np.float32(219.38536), np.float32(220.08307), np.float32(219.48468), np.float32(216.75864), np.float32(231.94896), np.float32(214.59848), np.float32(221.88132), np.float32(214.65244), np.float32(226.38594), np.float32(218.46346), np.float32(217.8012), np.float32(232.83336), np.float32(329.2955), np.float32(329.67365), np.float32(328.09808), np.float32(329.0454), np.float32(330.44925), np.float32(329.22394), np.float32(328.6808), np.float32(329.1118), np.float32(328.18558), np.float32(329.80798), np.float32(329.63657), np.float32(328.05713), np.float32(329.20517), np.float32(328.7199), np.float32(330.8329), np.float32(329.49094), np.float32(327.33484), np.float32(329.1654), np.float32(329.0013), np.float32(328.47174), np.float32(329.0725), np.float32(329.04968), np.float32(328.96857), np.float32(328.9552), np.float32(329.41675), np.float32(329.32755), np.float32(328.6142), np.float32(328.61456), np.float32(329.02304), np.float32(329.18707), np.float32(329.60806), np.float32(328.95804), np.float32(328.45587), np.float32(328.7406), np.float32(329.01453), np.float32(328.94498), np.float32(328.48798), np.float32(229.89037), np.float32(216.5965), np.float32(168.08376), np.float32(237.3895), np.float32(330.32104), np.float32(331.8237), np.float32(330.51727), np.float32(328.05115), np.float32(327.6775), np.float32(329.50543), np.float32(328.76852), np.float32(328.5324), np.float32(328.6864), np.float32(328.09702), np.float32(328.77298), np.float32(329.27832), np.float32(328.45718), np.float32(328.79123), np.float32(328.1929), np.float32(329.03146), np.float32(328.8352), np.float32(328.65747), np.float32(328.87628), np.float32(328.6719), np.float32(329.0482), np.float32(328.42386), np.float32(328.7831), np.float32(329.32104), np.float32(329.49023), np.float32(328.82828), np.float32(328.73483), np.float32(328.77316), np.float32(329.0081), np.float32(329.33038), np.float32(328.61563), np.float32(328.977), np.float32(328.91925), np.float32(329.2819), np.float32(328.83813), np.float32(328.79886), np.float32(328.74164), np.float32(329.01535), np.float32(440.81625), np.float32(223.2692), np.float32(216.20233), np.float32(219.88066), np.float32(218.49152), np.float32(441.7773), np.float32(441.45956), np.float32(440.9356), np.float32(214.84166), np.float32(169.84009), np.float32(172.05829), np.float32(186.33606), np.float32(187.86095), np.float32(198.31982), np.float32(200.61914), np.float32(197.04237), np.float32(188.54448), np.float32(193.84764), np.float32(198.14532), np.float32(257.0031), np.float32(264.01822), np.float32(253.77646), np.float32(201.80879), np.float32(197.50998), np.float32(187.77017), np.float32(200.4536), np.float32(199.89426), np.float32(191.2002), np.float32(186.07393), np.float32(205.97363), np.float32(206.64224), np.float32(193.47421), np.float32(256.17035), np.float32(201.22049), np.float32(207.25777), np.float32(193.7392), np.float32(328.9301), np.float32(208.7813), np.float32(206.56245), np.float32(191.74097), np.float32(185.9545), np.float32(207.00865), np.float32(208.312), np.float32(329.62015), np.float32(327.7033), np.float32(208.82802), np.float32(210.29572), np.float32(328.04648), np.float32(188.81769), np.float32(205.97139), np.float32(207.05055), np.float32(658.0139), np.float32(657.8336), np.float32(208.87828), np.float32(212.21397), np.float32(659.00507), np.float32(658.6303), np.float32(201.17325), np.float32(201.2888), np.float32(285.43192), np.float32(257.13477), np.float32(234.52112), np.float32(214.79768), np.float32(219.4987), np.float32(219.61887), np.float32(220.4664), np.float32(217.79399), np.float32(217.36673), np.float32(222.72786), np.float32(216.07565), np.float32(224.83246), np.float32(217.15671), np.float32(218.89948), np.float32(219.59264), np.float32(217.78705), np.float32(216.3372), np.float32(328.24857), np.float32(218.29318), np.float32(217.50653), np.float32(221.14252), np.float32(217.4132), np.float32(218.72607), np.float32(215.53027), np.float32(220.35886), np.float32(217.86838), np.float32(217.81581), np.float32(217.60664), np.float32(219.48602), np.float32(218.50763), np.float32(216.73816), np.float32(219.61386), np.float32(217.1638), np.float32(218.6472), np.float32(217.62076), np.float32(218.38953), np.float32(217.16743), np.float32(220.01007), np.float32(217.57506), np.float32(218.53906), np.float32(217.64645), np.float32(218.52986), np.float32(219.30801), np.float32(216.44258), np.float32(218.75668), np.float32(218.84964), np.float32(218.82353), np.float32(217.54001), np.float32(220.09695), np.float32(217.59271), np.float32(227.52472), np.float32(271.88284), np.float32(325.255), np.float32(332.5329), np.float32(329.05347), np.float32(329.72046), np.float32(331.17203), np.float32(328.2955), np.float32(327.70517), np.float32(330.16373), np.float32(328.92474), np.float32(327.57327), np.float32(330.24493), np.float32(328.24847), np.float32(328.33548), np.float32(329.39233), np.float32(329.05222), np.float32(329.22806), np.float32(328.78992), np.float32(328.4302), np.float32(329.06683), np.float32(328.86362), np.float32(329.11066), np.float32(329.12653), np.float32(327.96417), np.float32(329.12238), np.float32(329.8445), np.float32(329.30292), np.float32(328.78778), np.float32(328.18994), np.float32(328.43198), np.float32(328.57755), np.float32(328.82898), np.float32(329.365), np.float32(328.96185), np.float32(328.57254), np.float32(329.11148), np.float32(328.92474), np.float32(219.80298), np.float32(216.14983), np.float32(218.61751), np.float32(216.87192), np.float32(219.54579), np.float32(216.682), np.float32(222.12325), np.float32(215.71329), np.float32(220.25175), np.float32(216.37569), np.float32(775.0182), np.float32(774.77997), np.float32(775.6134), np.float32(259.1601), np.float32(258.89502), np.float32(330.3381), np.float32(330.82907), np.float32(330.2562), np.float32(330.0261), np.float32(328.23114), np.float32(327.73367), np.float32(329.1246), np.float32(328.8357), np.float32(328.9218), np.float32(328.47812), np.float32(328.485), np.float32(329.36728), np.float32(328.44827), np.float32(327.85776), np.float32(328.7396), np.float32(329.13168), np.float32(328.29468), np.float32(329.03613), np.float32(329.32162), np.float32(328.85724), np.float32(328.49606), np.float32(328.43744), np.float32(328.97238), np.float32(329.34308), np.float32(329.01437), np.float32(328.91623), np.float32(329.17722), np.float32(328.46164), np.float32(329.15677), np.float32(329.21396), np.float32(328.95694), np.float32(328.64832), np.float32(328.79053), np.float32(329.13123), np.float32(329.2552), np.float32(330.0596), np.float32(330.15338), np.float32(325.55377), np.float32(333.0317), np.float32(330.24384), np.float32(330.41452), np.float32(327.3371), np.float32(327.59744), np.float32(331.101), np.float32(658.85187), np.float32(658.6949), np.float32(652.90173), np.float32(206.3643), np.float32(191.80106), np.float32(185.7788), np.float32(200.5818), np.float32(196.69519), np.float32(192.84093), np.float32(192.95154), np.float32(194.48782), np.float32(193.28308), np.float32(192.63295), np.float32(195.47873), np.float32(198.15523), np.float32(192.45657), np.float32(193.46233), np.float32(194.88316), np.float32(195.34073), np.float32(193.55435), np.float32(192.46031), np.float32(194.31664), np.float32(195.10457), np.float32(196.09822), np.float32(191.87546), np.float32(194.50417), np.float32(196.33676), np.float32(192.96004), np.float32(193.1429), np.float32(481.34814), np.float32(469.79767), np.float32(890.6001), np.float32(860.9907), np.float32(832.9783), np.float32(752.167), np.float32(729.1885), np.float32(1293.673), np.float32(1305.2721), np.float32(1317.0541), np.float32(1322.109), np.float32(1320.4563), np.float32(1316.9275), np.float32(1313.3488), np.float32(1314.7887), np.float32(657.8653), np.float32(659.7263), np.float32(659.08453), np.float32(656.0934), np.float32(655.817), np.float32(654.51385), np.float32(653.3367), np.float32(652.88196), np.float32(652.82184), np.float32(650.1119), np.float32(638.98206), np.float32(631.1685), np.float32(622.2771), np.float32(623.5547), np.float32(627.6931), np.float32(320.86682), np.float32(318.04163), np.float32(329.43555), np.float32(346.03687), np.float32(372.97626), np.float32(370.68106), np.float32(332.0014), np.float32(328.35803), np.float32(330.5226), np.float32(329.82852), np.float32(328.76602), np.float32(329.224), np.float32(328.85608), np.float32(328.3988), np.float32(329.33194), np.float32(328.64264), np.float32(330.4529), np.float32(329.2413), np.float32(327.56805), np.float32(329.0615), np.float32(329.3583), np.float32(329.59683), np.float32(330.2289), np.float32(404.5673), np.float32(396.37393), np.float32(331.92224), np.float32(646.16174), np.float32(651.40155), np.float32(659.4134), np.float32(663.1196), np.float32(659.0824), np.float32(659.26556), np.float32(658.38855), np.float32(656.4156), np.float32(652.956), np.float32(648.65466), np.float32(648.41187), np.float32(653.1021), np.float32(656.6596), np.float32(655.8354), np.float32(657.25464), np.float32(658.37555), np.float32(656.90216), np.float32(652.1434), np.float32(638.38873), np.float32(258.04633), np.float32(262.01538), np.float32(326.66232), np.float32(330.94415), np.float32(330.40085), np.float32(329.46054), np.float32(328.53394), np.float32(762.76324), np.float32(782.0218), np.float32(802.8991), np.float32(799.1936), np.float32(327.53397), np.float32(330.6744), np.float32(656.0728), np.float32(658.68353), np.float32(329.60727), np.float32(936.38965), np.float32(939.4108), np.float32(951.8067), np.float32(478.59744), np.float32(473.1542), np.float32(461.5822), np.float32(897.4401), np.float32(884.1178), np.float32(865.2966), np.float32(842.5516), np.float32(816.6355), np.float32(773.5075), np.float32(1017.7356), np.float32(935.3407), np.float32(920.5568), np.float32(910.24335), np.float32(892.7318), np.float32(893.5131), np.float32(896.5724), np.float32(897.3088), np.float32(895.2981), np.float32(894.8653), np.float32(904.1765), np.float32(922.1548), np.float32(949.87244), np.float32(972.6334), np.float32(984.07007), np.float32(992.4545), np.float32(999.38385), np.float32(995.66583), np.float32(990.9689), np.float32(988.5512), np.float32(986.4381), np.float32(984.1286), np.float32(971.0481), np.float32(956.49835), np.float32(990.1467), np.float32(332.5148), np.float32(331.76205), np.float32(330.8151), np.float32(330.4062), np.float32(326.5289), np.float32(328.76807), np.float32(329.5452), np.float32(328.46494), np.float32(329.188), np.float32(328.6527), np.float32(327.98627), np.float32(328.67868), np.float32(329.3966), np.float32(329.24295), np.float32(329.2889), np.float32(327.2664), np.float32(329.36304), np.float32(328.7027), np.float32(329.07388), np.float32(329.91547), np.float32(328.1859), np.float32(328.26785), np.float32(328.48303), np.float32(331.0893), np.float32(385.18997), np.float32(333.9131), np.float32(619.2481), np.float32(611.4431), np.float32(601.7742), np.float32(599.72144), np.float32(602.5982), np.float32(605.47504), np.float32(608.3955), np.float32(612.20325), np.float32(622.0658), np.float32(633.73834), np.float32(638.2992), np.float32(640.67487), np.float32(650.3036), np.float32(652.8191), np.float32(651.08655), np.float32(646.78467), np.float32(642.98193), np.float32(642.7659), np.float32(640.8169), np.float32(637.70776), np.float32(636.5259), np.float32(632.54706), np.float32(335.86557), np.float32(345.99805), np.float32(295.12823), np.float32(296.1683), np.float32(292.30005), np.float32(586.48883), np.float32(588.7817), np.float32(298.4309), np.float32(298.3764), np.float32(298.28845), np.float32(294.0044), np.float32(282.8447), np.float32(286.87366), np.float32(297.62234), np.float32(294.52783), np.float32(293.8348), np.float32(295.74374), np.float32(293.65964), np.float32(295.8828), np.float32(296.33093), np.float32(292.84894), np.float32(295.49817), np.float32(293.295), np.float32(291.08206), np.float32(297.60764), np.float32(294.3879), np.float32(310.18658), np.float32(523.1493), np.float32(536.61176), np.float32(539.8164), np.float32(539.4936), np.float32(529.32007), np.float32(517.91797), np.float32(514.2612), np.float32(516.4399), np.float32(523.63635), np.float32(259.28516), np.float32(272.92044), np.float32(279.45685), np.float32(282.32498), np.float32(282.99188), np.float32(280.19366), np.float32(258.58447), np.float32(265.1817), np.float32(263.19873), np.float32(255.47977), np.float32(260.9595), np.float32(258.9347), np.float32(258.52844), np.float32(258.34512), np.float32(262.79922), np.float32(254.67593), np.float32(258.4653), np.float32(262.82553), np.float32(260.2776), np.float32(263.79807), np.float32(260.3034), np.float32(264.5247), np.float32(255.36607), np.float32(266.263), np.float32(252.69487), np.float32(329.5681), np.float32(329.7053), np.float32(286.4249), np.float32(281.8166), np.float32(290.88425), np.float32(329.63168), np.float32(312.114), np.float32(304.47238), np.float32(300.24445), np.float32(305.8984), np.float32(308.1332), np.float32(296.52536), np.float32(294.5496), np.float32(303.87137), np.float32(284.15817), np.float32(290.05496), np.float32(283.3393), np.float32(289.2029), np.float32(282.45316), np.float32(278.59393), np.float32(267.2579), np.float32(256.41745), np.float32(264.4991), np.float32(248.88623), np.float32(249.57292), np.float32(329.07336), np.float32(226.2418), np.float32(227.245), np.float32(222.2836), np.float32(219.3489), np.float32(220.25179), np.float32(218.66768), np.float32(218.65338), np.float32(216.82835), np.float32(217.64206), np.float32(217.15224), np.float32(217.06627), np.float32(223.0154), np.float32(217.27211), np.float32(220.70306), np.float32(226.08632), np.float32(216.07246), np.float32(223.10172), np.float32(218.52422), np.float32(215.323), np.float32(215.04358), np.float32(219.85481), np.float32(446.29724), np.float32(444.56027), np.float32(443.79303), np.float32(440.57874), np.float32(220.27696), np.float32(215.45113), np.float32(424.41562), np.float32(428.1151), np.float32(438.81433), np.float32(443.57812), np.float32(448.1112), np.float32(451.08582), np.float32(451.76276), np.float32(224.0529), np.float32(222.89996), np.float32(461.61972), np.float32(468.00555), np.float32(473.59158), np.float32(466.63367), np.float32(227.39984), np.float32(222.31862), np.float32(215.76364), np.float32(215.92027), np.float32(214.8532), np.float32(216.55162), np.float32(429.37296), np.float32(440.85663), np.float32(442.9393), np.float32(445.09558), np.float32(448.5652), np.float32(228.32266), np.float32(228.1962), np.float32(229.20955), np.float32(465.43488), np.float32(457.46136), np.float32(452.89505), np.float32(773.3481), np.float32(774.34406), np.float32(430.0292), np.float32(427.13873), np.float32(214.01277), np.float32(225.71587), np.float32(329.40875), np.float32(325.69336), np.float32(333.85886), np.float32(328.07657), np.float32(330.50363), np.float32(331.71057), np.float32(328.16116), np.float32(328.94537), np.float32(329.1277), np.float32(328.7892), np.float32(329.3678), np.float32(329.32297), np.float32(326.88803), np.float32(329.43527), np.float32(329.64258), np.float32(327.9014), np.float32(329.28467), np.float32(329.56757), np.float32(328.08893), np.float32(328.85266), np.float32(329.1171), np.float32(329.17133), np.float32(328.9584), np.float32(327.69217), np.float32(329.1216), np.float32(329.49423), np.float32(329.78177), np.float32(328.1093), np.float32(329.16687), np.float32(329.5974), np.float32(328.8555), np.float32(328.88293), np.float32(329.3739), np.float32(328.77347), np.float32(328.05548), np.float32(329.70465), np.float32(330.17618), np.float32(328.62265), np.float32(328.8152), np.float32(328.1699), np.float32(330.70312), np.float32(329.61615), np.float32(328.93628), np.float32(328.623), np.float32(328.71606), np.float32(442.72833), np.float32(441.93048), np.float32(440.8709), np.float32(440.5051), np.float32(221.48083), np.float32(224.37271), np.float32(162.84601), np.float32(178.15282), np.float32(185.43906), np.float32(198.56062), np.float32(200.33669), np.float32(196.81688), np.float32(189.66203), np.float32(192.4654), np.float32(198.00392), np.float32(194.06302), np.float32(261.21677), np.float32(261.2543), np.float32(199.80234), np.float32(256.91837), np.float32(263.7294), np.float32(257.76318), np.float32(201.7713), np.float32(328.19925), np.float32(328.17218), np.float32(329.13138), np.float32(329.6909), np.float32(329.06458), np.float32(327.72168), np.float32(330.01068), np.float32(329.17847), np.float32(328.76236), np.float32(329.7676), np.float32(327.8961), np.float32(328.599), np.float32(329.6263), np.float32(328.7865), np.float32(329.45856), np.float32(328.4779), np.float32(328.4015), np.float32(329.2551), np.float32(329.41156), np.float32(329.02414), np.float32(328.88318), np.float32(327.86514), np.float32(328.96622), np.float32(329.60892), np.float32(329.04367), np.float32(328.43115), np.float32(328.3758), np.float32(328.90427), np.float32(329.4672), np.float32(327.49783), np.float32(209.05891), np.float32(205.69255), np.float32(336.59738), np.float32(208.24263), np.float32(218.43582), np.float32(223.90645), np.float32(216.11354), np.float32(221.91032), np.float32(218.01132), np.float32(220.92982), np.float32(217.07573), np.float32(220.863), np.float32(217.41338), np.float32(217.25441), np.float32(222.07442), np.float32(216.06406), np.float32(219.46472), np.float32(218.38297), np.float32(218.83691), np.float32(217.59608), np.float32(219.73462), np.float32(215.0028), np.float32(220.03377), np.float32(218.33858), np.float32(218.46907), np.float32(218.0073), np.float32(217.245), np.float32(221.08658), np.float32(216.4589), np.float32(216.92276), np.float32(217.93091), np.float32(220.72417), np.float32(216.91154), np.float32(218.17648), np.float32(218.23624), np.float32(217.13618), np.float32(218.04845), np.float32(218.38133), np.float32(217.93266), np.float32(217.0663), np.float32(218.7292), np.float32(216.45602), np.float32(220.70926), np.float32(217.29373), np.float32(219.60963), np.float32(217.2834), np.float32(219.40611), np.float32(217.98761), np.float32(218.3277), np.float32(217.54295), np.float32(218.79762), np.float32(218.8602), np.float32(219.5101), np.float32(226.1916), np.float32(219.23306), np.float32(229.2248), np.float32(215.29013), np.float32(251.40685), np.float32(247.83934), np.float32(214.87798), np.float32(252.26236), np.float32(260.3872), np.float32(252.59607), np.float32(262.64832), np.float32(249.89677), np.float32(261.9005), np.float32(251.41771), np.float32(330.3516), np.float32(254.17632), np.float32(328.74283), np.float32(329.64285), np.float32(328.8645), np.float32(328.65222), np.float32(329.21243), np.float32(329.45563), np.float32(328.8913), np.float32(328.67722), np.float32(328.53906), np.float32(329.19995), np.float32(329.00583), np.float32(329.90738), np.float32(328.7395), np.float32(328.36728), np.float32(328.33157), np.float32(329.1711), np.float32(329.7812), np.float32(328.8937), np.float32(328.07367), np.float32(328.83105), np.float32(329.4363), np.float32(329.18314), np.float32(329.13327), np.float32(328.66263), np.float32(328.17746), np.float32(329.7054), np.float32(329.11966), np.float32(328.48618), np.float32(330.16663), np.float32(772.11053), np.float32(771.6148), np.float32(770.66187), np.float32(770.93854), np.float32(771.56964), np.float32(203.09877), np.float32(288.29373), np.float32(252.2959), np.float32(328.4817), np.float32(330.18164), np.float32(332.21854), np.float32(328.78992), np.float32(327.11404), np.float32(329.12326), np.float32(329.4696), np.float32(328.11258), np.float32(329.5873), np.float32(326.91208), np.float32(328.34857), np.float32(329.41022), np.float32(328.3555), np.float32(328.94064), np.float32(329.12054), np.float32(327.14203), np.float32(329.0018), np.float32(328.85907), np.float32(329.31848), np.float32(328.892), np.float32(327.9992), np.float32(328.42322), np.float32(328.7947), np.float32(329.34058), np.float32(329.28702), np.float32(328.67648), np.float32(328.43002), np.float32(328.66577), np.float32(328.39484), np.float32(329.61572), np.float32(329.05508), np.float32(328.37808), np.float32(329.03812), np.float32(329.06876), np.float32(328.80374), np.float32(328.95654), np.float32(327.9442), np.float32(328.41653), np.float32(440.58777), np.float32(776.52325), np.float32(776.4676), np.float32(777.243), np.float32(441.40344), np.float32(441.14432), np.float32(441.17526), np.float32(441.10196), np.float32(446.19742), np.float32(781.30853), np.float32(169.41351), np.float32(181.30954), np.float32(191.58427), np.float32(193.81929), np.float32(193.86238), np.float32(196.07962), np.float32(193.53926), np.float32(192.15974), np.float32(191.76764), np.float32(195.30417), np.float32(391.18732), np.float32(394.91162), np.float32(191.01971), np.float32(198.24734), np.float32(198.11734), np.float32(192.6974), np.float32(192.07503), np.float32(193.81175), np.float32(192.33197), np.float32(329.58072), np.float32(326.9997), np.float32(196.8248), np.float32(780.0026), np.float32(780.196), np.float32(781.1262), np.float32(202.30966), np.float32(328.90442), np.float32(331.07648), np.float32(782.98663), np.float32(202.97058), np.float32(779.33124), np.float32(779.9361), np.float32(329.19418), np.float32(206.454), np.float32(327.81284), np.float32(328.77243), np.float32(211.19177), np.float32(210.16725), np.float32(778.4388), np.float32(659.22797), np.float32(205.39574), np.float32(211.51688), np.float32(658.43567), np.float32(658.8362), np.float32(211.31325), np.float32(208.59367), np.float32(658.388), np.float32(658.6144), np.float32(202.95366), np.float32(214.9568), np.float32(236.1743), np.float32(214.48833), np.float32(222.6021), np.float32(225.8469), np.float32(216.14008), np.float32(222.61919), np.float32(216.53679), np.float32(222.13884), np.float32(215.382), np.float32(223.41888), np.float32(217.4631), np.float32(218.35349), np.float32(221.72772), np.float32(215.62802), np.float32(221.65369), np.float32(216.429), np.float32(219.85066), np.float32(216.35536), np.float32(219.19757), np.float32(216.35468), np.float32(221.46144), np.float32(217.45753), np.float32(218.4648), np.float32(217.74239), np.float32(217.8034), np.float32(219.51555), np.float32(216.60933), np.float32(219.29774), np.float32(218.1128), np.float32(219.74274), np.float32(216.1937), np.float32(218.82072), np.float32(218.45403), np.float32(219.32167), np.float32(217.53809), np.float32(218.03558), np.float32(219.27809), np.float32(218.32622), np.float32(217.95866), np.float32(217.45781), np.float32(218.60045), np.float32(216.4682), np.float32(220.3182), np.float32(217.50572), np.float32(220.11082), np.float32(217.71518), np.float32(217.67761), np.float32(218.05377), np.float32(217.73354), np.float32(215.2471), np.float32(217.91661), np.float32(235.09015), np.float32(213.71597), np.float32(229.8924), np.float32(329.70273), np.float32(331.37384), np.float32(328.8013), np.float32(327.9415), np.float32(230.28609), np.float32(329.4339), np.float32(328.43665), np.float32(329.53406), np.float32(328.19547), np.float32(328.41727), np.float32(329.60815), np.float32(328.76056), np.float32(329.22952), np.float32(329.72134), np.float32(327.74945), np.float32(329.34494), np.float32(328.82166), np.float32(328.90274), np.float32(329.27332), np.float32(328.40625), np.float32(329.49292), np.float32(328.71973), np.float32(329.11288), np.float32(329.03067), np.float32(328.8204), np.float32(328.39618), np.float32(329.5155), np.float32(329.41507), np.float32(329.05896), np.float32(328.94888), np.float32(328.29565), np.float32(329.43814), np.float32(329.45908), np.float32(217.57913), np.float32(218.24557), np.float32(218.452), np.float32(217.24696), np.float32(218.09071), np.float32(217.15994), np.float32(220.2056), np.float32(217.23988), np.float32(219.73065), np.float32(216.36572), np.float32(223.43039), np.float32(214.9244), np.float32(773.8222), np.float32(255.8028), np.float32(252.828), np.float32(266.16226), np.float32(254.74403), np.float32(330.92972), np.float32(330.9191), np.float32(329.7384), np.float32(328.97354), np.float32(328.19907), np.float32(329.6817), np.float32(328.8897), np.float32(329.12213), np.float32(329.12332), np.float32(328.3743), np.float32(329.51083), np.float32(329.07428), np.float32(329.03568), np.float32(328.65903), np.float32(329.12906), np.float32(328.25317), np.float32(329.16687), np.float32(329.02313), np.float32(328.79984), np.float32(328.88324), np.float32(329.18585), np.float32(329.66403), np.float32(329.3703), np.float32(327.97174), np.float32(328.9049), np.float32(327.8175), np.float32(933.1001), np.float32(935.17194), np.float32(1000.41016), np.float32(832.8559), np.float32(872.1505), np.float32(909.1678), np.float32(953.7818), np.float32(986.3167), np.float32(1002.0478), np.float32(1011.19696), np.float32(1010.4403), np.float32(1002.99817), np.float32(1000.8708), np.float32(228.7644), np.float32(214.75479), np.float32(228.04741), np.float32(218.5324), np.float32(222.1329), np.float32(212.29851), np.float32(213.73343), np.float32(203.77452), np.float32(185.63387), np.float32(189.10437), np.float32(202.47589), np.float32(193.63281), np.float32(192.3373), np.float32(193.50267), np.float32(323.3336), np.float32(327.60632), np.float32(331.15332), np.float32(332.61398), np.float32(333.76495), np.float32(330.3014), np.float32(329.02588), np.float32(329.72046), np.float32(1310.0635), np.float32(1311.8613), np.float32(663.9174), np.float32(664.08496), np.float32(331.0571), np.float32(330.11258), np.float32(327.17093), np.float32(326.69186), np.float32(330.472), np.float32(330.04425), np.float32(331.63815), np.float32(337.06085), np.float32(345.21185), np.float32(363.0047), np.float32(381.8667), np.float32(779.7316), np.float32(1565.5669), np.float32(1572.6248), np.float32(1584.1238), np.float32(1200.9525), np.float32(1199.306), np.float32(1586.8022), np.float32(1573.3512), np.float32(1563.0302), np.float32(1550.3483), np.float32(1545.9221), np.float32(1147.7782), np.float32(1137.435), np.float32(1122.0356), np.float32(706.1245), np.float32(303.88504), np.float32(202.5584), np.float32(323.51315), np.float32(253.20534), np.float32(261.74774), np.float32(260.99826), np.float32(259.2087), np.float32(262.39178), np.float32(328.1556), np.float32(323.58694), np.float32(331.77313), np.float32(715.33795), np.float32(749.02655), np.float32(772.4553), np.float32(786.119), np.float32(795.04224), np.float32(792.79425), np.float32(792.2241), np.float32(792.0386), np.float32(791.67377), np.float32(793.1615), np.float32(1975.5632), np.float32(1969.5476), np.float32(1963.7341), np.float32(1967.2361), np.float32(1974.0074), np.float32(1976.9358), np.float32(1973.8632), np.float32(1967.6381), np.float32(1966.2444), np.float32(330.2246), np.float32(327.74002), np.float32(328.70108), np.float32(331.98203), np.float32(374.89902), np.float32(372.9844), np.float32(343.66223), np.float32(330.29398), np.float32(326.58203), np.float32(326.1515), np.float32(326.53683), np.float32(331.08032), np.float32(786.47797), np.float32(386.50833), np.float32(397.42398), np.float32(399.74393), np.float32(398.08264), np.float32(394.75134), np.float32(1983.4548), np.float32(1975.4229), np.float32(1971.0758), np.float32(1966.1929), np.float32(391.72507), np.float32(382.28183), np.float32(376.23038), np.float32(375.28806), np.float32(372.81412), np.float32(378.3608), np.float32(374.00464), np.float32(377.4602), np.float32(392.77567), np.float32(398.42487), np.float32(393.8668), np.float32(392.0561), np.float32(394.58096), np.float32(394.50162), np.float32(2353.654), np.float32(2346.8445), np.float32(2339.4429), np.float32(392.1433), np.float32(392.1536), np.float32(392.38647), np.float32(2357.6807), np.float32(2361.3884), np.float32(2364.5247), np.float32(2364.7568), np.float32(2363.0535), np.float32(2363.372), np.float32(2361.8452), np.float32(2353.9043), np.float32(782.924), np.float32(781.45166), np.float32(780.77637), np.float32(781.8359), np.float32(782.7383), np.float32(784.76526), np.float32(787.814), np.float32(789.7344), np.float32(789.22424), np.float32(788.2936), np.float32(788.1867), np.float32(789.4086), np.float32(791.8422), np.float32(796.9902), np.float32(802.7046), np.float32(809.9645), np.float32(819.71344), np.float32(839.66705), np.float32(856.3353), np.float32(869.3423), np.float32(884.4184), np.float32(887.0896), np.float32(887.89557), np.float32(888.2337), np.float32(883.7829), np.float32(880.81323), np.float32(880.02716), np.float32(877.269), np.float32(878.8731), np.float32(880.03), np.float32(878.9658), np.float32(881.5059), np.float32(881.50385), np.float32(882.6054), np.float32(883.53107), np.float32(881.0917), np.float32(879.8469), np.float32(878.75024), np.float32(874.5562), np.float32(873.8123), np.float32(870.5296), np.float32(869.57806), np.float32(862.5827), np.float32(845.8323), np.float32(836.19006), np.float32(808.564), np.float32(800.7963), np.float32(770.07104), np.float32(757.6641), np.float32(755.946), np.float32(734.52423), np.float32(717.264), np.float32(703.6232), np.float32(694.3041), np.float32(680.7121), np.float32(330.4204), np.float32(330.3231), np.float32(329.51282), np.float32(330.56094), np.float32(329.34006), np.float32(326.14194), np.float32(407.67453), np.float32(423.58438), np.float32(430.79147), np.float32(331.1226), np.float32(328.32785), np.float32(874.1852), np.float32(864.92584), np.float32(658.5466), np.float32(658.513), np.float32(657.8063), np.float32(658.6318), np.float32(887.70123), np.float32(888.8347), np.float32(871.2731), np.float32(263.25662), np.float32(297.38226), np.float32(169.03891), np.float32(347.9368), np.float32(348.8191), np.float32(347.57407), np.float32(297.69708), np.float32(602.66785), np.float32(603.133), np.float32(603.57623), np.float32(601.8035), np.float32(601.5298), np.float32(607.8031), np.float32(619.90436), np.float32(636.9298), np.float32(650.5848), np.float32(654.5727), np.float32(666.463), np.float32(670.1944), np.float32(671.2519), np.float32(673.7427), np.float32(670.6353), np.float32(661.14594), np.float32(664.54956), np.float32(659.88873), np.float32(657.3847), np.float32(658.2569), np.float32(652.04913), np.float32(657.1695), np.float32(661.4049), np.float32(679.51276), np.float32(292.19528), np.float32(292.9499), np.float32(295.40485), np.float32(293.41583), np.float32(290.33557), np.float32(292.6721), np.float32(297.85388), np.float32(293.2509), np.float32(293.95798), np.float32(293.20087), np.float32(292.836), np.float32(294.99594), np.float32(292.83887), np.float32(293.73422), np.float32(290.47067), np.float32(293.3535), np.float32(294.78903), np.float32(290.25128), np.float32(294.25385), np.float32(289.61172), np.float32(221.77077), np.float32(214.22954), np.float32(218.52475), np.float32(227.37367), np.float32(216.27853), np.float32(222.3871), np.float32(217.69759), np.float32(220.54694), np.float32(219.0194), np.float32(216.87978), np.float32(220.98926), np.float32(216.71744), np.float32(222.37637), np.float32(215.2539), np.float32(222.07689), np.float32(217.8121), np.float32(218.66591), np.float32(218.31538), np.float32(217.68), np.float32(220.5061), np.float32(216.49184), np.float32(219.94836), np.float32(318.90683), np.float32(320.50165), np.float32(318.70865), np.float32(304.59882), np.float32(217.2277), np.float32(279.8706), np.float32(271.39246), np.float32(219.7491), np.float32(248.11809), np.float32(261.2848), np.float32(246.42131), np.float32(212.8389), np.float32(242.51578), np.float32(211.83122), np.float32(221.9164), np.float32(223.30121), np.float32(219.69234), np.float32(216.20424), np.float32(220.00485), np.float32(218.02899), np.float32(218.06654), np.float32(219.74211), np.float32(217.06308), np.float32(221.12976), np.float32(217.33923), np.float32(218.41727), np.float32(216.71156), np.float32(219.71335), np.float32(216.15364), np.float32(223.84647), np.float32(257.43015), np.float32(260.88873), np.float32(258.87003), np.float32(262.16812), np.float32(519.828), np.float32(522.6759), np.float32(524.60175), np.float32(520.45245), np.float32(519.91614), np.float32(522.6289), np.float32(522.96747), np.float32(522.20074), np.float32(523.138), np.float32(524.6898), np.float32(522.5553), np.float32(519.7471), np.float32(519.83386), np.float32(516.5302), np.float32(512.6979), np.float32(259.44446), np.float32(265.38742), np.float32(257.63593), np.float32(263.127), np.float32(257.49457), np.float32(262.21567), np.float32(258.8794), np.float32(260.37463), np.float32(259.6553), np.float32(257.66693), np.float32(263.03876), np.float32(258.37192), np.float32(262.5049), np.float32(258.71802), np.float32(261.75073), np.float32(258.21152), np.float32(256.63205), np.float32(256.01193), np.float32(328.912), np.float32(328.4776), np.float32(329.33063), np.float32(329.36282), np.float32(330.2874), np.float32(328.09854), np.float32(327.7232), np.float32(773.2619), np.float32(257.2429), np.float32(255.8918), np.float32(263.5382), np.float32(663.52625), np.float32(657.478), np.float32(514.96326), np.float32(510.06677), np.float32(516.6626), np.float32(520.1368), np.float32(519.68115), np.float32(520.11755), np.float32(520.0847), np.float32(517.61127), np.float32(515.1142), np.float32(514.7525), np.float32(515.0503), np.float32(517.22833), np.float32(521.1192), np.float32(527.41815), np.float32(537.19995), np.float32(541.0676), np.float32(543.7663), np.float32(545.3388), np.float32(538.643), np.float32(532.58954), np.float32(525.6398), np.float32(520.64813), np.float32(519.2766), np.float32(519.5181), np.float32(519.4747), np.float32(519.5504), np.float32(524.1809), np.float32(531.1814), np.float32(532.8102), np.float32(533.4773), np.float32(533.5795), np.float32(533.37933), np.float32(529.5505), np.float32(521.82184), np.float32(519.64374), np.float32(515.81573), np.float32(512.51245), np.float32(517.963), np.float32(522.93695), np.float32(533.0439), np.float32(544.8788), np.float32(563.89294), np.float32(581.12213), np.float32(590.63776), np.float32(600.34894), np.float32(596.71295), np.float32(591.47095), np.float32(586.43036), np.float32(584.9803), np.float32(588.7853), np.float32(592.93616), np.float32(606.84717), np.float32(612.89923), np.float32(628.96356), np.float32(650.1038), np.float32(658.6199), np.float32(664.5045), np.float32(658.8348), np.float32(656.39124), np.float32(327.0356), np.float32(326.24908), np.float32(194.8098), np.float32(195.70079), np.float32(193.59607), np.float32(194.16954), np.float32(194.87457), np.float32(192.84145), np.float32(193.20343), np.float32(195.67838), np.float32(196.39952), np.float32(193.16995), np.float32(193.0815), np.float32(194.2246), np.float32(195.65225), np.float32(193.30295), np.float32(191.59888), np.float32(196.80923), np.float32(198.56882), np.float32(193.29607), np.float32(191.34209), np.float32(195.87355), np.float32(197.43297), np.float32(193.09145), np.float32(190.78273), np.float32(197.38615), np.float32(199.7893), np.float32(193.06345), np.float32(191.12137), np.float32(195.78993), np.float32(198.90977), np.float32(193.11606), np.float32(191.16878), np.float32(197.19379), np.float32(198.13745), np.float32(192.49156), np.float32(192.72401), np.float32(199.29662), np.float32(196.67458), np.float32(187.8605), np.float32(230.09224), np.float32(222.98326), np.float32(214.97931), np.float32(227.60318), np.float32(217.99136), np.float32(218.06396), np.float32(220.09486), np.float32(220.98224), np.float32(219.62703), np.float32(215.1886), np.float32(220.2716), np.float32(217.7317), np.float32(220.30733), np.float32(216.16039), np.float32(221.8011), np.float32(216.84134), np.float32(218.0034), np.float32(218.96297), np.float32(216.75238), np.float32(220.11357), np.float32(217.57649), np.float32(219.5782), np.float32(217.4477), np.float32(220.6495), np.float32(216.9493), np.float32(218.25703), np.float32(218.23344), np.float32(218.03407), np.float32(217.8734), np.float32(218.11136), np.float32(219.62692), np.float32(217.52434), np.float32(218.63156), np.float32(216.9306), np.float32(220.24095), np.float32(216.63593), np.float32(219.09589), np.float32(219.20256), np.float32(218.1734), np.float32(218.76796), np.float32(217.48688), np.float32(218.25197), np.float32(217.59973), np.float32(218.89684), np.float32(217.5815), np.float32(220.01804), np.float32(218.30089), np.float32(219.55379), np.float32(216.47838), np.float32(215.58522), np.float32(216.44164), np.float32(219.73036), np.float32(438.70377), np.float32(231.71515), np.float32(256.9456), np.float32(255.5549), np.float32(777.68207), np.float32(777.63666), np.float32(234.00957), np.float32(215.51813), np.float32(236.70479), np.float32(214.17973), np.float32(230.96254), np.float32(216.2966), np.float32(219.74858), np.float32(221.82393), np.float32(217.39659), np.float32(229.44186), np.float32(214.53964), np.float32(229.11404), np.float32(213.95796), np.float32(228.22379), np.float32(216.1221), np.float32(219.66121), np.float32(218.9074), np.float32(219.28168), np.float32(224.55402), np.float32(214.37079), np.float32(227.46826), np.float32(214.98355), np.float32(221.89998), np.float32(215.0949), np.float32(225.88893), np.float32(217.86528), np.float32(217.72345), np.float32(221.07346), np.float32(776.1818), np.float32(776.3422), np.float32(776.3784), np.float32(776.52783), np.float32(215.61496), np.float32(223.54247), np.float32(217.0335), np.float32(776.5403), np.float32(776.52856), np.float32(776.59436), np.float32(775.7945), np.float32(215.29326), np.float32(221.07051), np.float32(215.33353), np.float32(231.90459), np.float32(266.85266), np.float32(325.32324), np.float32(330.29025), np.float32(330.73325), np.float32(330.21127), np.float32(330.27023), np.float32(329.18405), np.float32(327.86728), np.float32(329.55878), np.float32(328.60837), np.float32(328.74014), np.float32(329.86954), np.float32(327.89124), np.float32(328.311), np.float32(329.461), np.float32(328.766), np.float32(328.91452), np.float32(329.10568), np.float32(328.15594), np.float32(329.458), np.float32(328.67484), np.float32(329.14246), np.float32(329.44858), np.float32(327.83966), np.float32(329.07388), np.float32(329.11462), np.float32(329.32782), np.float32(329.2071), np.float32(329.3623), np.float32(328.69986), np.float32(328.87766), np.float32(329.48828), np.float32(329.7167), np.float32(328.99634), np.float32(328.12885), np.float32(329.03387), np.float32(329.00497), np.float32(329.81268), np.float32(329.57864), np.float32(327.9602), np.float32(776.1792), np.float32(776.20404), np.float32(329.68616), np.float32(329.4027), np.float32(328.923), np.float32(521.75397), np.float32(776.2319), np.float32(775.4109), np.float32(775.5535), np.float32(512.51556), np.float32(163.24814), np.float32(170.74086), np.float32(183.78069), np.float32(198.15825), np.float32(197.74504), np.float32(260.48395), np.float32(192.12366), np.float32(193.24313), np.float32(193.68416), np.float32(259.97815), np.float32(258.29874), np.float32(262.69974), np.float32(258.7278), np.float32(261.334), np.float32(259.44785), np.float32(200.362), np.float32(260.0286), np.float32(189.87424), np.float32(193.03624), np.float32(195.19463), np.float32(329.05118), np.float32(328.97073), np.float32(196.4603), np.float32(327.28226), np.float32(328.9108), np.float32(330.27258), np.float32(328.54816), np.float32(328.6528), np.float32(329.74014), np.float32(328.44473), np.float32(328.64468), np.float32(329.2909), np.float32(328.48398), np.float32(329.55856), np.float32(329.3019), np.float32(328.58026), np.float32(328.88922), np.float32(329.50482), np.float32(328.8489), np.float32(329.36093), np.float32(328.39795), np.float32(329.37332), np.float32(330.0917), np.float32(328.6795), np.float32(659.1065), np.float32(659.1868), np.float32(658.49133), np.float32(658.0458), np.float32(657.6626), np.float32(540.42804), np.float32(241.48058), np.float32(229.63373), np.float32(213.9599), np.float32(228.07918), np.float32(217.31819), np.float32(220.4885), np.float32(219.27335), np.float32(219.5109), np.float32(221.54398), np.float32(214.40096), np.float32(221.37704), np.float32(217.31627), np.float32(220.8293), np.float32(215.19086), np.float32(222.47505), np.float32(218.40881), np.float32(217.83676), np.float32(219.26822), np.float32(215.53015), np.float32(220.68776), np.float32(217.20091), np.float32(218.96042), np.float32(217.06209), np.float32(220.56651), np.float32(217.3568), np.float32(217.99808), np.float32(218.47798), np.float32(217.94391), np.float32(218.52939), np.float32(217.1028), np.float32(219.37665), np.float32(217.86069), np.float32(218.82652), np.float32(217.3266), np.float32(219.27461), np.float32(216.55144), np.float32(218.79002), np.float32(219.44456), np.float32(217.30319), np.float32(218.96397), np.float32(217.94421), np.float32(217.94548), np.float32(217.87997), np.float32(218.80083), np.float32(217.5934), np.float32(220.03494), np.float32(217.40956), np.float32(220.25092), np.float32(217.08015), np.float32(217.4831), np.float32(215.84177), np.float32(221.64467), np.float32(221.39296), np.float32(217.14726), np.float32(230.07188), np.float32(216.6456), np.float32(223.4476), np.float32(216.51321), np.float32(220.99516), np.float32(217.82326), np.float32(216.95137), np.float32(221.59781), np.float32(216.2696), np.float32(222.53467), np.float32(215.57782), np.float32(221.91284), np.float32(215.92902), np.float32(222.18103), np.float32(216.47086), np.float32(218.44362), np.float32(219.7043), np.float32(217.36415), np.float32(219.63094), np.float32(216.4396), np.float32(221.91028), np.float32(215.83601), np.float32(220.00493), np.float32(217.16806), np.float32(220.19415), np.float32(216.37895), np.float32(219.59682), np.float32(219.15915), np.float32(217.73099), np.float32(218.79144), np.float32(217.22008), np.float32(219.5107), np.float32(217.63974), np.float32(221.35182), np.float32(217.37865), np.float32(218.51286), np.float32(216.39157), np.float32(219.21806), np.float32(216.43227), np.float32(219.34839), np.float32(220.46686), np.float32(218.047), np.float32(219.73476), np.float32(216.31567), np.float32(219.6349), np.float32(213.381), np.float32(228.18378), np.float32(248.90382), np.float32(264.45975), np.float32(329.49326), np.float32(331.14902), np.float32(330.3046), np.float32(330.961), np.float32(329.2797), np.float32(327.172), np.float32(329.4681), np.float32(329.05304), np.float32(328.36792), np.float32(329.3384), np.float32(328.55914), np.float32(329.24628), np.float32(329.48077), np.float32(328.37994), np.float32(328.95203), np.float32(329.1483), np.float32(328.25732), np.float32(329.31863), np.float32(328.86374), np.float32(328.733), np.float32(329.05243), np.float32(328.85275), np.float32(327.66415), np.float32(338.8233), np.float32(340.28506), np.float32(324.37247), np.float32(319.59573), np.float32(314.6209), np.float32(318.83554), np.float32(333.68262), np.float32(326.94144), np.float32(329.8635), np.float32(328.18658), np.float32(327.95993), np.float32(329.8987), np.float32(330.4535), np.float32(328.44922), np.float32(326.51697), np.float32(327.722), np.float32(331.56592), np.float32(329.30695), np.float32(329.67804), np.float32(331.29092), np.float32(327.76385), np.float32(328.01767), np.float32(327.47974), np.float32(329.6924), np.float32(660.3263), np.float32(333.69736), np.float32(340.3737), np.float32(336.93445), np.float32(668.53424), np.float32(662.51825), np.float32(660.3524), np.float32(658.85895), np.float32(656.446), np.float32(652.5458), np.float32(648.9225), np.float32(642.6199), np.float32(325.87314), np.float32(655.1098), np.float32(663.9427), np.float32(676.91797), np.float32(686.5329), np.float32(699.45844), np.float32(704.9197), np.float32(703.3946), np.float32(698.8819), np.float32(681.93146), np.float32(661.8135), np.float32(649.0166), np.float32(322.95374), np.float32(325.13913), np.float32(325.89334), np.float32(328.1662), np.float32(332.17203), np.float32(334.51273), np.float32(337.98938), np.float32(340.93216), np.float32(336.84192), np.float32(331.0589), np.float32(330.05978), np.float32(335.91232), np.float32(784.3474), np.float32(320.77414), np.float32(658.8362), np.float32(662.8563), np.float32(665.562), np.float32(672.4418), np.float32(781.4599), np.float32(785.1104), np.float32(333.98923), np.float32(337.78964), np.float32(339.19913), np.float32(658.5902), np.float32(781.18054), np.float32(781.7758), np.float32(786.92834), np.float32(246.1765), np.float32(793.9322), np.float32(394.39484), np.float32(391.56644), np.float32(385.2624), np.float32(378.55746), np.float32(335.67224), np.float32(784.0562), np.float32(784.8488), np.float32(784.4076), np.float32(783.1726), np.float32(783.3033), np.float32(782.09296), np.float32(782.3175), np.float32(329.46463), np.float32(330.29086), np.float32(329.85342), np.float32(327.0102), np.float32(330.51245), np.float32(330.0205), np.float32(328.70108), np.float32(329.84802), np.float32(328.49722), np.float32(327.42072), np.float32(329.32373), np.float32(328.37976), np.float32(330.23196), np.float32(330.061), np.float32(329.07367), np.float32(330.72754), np.float32(414.17987), np.float32(407.9254), np.float32(404.3853), np.float32(402.00565), np.float32(399.93347), np.float32(396.95868), np.float32(390.97794), np.float32(386.20328), np.float32(384.90005), np.float32(384.9541), np.float32(384.25043), np.float32(384.80563), np.float32(390.4626), np.float32(393.87054), np.float32(398.13763), np.float32(402.72668), np.float32(406.0597), np.float32(412.0344), np.float32(415.7617), np.float32(410.35583), np.float32(401.2775), np.float32(396.87714), np.float32(260.9212), np.float32(191.96513), np.float32(193.32864), np.float32(195.39153), np.float32(195.1175), np.float32(193.91125), np.float32(193.17781), np.float32(192.27574), np.float32(327.87604), np.float32(329.08124), np.float32(329.86835), np.float32(327.86874), np.float32(329.10452), np.float32(328.88834), np.float32(329.33273), np.float32(328.21994), np.float32(328.6485), np.float32(328.67337), np.float32(328.43073), np.float32(329.29297), np.float32(329.2268), np.float32(328.5753), np.float32(329.44525), np.float32(328.33145), np.float32(329.68018), np.float32(328.97086), np.float32(419.20404), np.float32(406.7201), np.float32(399.03598), np.float32(396.52643), np.float32(396.4472), np.float32(791.6786), np.float32(788.6126), np.float32(780.35815), np.float32(775.56946), np.float32(774.5119), np.float32(773.9228), np.float32(773.9043), np.float32(774.58417), np.float32(777.89716), np.float32(786.4948), np.float32(796.3347), np.float32(802.30707), np.float32(805.82104), np.float32(811.5131), np.float32(807.9711), np.float32(799.6967), np.float32(793.04565), np.float32(779.7727), np.float32(768.5903), np.float32(752.26337), np.float32(752.0468), np.float32(758.0379), np.float32(769.80963), np.float32(780.8845), np.float32(798.3458), np.float32(812.06775), np.float32(806.5551), np.float32(812.5746), np.float32(816.09265), np.float32(795.97784), np.float32(779.12604), np.float32(764.989), np.float32(751.742), np.float32(750.0169), np.float32(743.48645), np.float32(754.56067), np.float32(769.7745), np.float32(785.41), np.float32(792.55054), np.float32(790.30835), np.float32(329.05185), np.float32(807.30786), np.float32(802.54407), np.float32(330.1228), np.float32(328.6186), np.float32(329.05746), np.float32(776.789), np.float32(327.358), np.float32(330.57565), np.float32(328.9145), np.float32(328.73874), np.float32(329.93576), np.float32(328.4864), np.float32(328.502), np.float32(782.7519), np.float32(783.72125), np.float32(775.77716), np.float32(770.27057), np.float32(328.283), np.float32(332.7257), np.float32(330.81934), np.float32(779.60657), np.float32(783.85803), np.float32(394.5397), np.float32(658.9047), np.float32(660.5976), np.float32(655.79443), np.float32(397.47906), np.float32(352.7559), np.float32(348.5105), np.float32(349.80072), np.float32(350.76364), np.float32(348.8605), np.float32(295.07343), np.float32(291.83267), np.float32(718.52594), np.float32(713.0532), np.float32(698.2381), np.float32(682.77655), np.float32(674.8802), np.float32(660.75653), np.float32(658.4243), np.float32(656.6994), np.float32(656.0409), np.float32(654.3035), np.float32(657.4091), np.float32(333.9245), np.float32(315.14316), np.float32(316.5136), np.float32(329.5846), np.float32(323.85342), np.float32(314.09372), np.float32(321.27505), np.float32(321.1741), np.float32(304.49292), np.float32(306.9654), np.float32(304.2182), np.float32(605.24493), np.float32(600.1312), np.float32(594.63055), np.float32(590.051), np.float32(587.3333), np.float32(586.7657), np.float32(586.9307), np.float32(585.92053), np.float32(585.9791), np.float32(585.9703), np.float32(586.12146), np.float32(586.3195), np.float32(587.8179), np.float32(589.86743), np.float32(589.94196), np.float32(297.96704), np.float32(299.79062), np.float32(291.57764), np.float32(290.28317), np.float32(298.114), np.float32(302.67636), np.float32(288.87894), np.float32(211.39926), np.float32(313.38516), np.float32(586.8455), np.float32(584.6171), np.float32(584.40936), np.float32(581.73413), np.float32(580.40265), np.float32(582.817), np.float32(580.90857), np.float32(578.9006), np.float32(580.5984), np.float32(581.8618), np.float32(581.5404), np.float32(582.8616), np.float32(583.37537), np.float32(580.8353), np.float32(581.73975), np.float32(578.10986), np.float32(566.74854), np.float32(219.39395), np.float32(221.93513), np.float32(324.68048), np.float32(220.53972), np.float32(216.82039), np.float32(222.94594), np.float32(215.16359), np.float32(220.35878), np.float32(216.67561), np.float32(221.23517), np.float32(216.4407), np.float32(219.2473), np.float32(218.40012), np.float32(218.05533), np.float32(217.48305), np.float32(218.21019), np.float32(220.05824), np.float32(216.5072), np.float32(218.918), np.float32(217.93817), np.float32(220.2943), np.float32(217.61227), np.float32(218.93034), np.float32(217.79259), np.float32(218.88298), np.float32(220.0331), np.float32(216.63081), np.float32(217.98033), np.float32(217.25017), np.float32(214.41971), np.float32(215.9038), np.float32(327.21118), np.float32(330.37933), np.float32(329.2713), np.float32(237.88162), np.float32(534.1221), np.float32(536.2526), np.float32(797.667), np.float32(795.10657), np.float32(797.91187), np.float32(797.821), np.float32(794.1641), np.float32(792.8719), np.float32(794.8472), np.float32(804.3391), np.float32(816.3876), np.float32(558.7679), np.float32(576.3695), np.float32(585.36646), np.float32(589.89514), np.float32(308.15466), np.float32(581.51825), np.float32(580.47516), np.float32(575.19104), np.float32(562.15283), np.float32(547.8121), np.float32(329.2708), np.float32(331.65576), np.float32(323.6078), np.float32(329.23315), np.float32(324.26233), np.float32(302.85635), np.float32(285.90237), np.float32(313.6122), np.float32(328.4453), np.float32(777.13556), np.float32(324.27643), np.float32(330.6271), np.float32(327.97366), np.float32(325.8639), np.float32(781.30695), np.float32(775.85864), np.float32(770.14813), np.float32(775.5477), np.float32(777.77466), np.float32(589.30664), np.float32(584.1225), np.float32(579.5184), np.float32(772.6897), np.float32(773.07983), np.float32(243.63063), np.float32(254.04466), np.float32(268.5473), np.float32(249.63692), np.float32(218.01714), np.float32(218.56387), np.float32(220.69684), np.float32(226.64726), np.float32(225.32784), np.float32(214.60768), np.float32(225.14581), np.float32(215.28964), np.float32(220.66765), np.float32(217.23907), np.float32(216.70502), np.float32(215.82458), np.float32(218.11745), np.float32(220.28674), np.float32(220.16835), np.float32(227.61894), np.float32(223.06416), np.float32(227.25452), np.float32(449.1181), np.float32(447.3399), np.float32(445.07516), np.float32(440.87167), np.float32(433.69843), np.float32(427.58517), np.float32(421.6163), np.float32(209.17589), np.float32(214.42043), np.float32(213.33337), np.float32(222.54172), np.float32(219.4388), np.float32(226.95543), np.float32(226.0256), np.float32(225.0502), np.float32(230.2883), np.float32(329.4352), np.float32(329.88516), np.float32(328.01987), np.float32(328.01324), np.float32(329.51373), np.float32(328.77844), np.float32(329.67438), np.float32(328.33716), np.float32(328.2206), np.float32(328.7422), np.float32(776.5104), np.float32(777.94165), np.float32(237.24084), np.float32(390.4971), np.float32(261.28427), np.float32(259.49234), np.float32(195.98389), np.float32(781.21747), np.float32(781.474), np.float32(190.05003), np.float32(193.82445), np.float32(192.54675), np.float32(192.94017), np.float32(782.1076), np.float32(780.4719), np.float32(780.31744), np.float32(329.26575), np.float32(328.92365), np.float32(330.28632), np.float32(328.8316), np.float32(192.30444), np.float32(327.9458), np.float32(329.049), np.float32(329.3059), np.float32(329.4154), np.float32(328.8498), np.float32(328.5796), np.float32(327.93344), np.float32(330.04813), np.float32(328.65353), np.float32(328.4283), np.float32(329.91464), np.float32(328.5981), np.float32(329.82703), np.float32(328.68283), np.float32(328.36368), np.float32(328.96002), np.float32(328.7531), np.float32(328.99667), np.float32(329.13388), np.float32(329.2642), np.float32(328.41724), np.float32(328.74573), np.float32(329.0135), np.float32(329.4851), np.float32(329.116), np.float32(329.6892), np.float32(328.92938), np.float32(329.66763), np.float32(329.62494), np.float32(328.88046), np.float32(331.63498), np.float32(181.74081), np.float32(194.18353), np.float32(253.56512), np.float32(255.14462), np.float32(329.8413), np.float32(329.93405), np.float32(330.5514), np.float32(328.47504), np.float32(327.5742), np.float32(329.4943), np.float32(328.2732), np.float32(328.80612), np.float32(329.46863), np.float32(328.09457), np.float32(329.47192), np.float32(329.05518), np.float32(328.6127), np.float32(328.93912), np.float32(328.91565), np.float32(328.3592), np.float32(329.4234), np.float32(328.93787), np.float32(328.8099), np.float32(328.9754), np.float32(328.58047), np.float32(329.43045), np.float32(328.47797), np.float32(328.787), np.float32(329.4477), np.float32(328.86832), np.float32(328.96005), np.float32(329.1263), np.float32(329.7727), np.float32(328.73096), np.float32(328.271), np.float32(218.03294), np.float32(220.70633), np.float32(328.82437), np.float32(329.01706), np.float32(328.9556), np.float32(328.5075), np.float32(216.66792), np.float32(220.28383), np.float32(218.93501), np.float32(219.09392), np.float32(220.63063), np.float32(216.28639), np.float32(218.06973), np.float32(216.41621), np.float32(221.49783), np.float32(216.26073), np.float32(233.44498), np.float32(264.68), np.float32(234.72714), np.float32(219.35896), np.float32(219.6392), np.float32(330.89612), np.float32(327.4894), np.float32(327.32526), np.float32(329.69562), np.float32(329.269), np.float32(329.0531), np.float32(328.91547), np.float32(327.4822), np.float32(329.11923), np.float32(328.68167), np.float32(328.40918), np.float32(329.77557), np.float32(328.6033), np.float32(329.31607), np.float32(328.76614), np.float32(328.31372), np.float32(328.94955), np.float32(328.90958), np.float32(328.3163), np.float32(329.03574), np.float32(329.36542), np.float32(328.65866), np.float32(328.98477), np.float32(328.47455), np.float32(328.89062), np.float32(328.85706), np.float32(329.21423), np.float32(329.18417), np.float32(328.6031), np.float32(328.3486), np.float32(329.1387), np.float32(329.11176), np.float32(328.43344), np.float32(328.25256), np.float32(217.83746), np.float32(218.04773), np.float32(216.67606), np.float32(776.87427), np.float32(776.92017), np.float32(776.6565), np.float32(659.87476), np.float32(658.6188), np.float32(659.3174), np.float32(777.37976), np.float32(775.27264), np.float32(251.75209), np.float32(240.787), np.float32(258.96234), np.float32(330.98016), np.float32(330.08368), np.float32(331.36023), np.float32(330.33142), np.float32(327.09268), np.float32(328.6127), np.float32(330.0196), np.float32(328.3256), np.float32(328.73523), np.float32(329.37054), np.float32(327.83948), np.float32(329.56763), np.float32(329.1552), np.float32(328.36044), np.float32(328.90375), np.float32(328.65305), np.float32(329.17773), np.float32(329.17334), np.float32(328.67593), np.float32(329.17624), np.float32(328.74173), np.float32(328.1782), np.float32(329.80115), np.float32(328.92593), np.float32(329.18423), np.float32(329.4008), np.float32(328.9929), np.float32(329.39093), np.float32(328.78632), np.float32(329.37646), np.float32(329.18735), np.float32(328.7235), np.float32(328.6972), np.float32(329.59753), np.float32(329.21506), np.float32(329.08395), np.float32(328.60452), np.float32(329.15796), np.float32(330.24072), np.float32(329.36697), np.float32(329.37994), np.float32(328.6667), np.float32(778.32733), np.float32(777.33746), np.float32(777.83563), np.float32(659.05457), np.float32(660.2828), np.float32(396.37378), np.float32(168.83492), np.float32(179.08464), np.float32(188.39804), np.float32(195.29552), np.float32(195.01048), np.float32(194.08392), np.float32(192.12427), np.float32(194.73013), np.float32(192.19362), np.float32(190.85555), np.float32(195.56303), np.float32(260.59357), np.float32(192.1254), np.float32(193.58435), np.float32(196.70052), np.float32(196.11806), np.float32(191.82878), np.float32(190.74207), np.float32(191.93118), np.float32(328.40442), np.float32(329.93182), np.float32(329.07355), np.float32(195.38258), np.float32(329.9598), np.float32(328.60342), np.float32(328.66626), np.float32(329.30148), np.float32(329.8008), np.float32(329.05496), np.float32(329.43094), np.float32(328.31747), np.float32(327.88794), np.float32(329.98605), np.float32(329.3976), np.float32(328.65625), np.float32(329.2153), np.float32(328.54276), np.float32(329.43106), np.float32(329.39572), np.float32(329.20535), np.float32(329.28162), np.float32(329.634), np.float32(328.41357), np.float32(330.05533), np.float32(329.77863), np.float32(206.4259), np.float32(330.20312), np.float32(329.03214), np.float32(210.86195), np.float32(332.52795), np.float32(325.3141), np.float32(330.69934), np.float32(330.1902), np.float32(329.27377), np.float32(332.17868), np.float32(222.301), np.float32(214.6219), np.float32(228.0299), np.float32(329.12308), np.float32(226.039), np.float32(216.03996), np.float32(220.00089), np.float32(328.02148), np.float32(214.06366), np.float32(222.1649), np.float32(217.57591), np.float32(329.4385), np.float32(327.81628), np.float32(329.23856), np.float32(328.72153), np.float32(219.94034), np.float32(216.62563), np.float32(328.14026), np.float32(328.42645), np.float32(329.06985), np.float32(329.01816), np.float32(329.21506), np.float32(220.1451), np.float32(216.64648), np.float32(219.37553), np.float32(216.45947), np.float32(329.4414), np.float32(328.8598), np.float32(217.6493), np.float32(217.77962), np.float32(218.19034), np.float32(219.85579), np.float32(215.91092), np.float32(219.3364), np.float32(327.73605), np.float32(221.97153), np.float32(216.61148), np.float32(221.61728), np.float32(218.14464), np.float32(218.49153), np.float32(217.50726), np.float32(217.09282), np.float32(221.00244), np.float32(215.69426), np.float32(207.22324), np.float32(325.02023), np.float32(327.67206), np.float32(329.18805), np.float32(330.3302), np.float32(329.91745), np.float32(330.4203), np.float32(328.21155), np.float32(327.7843), np.float32(329.34686), np.float32(329.37225), np.float32(329.01257), np.float32(328.4792), np.float32(328.08435), np.float32(328.8867), np.float32(328.81372), np.float32(328.8056), np.float32(328.95813), np.float32(328.86078), np.float32(328.36353), np.float32(328.98727), np.float32(329.13416), np.float32(328.85), np.float32(328.91898), np.float32(328.71042), np.float32(329.04572), np.float32(328.72488), np.float32(329.21103), np.float32(329.1504), np.float32(328.67313), np.float32(328.54538), np.float32(328.98865), np.float32(329.40164), np.float32(328.62634), np.float32(328.89807), np.float32(328.76465), np.float32(328.417), np.float32(328.8968), np.float32(329.34537), np.float32(328.9487), np.float32(328.69824), np.float32(329.01172), np.float32(329.3145), np.float32(777.30316), np.float32(328.55777), np.float32(329.18475), np.float32(328.1682), np.float32(329.2886), np.float32(778.174), np.float32(777.36005), np.float32(775.7596), np.float32(210.99979), np.float32(234.98274), np.float32(253.90079), np.float32(329.0139), np.float32(328.02765), np.float32(332.54025), np.float32(329.33157), np.float32(327.26862), np.float32(329.4679), np.float32(329.3328), np.float32(328.4677), np.float32(329.44092), np.float32(328.54483), np.float32(327.64542), np.float32(329.60233), np.float32(328.88763), np.float32(328.71072), np.float32(329.39542), np.float32(327.4762), np.float32(329.60455), np.float32(329.04117), np.float32(329.00354), np.float32(329.29657), np.float32(327.79492), np.float32(328.34195), np.float32(329.3511), np.float32(329.47632), np.float32(329.25433), np.float32(329.0729), np.float32(328.33044), np.float32(329.43402), np.float32(328.9019), np.float32(329.49304), np.float32(328.88013), np.float32(328.05368), np.float32(329.0961), np.float32(330.10977), np.float32(329.04065), np.float32(328.94724), np.float32(327.7286), np.float32(441.31122), np.float32(440.5407), np.float32(440.76212), np.float32(440.98917), np.float32(441.08438), np.float32(441.31168), np.float32(441.3623), np.float32(440.84662), np.float32(440.66663), np.float32(442.07886), np.float32(444.67065), np.float32(443.74957), np.float32(244.5928), np.float32(330.49432), np.float32(331.07184), np.float32(330.03937), np.float32(329.8209), np.float32(329.02884), np.float32(328.95465), np.float32(328.93066), np.float32(328.7809), np.float32(329.15204), np.float32(328.3003), np.float32(329.52563), np.float32(329.5546), np.float32(329.1291), np.float32(328.73584), np.float32(328.49756), np.float32(328.4209), np.float32(328.8416), np.float32(328.85455), np.float32(329.5912), np.float32(329.2032), np.float32(328.3159), np.float32(328.94687), np.float32(329.1325), np.float32(329.3674), np.float32(329.28506), np.float32(329.0299), np.float32(329.439), np.float32(328.73322), np.float32(329.353), np.float32(329.27728), np.float32(329.079), np.float32(328.99435), np.float32(328.69882), np.float32(328.99664), np.float32(329.13962), np.float32(329.57947), np.float32(328.76733), np.float32(329.201), np.float32(328.61047), np.float32(329.1262), np.float32(329.6697), np.float32(329.1487), np.float32(440.48996), np.float32(441.1143), np.float32(441.78812), np.float32(441.82462), np.float32(226.99704), np.float32(232.7808), np.float32(210.01698), np.float32(172.67984), np.float32(174.2338), np.float32(175.4166), np.float32(174.54236), np.float32(172.10698), np.float32(172.30148), np.float32(599.6701), np.float32(594.70654), np.float32(173.93478), np.float32(171.28503), np.float32(880.63214), np.float32(880.72253), np.float32(172.36766), np.float32(171.66449), np.float32(174.45949), np.float32(172.916), np.float32(175.28853), np.float32(171.08894), np.float32(171.06671), np.float32(169.32733), np.float32(175.13783), np.float32(171.66563), np.float32(173.92319), np.float32(170.08337), np.float32(176.15114), np.float32(170.11162), np.float32(585.6886), np.float32(585.7584), np.float32(585.50116), np.float32(882.2871), np.float32(885.33527), np.float32(589.62555), np.float32(589.978), np.float32(592.1911), np.float32(593.5544), np.float32(592.4602), np.float32(589.50275), np.float32(587.55304), np.float32(586.32745), np.float32(586.10004), np.float32(294.47058), np.float32(292.91763), np.float32(289.22656), np.float32(287.84674), np.float32(292.6435), np.float32(293.1681), np.float32(287.9286), np.float32(283.66568), np.float32(276.885), np.float32(172.18187), np.float32(258.3828), np.float32(167.5796), np.float32(168.80063), np.float32(298.1701), np.float32(596.94745), np.float32(596.04297), np.float32(592.7164), np.float32(591.3726), np.float32(592.3684), np.float32(592.82733), np.float32(590.59644), np.float32(588.3479), np.float32(587.4436), np.float32(586.40686), np.float32(585.0565), np.float32(583.85626), np.float32(584.41235), np.float32(586.4554), np.float32(586.6415), np.float32(586.70184), np.float32(586.1512), np.float32(584.8621), np.float32(579.8001), np.float32(282.7358), np.float32(281.139), np.float32(284.56766), np.float32(283.6894), np.float32(284.31927), np.float32(277.1885), np.float32(536.3368), np.float32(261.05), np.float32(262.2133), np.float32(262.1239), np.float32(263.7683), np.float32(262.79974), np.float32(264.70157), np.float32(263.22067), np.float32(264.6675), np.float32(260.59845), np.float32(262.02472), np.float32(259.54135), np.float32(259.47305), np.float32(258.298), np.float32(257.62814), np.float32(256.89886), np.float32(256.40125), np.float32(261.3596), np.float32(262.10638), np.float32(262.5708), np.float32(281.80588), np.float32(280.9637), np.float32(284.12396), np.float32(588.04083), np.float32(589.4669), np.float32(592.04126), np.float32(589.5062), np.float32(584.37915), np.float32(583.7595), np.float32(585.85), np.float32(587.38605), np.float32(587.8439), np.float32(587.43396), np.float32(885.87964), np.float32(889.8302), np.float32(897.3317), np.float32(606.7059), np.float32(607.0408), np.float32(608.0158), np.float32(611.7781), np.float32(621.48553), np.float32(616.8083), np.float32(607.45447), np.float32(590.87366), np.float32(583.8071), np.float32(862.38434), np.float32(864.38586), np.float32(580.4523), np.float32(586.3356), np.float32(593.00885), np.float32(600.93445), np.float32(604.30066), np.float32(605.67615), np.float32(601.3956), np.float32(592.3608), np.float32(585.2357), np.float32(569.9732), np.float32(564.86334), np.float32(571.1678), np.float32(582.9965), np.float32(590.3693), np.float32(596.2502), np.float32(300.28525), np.float32(297.2345), np.float32(298.11252), np.float32(297.07382), np.float32(294.6813), np.float32(291.02094), np.float32(285.65146), np.float32(285.10852), np.float32(281.5965), np.float32(283.23993), np.float32(439.3531), np.float32(201.61067), np.float32(276.80908), np.float32(281.51688), np.float32(582.2316), np.float32(582.99286), np.float32(584.01886), np.float32(586.35815), np.float32(585.42065), np.float32(584.4807), np.float32(587.4215), np.float32(586.36896), np.float32(583.46606), np.float32(583.592), np.float32(584.25793), np.float32(584.649), np.float32(585.6094), np.float32(586.7818), np.float32(588.49713), np.float32(587.7228), np.float32(289.90625), np.float32(283.6777), np.float32(283.4814), np.float32(280.1553), np.float32(275.2406), np.float32(260.923), np.float32(514.68555), np.float32(509.20645), np.float32(501.31503), np.float32(500.44504), np.float32(510.43158), np.float32(515.8403), np.float32(519.0419), np.float32(522.04205), np.float32(524.2106), np.float32(527.7148), np.float32(529.0341), np.float32(528.88617), np.float32(531.0522), np.float32(527.4698), np.float32(527.15356), np.float32(522.9369), np.float32(520.98755), np.float32(521.61554), np.float32(258.68515), np.float32(263.60562), np.float32(258.3832), np.float32(535.5703), np.float32(536.43463), np.float32(280.9072), np.float32(154.80652), np.float32(581.96356), np.float32(587.3521), np.float32(589.164), np.float32(293.09155), np.float32(159.06827), np.float32(294.13153), np.float32(293.94055), np.float32(163.42369), np.float32(160.23347), np.float32(582.693), np.float32(584.1706), np.float32(585.52045), np.float32(584.4407), np.float32(585.7113), np.float32(163.85677), np.float32(588.3462), np.float32(888.0403), np.float32(889.3177), np.float32(890.312), np.float32(890.77716), np.float32(890.90753), np.float32(590.0042), np.float32(588.6052), np.float32(588.85345), np.float32(591.61395), np.float32(591.03314), np.float32(589.6042), np.float32(586.63043), np.float32(583.6034), np.float32(584.27905), np.float32(585.8597), np.float32(587.60944), np.float32(589.5439), np.float32(590.07086), np.float32(293.81863), np.float32(293.94272), np.float32(584.9243), np.float32(292.75842), np.float32(286.81662), np.float32(285.82504), np.float32(288.9938), np.float32(287.09912), np.float32(286.4572), np.float32(286.6854), np.float32(284.81604), np.float32(280.94293), np.float32(271.7213), np.float32(262.1656), np.float32(282.07645), np.float32(297.56934), np.float32(299.73636), np.float32(602.0602), np.float32(603.0537), np.float32(600.9612), np.float32(598.0856), np.float32(592.0874), np.float32(585.16016), np.float32(577.1831), np.float32(576.6567), np.float32(579.93335), np.float32(580.81415), np.float32(580.8458), np.float32(582.36755), np.float32(587.6876), np.float32(590.44354), np.float32(592.8566), np.float32(598.7996), np.float32(297.63116), np.float32(296.1428), np.float32(289.2808), np.float32(291.75784), np.float32(295.76193), np.float32(289.5874), np.float32(284.6494), np.float32(276.45526), np.float32(520.6832), np.float32(516.8755), np.float32(516.57043), np.float32(517.01556), np.float32(518.2216), np.float32(519.93536), np.float32(521.74756), np.float32(524.7903), np.float32(530.0103), np.float32(532.73364), np.float32(534.10596), np.float32(533.2331), np.float32(534.15436), np.float32(533.1136), np.float32(528.5682), np.float32(523.8936), np.float32(522.8907), np.float32(522.12286), np.float32(522.4351), np.float32(523.1871), np.float32(531.70886), np.float32(535.8877), np.float32(541.33514), np.float32(552.44037), np.float32(567.7813), np.float32(577.4324), np.float32(584.9816), np.float32(587.0195), np.float32(587.1822), np.float32(886.37177), np.float32(885.26587), np.float32(882.8593), np.float32(586.226), np.float32(582.81757), np.float32(580.9595), np.float32(581.6583), np.float32(584.3801), np.float32(587.03735), np.float32(589.45294), np.float32(593.18445), np.float32(600.87756), np.float32(605.2492), np.float32(603.2639), np.float32(605.1281), np.float32(606.2526), np.float32(602.71844), np.float32(597.8936), np.float32(588.7418), np.float32(290.1667), np.float32(284.38278), np.float32(562.05566), np.float32(556.9052), np.float32(560.489), np.float32(563.37024), np.float32(577.4118), np.float32(592.6261), np.float32(602.27057), np.float32(602.25885), np.float32(596.1029), np.float32(597.84186), np.float32(599.7161), np.float32(594.3029), np.float32(587.2708), np.float32(287.45078), np.float32(286.44275), np.float32(577.292), np.float32(576.85236), np.float32(568.32916), np.float32(573.92615), np.float32(584.79675), np.float32(585.1827), np.float32(290.18405), np.float32(294.19962), np.float32(582.595), np.float32(585.7213), np.float32(584.74347), np.float32(583.8005), np.float32(296.4678), np.float32(298.6918), np.float32(298.18866), np.float32(301.8108), np.float32(303.17072), np.float32(308.34915), np.float32(172.83022), np.float32(170.07303), np.float32(323.46832), np.float32(170.29851), np.float32(180.2513), np.float32(174.58597), np.float32(172.1604), np.float32(169.01448), np.float32(184.61456), np.float32(167.84511), np.float32(168.69218), np.float32(168.38297), np.float32(181.29155), np.float32(166.45518), np.float32(177.99155), np.float32(440.84744), np.float32(172.81308), np.float32(164.27835), np.float32(184.37718), np.float32(440.62164), np.float32(166.14233), np.float32(162.10071), np.float32(442.75378), np.float32(447.23303), np.float32(528.26794), np.float32(524.15405), np.float32(525.4098), np.float32(520.9885), np.float32(522.4006), np.float32(527.5974), np.float32(525.28357), np.float32(521.6912), np.float32(517.9499), np.float32(516.0726), np.float32(516.0695), np.float32(519.0051), np.float32(519.0309), np.float32(519.69635), np.float32(521.6063), np.float32(524.93475), np.float32(528.00775), np.float32(530.40546), np.float32(530.7275), np.float32(528.26544), np.float32(529.0381), np.float32(524.76984), np.float32(518.40265), np.float32(518.7915), np.float32(522.3951), np.float32(518.83325), np.float32(515.11316), np.float32(517.6088), np.float32(217.1169), np.float32(216.0576), np.float32(218.29877), np.float32(535.3557), np.float32(532.5582), np.float32(530.759), np.float32(527.3711), np.float32(523.155), np.float32(227.81178), np.float32(212.56348), np.float32(225.59578), np.float32(213.84485), np.float32(222.07893), np.float32(215.04532), np.float32(218.88644), np.float32(219.86195), np.float32(214.9832), np.float32(221.03174), np.float32(213.5286), np.float32(221.63055), np.float32(215.87334), np.float32(219.38745), np.float32(218.85796), np.float32(216.42732), np.float32(217.51866), np.float32(219.44604), np.float32(216.47073), np.float32(218.95087), np.float32(217.52226), np.float32(217.47292), np.float32(219.45164), np.float32(215.89053), np.float32(219.94766), np.float32(217.06235), np.float32(218.67873), np.float32(217.16797), np.float32(218.24161), np.float32(217.57265), np.float32(209.96883), np.float32(214.7817), np.float32(325.8788), np.float32(215.66516), np.float32(228.86559), np.float32(210.77267), np.float32(219.72704), np.float32(214.03174), np.float32(218.05379), np.float32(213.80086), np.float32(214.64236), np.float32(225.55917), np.float32(210.3948), np.float32(226.7948), np.float32(211.92392), np.float32(222.78673), np.float32(217.2361), np.float32(215.37753), np.float32(219.39893), np.float32(211.90186), np.float32(221.55087), np.float32(213.36108), np.float32(225.68582), np.float32(216.55156), np.float32(224.5204), np.float32(215.32742), np.float32(218.80386), np.float32(217.70145), np.float32(217.24547), np.float32(222.6247), np.float32(216.93983), np.float32(220.22762), np.float32(215.97469), np.float32(221.19084), np.float32(215.54652), np.float32(219.4093), np.float32(217.13565), np.float32(218.38342), np.float32(220.71666), np.float32(214.789), np.float32(219.82094), np.float32(214.3415), np.float32(219.21964), np.float32(217.59798), np.float32(218.89902), np.float32(218.17172), np.float32(218.53041), np.float32(217.26721), np.float32(216.98897), np.float32(218.18056), np.float32(215.80563), np.float32(214.55127), np.float32(234.73357), np.float32(211.8238), np.float32(248.31857), np.float32(241.55544), np.float32(212.73964), np.float32(240.70386), np.float32(166.10512), np.float32(245.44234), np.float32(260.8013), np.float32(255.7363), np.float32(259.80017), np.float32(256.55466), np.float32(253.8244), np.float32(263.04532), np.float32(254.42728), np.float32(263.687), np.float32(256.1006), np.float32(164.1485), np.float32(165.68153), np.float32(262.1334), np.float32(259.35886), np.float32(512.99506), np.float32(259.8432), np.float32(257.3467), np.float32(778.20624), np.float32(778.36273), np.float32(780.2098), np.float32(514.98193), np.float32(515.6063), np.float32(251.00859), np.float32(778.55426), np.float32(777.51227), np.float32(777.2375), np.float32(778.7492), np.float32(514.98114), np.float32(516.3192), np.float32(226.51492), np.float32(212.41556), np.float32(778.0742), np.float32(776.2807), np.float32(776.2689), np.float32(221.47885), np.float32(438.7882), np.float32(223.56558), np.float32(214.21512), np.float32(776.04755), np.float32(775.0314), np.float32(163.63744), np.float32(166.84828), np.float32(170.61787), np.float32(171.46582), np.float32(173.07039), np.float32(170.45093), np.float32(164.81697), np.float32(164.75699), np.float32(163.94258), np.float32(165.72829), np.float32(164.53062), np.float32(164.1923), np.float32(166.59222), np.float32(162.96535), np.float32(162.40903), np.float32(163.48546), np.float32(162.3786), np.float32(166.14352), np.float32(164.85052), np.float32(164.68388), np.float32(166.23842), np.float32(164.00461), np.float32(165.7056), np.float32(162.44289), np.float32(162.9116), np.float32(161.86252), np.float32(163.11223), np.float32(165.60857), np.float32(163.29066), np.float32(164.92294), np.float32(165.68352), np.float32(164.12093), np.float32(165.80309), np.float32(164.02782), np.float32(163.20709), np.float32(164.51266), np.float32(161.87929), np.float32(164.39204), np.float32(162.56404), np.float32(164.34627), np.float32(166.5569), np.float32(163.7049), np.float32(166.93141), np.float32(162.48567), np.float32(221.21767), np.float32(210.41338), np.float32(222.56535), np.float32(211.14355), np.float32(222.4889), np.float32(214.4275), np.float32(216.48053), np.float32(215.09319), np.float32(210.0786), np.float32(215.47885), np.float32(233.31046), np.float32(163.48755), np.float32(162.1223), np.float32(164.88722), np.float32(164.18173), np.float32(165.22108), np.float32(166.20015), np.float32(164.41962), np.float32(164.57822), np.float32(162.77098), np.float32(164.85243), np.float32(162.68364), np.float32(163.83073), np.float32(166.50763), np.float32(164.08278), np.float32(165.26476), np.float32(164.00482), np.float32(164.8787), np.float32(165.09137), np.float32(162.84503), np.float32(163.80505), np.float32(161.92085), np.float32(261.743), np.float32(258.19995), np.float32(259.92725), np.float32(259.2309), np.float32(165.69136), np.float32(165.14526), np.float32(164.5627), np.float32(164.39584), np.float32(443.39688), np.float32(328.36365), np.float32(328.16888), np.float32(328.73273), np.float32(328.63574), np.float32(328.4895), np.float32(329.46783), np.float32(328.56613), np.float32(329.31412), np.float32(328.76538), np.float32(329.02563), np.float32(329.02637), np.float32(328.6255), np.float32(328.80716), np.float32(329.49866), np.float32(328.88007), np.float32(330.17532), np.float32(209.26553), np.float32(208.36995), np.float32(204.8821), np.float32(240.06046), np.float32(214.3338), np.float32(164.39734), np.float32(165.3857), np.float32(165.95099), np.float32(162.41528), np.float32(167.64816), np.float32(163.18506), np.float32(166.46378), np.float32(163.39499), np.float32(162.5092), np.float32(164.39667), np.float32(162.97607), np.float32(165.8558), np.float32(166.23991), np.float32(163.5836), np.float32(168.60577), np.float32(163.68861), np.float32(167.9452), np.float32(161.89343), np.float32(218.7022), np.float32(442.42883), np.float32(218.34288), np.float32(224.8168), np.float32(213.91139), np.float32(228.18219), np.float32(211.48021), np.float32(229.91344), np.float32(442.0383), np.float32(221.61697), np.float32(440.55695), np.float32(443.88892), np.float32(440.32513), np.float32(441.56595), np.float32(223.0826), np.float32(440.2654), np.float32(442.1052), np.float32(440.3041), np.float32(216.22812), np.float32(217.73485), np.float32(219.98944), np.float32(218.40668), np.float32(218.10898), np.float32(217.86679), np.float32(217.51967), np.float32(216.8088), np.float32(217.79707), np.float32(216.67006), np.float32(215.2754), np.float32(216.44719), np.float32(218.49142), np.float32(332.0692), np.float32(224.7923), np.float32(164.15344), np.float32(164.84703), np.float32(171.44403), np.float32(166.70421), np.float32(213.46378), np.float32(203.73364), np.float32(167.32887), np.float32(395.60962), np.float32(167.50932), np.float32(393.61066), np.float32(400.37445), np.float32(394.31494), np.float32(405.48694), np.float32(408.27124), np.float32(211.33109), np.float32(425.67203), np.float32(432.54175), np.float32(437.64392), np.float32(440.34113), np.float32(441.1951), np.float32(443.6117), np.float32(446.04434), np.float32(447.0237), np.float32(447.7212), np.float32(445.90506), np.float32(443.8482), np.float32(221.12894), np.float32(215.53452), np.float32(218.74818), np.float32(218.39433), np.float32(218.56358), np.float32(216.82445), np.float32(216.59193), np.float32(218.49245), np.float32(437.54007), np.float32(439.43185), np.float32(440.7205), np.float32(441.53412), np.float32(440.5908), np.float32(444.90784), np.float32(444.57938), np.float32(442.26437), np.float32(440.10876), np.float32(438.05148), np.float32(436.9667), np.float32(432.8964), np.float32(435.42404), np.float32(442.783), np.float32(188.51239), np.float32(165.45181), np.float32(467.98486), np.float32(479.06714), np.float32(496.46585), np.float32(504.11618), np.float32(509.2225), np.float32(513.02014), np.float32(518.42114), np.float32(520.19934), np.float32(518.37976), np.float32(518.74304), np.float32(523.7151), np.float32(522.7554), np.float32(522.4503), np.float32(528.47845), np.float32(524.4999), np.float32(524.05457), np.float32(525.5736), np.float32(522.8718), np.float32(520.7135), np.float32(521.2724), np.float32(521.8469), np.float32(520.1594), np.float32(517.9376), np.float32(257.3135), np.float32(264.50076), np.float32(263.66708), np.float32(266.2604), np.float32(261.64108), np.float32(262.9649), np.float32(259.97073), np.float32(261.0033), np.float32(261.47296), np.float32(261.09277), np.float32(261.96158), np.float32(259.6228), np.float32(260.54666), np.float32(257.9973), np.float32(260.67572), np.float32(258.4665), np.float32(262.30942), np.float32(261.53586), np.float32(261.9708), np.float32(262.14453), np.float32(264.38333), np.float32(266.02856), np.float32(266.43942), np.float32(277.35477), np.float32(288.2762), np.float32(280.20013), np.float32(283.59763), np.float32(298.10995), np.float32(296.6151), np.float32(283.22012), np.float32(597.0944), np.float32(594.3548), np.float32(591.82434), np.float32(588.9811), np.float32(589.6471), np.float32(589.6952), np.float32(588.91595), np.float32(588.26843), np.float32(174.78087), np.float32(590.8177), np.float32(890.53455), np.float32(890.6039), np.float32(893.0532), np.float32(898.22266), np.float32(606.4933), np.float32(606.91736), np.float32(606.1738), np.float32(602.8158), np.float32(595.32733), np.float32(174.95332), np.float32(169.79314), np.float32(856.393), np.float32(571.6645), np.float32(575.4792), np.float32(585.17725), np.float32(593.5238), np.float32(600.09576), np.float32(602.8082), np.float32(597.5187), np.float32(588.4641), np.float32(581.0225), np.float32(577.1615), np.float32(581.00854), np.float32(585.6627), np.float32(593.9284), np.float32(301.37576), np.float32(283.4878), np.float32(275.8895), np.float32(167.21889), np.float32(232.43114), np.float32(167.20584), np.float32(187.24767), np.float32(166.98842), np.float32(222.00888), np.float32(225.61127), np.float32(439.52902), np.float32(438.965), np.float32(228.3848), np.float32(238.72078), np.float32(533.8349), np.float32(557.4361), np.float32(567.0871), np.float32(587.62933), np.float32(597.35785), np.float32(599.7023), np.float32(596.2461), np.float32(588.6421), np.float32(582.6146), np.float32(583.25714), np.float32(580.89886), np.float32(580.68427), np.float32(583.01), np.float32(583.6628), np.float32(585.09625), np.float32(582.53406), np.float32(578.44293), np.float32(290.01874), np.float32(293.9848), np.float32(296.7088), np.float32(293.9163), np.float32(286.4403), np.float32(283.53845), np.float32(280.95822), np.float32(271.22528), np.float32(260.39136), np.float32(258.1054), np.float32(256.97253), np.float32(257.9724), np.float32(263.09094), np.float32(260.93265), np.float32(265.08243), np.float32(262.923), np.float32(265.1224), np.float32(262.1784), np.float32(263.7922), np.float32(261.75803), np.float32(262.81317), np.float32(258.3691), np.float32(259.9253), np.float32(257.63263), np.float32(254.6939), np.float32(259.09677), np.float32(254.96481), np.float32(263.5076), np.float32(258.2804), np.float32(267.44714), np.float32(261.7983), np.float32(568.4448), np.float32(575.7317), np.float32(585.6091), np.float32(590.55084), np.float32(595.89905), np.float32(596.67444), np.float32(591.07355), np.float32(587.2931), np.float32(584.32446), np.float32(580.9235), np.float32(581.69965), np.float32(584.08813), np.float32(589.45483), np.float32(600.1456), np.float32(605.31616), np.float32(608.09125), np.float32(608.74896), np.float32(607.6509), np.float32(606.6234), np.float32(600.88855), np.float32(591.9361), np.float32(580.18634), np.float32(568.0617), np.float32(571.3948), np.float32(576.1958), np.float32(580.8606), np.float32(587.6843), np.float32(595.1781), np.float32(603.4011), np.float32(604.7185), np.float32(597.87366), np.float32(589.01373), np.float32(583.97363), np.float32(583.8517), np.float32(584.7617), np.float32(290.3102), np.float32(286.31503), np.float32(280.70834), np.float32(278.45236), np.float32(233.88994), np.float32(209.07275), np.float32(167.07243), np.float32(206.09187), np.float32(224.15257), np.float32(210.12534), np.float32(224.76616), np.float32(230.50986), np.float32(450.04843), np.float32(263.64615), np.float32(252.04872), np.float32(533.58954), np.float32(558.0418), np.float32(573.0288), np.float32(587.5526), np.float32(595.3081), np.float32(596.7185), np.float32(595.9498), np.float32(592.7316), np.float32(588.0837), np.float32(584.9802), np.float32(583.8201), np.float32(586.0594), np.float32(588.40515), np.float32(590.8337), np.float32(589.2781), np.float32(584.96716), np.float32(574.3111), np.float32(288.09097), np.float32(295.16403), np.float32(287.31964), np.float32(285.34863), np.float32(287.05267), np.float32(280.50485), np.float32(270.30673), np.float32(262.5919), np.float32(263.46274), np.float32(257.13965), np.float32(258.02243), np.float32(259.71268), np.float32(259.26123), np.float32(262.47836), np.float32(261.201), np.float32(262.73618), np.float32(262.74045), np.float32(264.1877), np.float32(261.50467), np.float32(262.42746), np.float32(261.05548), np.float32(262.92322), np.float32(259.11554), np.float32(260.47876), np.float32(259.27866), np.float32(258.1607), np.float32(259.46112), np.float32(259.75317), np.float32(261.19565), np.float32(256.5889), np.float32(268.54535), np.float32(260.38968), np.float32(553.68134), np.float32(561.1434), np.float32(565.1782), np.float32(874.0641), np.float32(886.6866), np.float32(890.98), np.float32(890.7447), np.float32(885.6125), np.float32(877.93414), np.float32(871.75183), np.float32(869.97314), np.float32(872.8137), np.float32(883.7821), np.float32(891.6328), np.float32(903.285), np.float32(912.9808), np.float32(915.82526), np.float32(933.2606), np.float32(941.61224), np.float32(941.73615), np.float32(930.5853), np.float32(903.9558), np.float32(878.1159), np.float32(860.7372), np.float32(849.4668), np.float32(860.5942), np.float32(868.6465), np.float32(887.4627), np.float32(596.2071), np.float32(605.44836), np.float32(607.8571), np.float32(604.3926), np.float32(591.8323), np.float32(578.8917), np.float32(572.1782), np.float32(581.3087), np.float32(583.1564), np.float32(580.20276), np.float32(279.39206), np.float32(267.97202), np.float32(248.01828), np.float32(440.2953), np.float32(442.03174), np.float32(153.21637), np.float32(440.182), np.float32(442.02243), np.float32(159.83472), np.float32(443.4651), np.float32(444.8689), np.float32(439.96765), np.float32(273.13373), np.float32(561.92914), np.float32(569.3832), np.float32(581.2626), np.float32(584.4755), np.float32(582.7609), np.float32(584.9849), np.float32(589.5024), np.float32(587.946), np.float32(581.9102), np.float32(584.9698), np.float32(586.7242), np.float32(586.412), np.float32(587.6807), np.float32(588.71936), np.float32(586.9951), np.float32(578.1718), np.float32(287.99847), np.float32(296.0855), np.float32(292.4831), np.float32(287.38553), np.float32(283.10004), np.float32(280.2633), np.float32(271.8641), np.float32(262.7565), np.float32(262.34348), np.float32(512.8375), np.float32(505.91653), np.float32(259.31604), np.float32(260.89932), np.float32(264.73172), np.float32(258.13016), np.float32(262.8111), np.float32(264.42737), np.float32(257.29062), np.float32(262.13956), np.float32(260.48016), np.float32(260.88974), np.float32(256.89316), np.float32(262.94803), np.float32(256.05457), np.float32(260.68744), np.float32(261.66562), np.float32(257.28632), np.float32(264.2789), np.float32(263.4609), np.float32(261.68823), np.float32(260.33432), np.float32(274.63486), np.float32(273.45627), np.float32(262.04858), np.float32(568.48816), np.float32(575.1569), np.float32(576.3696), np.float32(580.85455), np.float32(880.2366), np.float32(882.5723), np.float32(881.0774), np.float32(879.41473), np.float32(880.3192), np.float32(881.25903), np.float32(882.83386), np.float32(885.0409), np.float32(886.9926), np.float32(885.46387), np.float32(884.69775), np.float32(883.77124), np.float32(883.9549), np.float32(884.6652), np.float32(885.6958), np.float32(885.25433), np.float32(884.8249), np.float32(885.1191), np.float32(880.54846), np.float32(875.3318), np.float32(877.08594), np.float32(585.09845), np.float32(585.31024), np.float32(586.3186), np.float32(586.39935), np.float32(586.5665), np.float32(586.4904), np.float32(586.2864), np.float32(586.8653), np.float32(586.4905), np.float32(585.18396), np.float32(583.557), np.float32(584.1078), np.float32(298.43845), np.float32(296.23056), np.float32(289.2716), np.float32(284.1493), np.float32(280.44858), np.float32(156.7152), np.float32(281.51053), np.float32(285.112), np.float32(286.11438), np.float32(296.72433), np.float32(313.69714), np.float32(340.24493), np.float32(345.38602), np.float32(351.17618), np.float32(349.74405), np.float32(346.30887), np.float32(331.61667), np.float32(172.17143), np.float32(322.06656), np.float32(325.78018), np.float32(330.40472), np.float32(323.39618), np.float32(325.96326), np.float32(331.03586), np.float32(327.89322), np.float32(329.607), np.float32(328.15466), np.float32(327.24057), np.float32(331.62314), np.float32(329.02356), np.float32(330.6051), np.float32(330.37604), np.float32(330.27728), np.float32(334.30423), np.float32(330.67618), np.float32(331.57272), np.float32(328.24268), np.float32(325.66376), np.float32(327.88644), np.float32(325.9245), np.float32(327.65198), np.float32(333.7269), np.float32(664.28143), np.float32(660.5735), np.float32(656.50214), np.float32(657.8575), np.float32(659.6039), np.float32(659.71277), np.float32(660.26917), np.float32(658.8336), np.float32(659.98267), np.float32(661.35693), np.float32(664.393), np.float32(668.91986), np.float32(672.3891), np.float32(675.6535), np.float32(681.60504), np.float32(688.9778), np.float32(693.20514), np.float32(696.4644), np.float32(698.85266), np.float32(699.30383), np.float32(697.04596), np.float32(697.39044), np.float32(690.0832), np.float32(682.7676), np.float32(675.97003), np.float32(662.59296), np.float32(653.8803), np.float32(641.75006), np.float32(631.1204), np.float32(632.1105), np.float32(640.8177), np.float32(656.36414), np.float32(672.8491), np.float32(674.23047), np.float32(192.84508), np.float32(192.72084), np.float32(697.18414), np.float32(695.06146), np.float32(700.25006), np.float32(1014.5397), np.float32(1001.87585), np.float32(987.3939), np.float32(973.8772), np.float32(191.3461), np.float32(323.08234), np.float32(318.4685), np.float32(323.52307), np.float32(328.26144), np.float32(192.90791), np.float32(194.50153), np.float32(677.03796), np.float32(198.49483), np.float32(334.1406), np.float32(333.06372), np.float32(332.30313), np.float32(329.52487), np.float32(331.62665), np.float32(322.32257), np.float32(324.44943), np.float32(328.26526), np.float32(321.5601), np.float32(191.71855), np.float32(195.07431), np.float32(192.53723), np.float32(196.64014), np.float32(194.3539), np.float32(193.8802), np.float32(194.62941), np.float32(193.75673), np.float32(225.66188), np.float32(236.97635), np.float32(250.62581), np.float32(492.9016), np.float32(493.5026), np.float32(493.46292), np.float32(493.22525), np.float32(493.26343), np.float32(493.30502), np.float32(493.14575), np.float32(493.63263), np.float32(294.83487), np.float32(292.52563), np.float32(295.5111), np.float32(493.64688), np.float32(298.07077), np.float32(283.16403), np.float32(295.03912), np.float32(288.28906), np.float32(296.6187), np.float32(493.11246), np.float32(492.99725), np.float32(293.90665), np.float32(294.88467), np.float32(493.3107), np.float32(492.91208), np.float32(492.94028), np.float32(298.05377), np.float32(285.92023), np.float32(293.675), np.float32(296.15424), np.float32(286.73236), np.float32(295.06335), np.float32(293.5164), np.float32(289.1336), np.float32(294.00848), np.float32(291.39325), np.float32(283.33948), np.float32(296.79037), np.float32(293.69867), np.float32(293.35822), np.float32(288.40787), np.float32(293.60178), np.float32(297.61255), np.float32(190.76706), np.float32(209.7217), np.float32(192.5893), np.float32(198.4994), np.float32(194.63075), np.float32(231.68938), np.float32(237.43576), np.float32(231.5508), np.float32(184.59026), np.float32(193.3341), np.float32(249.30626), np.float32(245.55981), np.float32(247.891), np.float32(248.56596), np.float32(243.66322), np.float32(249.79143), np.float32(242.71387), np.float32(249.19711), np.float32(243.8225), np.float32(249.44145), np.float32(244.67369), np.float32(249.68178), np.float32(246.13733), np.float32(247.47125), np.float32(247.48564), np.float32(246.55978), np.float32(247.00404), np.float32(245.66173), np.float32(248.4706), np.float32(246.19945), np.float32(247.46548), np.float32(246.65712), np.float32(246.46242), np.float32(247.52765), np.float32(247.20148), np.float32(248.47656), np.float32(245.55362), np.float32(249.40488), np.float32(242.80763), np.float32(249.18958), np.float32(244.88742), np.float32(248.62003), np.float32(245.82712), np.float32(249.10074), np.float32(245.4093), np.float32(247.59189), np.float32(247.0056), np.float32(246.00784), np.float32(247.12558), np.float32(245.2047), np.float32(246.98189), np.float32(247.85841), np.float32(246.67108), np.float32(244.58328), np.float32(247.46457), np.float32(247.6192), np.float32(232.05559), np.float32(228.13982), np.float32(491.37686), np.float32(492.23276), np.float32(492.26544), np.float32(493.1495), np.float32(493.50424), np.float32(492.79828), np.float32(493.03522), np.float32(494.0002), np.float32(492.42133), np.float32(493.8807), np.float32(492.538), np.float32(494.23978), np.float32(492.46942), np.float32(492.55566), np.float32(493.83664), np.float32(493.2549), np.float32(492.01672), np.float32(493.42752), np.float32(493.37802), np.float32(277.37848), np.float32(299.6116), np.float32(278.27905), np.float32(300.16812), np.float32(275.2156), np.float32(299.05872), np.float32(277.1786), np.float32(190.75003), np.float32(277.7948), np.float32(297.82556), np.float32(268.30173), np.float32(297.4873), np.float32(271.8422), np.float32(238.78133), np.float32(261.2868), np.float32(239.30489), np.float32(259.7339), np.float32(238.69987), np.float32(253.29971), np.float32(239.7265), np.float32(248.91803), np.float32(243.84534), np.float32(250.25858), np.float32(492.20245), np.float32(243.24933), np.float32(244.74654), np.float32(242.06398), np.float32(251.6898), np.float32(241.58319), np.float32(227.52492), np.float32(194.33911), np.float32(190.00522), np.float32(192.74078), np.float32(195.66837), np.float32(294.527), np.float32(292.14798), np.float32(296.2747), np.float32(194.0681), np.float32(195.20439), np.float32(282.15283), np.float32(297.53418), np.float32(285.85458), np.float32(295.78436), np.float32(265.5469), np.float32(230.33046), np.float32(264.9066), np.float32(195.74033), np.float32(261.15552), np.float32(193.97362), np.float32(254.15112), np.float32(193.34706), np.float32(198.0339), np.float32(192.09894), np.float32(253.90997), np.float32(191.49562), np.float32(249.69926), np.float32(243.4867), np.float32(253.20766), np.float32(194.41196), np.float32(253.69054), np.float32(194.35504), np.float32(256.73004), np.float32(233.5564), np.float32(257.40216), np.float32(229.75844), np.float32(257.456), np.float32(226.93001), np.float32(192.29906), np.float32(194.86365), np.float32(193.63171), np.float32(194.1454), np.float32(196.0575), np.float32(192.35077), np.float32(197.2251), np.float32(192.2989), np.float32(204.11658), np.float32(191.45998), np.float32(201.1122), np.float32(191.01344), np.float32(275.17996), np.float32(494.1934), np.float32(496.2219), np.float32(184.36093), np.float32(190.9753), np.float32(492.37625), np.float32(493.05896), np.float32(494.19812), np.float32(491.25754), np.float32(493.66263), np.float32(493.89157), np.float32(493.19562), np.float32(492.85358), np.float32(493.66074), np.float32(493.2282), np.float32(493.18414), np.float32(493.47263), np.float32(493.45905), np.float32(493.31512), np.float32(493.49213), np.float32(493.372), np.float32(492.9275), np.float32(493.31778), np.float32(492.85147), np.float32(493.05487), np.float32(493.801), np.float32(492.77844), np.float32(492.78888), np.float32(493.70584), np.float32(492.57962), np.float32(494.23682), np.float32(492.83347), np.float32(493.3425), np.float32(493.99142), np.float32(491.28015), np.float32(493.61273), np.float32(492.56396), np.float32(493.7088), np.float32(493.02826), np.float32(492.34573), np.float32(242.36113), np.float32(243.80836), np.float32(242.9752), np.float32(249.53958), np.float32(246.66423), np.float32(247.21545), np.float32(248.64374), np.float32(243.42181), np.float32(246.59364), np.float32(246.8465), np.float32(240.85065), np.float32(240.86034), np.float32(182.8337), np.float32(185.70615), np.float32(496.16202), np.float32(493.19724), np.float32(493.0779), np.float32(493.51547), np.float32(492.66486), np.float32(493.7095), np.float32(243.29295), np.float32(249.25894), np.float32(248.80183), np.float32(493.7591), np.float32(494.107), np.float32(245.90938), np.float32(493.24496), np.float32(493.34082), np.float32(247.8434), np.float32(247.04283), np.float32(247.61993), np.float32(248.64832), np.float32(246.9467), np.float32(248.15027), np.float32(245.8774), np.float32(249.24706), np.float32(245.4304), np.float32(248.9386), np.float32(246.39719), np.float32(248.1686), np.float32(246.462), np.float32(248.25331), np.float32(248.3839), np.float32(247.38885), np.float32(248.45746), np.float32(247.1451), np.float32(247.99803), np.float32(246.67203), np.float32(248.44998), np.float32(247.55423), np.float32(249.36179), np.float32(247.62708), np.float32(246.75154), np.float32(248.45415), np.float32(246.44109), np.float32(248.85922), np.float32(246.87889), np.float32(247.06815), np.float32(246.42973), np.float32(250.4687), np.float32(256.37863), np.float32(260.7402), np.float32(166.23184), np.float32(173.01357), np.float32(252.59239), np.float32(248.08508), np.float32(250.55742), np.float32(247.58386), np.float32(249.63089), np.float32(248.16057), np.float32(249.18916), np.float32(248.35522), np.float32(245.57547), np.float32(248.43457), np.float32(246.02087), np.float32(248.48857), np.float32(247.11287), np.float32(249.76144), np.float32(245.2278), np.float32(248.21135), np.float32(246.0428), np.float32(247.96957), np.float32(247.49133), np.float32(246.17062), np.float32(247.76805), np.float32(246.31831), np.float32(246.78511), np.float32(244.96281), np.float32(245.46475), np.float32(244.43953), np.float32(246.08958), np.float32(248.2376), np.float32(246.25206), np.float32(248.51382), np.float32(245.75948), np.float32(246.72795), np.float32(492.74234), np.float32(493.24332), np.float32(492.96838), np.float32(492.6639), np.float32(492.63602), np.float32(492.50986), np.float32(492.74445), np.float32(284.9315), np.float32(295.16464), np.float32(288.85098), np.float32(297.70706), np.float32(289.78302), np.float32(298.29742), np.float32(279.3464), np.float32(189.35104), np.float32(192.33958), np.float32(192.58127), np.float32(190.29257), np.float32(199.84676), np.float32(330.23), np.float32(193.5701), np.float32(191.90509), np.float32(189.72629), np.float32(195.62741), np.float32(658.19946), np.float32(194.80257), np.float32(189.59702), np.float32(194.51991), np.float32(193.87578), np.float32(195.60847), np.float32(194.12917), np.float32(194.60283), np.float32(194.71788), np.float32(197.98508), np.float32(192.80836), np.float32(189.77757), np.float32(192.24019), np.float32(199.66498), np.float32(192.40195), np.float32(336.8555), np.float32(326.41553), np.float32(319.83713), np.float32(320.06317), np.float32(653.37195), np.float32(656.946), np.float32(659.51086), np.float32(659.05707), np.float32(658.20044), np.float32(657.92615), np.float32(657.7567), np.float32(656.13776), np.float32(326.94424), np.float32(316.77057), np.float32(301.22925), np.float32(194.02419), np.float32(192.84308), np.float32(192.29236), np.float32(194.8727), np.float32(192.8257), np.float32(191.6616), np.float32(188.8254), np.float32(192.9194), np.float32(194.43881), np.float32(260.36343), np.float32(262.59235), np.float32(260.44672), np.float32(285.18607), np.float32(304.64902), np.float32(301.35406), np.float32(318.20963), np.float32(331.64502), np.float32(329.02032), np.float32(325.97055), np.float32(327.20892), np.float32(328.2889), np.float32(326.5924), np.float32(191.72896), np.float32(659.07806), np.float32(663.6272), np.float32(665.3659), np.float32(668.80786), np.float32(668.91895), np.float32(330.91022), np.float32(336.9108), np.float32(335.7552), np.float32(341.83234), np.float32(191.35329), np.float32(365.47977), np.float32(371.7551), np.float32(397.71906), np.float32(400.48895), np.float32(399.96817), np.float32(397.67737), np.float32(394.3039), np.float32(383.64606), np.float32(378.88428), np.float32(354.60077), np.float32(346.72076), np.float32(195.91162), np.float32(193.631), np.float32(197.05252), np.float32(189.9841), np.float32(194.15834), np.float32(195.174), np.float32(196.26543), np.float32(191.26602), np.float32(192.07956), np.float32(197.34872), np.float32(263.66647), np.float32(262.37845), np.float32(262.42975), np.float32(262.84946), np.float32(259.2092), np.float32(263.89804), np.float32(261.48904), np.float32(252.25096), np.float32(256.53265), np.float32(258.46277), np.float32(260.14322), np.float32(334.37668), np.float32(348.86), np.float32(363.75314), np.float32(370.67822), np.float32(372.18573), np.float32(383.09512), np.float32(1537.1409), np.float32(1543.8744), np.float32(775.70013), np.float32(776.87787), np.float32(778.92883), np.float32(780.9893), np.float32(784.5751), np.float32(787.95953), np.float32(792.8886), np.float32(796.68066), np.float32(796.4364), np.float32(800.6454), np.float32(1213.5516), np.float32(1217.4993), np.float32(1212.4858), np.float32(1200.368), np.float32(1190.6957), np.float32(777.88983), np.float32(768.675), np.float32(753.06793), np.float32(753.9963), np.float32(759.3723), np.float32(771.5258), np.float32(795.4144), np.float32(798.45966), np.float32(805.50665), np.float32(811.9426), np.float32(810.6439), np.float32(1605.0314), np.float32(1585.9893), np.float32(772.44934), np.float32(763.21576), np.float32(768.4467), np.float32(776.42676), np.float32(780.68475), np.float32(787.61707), np.float32(818.13824), np.float32(452.746), np.float32(937.80634), np.float32(955.4317), np.float32(960.19), np.float32(958.7548), np.float32(948.17065), np.float32(901.11316), np.float32(865.6384), np.float32(833.78796), np.float32(743.04065), np.float32(711.38763), np.float32(696.1683), np.float32(686.63416), np.float32(1008.3702), np.float32(1003.11017), np.float32(991.39703), np.float32(984.6258), np.float32(982.1892), np.float32(981.4198), np.float32(979.51886), np.float32(978.295), np.float32(981.75385), np.float32(983.57697), np.float32(985.37805), np.float32(984.12756), np.float32(982.8505), np.float32(984.5986), np.float32(652.7896), np.float32(637.9282), np.float32(624.9157), np.float32(263.2341), np.float32(267.69766), np.float32(586.1072), np.float32(588.5404), np.float32(590.5558), np.float32(586.5184), np.float32(270.95074), np.float32(265.79913), np.float32(263.9343), np.float32(263.65128), np.float32(261.35507), np.float32(258.89175), np.float32(262.0989), np.float32(263.80466), np.float32(260.43613), np.float32(262.4978), np.float32(261.83197), np.float32(261.75952), np.float32(262.33102), np.float32(262.14032), np.float32(261.02972), np.float32(261.14957), np.float32(261.2084), np.float32(258.65695), np.float32(273.1346), np.float32(273.85696), np.float32(306.06598), np.float32(296.9222), np.float32(302.58502), np.float32(300.24524), np.float32(287.3289), np.float32(302.64658), np.float32(288.96954), np.float32(286.93768), np.float32(299.46167), np.float32(297.9737), np.float32(297.57983), np.float32(301.10458), np.float32(343.5802), np.float32(591.5238), np.float32(590.0663), np.float32(588.2876), np.float32(585.4353), np.float32(351.1093), np.float32(277.90524), np.float32(277.58908), np.float32(276.64154), np.float32(260.25275), np.float32(254.55394), np.float32(235.11165), np.float32(270.44427), np.float32(272.85327), np.float32(542.20636), np.float32(348.75082), np.float32(241.20235), np.float32(348.82037), np.float32(349.17642), np.float32(349.51297), np.float32(347.7288), np.float32(351.76736), np.float32(350.72464), np.float32(345.5877), np.float32(348.33667), np.float32(348.61978), np.float32(353.7881), np.float32(294.1541), np.float32(294.73965), np.float32(295.7654), np.float32(294.57773), np.float32(294.40222), np.float32(301.6862), np.float32(296.53708), np.float32(293.52002), np.float32(293.2176), np.float32(301.1764), np.float32(288.11087), np.float32(291.77234), np.float32(291.6413), np.float32(736.17975), np.float32(753.18024), np.float32(764.12115), np.float32(767.30273), np.float32(773.1446), np.float32(776.9327), np.float32(775.863), np.float32(779.18066), np.float32(793.81976), np.float32(813.60486), np.float32(833.97394), np.float32(857.02155), np.float32(870.3163), np.float32(886.2246), np.float32(889.8675), np.float32(890.80804), np.float32(889.84705), np.float32(885.1791), np.float32(876.4451), np.float32(870.8232), np.float32(870.7141), np.float32(871.1935), np.float32(871.5747), np.float32(872.66864), np.float32(866.49255), np.float32(844.9403), np.float32(556.1179), np.float32(761.2137), np.float32(719.73425), np.float32(698.08374), np.float32(685.3102), np.float32(444.67703), np.float32(440.89862), np.float32(437.31113), np.float32(434.3957), np.float32(297.15125), np.float32(295.60556), np.float32(296.09317), np.float32(293.86682), np.float32(293.8794), np.float32(444.81326), np.float32(443.63495), np.float32(440.97247), np.float32(437.79745), np.float32(433.5181), np.float32(290.83115), np.float32(417.14026), np.float32(226.4866), np.float32(220.56277), np.float32(223.78255), np.float32(217.71375), np.float32(216.8759), np.float32(442.84607), np.float32(443.20932), np.float32(441.20068), np.float32(439.6766), np.float32(440.4294), np.float32(437.73398), np.float32(431.34338), np.float32(429.6011), np.float32(433.55356), np.float32(437.3996), np.float32(440.57825), np.float32(444.52823), np.float32(446.9431), np.float32(447.4328), np.float32(229.43723), np.float32(231.34187), np.float32(352.40677), np.float32(350.30142), np.float32(346.31927), np.float32(230.26373), np.float32(351.87714), np.float32(351.99503), np.float32(352.4654), np.float32(217.54292), np.float32(349.57605), np.float32(352.30008), np.float32(352.56665), np.float32(351.65292), np.float32(341.1872), np.float32(350.47083), np.float32(352.67422), np.float32(351.83453), np.float32(350.14944), np.float32(343.85892), np.float32(349.97092), np.float32(350.54202), np.float32(351.35568), np.float32(351.58765), np.float32(349.77502), np.float32(349.47458), np.float32(220.23662), np.float32(347.65405), np.float32(351.09253), np.float32(351.60776), np.float32(351.96255), np.float32(230.17778), np.float32(218.43976), np.float32(152.8012), np.float32(288.88596), np.float32(293.21613), np.float32(297.77597), np.float32(294.33972), np.float32(294.33707), np.float32(294.77197), np.float32(295.27646), np.float32(296.9083), np.float32(294.84528), np.float32(297.2338), np.float32(295.37598), np.float32(296.8291), np.float32(297.92392), np.float32(294.00394), np.float32(295.43344), np.float32(297.00067), np.float32(302.33136), np.float32(294.8903), np.float32(350.50595), np.float32(349.15274), np.float32(353.87875), np.float32(301.8339), np.float32(295.51495), np.float32(292.75943), np.float32(348.95334), np.float32(352.90143), np.float32(303.2882), np.float32(351.35593), np.float32(475.50223), np.float32(482.95834), np.float32(497.55347), np.float32(778.6974), np.float32(793.7671), np.float32(798.36536), np.float32(798.74384), np.float32(795.5318), np.float32(790.8597), np.float32(277.9236), np.float32(516.14404), np.float32(518.5017), np.float32(517.8696), np.float32(521.6807), np.float32(799.92755), np.float32(276.89633), np.float32(540.20416), np.float32(555.2008), np.float32(563.7046), np.float32(572.5832), np.float32(582.73724), np.float32(577.91846), np.float32(574.1123), np.float32(567.8295), np.float32(237.1046), np.float32(507.20334), np.float32(219.2052), np.float32(232.5272), np.float32(234.10852), np.float32(259.43317), np.float32(248.7935), np.float32(273.25772), np.float32(220.50824), np.float32(216.0387), np.float32(222.16606), np.float32(216.47571), np.float32(219.1434), np.float32(217.38658), np.float32(217.45612), np.float32(219.1068), np.float32(217.97832), np.float32(223.13004), np.float32(215.12029), np.float32(222.51224), np.float32(218.75095), np.float32(216.07425), np.float32(218.43335), np.float32(220.2583), np.float32(218.62543), np.float32(215.36684), np.float32(218.03062), np.float32(514.3605), np.float32(521.991), np.float32(533.59125), np.float32(532.43164), np.float32(523.96106), np.float32(514.3983), np.float32(507.48138), np.float32(498.24014), np.float32(500.59402), np.float32(509.86377), np.float32(517.7364), np.float32(519.0717), np.float32(259.84833), np.float32(268.16385), np.float32(259.28653), np.float32(261.09454), np.float32(256.2307), np.float32(253.48685), np.float32(259.9158), np.float32(244.55981), np.float32(232.26836), np.float32(239.32436), np.float32(465.41537), np.float32(451.21085), np.float32(446.2282), np.float32(443.98853), np.float32(441.78336), np.float32(437.63144), np.float32(435.6668), np.float32(437.10046), np.float32(440.1516), np.float32(440.24857), np.float32(439.9802), np.float32(437.77518), np.float32(433.21283), np.float32(431.6789), np.float32(438.60214), np.float32(221.28065), np.float32(225.42041), np.float32(211.47108), np.float32(331.4863), np.float32(327.58267), np.float32(328.2578), np.float32(328.60065), np.float32(372.72464), np.float32(385.7312), np.float32(381.23483), np.float32(384.92706), np.float32(389.97968), np.float32(391.18384), np.float32(385.78107), np.float32(377.9342), np.float32(374.2679), np.float32(348.2114), np.float32(777.6776), np.float32(219.81017), np.float32(223.77542), np.float32(221.36974), np.float32(330.27194), np.float32(221.67935), np.float32(216.70013), np.float32(775.4361), np.float32(775.4389), np.float32(216.92627), np.float32(220.99275), np.float32(216.25739), np.float32(216.91356), np.float32(226.90054), np.float32(217.96657), np.float32(253.7594), np.float32(328.253), np.float32(329.15875), np.float32(330.30316), np.float32(329.67352), np.float32(630.0944), np.float32(635.603), np.float32(650.18774), np.float32(699.164), np.float32(728.77545), np.float32(500.0242), np.float32(512.48944), np.float32(516.6392), np.float32(517.44745), np.float32(518.90796), np.float32(522.13495), np.float32(526.23004), np.float32(529.3937), np.float32(528.76184), np.float32(526.72546), np.float32(525.29364), np.float32(523.9894), np.float32(522.43225), np.float32(519.9827), np.float32(518.457), np.float32(518.7791), np.float32(520.9601), np.float32(523.8016), np.float32(519.8685), np.float32(518.0603), np.float32(517.4709), np.float32(519.8814), np.float32(522.5694), np.float32(257.72336), np.float32(257.56113), np.float32(261.08557), np.float32(258.33435), np.float32(266.82645), np.float32(269.2982), np.float32(277.7569), np.float32(285.87265), np.float32(292.19736), np.float32(297.97736), np.float32(297.7806), np.float32(592.97723), np.float32(595.3462), np.float32(589.70233), np.float32(293.35593), np.float32(291.08765), np.float32(290.9825), np.float32(288.79346), np.float32(282.868), np.float32(295.4907), np.float32(301.19183), np.float32(287.8436), np.float32(298.33652), np.float32(292.3303), np.float32(287.06985), np.float32(298.97275), np.float32(289.834), np.float32(294.50583), np.float32(297.00623), np.float32(289.086), np.float32(296.20892), np.float32(294.43), np.float32(295.09125), np.float32(295.61), np.float32(289.80002), np.float32(297.65753), np.float32(292.59378), np.float32(292.49463), np.float32(298.71353), np.float32(288.4543), np.float32(293.85077), np.float32(292.3226), np.float32(289.6745), np.float32(300.84753), np.float32(294.8633), np.float32(585.8524), np.float32(587.34827), np.float32(585.2579), np.float32(584.0383), np.float32(583.57135), np.float32(581.3092), np.float32(580.6552), np.float32(579.92926), np.float32(579.4514), np.float32(581.5243), np.float32(585.79614), np.float32(602.4046), np.float32(621.5652), np.float32(651.7477), np.float32(670.55774), np.float32(684.07446), np.float32(704.61273), np.float32(700.24506), np.float32(1011.7084), np.float32(985.557), np.float32(315.62305), np.float32(598.4872), np.float32(585.60144), np.float32(277.86102), np.float32(276.0488), np.float32(346.29813), np.float32(352.30347), np.float32(338.20935), np.float32(353.13446), np.float32(349.06842), np.float32(344.98257), np.float32(346.5031), np.float32(345.35144), np.float32(346.3133), np.float32(337.46967), np.float32(311.82858), np.float32(318.14432), np.float32(347.45044), np.float32(165.68684), np.float32(181.06905), np.float32(167.10695), np.float32(170.04161), np.float32(351.61237), np.float32(165.04405), np.float32(171.76086), np.float32(172.13625), np.float32(172.51703), np.float32(170.19627), np.float32(172.59612), np.float32(169.72075), np.float32(168.69286), np.float32(173.08336), np.float32(167.29546), np.float32(174.84311), np.float32(165.02182), np.float32(179.955), np.float32(168.43022), np.float32(172.44606), np.float32(170.41818), np.float32(169.97786), np.float32(175.45413), np.float32(166.2551), np.float32(176.7021), np.float32(164.78166), np.float32(182.9655), np.float32(164.83575), np.float32(179.68317), np.float32(163.4609), np.float32(181.96176), np.float32(166.31538), np.float32(178.41087), np.float32(168.33997), np.float32(170.60156), np.float32(346.3301), np.float32(350.05856), np.float32(350.16998), np.float32(350.14108), np.float32(349.26996), np.float32(350.8091), np.float32(351.243), np.float32(350.97684), np.float32(348.15454), np.float32(349.89868), np.float32(348.27805), np.float32(352.05478), np.float32(348.349), np.float32(350.49667), np.float32(348.8764), np.float32(350.00348), np.float32(349.3956), np.float32(349.49152), np.float32(348.56952), np.float32(349.71283), np.float32(349.0506), np.float32(349.9983), np.float32(349.07965), np.float32(349.81372), np.float32(349.84866), np.float32(349.19318), np.float32(350.24887), np.float32(349.02017), np.float32(349.41904), np.float32(349.8719), np.float32(349.61316), np.float32(348.27753), np.float32(349.15506), np.float32(349.55838), np.float32(349.76978), np.float32(350.81174), np.float32(348.99768), np.float32(349.21048), np.float32(348.26303), np.float32(350.61084), np.float32(348.28302), np.float32(350.31583), np.float32(181.68437), np.float32(166.57585), np.float32(181.05174), np.float32(166.88321), np.float32(178.89763), np.float32(167.90002), np.float32(176.74419), np.float32(173.17784), np.float32(168.4204), np.float32(260.79874), np.float32(348.44427), np.float32(349.97552), np.float32(350.99384), np.float32(196.93076), np.float32(230.39401), np.float32(204.93427), np.float32(218.83298), np.float32(210.64275), np.float32(216.02356), np.float32(217.1262), np.float32(212.8611), np.float32(350.0125), np.float32(350.04242), np.float32(223.0422), np.float32(210.3334), np.float32(218.51387), np.float32(209.59961), np.float32(348.04697), np.float32(209.21358), np.float32(349.2816), np.float32(350.36047), np.float32(349.21545), np.float32(350.5562), np.float32(349.00674), np.float32(349.87003), np.float32(349.30814), np.float32(349.08798), np.float32(350.67938), np.float32(348.24246), np.float32(350.50986), np.float32(349.65167), np.float32(350.2667), np.float32(348.96146), np.float32(349.48926), np.float32(348.37326), np.float32(349.02014), np.float32(349.7484), np.float32(350.47485), np.float32(349.78223), np.float32(348.57996), np.float32(350.0342), np.float32(172.37941), np.float32(176.63943), np.float32(171.26968), np.float32(179.02313), np.float32(172.88066), np.float32(174.47554), np.float32(168.16435), np.float32(185.66002), np.float32(195.76031), np.float32(242.74171), np.float32(170.81389), np.float32(239.56767), np.float32(204.19545), np.float32(247.65703), np.float32(252.21753), np.float32(168.83258), np.float32(189.58427), np.float32(166.90204), np.float32(178.50172), np.float32(168.61407), np.float32(182.64194), np.float32(347.93402), np.float32(175.54756), np.float32(349.39615), np.float32(350.91766), np.float32(349.49152), np.float32(175.25122), np.float32(350.13354), np.float32(349.51022), np.float32(351.674), np.float32(346.22482), np.float32(352.5775), np.float32(413.09097), np.float32(422.2788), np.float32(440.1903), np.float32(435.9811), np.float32(821.27966), np.float32(805.86646), np.float32(798.17725), np.float32(795.4599), np.float32(794.73364), np.float32(791.3536), np.float32(788.7947), np.float32(780.1652), np.float32(774.1212), np.float32(774.83905), np.float32(776.85785), np.float32(776.05634), np.float32(775.3012), np.float32(775.56805), np.float32(778.05963), np.float32(779.69324), np.float32(780.4985), np.float32(780.2837), np.float32(779.5665), np.float32(777.5123), np.float32(773.5686), np.float32(763.7095), np.float32(307.65616), np.float32(184.2655), np.float32(186.22284), np.float32(340.11383), np.float32(341.2069), np.float32(683.04706), np.float32(188.29022), np.float32(331.69122), np.float32(329.04257), np.float32(326.4862), np.float32(327.07233), np.float32(329.48526), np.float32(327.8937), np.float32(329.72888), np.float32(332.9975), np.float32(330.09366), np.float32(331.01825), np.float32(328.96338), np.float32(328.56683), np.float32(329.93323), np.float32(330.2514), np.float32(330.42816), np.float32(392.90042), np.float32(380.1678), np.float32(355.16602), np.float32(324.28778), np.float32(314.3267), np.float32(318.2441), np.float32(326.95004), np.float32(331.81247), np.float32(335.64484), np.float32(331.67734), np.float32(324.75436), np.float32(311.99994), np.float32(327.65494), np.float32(785.54236), np.float32(783.74554), np.float32(783.07043), np.float32(780.25635), np.float32(783.6611), np.float32(783.7905), np.float32(782.0625), np.float32(783.42334), np.float32(784.90045), np.float32(261.46582), np.float32(190.3818), np.float32(185.5659), np.float32(262.04303), np.float32(211.2192), np.float32(190.60023), np.float32(327.6071), np.float32(182.08205), np.float32(785.78815), np.float32(342.44086), np.float32(339.39374), np.float32(2043.0049), np.float32(675.7262), np.float32(348.80637), np.float32(345.66864), np.float32(347.00287), np.float32(2146.52), np.float32(2157.5916), np.float32(2171.234), np.float32(2199.1216), np.float32(373.7608), np.float32(386.21225), np.float32(395.00647), np.float32(396.22705), np.float32(397.4942), np.float32(397.7745), np.float32(397.0111), np.float32(397.2978), np.float32(395.03323), np.float32(394.70526), np.float32(394.0004), np.float32(390.00482), np.float32(3112.601), np.float32(1920.0244), np.float32(1908.497), np.float32(764.8958), np.float32(757.7124), np.float32(362.9686), np.float32(354.67874), np.float32(352.07968), np.float32(683.81146), np.float32(685.32916), np.float32(676.448), np.float32(665.8976), np.float32(660.23303), np.float32(658.0246), np.float32(655.84375), np.float32(655.11865), np.float32(656.6443), np.float32(656.7322), np.float32(657.9739), np.float32(657.63434), np.float32(657.5712), np.float32(657.25397), np.float32(658.7279), np.float32(659.6143), np.float32(660.12463), np.float32(663.3702), np.float32(662.38855), np.float32(659.68274), np.float32(657.83734), np.float32(657.18274), np.float32(656.4608), np.float32(656.127), np.float32(655.8374), np.float32(655.7101), np.float32(654.01746), np.float32(652.4246), np.float32(1969.8422), np.float32(658.4735), np.float32(660.7128), np.float32(657.55975), np.float32(662.04443), np.float32(322.47116), np.float32(327.81226), np.float32(328.6266), np.float32(329.75897), np.float32(330.42874), np.float32(328.47052), np.float32(327.89392), np.float32(330.19617), np.float32(329.47748), np.float32(330.59122), np.float32(324.3073), np.float32(279.5685), np.float32(321.8461), np.float32(314.16574), np.float32(296.41522), np.float32(309.197), np.float32(302.65622), np.float32(329.4186), np.float32(327.4547), np.float32(328.30814), np.float32(328.6424), np.float32(328.73044), np.float32(328.66327), np.float32(327.94183), np.float32(328.31537), np.float32(329.10907), np.float32(656.5871), np.float32(258.81973), np.float32(261.70523), np.float32(261.00098), np.float32(262.29727), np.float32(260.7577), np.float32(268.86304), np.float32(440.1746), np.float32(440.92676), np.float32(438.92426), np.float32(413.668), np.float32(391.47278), np.float32(379.2993), np.float32(674.5016), np.float32(658.3875), np.float32(655.7204), np.float32(655.1867), np.float32(654.5452), np.float32(656.464), np.float32(656.99286), np.float32(656.55115), np.float32(655.4537), np.float32(655.0339), np.float32(328.07846), np.float32(328.77582), np.float32(328.54468), np.float32(328.1722), np.float32(327.07693), np.float32(327.66156), np.float32(328.555), np.float32(327.46677), np.float32(327.9973), np.float32(329.33554), np.float32(195.7856), np.float32(192.97021), np.float32(326.3334), np.float32(589.7846), np.float32(583.2735), np.float32(570.97845), np.float32(577.0085), np.float32(579.6648), np.float32(582.7116), np.float32(585.3255), np.float32(584.40063), np.float32(582.4651), np.float32(276.13623), np.float32(564.67535), np.float32(572.02716), np.float32(193.3662), np.float32(194.73808), np.float32(194.96037), np.float32(194.6784), np.float32(196.61491), np.float32(263.53116), np.float32(259.2245), np.float32(194.49814), np.float32(261.02182), np.float32(257.0694), np.float32(348.61575), np.float32(343.03806), np.float32(353.46136), np.float32(349.15063), np.float32(349.8926), np.float32(349.138), np.float32(597.78595), np.float32(594.9484), np.float32(591.57806), np.float32(588.31805), np.float32(587.987), np.float32(587.2423), np.float32(588.032), np.float32(587.6019), np.float32(296.90182), np.float32(299.56604), np.float32(345.97302), np.float32(282.88318), np.float32(349.81497), np.float32(348.9767), np.float32(353.29678), np.float32(347.7743), np.float32(346.66522), np.float32(290.68893), np.float32(280.27417), np.float32(353.3265), np.float32(255.75215), np.float32(274.04352), np.float32(522.2141), np.float32(523.69904), np.float32(267.5643), np.float32(226.86661), np.float32(350.30652), np.float32(346.1318), np.float32(346.59668), np.float32(352.0967), np.float32(351.2576), np.float32(351.5077), np.float32(348.95404), np.float32(290.59988), np.float32(351.6851), np.float32(351.59518), np.float32(353.42114), np.float32(296.0227), np.float32(295.71588), np.float32(289.87335), np.float32(292.62634), np.float32(291.24762), np.float32(297.2786), np.float32(226.93129), np.float32(226.64804), np.float32(631.9797), np.float32(646.0484), np.float32(757.15405), np.float32(770.42755), np.float32(775.4005), np.float32(774.8601), np.float32(773.91437), np.float32(782.0971), np.float32(796.0586), np.float32(804.69073), np.float32(815.26105), np.float32(837.5954), np.float32(860.02155), np.float32(887.68097), np.float32(896.29816), np.float32(894.3473), np.float32(893.8049), np.float32(890.72845), np.float32(886.3675), np.float32(878.8583), np.float32(871.2117), np.float32(866.6444), np.float32(866.638), np.float32(573.671), np.float32(564.36395), np.float32(559.52734), np.float32(545.21136), np.float32(527.0929), np.float32(517.1385), np.float32(512.0921), np.float32(499.5528), np.float32(489.1451), np.float32(333.109), np.float32(534.8075), np.float32(304.15942), np.float32(509.12778), np.float32(499.87225), np.float32(448.02914), np.float32(442.85376), np.float32(888.3034), np.float32(292.5627), np.float32(219.39442), np.float32(295.4256), np.float32(292.89612), np.float32(293.05432), np.float32(292.23465), np.float32(293.5603), np.float32(295.563), np.float32(283.93954), np.float32(293.27835), np.float32(290.4827), np.float32(347.254), np.float32(289.62173), np.float32(296.44293), np.float32(298.35635), np.float32(293.53955), np.float32(297.26654), np.float32(292.4908), np.float32(293.58475), np.float32(228.09895), np.float32(447.7617), np.float32(447.0434), np.float32(445.25833), np.float32(444.39526), np.float32(443.07748), np.float32(442.90518), np.float32(443.57388), np.float32(444.90683), np.float32(445.90128), np.float32(448.7439), np.float32(456.455), np.float32(463.64816), np.float32(468.31427), np.float32(233.51178), np.float32(231.22415), np.float32(450.12134), np.float32(445.3658), np.float32(442.395), np.float32(441.3591), np.float32(442.55728), np.float32(447.14746), np.float32(449.62405), np.float32(454.14908), np.float32(467.37595), np.float32(470.83282), np.float32(238.80634), np.float32(237.9309), np.float32(466.26343), np.float32(451.7265), np.float32(447.45325), np.float32(442.26654), np.float32(435.7458), np.float32(431.50955), np.float32(433.13834), np.float32(432.06308), np.float32(434.1149), np.float32(438.39008), np.float32(443.7071), np.float32(442.61594), np.float32(443.71362), np.float32(440.48596), np.float32(430.19214), np.float32(418.8722), np.float32(394.1351), np.float32(378.38675), np.float32(296.7755), np.float32(375.4578), np.float32(380.6583), np.float32(298.35367), np.float32(377.9709), np.float32(394.07245), np.float32(384.90668), np.float32(395.50677), np.float32(393.56207), np.float32(396.70288), np.float32(395.74197), np.float32(395.89142), np.float32(393.72794), np.float32(394.68515), np.float32(398.17267), np.float32(394.31824), np.float32(398.04007), np.float32(384.65057), np.float32(400.0902), np.float32(385.63962), np.float32(397.04846), np.float32(381.31763), np.float32(579.6511), np.float32(578.85364), np.float32(374.40732), np.float32(583.97925), np.float32(586.28876), np.float32(402.50656), np.float32(402.86093), np.float32(426.148), np.float32(448.68423), np.float32(473.1487), np.float32(489.30496), np.float32(501.84558), np.float32(514.0008), np.float32(520.5266), np.float32(523.1738), np.float32(524.1453), np.float32(523.0087), np.float32(520.8128), np.float32(518.4648), np.float32(514.34467), np.float32(511.7622), np.float32(511.0059), np.float32(512.1333), np.float32(511.51932), np.float32(169.38785), np.float32(330.11166), np.float32(162.13617), np.float32(330.1237), np.float32(326.55594), np.float32(327.75247), np.float32(328.69656), np.float32(331.87195), np.float32(216.38799), np.float32(221.9157), np.float32(215.4635), np.float32(222.19748), np.float32(217.30438), np.float32(218.10828), np.float32(218.9321), np.float32(220.28683), np.float32(217.23505), np.float32(218.55553), np.float32(216.42645), np.float32(327.63525), np.float32(225.23628), np.float32(216.30954), np.float32(219.83643), np.float32(216.57413), np.float32(220.2358), np.float32(216.92017), np.float32(449.57388), np.float32(460.26465), np.float32(478.22748), np.float32(491.6025), np.float32(496.58673), np.float32(510.25345), np.float32(521.1526), np.float32(524.422), np.float32(525.2158), np.float32(523.15625), np.float32(526.8977), np.float32(529.1781), np.float32(520.5876), np.float32(520.5735), np.float32(521.56824), np.float32(522.0799), np.float32(521.02637), np.float32(522.25146), np.float32(523.1671), np.float32(519.8103), np.float32(517.54407), np.float32(518.47894), np.float32(515.49945), np.float32(510.82495), np.float32(258.68597), np.float32(251.31105), np.float32(496.44992), np.float32(490.44272), np.float32(471.7897), np.float32(468.40854), np.float32(237.6609), np.float32(330.10727), np.float32(329.38193), np.float32(328.9377), np.float32(328.49936), np.float32(432.88162), np.float32(441.08777), np.float32(328.4165), np.float32(330.08575), np.float32(328.14337), np.float32(328.93954), np.float32(328.56638), np.float32(330.34048), np.float32(328.8559), np.float32(328.0357), np.float32(328.86118), np.float32(329.23126), np.float32(330.23346), np.float32(329.96655), np.float32(327.43524), np.float32(328.0041), np.float32(337.06827), np.float32(176.54922), np.float32(175.75606), np.float32(346.68854), np.float32(376.6153), np.float32(373.46445), np.float32(379.08133), np.float32(190.50601), np.float32(390.086), np.float32(395.88278), np.float32(396.51334), np.float32(399.7428), np.float32(403.18356), np.float32(402.53745), np.float32(402.16666), np.float32(398.68896), np.float32(398.56082), np.float32(398.87772), np.float32(397.53134), np.float32(395.21005), np.float32(390.5645), np.float32(383.2229), np.float32(380.17316), np.float32(572.9489), np.float32(577.5267), np.float32(578.86224), np.float32(579.4865), np.float32(581.4301), np.float32(800.5859), np.float32(824.83746), np.float32(854.4781), np.float32(883.9963), np.float32(898.07434), np.float32(909.61365), np.float32(943.5056), np.float32(982.1082), np.float32(1001.19104), np.float32(1011.67645), np.float32(1015.647), np.float32(1027.6031), np.float32(774.7221), np.float32(777.56085), np.float32(778.35815), np.float32(780.75793), np.float32(782.37225), np.float32(785.21906), np.float32(1046.766), np.float32(1046.0844), np.float32(1044.8353), np.float32(1048.9135), np.float32(1050.02), np.float32(1048.015), np.float32(1048.9513), np.float32(1050.3146), np.float32(1053.0804), np.float32(789.7366), np.float32(789.2601), np.float32(789.66473), np.float32(789.32935), np.float32(787.8709), np.float32(783.31696), np.float32(779.6464), np.float32(777.5197), np.float32(777.55835), np.float32(520.0208), np.float32(230.70638), np.float32(227.91197), np.float32(218.52751), np.float32(226.30759), np.float32(221.61116), np.float32(219.57288), np.float32(233.78902), np.float32(242.92685), np.float32(280.37418), np.float32(282.06866), np.float32(313.91092), np.float32(281.51254), np.float32(302.09598), np.float32(328.44498), np.float32(322.72275), np.float32(315.13846), np.float32(331.07928), np.float32(309.96356), np.float32(283.15482), np.float32(314.11398), np.float32(312.48618), np.float32(282.07074), np.float32(310.94153), np.float32(302.806), np.float32(285.40582), np.float32(309.10968), np.float32(1174.31), np.float32(315.4534), np.float32(309.3487), np.float32(283.40598), np.float32(586.2776), np.float32(587.3708), np.float32(590.7486), np.float32(596.31866), np.float32(592.2133), np.float32(882.87286), np.float32(884.52325), np.float32(884.57245), np.float32(884.86884), np.float32(881.99713), np.float32(876.8247), np.float32(875.2513), np.float32(874.8002), np.float32(875.32135), np.float32(882.99426), np.float32(892.7774), np.float32(909.44214), np.float32(615.1628), np.float32(642.5822), np.float32(653.70935), np.float32(658.33966), np.float32(659.2085), np.float32(650.6287), np.float32(625.8451), np.float32(595.86804), np.float32(575.01105), np.float32(219.59534), np.float32(216.69618), np.float32(207.17844), np.float32(347.8992), np.float32(211.61569), np.float32(224.66788), np.float32(203.34763), np.float32(169.35446), np.float32(172.88559), np.float32(352.76956), np.float32(350.5055), np.float32(541.45447), np.float32(522.7883), np.float32(345.33768), np.float32(349.53824), np.float32(350.64285), np.float32(347.02237), np.float32(168.33507), np.float32(351.61014), np.float32(347.64865), np.float32(350.68552), np.float32(348.60117), np.float32(158.65999), np.float32(349.2105), np.float32(349.10574), np.float32(188.54716), np.float32(163.53847), np.float32(347.6146), np.float32(163.56377), np.float32(170.51274), np.float32(169.11406), np.float32(167.92255), np.float32(208.69963), np.float32(212.68367), np.float32(210.13403), np.float32(214.06725), np.float32(201.9057), np.float32(164.62314), np.float32(198.93398), np.float32(164.42099), np.float32(208.07164), np.float32(212.88518), np.float32(173.81824), np.float32(168.40298), np.float32(169.61234), np.float32(171.17365), np.float32(174.44545), np.float32(170.1077), np.float32(179.60172), np.float32(170.24689), np.float32(186.95813), np.float32(355.29852), np.float32(347.56125), np.float32(349.9811), np.float32(350.33215), np.float32(350.38782), np.float32(347.891), np.float32(350.99384), np.float32(349.79486), np.float32(351.06207), np.float32(347.74078), np.float32(350.9299), np.float32(350.00665), np.float32(351.52277), np.float32(348.64035), np.float32(349.30713), np.float32(348.9167), np.float32(350.76282), np.float32(349.45618), np.float32(348.99878), np.float32(349.47116), np.float32(350.44846), np.float32(174.63754), np.float32(350.1738), np.float32(174.49202), np.float32(348.71542), np.float32(350.90622), np.float32(348.7246), np.float32(350.92334), np.float32(348.28604), np.float32(350.04285), np.float32(212.61942), np.float32(211.10857), np.float32(784.37665), np.float32(788.27496), np.float32(712.0624), np.float32(729.94586), np.float32(756.00385), np.float32(520.85767), np.float32(516.99817), np.float32(514.55725), np.float32(518.8124), np.float32(795.68274), np.float32(226.98373), np.float32(250.64684), np.float32(252.39694), np.float32(234.47368), np.float32(231.89098), np.float32(218.67781), np.float32(350.25635), np.float32(347.86868), np.float32(170.29657), np.float32(234.47107), np.float32(234.67477), np.float32(232.69708), np.float32(545.3975), np.float32(566.43665), np.float32(879.7409), np.float32(891.0158), np.float32(891.3526), np.float32(892.97815), np.float32(892.0344), np.float32(887.5642), np.float32(878.2652), np.float32(1166.4305), np.float32(1170.5238), np.float32(1181.243), np.float32(1197.4572), np.float32(1214.3693), np.float32(1234.7367), np.float32(1276.7152), np.float32(1299.59), np.float32(1313.6558), np.float32(1320.2794), np.float32(1325.6177), np.float32(1328.8734), np.float32(1328.874), np.float32(1323.8802), np.float32(1319.0908), np.float32(656.4862), np.float32(344.89142), np.float32(333.44058), np.float32(344.07407), np.float32(354.66098), np.float32(346.62347), np.float32(350.2601), np.float32(347.0899), np.float32(350.1734), np.float32(348.45654), np.float32(349.57886), np.float32(349.02884), np.float32(350.77637), np.float32(348.98294), np.float32(349.6268), np.float32(281.68372), np.float32(294.84506), np.float32(313.5255), np.float32(301.75906), np.float32(297.39352), np.float32(297.38025), np.float32(295.1001), np.float32(293.10126), np.float32(354.02805), np.float32(349.96307), np.float32(349.164), np.float32(348.12296), np.float32(237.95537), np.float32(347.95822), np.float32(349.12592), np.float32(252.7867), np.float32(248.97914), np.float32(259.81836), np.float32(249.86983), np.float32(217.61687), np.float32(349.15793), np.float32(176.00136), np.float32(167.4636), np.float32(187.99202), np.float32(168.6195), np.float32(350.62607), np.float32(348.62457), np.float32(350.73715), np.float32(348.49713), np.float32(351.5019), np.float32(172.45534), np.float32(175.72166), np.float32(174.82559), np.float32(348.48123), np.float32(349.27188), np.float32(349.37814), np.float32(352.33554), np.float32(349.11243), np.float32(348.8521), np.float32(349.60645), np.float32(189.29665), np.float32(351.18997), np.float32(201.12837), np.float32(232.06998), np.float32(201.94113), np.float32(350.80185), np.float32(206.39294), np.float32(597.30566), np.float32(607.74066), np.float32(627.4156), np.float32(621.8074), np.float32(608.768), np.float32(608.1141), np.float32(605.991), np.float32(604.9466), np.float32(604.3861), np.float32(604.6796), np.float32(604.7715), np.float32(611.5915), np.float32(610.52673), np.float32(616.6603), np.float32(328.26294), np.float32(327.72076), np.float32(329.0918), np.float32(330.48157), np.float32(329.99594), np.float32(328.46072), np.float32(328.36288), np.float32(1972.6101), np.float32(329.46857), np.float32(327.6696), np.float32(652.7111), np.float32(654.45306), np.float32(654.8264), np.float32(655.813), np.float32(655.16077), np.float32(657.8864), np.float32(658.6591), np.float32(659.3185), np.float32(659.03546), np.float32(657.44574), np.float32(659.2419), np.float32(658.86115), np.float32(659.62805), np.float32(657.7561), np.float32(657.58185), np.float32(658.5816), np.float32(657.5151), np.float32(657.274), np.float32(657.6813), np.float32(658.11273), np.float32(659.2778), np.float32(658.1), np.float32(657.6483), np.float32(656.0715), np.float32(655.59576), np.float32(655.4387), np.float32(655.1485), np.float32(654.4833), np.float32(655.3579), np.float32(655.1985), np.float32(657.4125), np.float32(655.6038), np.float32(656.35846), np.float32(654.9407), np.float32(655.09534), np.float32(655.4187), np.float32(656.9134), np.float32(659.48553), np.float32(657.41705), np.float32(657.18585), np.float32(659.00226), np.float32(657.4553), np.float32(656.6886), np.float32(656.7478), np.float32(657.68164), np.float32(656.552), np.float32(656.859), np.float32(655.8806), np.float32(655.72864), np.float32(655.68787), np.float32(328.2986), np.float32(329.05392), np.float32(329.3071), np.float32(1970.5825), np.float32(1967.6101), np.float32(655.14276), np.float32(656.457), np.float32(656.26135), np.float32(655.75476), np.float32(655.8877), np.float32(655.70355), np.float32(655.4074), np.float32(1969.863), np.float32(1970.5055), np.float32(1970.4395), np.float32(656.9979), np.float32(657.5684), np.float32(657.09467), np.float32(658.1746), np.float32(657.01685), np.float32(657.903), np.float32(658.5903), np.float32(659.3953), np.float32(658.91565), np.float32(659.2892), np.float32(659.53485), np.float32(659.14557), np.float32(657.37274), np.float32(657.6094), np.float32(656.28564), np.float32(655.85925), np.float32(656.102), np.float32(655.40607), np.float32(655.7782), np.float32(654.8207), np.float32(655.56635), np.float32(656.5458), np.float32(263.1303), np.float32(261.8206), np.float32(259.75558), np.float32(258.99762), np.float32(260.6291), np.float32(655.8328), np.float32(656.0295), np.float32(656.3591), np.float32(655.9576), np.float32(656.9053), np.float32(657.5741), np.float32(657.8113), np.float32(658.4028), np.float32(657.71), np.float32(657.4812), np.float32(657.2752), np.float32(657.2217), np.float32(656.16876), np.float32(656.76154), np.float32(656.8104), np.float32(655.57446), np.float32(655.7367), np.float32(655.8347), np.float32(655.2439), np.float32(654.4395), np.float32(654.43677), np.float32(655.41693), np.float32(654.451), np.float32(655.14417), np.float32(656.80804), np.float32(656.78754), np.float32(656.8466), np.float32(657.0931), np.float32(657.4096), np.float32(657.5428), np.float32(658.1333), np.float32(657.3881), np.float32(656.8846), np.float32(656.8291), np.float32(657.1823), np.float32(656.9771), np.float32(656.8901), np.float32(657.69275), np.float32(657.8901), np.float32(657.4766), np.float32(657.41327), np.float32(657.4266), np.float32(657.48206), np.float32(656.6425), np.float32(655.1781), np.float32(653.7177), np.float32(661.7428), np.float32(656.6819), np.float32(656.3193), np.float32(657.9761), np.float32(655.3112), np.float32(659.67017), np.float32(654.95294), np.float32(660.47186), np.float32(654.16284), np.float32(660.03467), np.float32(657.2709), np.float32(657.9654), np.float32(658.2232), np.float32(655.6734), np.float32(659.0732), np.float32(654.3502), np.float32(660.5546), np.float32(655.39636), np.float32(658.4826), np.float32(657.548), np.float32(655.8382), np.float32(656.68854), np.float32(655.001), np.float32(658.1434), np.float32(654.51544), np.float32(657.3621), np.float32(655.1709), np.float32(656.42035), np.float32(655.9254), np.float32(655.243), np.float32(656.15717), np.float32(655.349), np.float32(657.2117), np.float32(655.8536), np.float32(656.47485), np.float32(655.71063), np.float32(656.107), np.float32(657.601), np.float32(656.15424), np.float32(658.9966), np.float32(656.2356), np.float32(659.5112), np.float32(657.545), np.float32(658.08276), np.float32(659.38416), np.float32(656.0753), np.float32(658.6371), np.float32(655.4735), np.float32(658.46625), np.float32(657.57587), np.float32(656.93567), np.float32(657.95276), np.float32(656.442), np.float32(657.496), np.float32(656.32263), np.float32(657.9618), np.float32(658.0025), np.float32(657.86237), np.float32(657.6783), np.float32(657.3601), np.float32(658.16693), np.float32(657.5992), np.float32(657.40247), np.float32(656.22766), np.float32(655.63965), np.float32(655.64136), np.float32(654.87555), np.float32(327.40924), np.float32(329.28082), np.float32(328.59695), np.float32(327.7576), np.float32(331.04782), np.float32(328.9279), np.float32(328.14078), np.float32(329.03796), np.float32(655.3613), np.float32(655.62823), np.float32(655.269), np.float32(656.1747), np.float32(656.81), np.float32(657.029), np.float32(656.99445), np.float32(657.5269), np.float32(657.79755), np.float32(657.81195), np.float32(657.5761), np.float32(657.76733), np.float32(656.9367), np.float32(656.7589), np.float32(657.62915), np.float32(658.0084), np.float32(658.1334), np.float32(658.1819), np.float32(657.6872), np.float32(657.2371), np.float32(657.7879), np.float32(657.58386), np.float32(657.349), np.float32(657.26965), np.float32(656.33344), np.float32(656.0144), np.float32(655.0307), np.float32(655.40106), np.float32(654.98175), np.float32(655.771), np.float32(656.9012), np.float32(657.7483), np.float32(657.94257), np.float32(658.37494), np.float32(659.95123), np.float32(661.17487), np.float32(659.8462), np.float32(658.8181), np.float32(658.4897), np.float32(658.3501), np.float32(657.1546), np.float32(655.781), np.float32(655.1567), np.float32(655.6177), np.float32(655.3689), np.float32(657.0107), np.float32(658.67114), np.float32(659.2241), np.float32(660.08405), np.float32(661.28235), np.float32(661.1678), np.float32(660.291), np.float32(660.068), np.float32(661.08514), np.float32(661.3579), np.float32(660.8104), np.float32(659.413), np.float32(657.3034), np.float32(654.75494), np.float32(652.79333), np.float32(647.8133), np.float32(646.8214), np.float32(649.5382), np.float32(650.11017), np.float32(652.7092), np.float32(657.1071), np.float32(661.05963), np.float32(667.3742), np.float32(674.66473), np.float32(677.9712), np.float32(678.02484), np.float32(677.89166), np.float32(679.253), np.float32(679.5926), np.float32(672.26105), np.float32(660.7276), np.float32(656.95294), np.float32(654.7003), np.float32(655.39655), np.float32(656.90027), np.float32(658.4103), np.float32(660.62805), np.float32(663.28564), np.float32(664.8142), np.float32(666.7287), np.float32(667.9508), np.float32(667.5006), np.float32(664.4545), np.float32(659.77795), np.float32(656.0867), np.float32(652.64307), np.float32(651.2804), np.float32(652.6652), np.float32(653.0255), np.float32(651.3839), np.float32(655.9405), np.float32(660.13715), np.float32(662.7068), np.float32(665.4488), np.float32(670.68097), np.float32(672.6397), np.float32(674.2849), np.float32(678.2188), np.float32(678.5634), np.float32(672.5636), np.float32(665.4845), np.float32(660.8122), np.float32(1958.5563), np.float32(649.3067), np.float32(656.9982), np.float32(655.8388), np.float32(653.70953), np.float32(329.8988), np.float32(656.67004), np.float32(667.4307), np.float32(669.561), np.float32(662.0486), np.float32(661.7168), np.float32(660.25934), np.float32(641.3114), np.float32(618.77216), np.float32(612.55145), np.float32(588.20764), np.float32(661.3525), np.float32(663.2362), np.float32(665.6132), np.float32(665.68066), np.float32(664.92523), np.float32(661.283), np.float32(262.39923), np.float32(522.9372), np.float32(520.2832), np.float32(520.759), np.float32(521.4877), np.float32(520.2813), np.float32(260.59305), np.float32(261.4332), np.float32(260.24088), np.float32(258.7798), np.float32(257.49033), np.float32(662.6399), np.float32(660.63617), np.float32(660.4055), np.float32(255.90982), np.float32(259.20914), np.float32(259.01688), np.float32(258.9631), np.float32(261.5675), np.float32(259.43668), np.float32(262.8067), np.float32(254.39798), np.float32(262.7313), np.float32(255.15521), np.float32(330.08524), np.float32(328.88773), np.float32(328.34216), np.float32(329.86362), np.float32(254.4833), np.float32(328.42856), np.float32(328.63), np.float32(328.58545), np.float32(660.928), np.float32(328.71762), np.float32(782.2196), np.float32(780.31287), np.float32(780.4276), np.float32(780.6073), np.float32(330.13202), np.float32(327.99774), np.float32(205.32962), np.float32(193.68707), np.float32(779.7152), np.float32(196.45471), np.float32(204.30264), np.float32(516.0734), np.float32(241.9729), np.float32(223.99023), np.float32(214.8156), np.float32(230.15552), np.float32(213.06844), np.float32(222.68115), np.float32(223.36668), np.float32(217.32695), np.float32(219.47545), np.float32(215.40172), np.float32(227.7281), np.float32(214.05986), np.float32(227.59077), np.float32(214.3935), np.float32(221.62233), np.float32(221.73238), np.float32(214.49335), np.float32(226.38419), np.float32(214.56178), np.float32(223.1475), np.float32(216.10027), np.float32(221.40562), np.float32(218.39238), np.float32(219.20573), np.float32(218.46074), np.float32(217.96445), np.float32(222.45825), np.float32(214.30678), np.float32(224.72986), np.float32(215.57016), np.float32(222.51224), np.float32(215.4549), np.float32(222.09348), np.float32(218.9196), np.float32(217.49174), np.float32(219.30519), np.float32(216.22267), np.float32(225.61739), np.float32(213.97673), np.float32(226.60995), np.float32(215.35915), np.float32(221.41756), np.float32(218.58948), np.float32(218.56195), np.float32(220.55013), np.float32(215.33105), np.float32(224.05884), np.float32(214.59332), np.float32(222.51285), np.float32(216.06265), np.float32(225.27954), np.float32(218.85059), np.float32(218.01125), np.float32(238.20078), np.float32(212.58908), np.float32(236.44083), np.float32(232.82199), np.float32(217.18996), np.float32(237.15831), np.float32(213.41267), np.float32(238.30933), np.float32(212.0769), np.float32(239.66283), np.float32(257.35577), np.float32(252.56206), np.float32(256.2202), np.float32(329.954), np.float32(328.69928), np.float32(328.95804), np.float32(330.0977), np.float32(328.38516), np.float32(328.65594), np.float32(328.0237), np.float32(329.27298), np.float32(329.33984), np.float32(328.77487), np.float32(329.33173), np.float32(328.79318), np.float32(329.52844), np.float32(329.30408), np.float32(328.36655), np.float32(328.2731), np.float32(329.02908), np.float32(329.64716), np.float32(328.35062), np.float32(329.2913), np.float32(328.45844), np.float32(328.9948), np.float32(329.09842), np.float32(328.50366), np.float32(329.2629), np.float32(327.9531), np.float32(328.47632), np.float32(329.38824), np.float32(328.85025), np.float32(329.16763), np.float32(328.45477), np.float32(328.7756), np.float32(328.02176), np.float32(329.61923), np.float32(330.23367), np.float32(256.3017), np.float32(260.81186), np.float32(208.66492), np.float32(251.36545), np.float32(260.2148), np.float32(259.12732), np.float32(259.01352), np.float32(328.16147), np.float32(257.31134), np.float32(261.8276), np.float32(260.63156), np.float32(264.34415), np.float32(329.49265), np.float32(328.54446), np.float32(329.87054), np.float32(328.98605), np.float32(327.98492), np.float32(330.3044), np.float32(328.6528), np.float32(328.78522), np.float32(329.30765), np.float32(328.8576), np.float32(330.47702), np.float32(327.86594), np.float32(328.3286), np.float32(329.5687), np.float32(329.17477), np.float32(329.27515), np.float32(328.72653), np.float32(329.09204), np.float32(328.4006), np.float32(328.238), np.float32(329.90054), np.float32(329.2228), np.float32(328.4541), np.float32(328.9877), np.float32(329.18262), np.float32(329.05103), np.float32(329.05032), np.float32(328.72415), np.float32(328.28775), np.float32(329.34833), np.float32(329.5015), np.float32(329.32428), np.float32(329.68076), np.float32(327.8565), np.float32(329.78952), np.float32(328.44058), np.float32(328.50238), np.float32(328.6374), np.float32(171.58469), np.float32(260.45117), np.float32(258.88556), np.float32(255.37352), np.float32(262.88354), np.float32(261.18445), np.float32(263.6032), np.float32(260.84717), np.float32(257.13), np.float32(261.01425), np.float32(259.93527), np.float32(261.90356), np.float32(259.08554), np.float32(260.52005), np.float32(261.76053), np.float32(261.6985), np.float32(260.34097), np.float32(259.54172), np.float32(261.43585), np.float32(258.2467), np.float32(261.17932), np.float32(261.70407), np.float32(261.98083), np.float32(260.75308), np.float32(259.19138), np.float32(780.93604), np.float32(780.99915), np.float32(781.7343), np.float32(260.85446), np.float32(260.75827), np.float32(258.55896), np.float32(782.6954), np.float32(780.6672), np.float32(780.0195), np.float32(780.9887), np.float32(784.1082), np.float32(327.8292), np.float32(329.02896), np.float32(328.25897), np.float32(781.51117), np.float32(779.9566), np.float32(779.3503), np.float32(328.37863), np.float32(330.0188), np.float32(326.45233), np.float32(330.49023), np.float32(329.80826), np.float32(325.82584), np.float32(327.82404), np.float32(204.51962), np.float32(203.30176), np.float32(208.59738), np.float32(218.5747), np.float32(331.52853), np.float32(232.72893), np.float32(328.8703), np.float32(330.9975), np.float32(237.2414), np.float32(216.42145), np.float32(248.57065), np.float32(261.4308), np.float32(243.02986), np.float32(212.55978), np.float32(234.93484), np.float32(330.18277), np.float32(219.84248), np.float32(329.26672), np.float32(330.4163), np.float32(329.4269), np.float32(328.68228), np.float32(235.2305), np.float32(328.9549), np.float32(329.2581), np.float32(328.46844), np.float32(328.07608), np.float32(329.47354), np.float32(329.27652), np.float32(329.64297), np.float32(329.58704), np.float32(328.35062), np.float32(329.74094), np.float32(328.75244), np.float32(328.51074), np.float32(329.5292), np.float32(328.61063), np.float32(328.61365), np.float32(329.1289), np.float32(329.1275), np.float32(329.5052), np.float32(328.7123), np.float32(774.4169), np.float32(774.84186), np.float32(774.6295), np.float32(328.6711), np.float32(221.55275), np.float32(327.90552), np.float32(220.41293), np.float32(773.8601), np.float32(773.9169), np.float32(216.19795), np.float32(214.04967), np.float32(226.57718), np.float32(215.6088), np.float32(227.79189), np.float32(222.70506), np.float32(215.80394), np.float32(225.1687), np.float32(216.71565), np.float32(224.32394), np.float32(214.52739), np.float32(225.76756), np.float32(218.84483), np.float32(217.91675), np.float32(224.61499), np.float32(214.59317), np.float32(227.35751), np.float32(214.97156), np.float32(225.13649), np.float32(215.06985), np.float32(222.93451), np.float32(217.93266), np.float32(217.47942), np.float32(223.48285), np.float32(215.0449), np.float32(221.29672), np.float32(215.74486), np.float32(224.47395), np.float32(215.07771), np.float32(221.65125), np.float32(218.24477), np.float32(218.12749), np.float32(328.5919), np.float32(217.18904), np.float32(223.73628), np.float32(215.75551), np.float32(220.60101), np.float32(328.4863), np.float32(222.65364), np.float32(328.64157), np.float32(329.61804), np.float32(328.94543), np.float32(328.41742), np.float32(218.41576), np.float32(775.8066), np.float32(775.92755), np.float32(775.4437), np.float32(775.02783), np.float32(216.34045), np.float32(217.2022), np.float32(216.61299), np.float32(226.82385), np.float32(777.4875), np.float32(781.0328), np.float32(780.1044), np.float32(248.43489), np.float32(253.06747), np.float32(258.57324), np.float32(248.00491), np.float32(779.4464), np.float32(247.52777), np.float32(263.1547), np.float32(252.99582), np.float32(262.36624), np.float32(250.84198), np.float32(255.54515), np.float32(330.79623), np.float32(254.91219), np.float32(328.14047), np.float32(330.06668), np.float32(328.35904), np.float32(329.21204), np.float32(328.66122), np.float32(329.84506), np.float32(329.57806), np.float32(327.33215), np.float32(329.14014), np.float32(329.40692), np.float32(329.87808), np.float32(328.78107), np.float32(328.78076), np.float32(328.91125), np.float32(329.0961), np.float32(329.6812), np.float32(329.28137), np.float32(328.93533), np.float32(327.62192), np.float32(328.6893), np.float32(329.89447), np.float32(329.23157), np.float32(329.125), np.float32(328.22556), np.float32(328.08017), np.float32(329.71646), np.float32(329.33325), np.float32(329.24078), np.float32(329.17282), np.float32(327.55936), np.float32(329.81955), np.float32(329.4889), np.float32(329.24112), np.float32(536.0341), np.float32(263.7871), np.float32(513.01385), np.float32(518.80597), np.float32(258.31744), np.float32(259.26797), np.float32(259.29013), np.float32(262.71298), np.float32(261.53326), np.float32(262.12897), np.float32(260.37323), np.float32(260.4368), np.float32(260.3557), np.float32(259.66623), np.float32(258.99765), np.float32(261.34506), np.float32(262.6578), np.float32(262.0758), np.float32(261.31604), np.float32(260.90427), np.float32(327.90875), np.float32(329.4767), np.float32(328.91486), np.float32(328.29227), np.float32(330.28964), np.float32(329.09634), np.float32(328.10306), np.float32(328.50647), np.float32(330.5015), np.float32(328.42438), np.float32(328.33868), np.float32(328.67108), np.float32(328.17923), np.float32(329.31958), np.float32(329.70746), np.float32(329.38113), np.float32(328.24075), np.float32(328.42337), np.float32(328.77448), np.float32(329.25705), np.float32(329.3538), np.float32(327.80573), np.float32(328.20264), np.float32(329.0668), np.float32(328.83496), np.float32(328.426), np.float32(330.59543), np.float32(327.30563), np.float32(328.8948), np.float32(328.7565), np.float32(245.94847), np.float32(256.83508), np.float32(261.70697), np.float32(263.5814), np.float32(259.6379), np.float32(258.9573), np.float32(261.7981), np.float32(330.42194), np.float32(328.6194), np.float32(257.9201), np.float32(256.9593), np.float32(328.68686), np.float32(329.77246), np.float32(328.70435), np.float32(327.92987), np.float32(330.3836), np.float32(329.45914), np.float32(327.8205), np.float32(329.36862), np.float32(329.50677), np.float32(328.5531), np.float32(329.02826), np.float32(328.9332), np.float32(329.02545), np.float32(329.2036), np.float32(331.78848), np.float32(331.88367), np.float32(324.5103), np.float32(324.94397), np.float32(323.69757), np.float32(326.17053), np.float32(333.87704), np.float32(330.39932), np.float32(329.03464), np.float32(330.05573), np.float32(328.83917), np.float32(327.85712), np.float32(329.7438), np.float32(328.23523), np.float32(328.28766), np.float32(330.26147), np.float32(329.80826), np.float32(328.30557), np.float32(329.00626), np.float32(330.18988), np.float32(328.67697), np.float32(329.37262), np.float32(370.17844), np.float32(368.27216), np.float32(379.79443), np.float32(387.60495), np.float32(392.86865), np.float32(391.91312), np.float32(386.01627), np.float32(384.562), np.float32(389.23608), np.float32(390.6883), np.float32(764.09906), np.float32(768.88763), np.float32(1149.9923), np.float32(1150.2153), np.float32(1150.5836), np.float32(1158.1516), np.float32(1168.9), np.float32(1179.5079), np.float32(1195.8241), np.float32(1210.1968), np.float32(1216.487), np.float32(1216.4891), np.float32(1210.7115), np.float32(1192.271), np.float32(1170.6559), np.float32(1146.8872), np.float32(1140.9862), np.float32(1142.7922), np.float32(1148.5725), np.float32(1170.5116), np.float32(1189.9668), np.float32(1199.5632), np.float32(1210.4353), np.float32(1212.7754), np.float32(1201.7948), np.float32(395.55936), np.float32(392.61508), np.float32(386.1004), np.float32(382.11942), np.float32(387.56802), np.float32(391.82935), np.float32(396.55084), np.float32(398.44965), np.float32(800.1784), np.float32(795.9983), np.float32(383.81143), np.float32(394.1911), np.float32(391.9446), np.float32(326.5275), np.float32(397.01837), np.float32(402.88098), np.float32(401.44424), np.float32(395.63864), np.float32(379.6061), np.float32(372.9822), np.float32(369.51328), np.float32(370.5701), np.float32(376.56772), np.float32(372.6246), np.float32(390.72043), np.float32(787.98444), np.float32(792.01465), np.float32(792.168), np.float32(1182.1173), np.float32(1174.81), np.float32(1174.4183), np.float32(1173.4316), np.float32(1174.763), np.float32(1175.6852), np.float32(1175.4349), np.float32(1174.2778), np.float32(1175.7715), np.float32(392.6445), np.float32(394.9195), np.float32(794.10596), np.float32(796.7495), np.float32(794.43964), np.float32(790.59717), np.float32(781.42114), np.float32(772.6658), np.float32(753.3114), np.float32(370.90906), np.float32(721.6744), np.float32(337.44135), np.float32(337.25174), np.float32(330.71677), np.float32(327.58618), np.float32(331.8653), np.float32(329.66293), np.float32(327.37766), np.float32(331.3151), np.float32(329.02246), np.float32(327.93292), np.float32(330.0827), np.float32(328.50327), np.float32(329.22678), np.float32(329.71112), np.float32(328.98953), np.float32(330.3461), np.float32(328.52313), np.float32(330.0438), np.float32(658.48425), np.float32(657.50476), np.float32(587.85956), np.float32(293.36923), np.float32(349.54697), np.float32(348.46707), np.float32(348.98248), np.float32(349.0158), np.float32(351.7735), np.float32(356.47607), np.float32(346.69168), np.float32(334.28308), np.float32(345.17285), np.float32(342.8664), np.float32(683.1818), np.float32(682.89685), np.float32(678.3383), np.float32(674.0516), np.float32(679.039), np.float32(336.2445), np.float32(307.35654), np.float32(305.78616), np.float32(347.52725), np.float32(347.9079), np.float32(351.64127), np.float32(345.51138), np.float32(351.6366), np.float32(330.58408), np.float32(324.61282), np.float32(312.93787), np.float32(704.8817), np.float32(372.8344), np.float32(375.44373), np.float32(774.6553), np.float32(787.8549), np.float32(792.69775), np.float32(790.73883), np.float32(784.77344), np.float32(775.2915), np.float32(769.063), np.float32(774.003), np.float32(775.4782), np.float32(786.2548), np.float32(797.6082), np.float32(806.3275), np.float32(809.09985), np.float32(810.8137), np.float32(808.9934), np.float32(798.7423), np.float32(792.17615), np.float32(786.94916), np.float32(779.8826), np.float32(775.83185), np.float32(774.98505), np.float32(778.4743), np.float32(786.1985), np.float32(788.1704), np.float32(790.29504), np.float32(802.63464), np.float32(805.6261), np.float32(809.67395), np.float32(818.22876), np.float32(818.1298), np.float32(815.3242), np.float32(817.8478), np.float32(817.5222), np.float32(816.7266), np.float32(826.77686), np.float32(831.5812), np.float32(844.2549), np.float32(855.1963), np.float32(858.44995), np.float32(867.5626), np.float32(877.7715), np.float32(884.9286), np.float32(885.7859), np.float32(885.76624), np.float32(886.5653), np.float32(221.1304), np.float32(216.16408), np.float32(217.68869), np.float32(218.1277), np.float32(219.32332), np.float32(428.10983), np.float32(428.86914), np.float32(429.59552), np.float32(428.31726), np.float32(217.3694), np.float32(217.91057), np.float32(219.28017), np.float32(216.66527), np.float32(220.28252), np.float32(217.83987), np.float32(218.55006), np.float32(217.46631), np.float32(218.43703), np.float32(218.28404), np.float32(218.14052), np.float32(218.86726), np.float32(217.7829), np.float32(219.11926), np.float32(217.97227), np.float32(219.67363), np.float32(219.86897), np.float32(219.46191), np.float32(219.9466), np.float32(221.60709), np.float32(217.01656), np.float32(227.78639), np.float32(216.86862), np.float32(219.33916), np.float32(217.6838), np.float32(353.64288), np.float32(343.497), np.float32(330.69882), np.float32(328.7348), np.float32(328.78662), np.float32(328.71042), np.float32(329.07742), np.float32(330.3616), np.float32(331.13245), np.float32(329.67975), np.float32(331.39636), np.float32(332.27734), np.float32(330.37305), np.float32(330.42914), np.float32(658.10046), np.float32(657.1141), np.float32(655.84937), np.float32(654.0582), np.float32(652.58044), np.float32(651.4868), np.float32(651.3233), np.float32(649.9956), np.float32(325.42334), np.float32(324.8266), np.float32(324.55222), np.float32(323.82123), np.float32(322.81436), np.float32(632.06195), np.float32(629.40015), np.float32(622.4983), np.float32(613.4288), np.float32(607.5342), np.float32(604.48254), np.float32(603.35046), np.float32(598.1884), np.float32(592.4811), np.float32(291.78354), np.float32(294.79996), np.float32(291.1406), np.float32(295.00955), np.float32(294.82303), np.float32(290.50204), np.float32(299.61337), np.float32(300.06454), np.float32(288.98907), np.float32(302.85513), np.float32(304.19974), np.float32(300.78674), np.float32(602.52545), np.float32(306.49655), np.float32(602.13654), np.float32(599.86816), np.float32(307.4409), np.float32(300.46194), np.float32(592.0124), np.float32(307.47266), np.float32(300.48038), np.float32(290.58395), np.float32(306.8789), np.float32(329.43994), np.float32(326.4906), np.float32(328.688), np.float32(266.1551), np.float32(265.5573), np.float32(260.10672), np.float32(263.5685), np.float32(263.26355), np.float32(262.27396), np.float32(276.95102), np.float32(285.1399), np.float32(288.0609), np.float32(308.8933), np.float32(317.66287), np.float32(324.29303), np.float32(651.968), np.float32(654.16583), np.float32(651.00684), np.float32(647.262), np.float32(638.8301), np.float32(640.324), np.float32(324.1192), np.float32(324.01947), np.float32(327.65094), np.float32(662.56464), np.float32(667.3372), np.float32(671.657), np.float32(672.1758), np.float32(672.9249), np.float32(670.6205), np.float32(329.63385), np.float32(325.80048), np.float32(324.5457), np.float32(321.2067), np.float32(318.86176), np.float32(187.51668), np.float32(321.71445), np.float32(325.65762), np.float32(328.0717), np.float32(331.9732), np.float32(193.14027), np.float32(193.9855), np.float32(194.60971), np.float32(193.87479), np.float32(196.14403), np.float32(195.19545), np.float32(194.53197), np.float32(193.1192), np.float32(193.77599), np.float32(326.31104), np.float32(194.07967), np.float32(191.88953), np.float32(194.62025), np.float32(198.50797), np.float32(193.62535), np.float32(337.04376), np.float32(336.70544), np.float32(333.70053), np.float32(332.64316), np.float32(329.3521), np.float32(325.8257), np.float32(324.73553), np.float32(323.86832), np.float32(323.2783), np.float32(329.1796), np.float32(334.81036), np.float32(339.31836), np.float32(346.81497), np.float32(345.44528), np.float32(367.1889), np.float32(350.05582), np.float32(339.2397), np.float32(193.914), np.float32(196.652), np.float32(195.69133), np.float32(191.19606), np.float32(194.83199), np.float32(197.82362), np.float32(194.85278), np.float32(191.03433), np.float32(654.96484), np.float32(197.9635), np.float32(192.46211), np.float32(194.7819), np.float32(195.37988), np.float32(219.05235), np.float32(216.9826), np.float32(226.687), np.float32(220.0912), np.float32(218.28082), np.float32(223.75995), np.float32(217.595), np.float32(225.77814), np.float32(214.4054), np.float32(224.28789), np.float32(217.97276), np.float32(216.90846), np.float32(219.609), np.float32(220.06029), np.float32(217.61504), np.float32(218.96652), np.float32(221.7395), np.float32(215.80226), np.float32(220.94374), np.float32(215.5273), np.float32(219.92871), np.float32(217.0363), np.float32(220.10687), np.float32(218.57983), np.float32(217.80585), np.float32(218.59038), np.float32(218.13548), np.float32(219.49406), np.float32(217.3907), np.float32(222.62526), np.float32(217.80972), np.float32(219.41624), np.float32(218.16563), np.float32(219.33345), np.float32(217.49663), np.float32(217.40237), np.float32(218.76648), np.float32(217.3856), np.float32(220.5636), np.float32(216.63911), np.float32(220.8408), np.float32(215.41588), np.float32(219.9866), np.float32(216.842), np.float32(220.9982), np.float32(217.23766), np.float32(219.62553), np.float32(217.73808), np.float32(215.59567), np.float32(209.87926), np.float32(217.84679), np.float32(246.95192), np.float32(259.11026), np.float32(236.91904), np.float32(215.16795), np.float32(229.67041), np.float32(214.75287), np.float32(225.89217), np.float32(219.67496), np.float32(216.36565), np.float32(227.13528), np.float32(214.49475), np.float32(229.54008), np.float32(214.60191), np.float32(223.3529), np.float32(216.35907), np.float32(222.3318), np.float32(218.68913), np.float32(216.94273), np.float32(221.3697), np.float32(216.01698), np.float32(221.97237), np.float32(215.6564), np.float32(224.92659), np.float32(215.15123), np.float32(220.21216), np.float32(218.064), np.float32(219.29324), np.float32(219.04865), np.float32(217.30298), np.float32(221.06902), np.float32(216.63608), np.float32(219.33656), np.float32(216.4935), np.float32(220.08102), np.float32(217.59564), np.float32(220.19678), np.float32(217.75037), np.float32(219.1792), np.float32(218.50003), np.float32(217.36281), np.float32(217.08409), np.float32(220.05325), np.float32(219.96295), np.float32(216.24739), np.float32(220.60718), np.float32(214.6052), np.float32(222.21895), np.float32(773.8448), np.float32(777.2328), np.float32(321.78314), np.float32(328.51694), np.float32(332.46487), np.float32(329.165), np.float32(331.2413), np.float32(330.89923), np.float32(327.1877), np.float32(328.42322), np.float32(329.61636), np.float32(328.2632), np.float32(329.43564), np.float32(329.22415), np.float32(327.71378), np.float32(329.5109), np.float32(328.79614), np.float32(328.7837), np.float32(329.51398), np.float32(327.86472), np.float32(328.79648), np.float32(328.946), np.float32(329.07477), np.float32(329.29257), np.float32(328.36398), np.float32(328.64844), np.float32(329.53613), np.float32(328.88794), np.float32(329.1628), np.float32(329.11475), np.float32(328.6892), np.float32(329.3094), np.float32(329.125), np.float32(329.14648), np.float32(329.12418), np.float32(328.4766), np.float32(328.8669), np.float32(329.3689), np.float32(329.8178), np.float32(329.60077), np.float32(328.09354), np.float32(328.24127), np.float32(330.1019), np.float32(329.52838), np.float32(329.4571), np.float32(329.34662), np.float32(327.3472), np.float32(658.62244), np.float32(659.2201), np.float32(776.0679), np.float32(776.0967), np.float32(190.30833), np.float32(185.24962), np.float32(187.2966), np.float32(192.65347), np.float32(194.56514), np.float32(193.62988), np.float32(195.86694), np.float32(193.21837), np.float32(192.92458), np.float32(193.17325), np.float32(194.24957), np.float32(196.77956), np.float32(193.82182), np.float32(193.36446), np.float32(195.38533), np.float32(194.01978), np.float32(194.50664), np.float32(193.71207), np.float32(192.61342), np.float32(193.85081), np.float32(197.25359), np.float32(194.85347), np.float32(192.87425), np.float32(194.39236), np.float32(193.84256), np.float32(194.49706), np.float32(193.0904), np.float32(193.21141), np.float32(196.74857), np.float32(197.31215), np.float32(192.26678), np.float32(191.41356), np.float32(196.39612), np.float32(195.90419), np.float32(191.94005), np.float32(193.19635), np.float32(195.89911), np.float32(197.70836), np.float32(192.99994), np.float32(191.85722), np.float32(195.11488), np.float32(196.13153), np.float32(194.61534), np.float32(192.49753), np.float32(194.82701), np.float32(196.62312), np.float32(195.10323), np.float32(193.4986), np.float32(194.65475), np.float32(193.19002), np.float32(195.74904), np.float32(256.31158), np.float32(279.30847), np.float32(246.42691), np.float32(217.22252), np.float32(219.43948), np.float32(229.77109), np.float32(215.3026), np.float32(222.65327), np.float32(213.98634), np.float32(230.67676), np.float32(215.90724), np.float32(220.06078), np.float32(222.06403), np.float32(214.87749), np.float32(221.47987), np.float32(215.87157), np.float32(220.88367), np.float32(216.77194), np.float32(220.05428), np.float32(215.51295), np.float32(222.18501), np.float32(216.82043), np.float32(218.58893), np.float32(217.98909), np.float32(219.12376), np.float32(220.49298), np.float32(215.55972), np.float32(218.66917), np.float32(217.0581), np.float32(222.38097), np.float32(215.02774), np.float32(220.30885), np.float32(217.12798), np.float32(218.87619), np.float32(217.44139), np.float32(218.19002), np.float32(219.00337), np.float32(218.26941), np.float32(218.2478), np.float32(216.94633), np.float32(221.23183), np.float32(215.69038), np.float32(220.77734), np.float32(216.06479), np.float32(219.85542), np.float32(218.98616), np.float32(218.52834), np.float32(218.41351), np.float32(218.13567), np.float32(219.07335), np.float32(219.93431), np.float32(217.52892), np.float32(220.72234), np.float32(230.77658), np.float32(328.6307), np.float32(236.85461), np.float32(218.38248), np.float32(327.9467), np.float32(327.41995), np.float32(329.65616), np.float32(329.53033), np.float32(328.21173), np.float32(329.48245), np.float32(327.0482), np.float32(329.3621), np.float32(329.6084), np.float32(328.35785), np.float32(329.9527), np.float32(328.1377), np.float32(328.06128), np.float32(330.04703), np.float32(328.78824), np.float32(329.02505), np.float32(328.53845), np.float32(328.0639), np.float32(329.2883), np.float32(329.4797), np.float32(329.09412), np.float32(329.0885), np.float32(327.56784), np.float32(328.97733), np.float32(329.4251), np.float32(329.1492), np.float32(329.18515), np.float32(327.85916), np.float32(328.3021), np.float32(330.1263), np.float32(775.6927), np.float32(774.85925), np.float32(216.52528), np.float32(218.01796), np.float32(216.27785), np.float32(217.20558), np.float32(216.92044), np.float32(775.52014), np.float32(775.3757), np.float32(775.4091), np.float32(223.01085), np.float32(214.10426), np.float32(215.71877), np.float32(266.53564), np.float32(253.93596), np.float32(253.30391), np.float32(330.05914), np.float32(330.4111), np.float32(330.81665), np.float32(329.4476), np.float32(328.15683), np.float32(329.02905), np.float32(328.5565), np.float32(329.35614), np.float32(329.28928), np.float32(327.4709), np.float32(328.7496), np.float32(328.87646), np.float32(329.24103), np.float32(328.51672), np.float32(328.82697), np.float32(328.5979), np.float32(328.84814), np.float32(328.88458), np.float32(329.48532), np.float32(329.14), np.float32(325.93594), np.float32(327.7241), np.float32(340.75226), np.float32(447.61157), np.float32(451.09543), np.float32(493.90616), np.float32(516.83545), np.float32(522.7589), np.float32(519.43494), np.float32(519.66003), np.float32(518.7311), np.float32(517.6109), np.float32(519.7976), np.float32(521.28156), np.float32(522.7926), np.float32(524.16583), np.float32(524.57623), np.float32(523.9357), np.float32(521.7971), np.float32(520.0408), np.float32(519.8442), np.float32(520.66864), np.float32(523.23065), np.float32(527.7303), np.float32(531.8045), np.float32(530.8865), np.float32(525.177), np.float32(522.7502), np.float32(520.2995), np.float32(256.62894), np.float32(251.32393), np.float32(254.35982), np.float32(195.81334), np.float32(194.93073), np.float32(191.37386), np.float32(193.94217), np.float32(260.2698), np.float32(260.8206), np.float32(261.08353), np.float32(262.32806), np.float32(262.28717), np.float32(194.73311), np.float32(193.1775), np.float32(196.34683), np.float32(194.19641), np.float32(190.80295), np.float32(295.41217), np.float32(301.48615), np.float32(311.88882), np.float32(317.72662), np.float32(322.23492), np.float32(322.02917), np.float32(322.0221), np.float32(321.63464), np.float32(322.73502), np.float32(323.931), np.float32(330.2005), np.float32(665.9577), np.float32(666.751), np.float32(663.0643), np.float32(660.12604), np.float32(657.79266), np.float32(655.47327), np.float32(653.8142), np.float32(652.1121), np.float32(651.0783), np.float32(649.52924), np.float32(649.6736), np.float32(651.68115), np.float32(651.1166), np.float32(649.0141), np.float32(648.1768), np.float32(647.1327), np.float32(645.40924), np.float32(957.9708), np.float32(953.27356), np.float32(947.36285), np.float32(631.23395), np.float32(315.69064), np.float32(163.61984), np.float32(932.66473), np.float32(932.924), np.float32(628.83875), np.float32(610.08765), np.float32(617.51263), np.float32(616.80054), np.float32(614.02045), np.float32(612.6496), np.float32(607.3874), np.float32(333.9465), np.float32(328.67578), np.float32(331.3182), np.float32(329.77222), np.float32(328.72244), np.float32(330.37903), np.float32(326.44232), np.float32(327.5548), np.float32(329.77133), np.float32(328.5824), np.float32(330.2056), np.float32(327.34354), np.float32(327.27405), np.float32(329.91052), np.float32(330.11252), np.float32(320.9053), np.float32(318.8216), np.float32(325.031), np.float32(332.23767), np.float32(335.66483), np.float32(333.15408), np.float32(676.1839), np.float32(671.7365), np.float32(666.4044), np.float32(664.1414), np.float32(660.98126), np.float32(660.2859), np.float32(659.99713), np.float32(658.89954), np.float32(657.5057), np.float32(655.5836), np.float32(652.6859), np.float32(649.77014), np.float32(646.12836), np.float32(646.6588), np.float32(650.1379), np.float32(647.27356), np.float32(638.88165), np.float32(636.9331), np.float32(638.8581), np.float32(638.2882), np.float32(634.5516), np.float32(628.5246), np.float32(311.85608), np.float32(323.2097), np.float32(194.79248), np.float32(193.6467), np.float32(192.92816), np.float32(193.83969), np.float32(195.37114), np.float32(196.32144), np.float32(191.71529), np.float32(193.72278), np.float32(194.79532), np.float32(195.47615), np.float32(195.02919), np.float32(193.55896), np.float32(193.20694), np.float32(195.58037), np.float32(195.90504), np.float32(192.72966), np.float32(193.20003), np.float32(327.3608), np.float32(328.98596), np.float32(328.9977), np.float32(328.48138), np.float32(327.02313), np.float32(327.78836), np.float32(330.37164), np.float32(331.78064), np.float32(331.08597), np.float32(674.6506), np.float32(673.84503), np.float32(671.1782), np.float32(664.9496), np.float32(660.28815), np.float32(658.4185), np.float32(658.5383), np.float32(658.1398), np.float32(656.5285), np.float32(656.9216), np.float32(657.225), np.float32(656.55334), np.float32(651.9753), np.float32(646.6879), np.float32(643.0531), np.float32(641.3389), np.float32(640.0559), np.float32(637.72473), np.float32(636.5289), np.float32(634.45624), np.float32(634.69196), np.float32(634.1996), np.float32(634.1605), np.float32(632.15265), np.float32(629.28723), np.float32(628.97797), np.float32(619.2732), np.float32(316.36792), np.float32(314.64627), np.float32(307.29184), np.float32(300.23578), np.float32(305.88657), np.float32(322.583), np.float32(330.72797), np.float32(327.1353), np.float32(327.53943), np.float32(333.01294), np.float32(328.85214), np.float32(327.89752), np.float32(328.88), np.float32(329.23416), np.float32(327.84457), np.float32(327.40082), np.float32(329.8422), np.float32(330.4154), np.float32(328.52942), np.float32(329.4211), np.float32(328.43805), np.float32(328.92084), np.float32(311.7782), np.float32(291.36496), np.float32(294.20474), np.float32(296.76157), np.float32(284.0494), np.float32(287.7394), np.float32(285.97717), np.float32(288.04214), np.float32(286.2739), np.float32(288.23782), np.float32(299.05942), np.float32(295.7308), np.float32(302.73834), np.float32(305.32605), np.float32(303.31653), np.float32(303.47397), np.float32(303.99326), np.float32(300.0002), np.float32(291.42465), np.float32(291.206), np.float32(288.4293), np.float32(288.77493), np.float32(289.16876), np.float32(293.21335), np.float32(299.19678), np.float32(297.43744), np.float32(302.731), np.float32(300.91364), np.float32(342.27686), np.float32(351.66788), np.float32(346.9686), np.float32(352.65128), np.float32(303.9665), np.float32(298.24152), np.float32(302.14084), np.float32(299.39166), np.float32(300.82065), np.float32(301.7968), np.float32(312.0075), np.float32(351.2843), np.float32(325.6591), np.float32(303.93118), np.float32(298.67923), np.float32(289.5282), np.float32(282.21906), np.float32(259.53882), np.float32(259.71252), np.float32(271.80283), np.float32(258.21512), np.float32(268.64896), np.float32(276.23242), np.float32(272.5983), np.float32(249.13812), np.float32(230.50237), np.float32(288.78003), np.float32(290.04443), np.float32(305.04523), np.float32(290.88535), np.float32(288.79712), np.float32(296.507), np.float32(296.44003), np.float32(294.60104), np.float32(291.3804), np.float32(440.2845), np.float32(290.5457), np.float32(290.26804), np.float32(289.6157), np.float32(294.74628), np.float32(302.46365), np.float32(217.85814), np.float32(208.10393), np.float32(213.02393), np.float32(241.94455), np.float32(597.42096), np.float32(581.3219), np.float32(559.90027), np.float32(556.5312), np.float32(569.03033), np.float32(583.61017), np.float32(595.9183), np.float32(591.75507), np.float32(587.1014), np.float32(279.8593), np.float32(581.27856), np.float32(585.8237), np.float32(588.6107), np.float32(305.91327), np.float32(598.2687), np.float32(598.05396), np.float32(306.0868), np.float32(302.08875), np.float32(591.373), np.float32(301.61017), np.float32(289.14044), np.float32(290.48468), np.float32(294.17105), np.float32(286.07364), np.float32(299.996), np.float32(296.6158), np.float32(294.89035), np.float32(303.59814), np.float32(301.56522), np.float32(297.02707), np.float32(302.94125), np.float32(291.8109), np.float32(284.34174), np.float32(279.94128), np.float32(276.55084), np.float32(273.13248), np.float32(277.66312), np.float32(219.44647), np.float32(218.78876), np.float32(219.3461), np.float32(216.58327), np.float32(219.23192), np.float32(217.72813), np.float32(219.50949), np.float32(217.87297), np.float32(220.61995), np.float32(218.35239), np.float32(222.03271), np.float32(213.68806), np.float32(237.86179), np.float32(330.8163), np.float32(331.12692), np.float32(330.68524), np.float32(329.0114), np.float32(327.64468), np.float32(328.57495), np.float32(329.7006), np.float32(326.88977), np.float32(329.40155), np.float32(330.3312), np.float32(327.0564), np.float32(326.87457), np.float32(330.1707), np.float32(330.64362), np.float32(328.07367), np.float32(328.35068), np.float32(329.1299), np.float32(329.07867), np.float32(327.61038), np.float32(330.32925), np.float32(326.24295), np.float32(329.614), np.float32(332.00565), np.float32(412.80566), np.float32(418.4848), np.float32(425.35693), np.float32(328.02966), np.float32(329.82104), np.float32(328.4275), np.float32(326.9944), np.float32(329.41138), np.float32(330.29108), np.float32(327.95328), np.float32(328.36896), np.float32(329.30743), np.float32(329.92932), np.float32(328.2762), np.float32(775.682), np.float32(775.234), np.float32(327.9033), np.float32(327.97113), np.float32(331.35522), np.float32(775.515), np.float32(776.12164), np.float32(775.16736), np.float32(774.0313), np.float32(779.3552), np.float32(506.5029), np.float32(321.74838), np.float32(261.96762), np.float32(332.73257), np.float32(329.88834), np.float32(257.90317), np.float32(254.80177), np.float32(263.75104), np.float32(265.10074), np.float32(265.4711), np.float32(264.00018), np.float32(263.2963), np.float32(260.52036), np.float32(260.91336), np.float32(263.14206), np.float32(259.05426), np.float32(260.66702), np.float32(254.90536), np.float32(250.99126), np.float32(248.64786), np.float32(238.43893), np.float32(231.86746), np.float32(232.56325), np.float32(329.1262), np.float32(328.74756), np.float32(329.0573), np.float32(235.372), np.float32(231.93854), np.float32(235.01068), np.float32(240.1747), np.float32(244.57195), np.float32(253.40038), np.float32(259.56494), np.float32(266.30112), np.float32(266.5245), np.float32(263.81253), np.float32(260.4753), np.float32(256.76047), np.float32(254.38176), np.float32(248.05263), np.float32(243.64958), np.float32(242.70102), np.float32(237.96103), np.float32(232.49396), np.float32(231.64052), np.float32(229.7256), np.float32(225.6976), np.float32(227.24146), np.float32(228.47488), np.float32(228.40819), np.float32(228.04108), np.float32(234.3077), np.float32(215.73822), np.float32(223.21478), np.float32(233.79984), np.float32(216.25827), np.float32(218.75504), np.float32(225.84886), np.float32(231.3626), np.float32(223.86768), np.float32(228.31978), np.float32(232.08438), np.float32(215.58405), np.float32(228.56203), np.float32(228.44463), np.float32(216.3622), np.float32(222.71167), np.float32(225.99991), np.float32(226.29727), np.float32(223.85251), np.float32(229.24379), np.float32(229.93916), np.float32(226.14935), np.float32(231.08742), np.float32(223.82747), np.float32(213.50797), np.float32(212.83936), np.float32(216.14491), np.float32(216.69057), np.float32(214.76025), np.float32(216.594), np.float32(229.8549), np.float32(230.44702), np.float32(234.62029), np.float32(234.10367), np.float32(228.84903), np.float32(232.35641), np.float32(226.83449), np.float32(217.26399), np.float32(215.86076), np.float32(217.31166), np.float32(219.0268), np.float32(211.34357), np.float32(208.75972), np.float32(217.76628), np.float32(226.99768), np.float32(222.08911), np.float32(224.00412), np.float32(231.60452), np.float32(228.96623), np.float32(218.15602), np.float32(333.69424), np.float32(334.2054), np.float32(330.14926), np.float32(331.36182), np.float32(215.342), np.float32(227.4748), np.float32(219.95831), np.float32(221.14015), np.float32(226.24458), np.float32(219.16454), np.float32(226.64626), np.float32(213.90833), np.float32(327.7314), np.float32(328.9135), np.float32(329.73016), np.float32(328.23422), np.float32(329.15314), np.float32(328.92783), np.float32(328.83652), np.float32(329.03668), np.float32(328.94702), np.float32(329.33392), np.float32(215.58887), np.float32(227.16339), np.float32(219.11333), np.float32(220.74713), np.float32(221.09499), np.float32(216.05174), np.float32(225.36252), np.float32(215.4062), np.float32(226.94676), np.float32(216.67285), np.float32(220.16226), np.float32(217.52498), np.float32(215.63039), np.float32(215.9055), np.float32(219.26387), np.float32(218.51842), np.float32(216.53282), np.float32(225.0048), np.float32(218.9731), np.float32(217.06296), np.float32(215.20128), np.float32(217.73027), np.float32(217.2109), np.float32(221.37524), np.float32(220.93956), np.float32(223.17781), np.float32(215.33342), np.float32(211.57254), np.float32(517.3246), np.float32(251.1906), np.float32(659.40955), np.float32(256.6691), np.float32(243.7937), np.float32(215.2209), np.float32(237.58456), np.float32(213.26595), np.float32(248.3998), np.float32(256.53476), np.float32(253.6584), np.float32(245.07513), np.float32(214.64339), np.float32(242.95801), np.float32(214.25563), np.float32(242.85242), np.float32(214.30013), np.float32(244.84154), np.float32(329.64786), np.float32(328.46445), np.float32(222.9157), np.float32(215.2482), np.float32(226.49387), np.float32(329.48114), np.float32(229.642), np.float32(329.24655), np.float32(225.80896), np.float32(220.51915), np.float32(328.4212), np.float32(328.27002), np.float32(329.15894), np.float32(328.48697), np.float32(329.18036), np.float32(328.9215), np.float32(328.9214), np.float32(223.4382), np.float32(216.8602), np.float32(220.84477), np.float32(329.12875), np.float32(328.0358), np.float32(219.39896), np.float32(217.90833), np.float32(221.50644), np.float32(218.08826), np.float32(221.77095), np.float32(217.78342), np.float32(218.1511), np.float32(216.58052), np.float32(220.21786), np.float32(216.23286), np.float32(327.5228), np.float32(333.04483), np.float32(329.53925), np.float32(329.76602), np.float32(330.46402), np.float32(331.4266), np.float32(328.9979), np.float32(327.2471), np.float32(328.84445), np.float32(329.57422), np.float32(328.37668), np.float32(328.62033), np.float32(329.0226), np.float32(328.54565), np.float32(328.89084), np.float32(328.72247), np.float32(329.13922), np.float32(328.71692), np.float32(328.5726), np.float32(328.65622), np.float32(329.22595), np.float32(329.16098), np.float32(328.2932), np.float32(328.88965), np.float32(328.80426), np.float32(328.8517), np.float32(328.91388), np.float32(329.3114), np.float32(329.04916), np.float32(328.50534), np.float32(329.20532), np.float32(328.81915), np.float32(329.18076), np.float32(328.96127), np.float32(328.59552), np.float32(328.77206), np.float32(329.53094), np.float32(329.10822), np.float32(328.88748), np.float32(328.35333), np.float32(328.84305), np.float32(330.047), np.float32(329.02457), np.float32(329.57416), np.float32(327.98972), np.float32(218.64943), np.float32(520.57605), np.float32(776.7443), np.float32(777.1463), np.float32(238.91093), np.float32(197.24643), np.float32(187.94423), np.float32(187.96922), np.float32(192.96988), np.float32(196.41875), np.float32(195.15466), np.float32(193.24783), np.float32(192.51076), np.float32(194.77953), np.float32(194.35818), np.float32(194.02155), np.float32(195.32542), np.float32(193.33272), np.float32(196.08704), np.float32(194.43518), np.float32(193.39609), np.float32(195.13132), np.float32(193.8784), np.float32(193.08585), np.float32(193.6493), np.float32(196.54639), np.float32(195.08372), np.float32(192.9524), np.float32(193.6024), np.float32(194.22655), np.float32(195.11427), np.float32(193.47762), np.float32(192.79709), np.float32(196.56165), np.float32(196.15123), np.float32(192.43881), np.float32(192.71259), np.float32(196.39458), np.float32(195.47049), np.float32(193.20532), np.float32(192.59137), np.float32(197.82257), np.float32(196.16747), np.float32(192.23767), np.float32(191.791), np.float32(196.04932), np.float32(197.67099), np.float32(192.80501), np.float32(191.30966), np.float32(196.79524), np.float32(198.52342), np.float32(192.36734), np.float32(193.48947), np.float32(195.42458), np.float32(190.50569), np.float32(192.28862), np.float32(214.93987), np.float32(234.48622), np.float32(212.88477), np.float32(221.55443), np.float32(214.3905), np.float32(222.95985), np.float32(218.31776), np.float32(220.99466), np.float32(215.89444), np.float32(215.46423), np.float32(225.49011), np.float32(214.73393), np.float32(219.0159), np.float32(219.92749), np.float32(220.32062), np.float32(215.27946), np.float32(219.804), np.float32(213.87257), np.float32(221.71985), np.float32(218.41734), np.float32(216.5635), np.float32(329.3349), np.float32(328.75653), np.float32(328.69955), np.float32(328.85275), np.float32(329.25497), np.float32(329.1698), np.float32(329.00305), np.float32(328.7119), np.float32(328.89047), np.float32(328.9704), np.float32(328.9541), np.float32(329.22717), np.float32(328.71017), np.float32(328.72968), np.float32(329.31088), np.float32(221.51825), np.float32(329.6607), np.float32(328.6651), np.float32(217.11136), np.float32(219.77832), np.float32(217.45366), np.float32(218.242), np.float32(217.92531), np.float32(218.34927), np.float32(218.36215), np.float32(219.21663), np.float32(218.00523), np.float32(215.71806), np.float32(225.87442), np.float32(257.0801), np.float32(258.39517), np.float32(256.1033), np.float32(258.99234), np.float32(242.30107), np.float32(778.6239), np.float32(232.54112), np.float32(213.53609), np.float32(234.14175), np.float32(222.14879), np.float32(216.53195), np.float32(777.77), np.float32(213.94524), np.float32(231.16031), np.float32(215.18741), np.float32(222.84709), np.float32(216.55762), np.float32(224.73451), np.float32(217.4079), np.float32(328.2623), np.float32(329.41122), np.float32(329.69644), np.float32(328.98718), np.float32(328.40457), np.float32(328.57672), np.float32(329.1816), np.float32(328.95026), np.float32(328.8615), np.float32(329.05328), np.float32(329.25043), np.float32(328.56805), np.float32(329.09473), np.float32(328.80753), np.float32(328.9899), np.float32(329.01688), np.float32(328.56842), np.float32(328.81662), np.float32(329.12784), np.float32(328.93042), np.float32(328.63794), np.float32(329.4239), np.float32(328.31564), np.float32(328.89795), np.float32(328.52844), np.float32(328.52887), np.float32(328.68036), np.float32(328.09106), np.float32(328.50314), np.float32(773.83215), np.float32(325.62134), np.float32(248.03856), np.float32(263.18777), np.float32(262.42297), np.float32(328.76413), np.float32(328.92953), np.float32(331.93185), np.float32(328.9295), np.float32(327.45526), np.float32(328.6053), np.float32(328.70023), np.float32(328.13525), np.float32(329.84073), np.float32(327.79416), np.float32(328.15994), np.float32(328.9809), np.float32(328.71167), np.float32(329.27213), np.float32(328.6669), np.float32(327.1075), np.float32(329.11905), np.float32(329.01987), np.float32(329.13757), np.float32(329.2874), np.float32(327.65204), np.float32(328.915), np.float32(328.9277), np.float32(329.28116), np.float32(329.21243), np.float32(328.40097), np.float32(328.1188), np.float32(328.91275), np.float32(329.4241), np.float32(328.8859), np.float32(329.02057), np.float32(327.96494), np.float32(329.0209), np.float32(328.68127), np.float32(329.50928), np.float32(329.4606), np.float32(327.93768), np.float32(327.59418), np.float32(329.89902), np.float32(329.48322), np.float32(328.9717), np.float32(329.0445), np.float32(327.14673), np.float32(329.0996), np.float32(441.71942), np.float32(441.37222), np.float32(777.1968), np.float32(778.77075), np.float32(290.37964), np.float32(172.8492), np.float32(185.59624), np.float32(195.20546), np.float32(200.90495), np.float32(192.00113), np.float32(192.16176), np.float32(192.88377), np.float32(194.4758), np.float32(192.1816), np.float32(192.95555), np.float32(391.2841), np.float32(193.12598), np.float32(192.36667), np.float32(197.32332), np.float32(196.78099), np.float32(194.86458), np.float32(190.92618), np.float32(191.41896), np.float32(194.79863), np.float32(395.3881), np.float32(189.68404), np.float32(193.52548), np.float32(198.40184), np.float32(192.5215), np.float32(192.45981), np.float32(195.03247), np.float32(195.20418), np.float32(329.34106), np.float32(327.22647), np.float32(195.76675), np.float32(193.05695), np.float32(327.77008), np.float32(327.65933), np.float32(329.60886), np.float32(328.0158), np.float32(329.36786), np.float32(330.47818), np.float32(328.63522), np.float32(328.49896), np.float32(327.84506), np.float32(321.099), np.float32(328.58655), np.float32(255.38048), np.float32(517.16254), np.float32(537.2521), np.float32(559.76245), np.float32(564.27936), np.float32(569.3044), np.float32(571.82587), np.float32(577.979), np.float32(281.67435), np.float32(570.38727), np.float32(574.9564), np.float32(581.038), np.float32(583.7144), np.float32(584.233), np.float32(586.2596), np.float32(586.38403), np.float32(584.2827), np.float32(586.1863), np.float32(590.1681), np.float32(593.8247), np.float32(599.2548), np.float32(596.185), np.float32(597.18384), np.float32(285.05246), np.float32(587.7218), np.float32(581.1303), np.float32(284.9779), np.float32(582.422), np.float32(584.47577), np.float32(287.691), np.float32(300.41394), np.float32(607.0253), np.float32(610.1411), np.float32(611.4409), np.float32(610.10516), np.float32(608.76996), np.float32(605.2131), np.float32(599.91516), np.float32(593.48083), np.float32(294.5931), np.float32(300.32556), np.float32(291.19937), np.float32(295.39682), np.float32(295.57977), np.float32(288.7778), np.float32(299.44614), np.float32(299.16452), np.float32(296.95905), np.float32(299.56076), np.float32(295.6267), np.float32(294.7559), np.float32(292.95538), np.float32(286.80478), np.float32(285.2792), np.float32(282.69064), np.float32(275.4453), np.float32(260.56772), np.float32(273.77017), np.float32(279.12378), np.float32(282.9606), np.float32(289.47348), np.float32(581.90967), np.float32(586.8573), np.float32(589.7921), np.float32(174.38667), np.float32(294.42596), np.float32(300.52682), np.float32(287.1123), np.float32(290.48727), np.float32(297.5567), np.float32(285.40524), np.float32(288.5822), np.float32(585.5827), np.float32(291.7417), np.float32(298.28687), np.float32(299.97675), np.float32(289.83847), np.float32(287.01828), np.float32(283.99283), np.float32(276.35373), np.float32(268.76517), np.float32(262.34964), np.float32(265.62753), np.float32(259.53113), np.float32(260.80927), np.float32(259.12085), np.float32(260.00867), np.float32(261.6517), np.float32(261.315), np.float32(262.02255), np.float32(259.16238), np.float32(262.21246), np.float32(260.25153), np.float32(263.25073), np.float32(260.2493), np.float32(262.31485), np.float32(259.8521), np.float32(262.0963), np.float32(261.86765), np.float32(260.21426), np.float32(261.66104), np.float32(260.60052), np.float32(262.6904), np.float32(259.59216), np.float32(264.89685), np.float32(263.17575), np.float32(267.18433), np.float32(543.55164), np.float32(554.1087), np.float32(561.62036), np.float32(563.38007), np.float32(573.65515), np.float32(580.6546), np.float32(586.0585), np.float32(587.40686), np.float32(588.25446), np.float32(588.1821), np.float32(287.34366), np.float32(283.31564), np.float32(585.88556), np.float32(290.2696), np.float32(290.1463), np.float32(596.3273), np.float32(600.1567), np.float32(600.0415), np.float32(595.68024), np.float32(590.7114), np.float32(587.88275), np.float32(584.06165), np.float32(582.4311), np.float32(585.4382), np.float32(587.8202), np.float32(293.06006), np.float32(299.01303), np.float32(604.37463), np.float32(608.1831), np.float32(605.85706), np.float32(606.75385), np.float32(605.1612), np.float32(596.7176), np.float32(294.70007), np.float32(293.00525), np.float32(294.8251), np.float32(291.39917), np.float32(289.4087), np.float32(296.20468), np.float32(295.40494), np.float32(297.71396), np.float32(300.1942), np.float32(297.71246), np.float32(298.68466), np.float32(296.23575), np.float32(289.39017), np.float32(285.81473), np.float32(278.79147), np.float32(251.84085), np.float32(282.05725), np.float32(283.298), np.float32(275.8116), np.float32(235.3412), np.float32(578.59827), np.float32(281.37808), np.float32(587.4639), np.float32(590.208), np.float32(286.7058), np.float32(590.48456), np.float32(291.69598), np.float32(284.03342), np.float32(294.04935), np.float32(291.56863), np.float32(286.89636), np.float32(586.84686), np.float32(585.661), np.float32(286.87292), np.float32(282.83997), np.float32(287.48846), np.float32(282.6227), np.float32(277.3558), np.float32(273.36737), np.float32(273.04413), np.float32(273.0647), np.float32(264.4434), np.float32(252.69609), np.float32(261.0265), np.float32(259.7894), np.float32(259.97363), np.float32(525.15674), np.float32(525.9474), np.float32(524.2737), np.float32(259.3188), np.float32(264.28336), np.float32(255.42426), np.float32(522.0177), np.float32(258.80786), np.float32(527.53156), np.float32(531.9271), np.float32(532.7933), np.float32(531.86145), np.float32(532.18726), np.float32(531.10944), np.float32(525.5972), np.float32(523.2834), np.float32(521.4485), np.float32(521.6008), np.float32(523.2198), np.float32(531.9352), np.float32(539.51135), np.float32(556.69635), np.float32(563.37085), np.float32(570.5246), np.float32(579.43506), np.float32(159.15892), np.float32(879.88403), np.float32(578.06476), np.float32(166.88719), np.float32(163.27435), np.float32(287.54556), np.float32(163.35573), np.float32(161.77994), np.float32(292.8284), np.float32(289.71494), np.float32(166.94608), np.float32(589.19867), np.float32(590.7601), np.float32(165.15205), np.float32(597.11084), np.float32(597.5457), np.float32(889.7479), np.float32(594.4266), np.float32(595.95233), np.float32(592.9861), np.float32(589.6102), np.float32(585.79175), np.float32(581.7458), np.float32(579.9668), np.float32(578.9761), np.float32(581.7565), np.float32(294.20654), np.float32(301.14835), np.float32(302.57898), np.float32(304.33823), np.float32(304.81525), np.float32(306.23193), np.float32(304.50824), np.float32(303.59814), np.float32(297.97992), np.float32(296.8575), np.float32(292.6541), np.float32(289.08395), np.float32(290.12122), np.float32(292.86563), np.float32(292.39124), np.float32(294.6092), np.float32(298.16547), np.float32(295.0291), np.float32(289.41763), np.float32(289.24652), np.float32(282.41577), np.float32(282.90805), np.float32(284.48218), np.float32(285.59015), np.float32(288.8905), np.float32(292.06174), np.float32(586.9405), np.float32(589.25055), np.float32(292.16776), np.float32(292.50598), np.float32(292.81906), np.float32(292.39102), np.float32(289.9658), np.float32(287.78418), np.float32(581.31604), np.float32(580.67566), np.float32(581.13776), np.float32(582.00916), np.float32(581.9919), np.float32(280.18744), np.float32(278.72858), np.float32(281.42432), np.float32(278.8233), np.float32(274.39597), np.float32(263.58203), np.float32(262.25012), np.float32(260.51617), np.float32(258.6061), np.float32(257.11102), np.float32(257.18863), np.float32(258.98785), np.float32(256.7402), np.float32(262.26718), np.float32(258.60406), np.float32(260.05795), np.float32(262.53638), np.float32(524.44525), np.float32(527.4734), np.float32(264.12543), np.float32(527.99243), np.float32(529.2353), np.float32(526.385), np.float32(523.2891), np.float32(523.30566), np.float32(523.969), np.float32(523.4513), np.float32(523.7881), np.float32(525.1479), np.float32(524.0217), np.float32(526.6511), np.float32(267.2078), np.float32(280.38306), np.float32(554.5581), np.float32(565.4046), np.float32(575.2369), np.float32(583.57806), np.float32(583.7356), np.float32(583.813), np.float32(172.53044), np.float32(174.24362), np.float32(583.3256), np.float32(582.2311), np.float32(583.9968), np.float32(588.53094), np.float32(295.97937), np.float32(606.1006), np.float32(607.1349), np.float32(607.3163), np.float32(606.7231), np.float32(605.3358), np.float32(597.9816), np.float32(292.01785), np.float32(288.7154), np.float32(288.03104), np.float32(288.42593), np.float32(290.09283), np.float32(595.5668), np.float32(607.5313), np.float32(304.62686), np.float32(306.32578), np.float32(311.40067), np.float32(311.91528), np.float32(306.1219), np.float32(301.0864), np.float32(293.43442), np.float32(289.4463), np.float32(290.4332), np.float32(293.21518), np.float32(296.63348), np.float32(305.95367), np.float32(220.66902), np.float32(222.98624), np.float32(210.30875), np.float32(224.25574), np.float32(327.77823), np.float32(308.9458), np.float32(307.321), np.float32(305.4077), np.float32(303.92734), np.float32(303.72867), np.float32(295.42245), np.float32(289.34305), np.float32(288.26248), np.float32(291.56226), np.float32(293.64478), np.float32(295.28506), np.float32(296.4182), np.float32(296.03278), np.float32(294.5881), np.float32(293.86227), np.float32(292.29364), np.float32(294.9263), np.float32(297.1164), np.float32(300.0039), np.float32(302.58997), np.float32(308.06555), np.float32(312.772), np.float32(317.43552), np.float32(320.93515), np.float32(324.92764), np.float32(324.07697), np.float32(320.90018), np.float32(308.7681), np.float32(162.09549), np.float32(441.04562), np.float32(440.0351), np.float32(441.3646), np.float32(441.59094), np.float32(440.29462), np.float32(440.3557), np.float32(437.5416), np.float32(443.6809), np.float32(272.80487), np.float32(267.98633), np.float32(259.58865), np.float32(260.09232), np.float32(519.2666), np.float32(519.23816), np.float32(518.50226), np.float32(516.97473), np.float32(515.7053), np.float32(515.61237), np.float32(516.019), np.float32(518.2576), np.float32(520.7492), np.float32(522.3816), np.float32(524.2316), np.float32(521.53516), np.float32(517.0001), np.float32(513.7533), np.float32(514.6193), np.float32(207.56673), np.float32(214.80432), np.float32(235.94064), np.float32(214.43463), np.float32(166.02895), np.float32(165.901), np.float32(165.69397), np.float32(166.71413), np.float32(162.25699), np.float32(212.93396), np.float32(217.90271), np.float32(165.1311), np.float32(166.51176), np.float32(162.37128), np.float32(231.50233), np.float32(232.19284), np.float32(166.46164), np.float32(235.8743), np.float32(217.17136), np.float32(256.70663), np.float32(253.5973), np.float32(262.6929), np.float32(255.56837), np.float32(262.78592), np.float32(256.7401), np.float32(217.78723), np.float32(254.48187), np.float32(260.15942), np.float32(242.56111), np.float32(258.98157), np.float32(247.50125), np.float32(245.69405), np.float32(261.66818), np.float32(250.13936), np.float32(266.8296), np.float32(270.26727), np.float32(279.84756), np.float32(163.71445), np.float32(270.831), np.float32(260.64194), np.float32(255.48685), np.float32(230.76859), np.float32(214.3775), np.float32(163.78493), np.float32(227.7434), np.float32(160.58534), np.float32(168.37), np.float32(229.05833), np.float32(208.50038), np.float32(224.13493), np.float32(160.32132), np.float32(444.72195), np.float32(318.75568), np.float32(439.13934), np.float32(441.3947), np.float32(328.49417), np.float32(441.67255), np.float32(439.81146), np.float32(441.11014), np.float32(441.42538), np.float32(163.56273), np.float32(159.78593), np.float32(254.76053), np.float32(262.3434), np.float32(259.48865), np.float32(261.67798), np.float32(261.1111), np.float32(257.70724), np.float32(441.42856), np.float32(441.37442), np.float32(264.1928), np.float32(254.25858), np.float32(261.47055), np.float32(259.1281), np.float32(443.40936), np.float32(440.8726), np.float32(255.30862), np.float32(262.1585), np.float32(257.71698), np.float32(265.4211), np.float32(256.98044), np.float32(440.85962), np.float32(441.0814), np.float32(441.1824), np.float32(443.3464), np.float32(440.46262), np.float32(776.8043), np.float32(776.1502), np.float32(776.33014), np.float32(164.20432), np.float32(164.11531), np.float32(164.37805), np.float32(164.70741), np.float32(160.57474), np.float32(164.0157), np.float32(162.7608), np.float32(163.32649), np.float32(164.04482), np.float32(162.51167), np.float32(172.4078), np.float32(209.55086), np.float32(185.27368), np.float32(176.95197), np.float32(329.3055), np.float32(166.76918), np.float32(162.13779), np.float32(167.48256), np.float32(163.50702), np.float32(165.09856), np.float32(166.38005), np.float32(164.80804), np.float32(164.79488), np.float32(161.24527), np.float32(162.0375), np.float32(164.5109), np.float32(159.79561), np.float32(228.15115), np.float32(161.67957), np.float32(233.93091), np.float32(166.2157), np.float32(164.74088), np.float32(165.67657), np.float32(221.86359), np.float32(214.19434), np.float32(217.66296), np.float32(165.16664), np.float32(166.36919), np.float32(161.62437), np.float32(171.81496), np.float32(517.1503), np.float32(516.67975), np.float32(439.99863), np.float32(520.51904), np.float32(518.2183), np.float32(326.04242), np.float32(521.01526), np.float32(518.5261), np.float32(327.55283), np.float32(329.34518), np.float32(328.5427), np.float32(329.71082), np.float32(328.74924), np.float32(328.01627), np.float32(329.08432), np.float32(327.75992), np.float32(329.8006), np.float32(329.4417), np.float32(327.59555), np.float32(329.26385), np.float32(326.97794), np.float32(202.66902), np.float32(170.97743), np.float32(170.11812), np.float32(165.02612), np.float32(164.95282), np.float32(163.7028), np.float32(163.92831), np.float32(165.22717), np.float32(163.58765), np.float32(166.62514), np.float32(165.48645), np.float32(163.41708), np.float32(163.5834), np.float32(162.2109), np.float32(163.56761), np.float32(165.51237), np.float32(164.25124), np.float32(164.47536), np.float32(165.70125), np.float32(165.44397), np.float32(165.79898), np.float32(162.17639), np.float32(164.19228), np.float32(160.93494), np.float32(164.37137), np.float32(164.16379), np.float32(163.90283), np.float32(164.85109), np.float32(165.44272), np.float32(165.69649), np.float32(163.95676), np.float32(163.40321), np.float32(163.5448), np.float32(165.32005), np.float32(521.3052), np.float32(439.55692), np.float32(441.5606), np.float32(164.2272), np.float32(163.59239), np.float32(163.31741), np.float32(166.60497), np.float32(163.99951), np.float32(161.35753), np.float32(167.84236), np.float32(228.22173), np.float32(211.76447), np.float32(223.99615), np.float32(210.1703), np.float32(217.84357), np.float32(219.23813), np.float32(218.90941), np.float32(217.8711), np.float32(211.28233), np.float32(239.59964), np.float32(443.26953), np.float32(162.95892), np.float32(166.65096), np.float32(162.29318), np.float32(167.24872), np.float32(163.6515), np.float32(165.41707), np.float32(163.73918), np.float32(162.09483), np.float32(165.97522), np.float32(162.66107), np.float32(254.58507), np.float32(261.3686), np.float32(254.15169), np.float32(263.60175), np.float32(244.17647), np.float32(442.43945), np.float32(246.88905), np.float32(439.61722), np.float32(255.3084), np.float32(258.69107), np.float32(257.94623), np.float32(250.35059), np.float32(441.86005), np.float32(245.58589), np.float32(439.28952), np.float32(443.4624), np.float32(440.50455), np.float32(441.7542), np.float32(442.42038), np.float32(442.17444), np.float32(441.9449), np.float32(439.61215), np.float32(442.45123), np.float32(440.2553), np.float32(441.8161), np.float32(441.16644), np.float32(220.90256), np.float32(215.05453), np.float32(218.29022), np.float32(219.43161), np.float32(216.2521), np.float32(219.50003), np.float32(216.45198), np.float32(218.56657), np.float32(217.65681), np.float32(222.84756), np.float32(233.27399), np.float32(232.36697), np.float32(209.42126), np.float32(248.09184), np.float32(161.13362), np.float32(163.9446), np.float32(164.8595), np.float32(164.28334), np.float32(164.99146), np.float32(163.7426), np.float32(164.73189), np.float32(163.72281), np.float32(162.40536), np.float32(163.36102), np.float32(163.37527), np.float32(165.0239), np.float32(166.22626), np.float32(163.67433), np.float32(165.30042), np.float32(164.65321), np.float32(164.59839), np.float32(163.04066), np.float32(163.04176), np.float32(162.86987), np.float32(163.21587), np.float32(164.08185), np.float32(164.25893), np.float32(166.11491), np.float32(166.14262), np.float32(165.16614), np.float32(164.86488), np.float32(163.55154), np.float32(164.26721), np.float32(164.79779), np.float32(161.79375), np.float32(164.2115), np.float32(165.57535), np.float32(164.4114), np.float32(164.03342), np.float32(163.08421), np.float32(163.76636), np.float32(163.00206), np.float32(164.15894), np.float32(161.66318), np.float32(163.38618), np.float32(163.91939), np.float32(164.74019), np.float32(442.42978), np.float32(440.99225), np.float32(442.02347), np.float32(447.3297), np.float32(470.7139), np.float32(195.59738), np.float32(170.43256), np.float32(166.2073), np.float32(162.66518), np.float32(166.0064), np.float32(165.10936), np.float32(160.35028), np.float32(171.67856), np.float32(168.65532), np.float32(164.19183), np.float32(165.78242), np.float32(169.51784), np.float32(395.6333), np.float32(170.14893), np.float32(398.69925), np.float32(400.918), np.float32(410.15262), np.float32(162.81978), np.float32(169.96292), np.float32(427.6786), np.float32(431.00876), np.float32(433.18594), np.float32(431.91107), np.float32(430.56223), np.float32(430.25385), np.float32(428.3478), np.float32(424.67746), np.float32(424.75534), np.float32(426.32196), np.float32(431.16476), np.float32(434.31644), np.float32(437.72348), np.float32(442.66547), np.float32(444.93774), np.float32(448.1667), np.float32(447.1505), np.float32(448.1583), np.float32(447.39722), np.float32(447.8147), np.float32(446.49286), np.float32(444.0296), np.float32(443.21463), np.float32(442.34366), np.float32(440.64407), np.float32(439.95044), np.float32(439.4978), np.float32(436.39963), np.float32(435.26895), np.float32(437.43933), np.float32(881.8624), np.float32(216.17735), np.float32(175.67284), np.float32(239.07677), np.float32(233.81638), np.float32(166.09604), np.float32(165.1982), np.float32(164.01224), np.float32(517.9593), np.float32(517.80096), np.float32(519.32135), np.float32(520.3633), np.float32(518.10956), np.float32(519.55804), np.float32(522.32635), np.float32(524.94025), np.float32(530.98834), np.float32(537.4681), np.float32(556.39166), np.float32(553.06836), np.float32(542.9137), np.float32(540.7145), np.float32(536.1528), np.float32(527.5326), np.float32(524.73193), np.float32(522.46643), np.float32(526.6969), np.float32(537.40497), np.float32(539.03406), np.float32(538.66223), np.float32(538.8958), np.float32(548.0282), np.float32(548.8146), np.float32(543.5349), np.float32(540.9133), np.float32(269.24905), np.float32(260.4082), np.float32(260.56805), np.float32(254.0639), np.float32(257.0525), np.float32(257.23297), np.float32(258.2008), np.float32(264.8567), np.float32(265.67365), np.float32(270.67313), np.float32(269.54303), np.float32(268.86615), np.float32(266.51904), np.float32(263.79208), np.float32(264.24765), np.float32(261.05646), np.float32(267.75433), np.float32(270.66467), np.float32(279.9831), np.float32(274.68173), np.float32(569.94354), np.float32(570.5583), np.float32(577.4644), np.float32(578.6838), np.float32(581.35236), np.float32(580.3154), np.float32(575.77954), np.float32(578.81287), np.float32(871.2288), np.float32(876.6669), np.float32(885.34467), np.float32(891.4237), np.float32(895.07684), np.float32(1502.396), np.float32(1498.869), np.float32(893.34143), np.float32(889.2223), np.float32(884.61304), np.float32(875.8127), np.float32(1450.3973), np.float32(1451.7289), np.float32(585.8497), np.float32(588.2419), np.float32(893.06006), np.float32(605.6637), np.float32(604.79724), np.float32(605.3862), np.float32(604.4416), np.float32(595.5821), np.float32(588.6459), np.float32(580.3249), np.float32(583.69257), np.float32(587.25305), np.float32(171.10129), np.float32(174.25458), np.float32(171.48018), np.float32(170.51175), np.float32(175.16179), np.float32(168.46889), np.float32(173.27283), np.float32(167.3946), np.float32(174.9232), np.float32(170.54462), np.float32(440.53882), np.float32(442.24338), np.float32(443.06934), np.float32(441.78452), np.float32(437.73517), np.float32(439.90668), np.float32(170.04193), np.float32(175.20042), np.float32(606.67267), np.float32(612.36145), np.float32(618.92926), np.float32(625.4556), np.float32(630.26044), np.float32(622.05096), np.float32(608.302), np.float32(599.1908), np.float32(593.85004), np.float32(590.01013), np.float32(290.3108), np.float32(284.79315), np.float32(301.51797), np.float32(291.82556), np.float32(291.19086), np.float32(300.51428), np.float32(291.02408), np.float32(297.09814), np.float32(296.1484), np.float32(284.41928), np.float32(279.95694), np.float32(277.1167), np.float32(274.32205), np.float32(270.5473), np.float32(273.23093), np.float32(269.15308), np.float32(264.81247), np.float32(266.86536), np.float32(270.1669), np.float32(270.33978), np.float32(267.77194), np.float32(270.04712), np.float32(276.60956), np.float32(275.48965), np.float32(268.93478), np.float32(268.31345), np.float32(267.7759), np.float32(268.56247), np.float32(267.68912), np.float32(269.57434), np.float32(272.20404), np.float32(276.4058), np.float32(277.24835), np.float32(279.35233), np.float32(278.85962), np.float32(283.51788), np.float32(288.054), np.float32(585.2896), np.float32(173.8109), np.float32(172.2464), np.float32(173.60532), np.float32(173.80937), np.float32(174.90753), np.float32(171.7418), np.float32(176.6371), np.float32(168.67058), np.float32(174.07866), np.float32(170.30687), np.float32(177.42944), np.float32(609.40485), np.float32(609.03986), np.float32(606.96313), np.float32(595.0109), np.float32(585.02527), np.float32(574.53357), np.float32(578.1548), np.float32(582.15576), np.float32(584.37537), np.float32(591.681), np.float32(602.45135), np.float32(607.526), np.float32(609.6721), np.float32(608.2024), np.float32(604.66986), np.float32(595.52216), np.float32(587.1538), np.float32(581.19934), np.float32(581.33374), np.float32(287.7549), np.float32(283.35675), np.float32(279.3869), np.float32(236.20561), np.float32(218.32861), np.float32(218.77242), np.float32(210.83698), np.float32(220.75385), np.float32(210.22742), np.float32(225.45943), np.float32(210.3149), np.float32(223.77829), np.float32(215.51138), np.float32(219.28168), np.float32(212.30907), np.float32(217.06122), np.float32(439.56274), np.float32(292.41412), np.float32(282.1653), np.float32(283.24728), np.float32(583.09296), np.float32(585.17957), np.float32(586.99286), np.float32(588.6323), np.float32(591.4691), np.float32(190.57918), np.float32(166.86787), np.float32(286.4291), np.float32(883.3315), np.float32(586.11096), np.float32(285.56766), np.float32(583.5036), np.float32(298.19836), np.float32(286.41022), np.float32(288.2265), np.float32(294.5893), np.float32(286.46475), np.float32(287.5108), np.float32(289.0473), np.float32(281.5736), np.float32(274.67636), np.float32(269.89468), np.float32(264.0767), np.float32(263.88696), np.float32(259.5693), np.float32(260.99005), np.float32(261.6163), np.float32(261.74643), np.float32(262.15515), np.float32(261.36597), np.float32(261.29492), np.float32(258.3223), np.float32(261.4161), np.float32(257.25577), np.float32(260.72076), np.float32(259.92627), np.float32(261.244), np.float32(261.90448), np.float32(261.45615), np.float32(262.41733), np.float32(260.2876), np.float32(263.05603), np.float32(259.31436), np.float32(261.56058), np.float32(258.41193), np.float32(264.74725), np.float32(259.94485), np.float32(270.9292), np.float32(275.83728), np.float32(286.15546), np.float32(287.64188), np.float32(291.3754), np.float32(292.25946), np.float32(292.25745), np.float32(292.56763), np.float32(293.92496), np.float32(291.10657), np.float32(288.47574), np.float32(878.9963), np.float32(886.32904), np.float32(893.7497), np.float32(910.82886), np.float32(910.46155), np.float32(602.55164), np.float32(893.50244), np.float32(584.43536), np.float32(576.0745), np.float32(577.12555), np.float32(577.33844), np.float32(583.3966), np.float32(591.44147), np.float32(602.80743), np.float32(610.7102), np.float32(615.8573), np.float32(611.96466), np.float32(611.545), np.float32(609.05334), np.float32(602.40393), np.float32(593.62366), np.float32(286.92288), np.float32(284.9057), np.float32(221.6562), np.float32(217.52249), np.float32(218.04546), np.float32(218.5086), np.float32(217.26987), np.float32(217.08699), np.float32(216.15575), np.float32(217.62044), np.float32(216.72485), np.float32(218.56886), np.float32(218.46277), np.float32(217.67635), np.float32(216.54929), np.float32(215.98015), np.float32(218.0771), np.float32(215.64806), np.float32(216.58127), np.float32(302.3687), np.float32(297.3563), np.float32(299.29822), np.float32(297.29245), np.float32(296.65924), np.float32(612.5107), np.float32(613.57965), np.float32(613.742), np.float32(609.68445), np.float32(298.5773), np.float32(296.7187), np.float32(295.42706), np.float32(297.21753), np.float32(296.21774), np.float32(297.15585), np.float32(295.25693), np.float32(293.88666), np.float32(291.62698), np.float32(289.7825), np.float32(290.92813), np.float32(290.23544), np.float32(288.38614), np.float32(286.10165), np.float32(281.4235), np.float32(272.53006), np.float32(261.39438), np.float32(267.70038), np.float32(258.4991), np.float32(262.05975), np.float32(261.22568), np.float32(269.79422), np.float32(260.1215), np.float32(264.06546), np.float32(260.2391), np.float32(264.59), np.float32(256.84155), np.float32(261.5608), np.float32(261.32126), np.float32(257.22202), np.float32(263.1462), np.float32(261.58783), np.float32(262.09), np.float32(260.03244), np.float32(266.24698), np.float32(257.37125), np.float32(264.82303), np.float32(263.52414), np.float32(270.3359), np.float32(269.15607), np.float32(280.7855), np.float32(291.3635), np.float32(165.75854), np.float32(293.05685), np.float32(290.58038), np.float32(296.78836), np.float32(296.57266), np.float32(288.8655), np.float32(886.65796), np.float32(886.8036), np.float32(890.2273), np.float32(894.7531), np.float32(902.6855), np.float32(605.77655), np.float32(606.01086), np.float32(606.3302), np.float32(896.1103), np.float32(892.46924), np.float32(888.47656), np.float32(882.1481), np.float32(882.68964), np.float32(888.7447), np.float32(895.97186), np.float32(608.3089), np.float32(617.01746), np.float32(618.0994), np.float32(617.0759), np.float32(611.2145), np.float32(604.93207), np.float32(596.831), np.float32(588.929), np.float32(581.8328), np.float32(582.37195), np.float32(588.2799), np.float32(595.975), np.float32(603.5162), np.float32(606.08307), np.float32(606.4251), np.float32(607.11755), np.float32(606.4298), np.float32(603.3499), np.float32(299.9984), np.float32(293.7042), np.float32(295.09854), np.float32(296.67282), np.float32(290.75876), np.float32(288.38556), np.float32(288.14795), np.float32(287.4357), np.float32(286.91937), np.float32(291.51694), np.float32(295.51324), np.float32(298.25812), np.float32(301.27734), np.float32(304.84305), np.float32(308.51703), np.float32(329.49536), np.float32(329.7482), np.float32(341.41983), np.float32(341.89835), np.float32(336.4011), np.float32(330.8677), np.float32(322.27786), np.float32(663.48914), np.float32(327.34085), np.float32(332.18643), np.float32(328.1495), np.float32(325.1451), np.float32(330.89517), np.float32(329.0351), np.float32(331.8489), np.float32(330.0291), np.float32(326.9021), np.float32(328.8409), np.float32(326.8454), np.float32(329.4958), np.float32(327.55658), np.float32(323.6196), np.float32(330.92834), np.float32(667.3708), np.float32(666.9879), np.float32(665.44055), np.float32(663.5556), np.float32(662.2308), np.float32(662.0724), np.float32(662.47644), np.float32(661.56696), np.float32(660.7308), np.float32(658.68634), np.float32(660.1283), np.float32(662.16785), np.float32(662.99414), np.float32(663.429), np.float32(663.08673), np.float32(661.48145), np.float32(659.7836), np.float32(656.45593), np.float32(655.5504), np.float32(654.81793), np.float32(658.17474), np.float32(661.24274), np.float32(665.1368), np.float32(669.16473), np.float32(674.2044), np.float32(676.55023), np.float32(676.63257), np.float32(675.84174), np.float32(674.0389), np.float32(669.157), np.float32(660.6059), np.float32(654.8085), np.float32(647.351), np.float32(324.55215), np.float32(320.50098), np.float32(192.49394), np.float32(195.39294), np.float32(662.7015), np.float32(667.8933), np.float32(669.4363), np.float32(669.1419), np.float32(668.4615), np.float32(663.8302), np.float32(659.83105), np.float32(324.3806), np.float32(327.5568), np.float32(325.06476), np.float32(321.55936), np.float32(328.46094), np.float32(330.6445), np.float32(328.34753), np.float32(193.46568), np.float32(197.68068), np.float32(191.87698), np.float32(197.29718), np.float32(191.35802), np.float32(196.22227), np.float32(191.85013), np.float32(194.26793), np.float32(195.09167), np.float32(195.09782), np.float32(196.30475), np.float32(192.18411), np.float32(196.4728), np.float32(191.74413), np.float32(265.87268), np.float32(303.28348), np.float32(255.29457), np.float32(241.80884), np.float32(251.2669), np.float32(190.99738), np.float32(267.56064), np.float32(495.42627), np.float32(493.89398), np.float32(494.14462), np.float32(493.28336), np.float32(492.78778), np.float32(492.38843), np.float32(492.6401), np.float32(493.22794), np.float32(492.7633), np.float32(493.81653), np.float32(492.97263), np.float32(493.10013), np.float32(493.72568), np.float32(493.69067), np.float32(493.46265), np.float32(493.76743), np.float32(493.67847), np.float32(493.80954), np.float32(493.19928), np.float32(492.81104), np.float32(493.48425), np.float32(493.1036), np.float32(493.08646), np.float32(493.2849), np.float32(493.08118), np.float32(493.11243), np.float32(492.79218), np.float32(492.76434), np.float32(493.1131), np.float32(492.90268), np.float32(492.89835), np.float32(251.81624), np.float32(242.49313), np.float32(252.63103), np.float32(238.90367), np.float32(255.07231), np.float32(242.34137), np.float32(251.8043), np.float32(247.88525), np.float32(246.5817), np.float32(243.23813), np.float32(248.73341), np.float32(247.86879), np.float32(246.79544), np.float32(248.04112), np.float32(248.829), np.float32(242.5565), np.float32(245.83293), np.float32(249.11171), np.float32(239.30463), np.float32(202.50896), np.float32(189.4216), np.float32(191.19888), np.float32(195.71976), np.float32(194.94746), np.float32(193.07246), np.float32(193.39792), np.float32(195.01512), np.float32(192.85834), np.float32(195.95132), np.float32(191.53127), np.float32(207.80635), np.float32(264.07935), np.float32(493.2341), np.float32(191.44408), np.float32(195.7631), np.float32(193.14946), np.float32(193.93616), np.float32(194.88492), np.float32(193.44508), np.float32(198.80072), np.float32(191.5798), np.float32(198.34868), np.float32(191.8055), np.float32(198.47192), np.float32(191.77557), np.float32(195.13094), np.float32(195.30043), np.float32(195.48634), np.float32(195.37564), np.float32(192.12631), np.float32(197.93677), np.float32(191.7891), np.float32(195.9651), np.float32(191.5643), np.float32(197.09016), np.float32(194.01794), np.float32(195.62003), np.float32(194.45102), np.float32(192.56544), np.float32(196.96333), np.float32(192.35352), np.float32(196.18271), np.float32(191.73178), np.float32(198.06519), np.float32(193.1212), np.float32(196.84564), np.float32(192.9163), np.float32(197.53993), np.float32(211.11713), np.float32(181.51985), np.float32(184.12288), np.float32(189.12671), np.float32(295.6755), np.float32(292.60995), np.float32(295.58377), np.float32(293.21072), np.float32(294.3933), np.float32(294.82272), np.float32(293.70892), np.float32(292.81027), np.float32(293.33685), np.float32(293.60797), np.float32(294.26196), np.float32(492.88318), np.float32(493.2062), np.float32(294.02448), np.float32(255.85239), np.float32(247.61424), np.float32(248.96597), np.float32(245.99178), np.float32(252.87535), np.float32(242.43463), np.float32(254.00406), np.float32(240.44157), np.float32(251.29707), np.float32(243.12305), np.float32(254.29031), np.float32(238.83115), np.float32(252.06465), np.float32(243.04802), np.float32(251.50012), np.float32(246.7464), np.float32(250.15428), np.float32(245.3354), np.float32(250.49947), np.float32(246.79962), np.float32(249.20378), np.float32(246.36328), np.float32(246.70447), np.float32(243.98096), np.float32(249.1845), np.float32(246.16312), np.float32(247.30551), np.float32(246.21025), np.float32(251.54417), np.float32(240.97168), np.float32(251.75978), np.float32(244.59772), np.float32(267.98434), np.float32(189.45512), np.float32(185.11397), np.float32(188.29929), np.float32(194.63635), np.float32(492.6497), np.float32(291.42096), np.float32(193.72792), np.float32(193.43054), np.float32(195.23262), np.float32(290.04022), np.float32(294.20428), np.float32(494.4674), np.float32(492.85812), np.float32(192.5999), np.float32(493.91483), np.float32(193.53001), np.float32(195.25714), np.float32(192.5219), np.float32(192.75946), np.float32(493.56287), np.float32(493.57697), np.float32(194.43085), np.float32(191.01587), np.float32(199.9727), np.float32(192.09297), np.float32(194.91467), np.float32(193.09389), np.float32(196.16742), np.float32(196.63994), np.float32(193.35698), np.float32(193.58028), np.float32(192.27057), np.float32(197.85619), np.float32(192.6585), np.float32(195.61089), np.float32(193.4494), np.float32(195.99713), np.float32(194.64816), np.float32(193.0201), np.float32(194.5095), np.float32(192.6257), np.float32(197.191), np.float32(192.19249), np.float32(196.64613), np.float32(192.64503), np.float32(196.51537), np.float32(193.26822), np.float32(195.6141), np.float32(194.68362), np.float32(190.85043), np.float32(193.20546), np.float32(235.72012), np.float32(494.98227), np.float32(256.55304), np.float32(491.8366), np.float32(242.81891), np.float32(249.0077), np.float32(251.60155), np.float32(245.31586), np.float32(250.72052), np.float32(243.26917), np.float32(251.62402), np.float32(242.46243), np.float32(254.21475), np.float32(243.87628), np.float32(253.7729), np.float32(243.37811), np.float32(254.12187), np.float32(246.83202), np.float32(247.3273), np.float32(247.97165), np.float32(249.44786), np.float32(249.15143), np.float32(245.21103), np.float32(248.1894), np.float32(246.93163), np.float32(246.47095), np.float32(248.94443), np.float32(248.56236), np.float32(248.8151), np.float32(246.29514), np.float32(249.43361), np.float32(243.00587), np.float32(249.70282), np.float32(494.68576), np.float32(493.67944), np.float32(493.489), np.float32(493.21112), np.float32(492.70834), np.float32(494.1393), np.float32(492.53314), np.float32(493.24405), np.float32(494.78036), np.float32(493.97177), np.float32(493.35596), np.float32(495.2752), np.float32(493.2535), np.float32(492.85507), np.float32(493.66043), np.float32(491.3146), np.float32(486.35132), np.float32(260.18268), np.float32(269.40204), np.float32(257.85077), np.float32(262.5131), np.float32(280.96014), np.float32(302.78607), np.float32(288.84885), np.float32(283.80383), np.float32(302.31723), np.float32(282.18936), np.float32(286.34726), np.float32(302.54153), np.float32(282.11255), np.float32(283.53052), np.float32(301.29248), np.float32(283.0431), np.float32(290.3638), np.float32(192.09328), np.float32(282.74612), np.float32(286.9113), np.float32(518.7014), np.float32(283.27365), np.float32(192.32652), np.float32(194.86958), np.float32(194.70201), np.float32(193.34451), np.float32(193.83334), np.float32(191.9035), np.float32(195.93025), np.float32(197.26704), np.float32(193.4476), np.float32(192.74734), np.float32(193.50645), np.float32(196.55637), np.float32(193.74208), np.float32(192.53595), np.float32(193.42587), np.float32(197.26695), np.float32(194.31534), np.float32(194.1114), np.float32(194.45538), np.float32(193.49445), np.float32(193.78094), np.float32(192.37677), np.float32(194.33438), np.float32(195.62473), np.float32(194.1369), np.float32(288.04477), np.float32(194.40936), np.float32(188.88538), np.float32(298.4524), np.float32(295.09473), np.float32(281.34265), np.float32(297.99826), np.float32(289.93146), np.float32(281.64856), np.float32(301.04446), np.float32(293.2627), np.float32(282.0965), np.float32(301.5899), np.float32(285.02777), np.float32(281.90378), np.float32(303.22516), np.float32(283.67065), np.float32(285.23254), np.float32(301.63004), np.float32(285.69006), np.float32(286.43207), np.float32(300.8352), np.float32(284.87442), np.float32(290.413), np.float32(298.96643), np.float32(285.27887), np.float32(519.77783), np.float32(521.63696), np.float32(284.31387), np.float32(521.24945), np.float32(521.20966), np.float32(284.8338), np.float32(520.5056), np.float32(521.8473), np.float32(283.95355), np.float32(522.3635), np.float32(522.49786), np.float32(284.95142), np.float32(520.88007), np.float32(521.62604), np.float32(520.0684), np.float32(521.0557), np.float32(285.26663), np.float32(520.07086), np.float32(521.1198), np.float32(285.29736), np.float32(520.5276), np.float32(393.1419), np.float32(281.01764), np.float32(194.57863), np.float32(298.69904), np.float32(274.1149), np.float32(192.07661), np.float32(190.8286), np.float32(189.82454), np.float32(190.65158), np.float32(265.27466), np.float32(259.4838), np.float32(260.11148), np.float32(262.6034), np.float32(260.74625), np.float32(259.18488), np.float32(259.7459), np.float32(257.9202), np.float32(193.67752), np.float32(190.40309), np.float32(258.48932), np.float32(259.96988), np.float32(258.92688), np.float32(327.28348), np.float32(330.64035), np.float32(303.44818), np.float32(283.84344), np.float32(288.47208), np.float32(293.96094), np.float32(301.01102), np.float32(307.1959), np.float32(318.03757), np.float32(322.21732), np.float32(322.7726), np.float32(322.48688), np.float32(327.11697), np.float32(665.71533), np.float32(666.15564), np.float32(665.0218), np.float32(664.07825), np.float32(660.34485), np.float32(662.1962), np.float32(660.30444), np.float32(658.9836), np.float32(657.3073), np.float32(658.49347), np.float32(656.0), np.float32(657.2099), np.float32(659.34576), np.float32(657.188), np.float32(986.23285), np.float32(989.7177), np.float32(261.31573), np.float32(259.56665), np.float32(262.1128), np.float32(258.68265), np.float32(261.02582), np.float32(259.16232), np.float32(258.18338), np.float32(257.26303), np.float32(259.46045), np.float32(336.28995), np.float32(379.05585), np.float32(382.12198), np.float32(390.21555), np.float32(393.74112), np.float32(395.3992), np.float32(397.1521), np.float32(397.527), np.float32(398.60104), np.float32(396.74008), np.float32(788.76685), np.float32(789.77966), np.float32(791.93176), np.float32(398.08627), np.float32(399.02036), np.float32(398.26028), np.float32(397.60883), np.float32(395.81522), np.float32(395.75793), np.float32(395.99734), np.float32(394.553), np.float32(394.54642), np.float32(394.1002), np.float32(394.33478), np.float32(395.75482), np.float32(395.80936), np.float32(397.84244), np.float32(398.64624), np.float32(398.65372), np.float32(400.83618), np.float32(425.667), np.float32(441.9083), np.float32(331.06857), np.float32(326.90094), np.float32(328.14072), np.float32(330.48776), np.float32(328.19754), np.float32(329.1104), np.float32(330.29202), np.float32(196.4221), np.float32(194.90128), np.float32(203.59822), np.float32(260.39615), np.float32(262.62692), np.float32(260.96756), np.float32(262.64642), np.float32(265.1623), np.float32(263.3162), np.float32(263.68866), np.float32(259.89072), np.float32(258.5373), np.float32(262.3897), np.float32(261.77386), np.float32(261.25375), np.float32(261.2571), np.float32(259.932), np.float32(259.21402), np.float32(396.67053), np.float32(395.8746), np.float32(394.97806), np.float32(394.72134), np.float32(393.16766), np.float32(394.5724), np.float32(395.23862), np.float32(397.66452), np.float32(799.387), np.float32(803.6431), np.float32(814.939), np.float32(806.90106), np.float32(798.4958), np.float32(795.27496), np.float32(789.9008), np.float32(778.6949), np.float32(775.0906), np.float32(782.2075), np.float32(395.7476), np.float32(399.82776), np.float32(812.39575), np.float32(818.68066), np.float32(825.837), np.float32(822.3609), np.float32(821.4556), np.float32(812.83167), np.float32(797.5654), np.float32(786.92847), np.float32(781.5929), np.float32(780.214), np.float32(785.0411), np.float32(791.88446), np.float32(797.00305), np.float32(802.8398), np.float32(805.38007), np.float32(802.01074), np.float32(799.30225), np.float32(791.0052), np.float32(393.16824), np.float32(258.80746), np.float32(191.1494), np.float32(327.29437), np.float32(329.737), np.float32(329.2581), np.float32(327.21866), np.float32(329.04755), np.float32(329.50803), np.float32(1006.8178), np.float32(330.68527), np.float32(1031.0067), np.float32(1021.36304), np.float32(1010.5579), np.float32(1010.3376), np.float32(1006.9576), np.float32(997.17365), np.float32(985.1616), np.float32(259.95346), np.float32(325.92422), np.float32(325.4748), np.float32(326.24274), np.float32(326.22342), np.float32(328.9313), np.float32(328.29858), np.float32(649.41754), np.float32(649.8324), np.float32(335.9425), np.float32(329.659), np.float32(323.25204), np.float32(315.44388), np.float32(609.8199), np.float32(595.45514), np.float32(591.0319), np.float32(270.86166), np.float32(264.61356), np.float32(262.29993), np.float32(262.60806), np.float32(260.86078), np.float32(260.04608), np.float32(260.71313), np.float32(263.3472), np.float32(259.69388), np.float32(260.40915), np.float32(262.56326), np.float32(260.91016), np.float32(260.10846), np.float32(262.0474), np.float32(261.78644), np.float32(260.13623), np.float32(261.1095), np.float32(257.6493), np.float32(264.73996), np.float32(242.96182), np.float32(225.20654), np.float32(223.9396), np.float32(229.53336), np.float32(287.95764), np.float32(296.84598), np.float32(300.97128), np.float32(298.00034), np.float32(300.24194), np.float32(295.77856), np.float32(295.77826), np.float32(301.32272), np.float32(296.83865), np.float32(299.27533), np.float32(298.0112), np.float32(293.53287), np.float32(292.0114), np.float32(287.77502), np.float32(285.281), np.float32(284.96088), np.float32(248.61795), np.float32(293.75772), np.float32(279.10004), np.float32(529.8226), np.float32(532.12054), np.float32(280.77573), np.float32(280.85037), np.float32(351.83463), np.float32(289.84302), np.float32(226.45749), np.float32(229.72495), np.float32(347.30365), np.float32(291.6979), np.float32(295.4643), np.float32(295.96915), np.float32(296.03815), np.float32(346.73282), np.float32(352.5595), np.float32(351.2599), np.float32(283.11795), np.float32(512.94324), np.float32(519.2155), np.float32(521.3474), np.float32(519.5838), np.float32(522.37933), np.float32(522.8071), np.float32(524.3317), np.float32(526.84357), np.float32(528.6565), np.float32(1053.451), np.float32(1058.1542), np.float32(286.66522), np.float32(284.54593), np.float32(283.2445), np.float32(822.71954), np.float32(838.351), np.float32(847.11646), np.float32(869.37756), np.float32(881.65686), np.float32(887.1187), np.float32(887.38074), np.float32(885.2524), np.float32(876.8198), np.float32(293.08032), np.float32(290.4664), np.float32(295.21674), np.float32(290.0262), np.float32(288.64655), np.float32(295.58438), np.float32(294.6984), np.float32(293.54053), np.float32(292.3454), np.float32(292.1795), np.float32(290.79526), np.float32(288.85086), np.float32(347.74518), np.float32(350.69604), np.float32(280.9811), np.float32(346.15704), np.float32(352.36026), np.float32(349.8517), np.float32(351.06982), np.float32(343.7943), np.float32(349.79337), np.float32(351.8682), np.float32(350.7304), np.float32(347.34555), np.float32(218.85416), np.float32(350.13147), np.float32(351.78662), np.float32(349.6816), np.float32(346.7154), np.float32(349.4154), np.float32(349.21808), np.float32(352.28192), np.float32(347.93887), np.float32(348.66824), np.float32(347.3428), np.float32(349.5633), np.float32(351.6719), np.float32(344.90594), np.float32(342.27032), np.float32(347.4474), np.float32(447.40613), np.float32(226.18741), np.float32(225.93938), np.float32(227.01419), np.float32(351.11734), np.float32(228.26273), np.float32(349.46808), np.float32(350.17938), np.float32(348.70145), np.float32(351.18826), np.float32(348.61102), np.float32(347.6132), np.float32(351.0066), np.float32(348.45697), np.float32(224.95166), np.float32(220.27852), np.float32(220.22679), np.float32(351.77652), np.float32(348.77942), np.float32(350.17227), np.float32(345.92487), np.float32(349.81815), np.float32(352.18597), np.float32(349.8877), np.float32(348.75705), np.float32(344.68948), np.float32(351.5799), np.float32(351.82306), np.float32(349.67773), np.float32(347.3316), np.float32(346.54547), np.float32(352.0947), np.float32(351.959), np.float32(350.26428), np.float32(346.32285), np.float32(346.81662), np.float32(351.2288), np.float32(350.4818), np.float32(350.84283), np.float32(349.31982), np.float32(347.3541), np.float32(348.71918), np.float32(348.52133), np.float32(349.28998), np.float32(351.6784), np.float32(348.84735), np.float32(351.59085), np.float32(352.63452), np.float32(348.48666), np.float32(350.311), np.float32(351.24915), np.float32(348.44992), np.float32(350.47134), np.float32(350.49863), np.float32(350.58664), np.float32(351.2622), np.float32(349.08807), np.float32(350.37158), np.float32(350.09604), np.float32(349.0235), np.float32(348.7738), np.float32(350.6946), np.float32(351.7978), np.float32(350.12555), np.float32(348.45123), np.float32(346.0114), np.float32(352.00092), np.float32(351.45007), np.float32(350.93137), np.float32(348.48883), np.float32(345.53375), np.float32(352.2198), np.float32(349.55173), np.float32(350.92868), np.float32(349.26923), np.float32(346.90482), np.float32(351.34116), np.float32(348.74936), np.float32(351.20453), np.float32(348.47253), np.float32(347.59448), np.float32(351.27567), np.float32(347.50952), np.float32(350.39526), np.float32(349.56235), np.float32(290.5214), np.float32(288.35165), np.float32(309.99054), np.float32(280.538), np.float32(279.60126), np.float32(276.18512), np.float32(544.7908), np.float32(273.968), np.float32(276.21573), np.float32(258.3685), np.float32(264.09695), np.float32(270.84598), np.float32(208.9075), np.float32(232.36859), np.float32(215.2137), np.float32(234.66136), np.float32(215.72057), np.float32(230.896), np.float32(214.32149), np.float32(234.51485), np.float32(214.72356), np.float32(219.10603), np.float32(219.176), np.float32(218.07617), np.float32(248.23218), np.float32(261.87115), np.float32(250.68024), np.float32(264.28107), np.float32(232.05386), np.float32(219.8806), np.float32(216.7075), np.float32(217.10655), np.float32(218.60416), np.float32(218.89108), np.float32(216.81322), np.float32(221.6992), np.float32(216.50897), np.float32(217.57048), np.float32(218.11684), np.float32(219.58691), np.float32(215.53412), np.float32(219.30943), np.float32(232.80206), np.float32(261.5197), np.float32(253.48502), np.float32(262.56927), np.float32(270.08786), np.float32(270.85217), np.float32(257.7415), np.float32(265.90826), np.float32(259.07806), np.float32(263.23306), np.float32(251.2433), np.float32(254.93062), np.float32(252.78922), np.float32(243.95328), np.float32(261.91528), np.float32(246.70575), np.float32(254.71823), np.float32(255.23819), np.float32(251.92654), np.float32(259.93774), np.float32(244.73102), np.float32(233.52078), np.float32(245.85852), np.float32(246.20262), np.float32(441.97086), np.float32(443.70767), np.float32(442.10577), np.float32(442.16446), np.float32(234.8265), np.float32(213.6491), np.float32(221.69836), np.float32(217.13948), np.float32(220.4825), np.float32(225.03656), np.float32(214.54984), np.float32(260.78998), np.float32(262.6099), np.float32(328.96793), np.float32(525.9716), np.float32(524.731), np.float32(326.54514), np.float32(211.27763), np.float32(211.55392), np.float32(206.47893), np.float32(208.37772), np.float32(185.17107), np.float32(191.97745), np.float32(208.61873), np.float32(203.32661), np.float32(185.95682), np.float32(205.12386), np.float32(210.15652), np.float32(209.67268), np.float32(206.27878), np.float32(400.40872), np.float32(403.2297), np.float32(207.5873), np.float32(208.23656), np.float32(205.45409), np.float32(186.03522), np.float32(206.30165), np.float32(209.22978), np.float32(208.28198), np.float32(402.72018), np.float32(797.28455), np.float32(792.6398), np.float32(206.59764), np.float32(205.54747), np.float32(392.1277), np.float32(193.97852), np.float32(790.6896), np.float32(794.23846), np.float32(324.10358), np.float32(416.55432), np.float32(405.69446), np.float32(416.37433), np.float32(427.5689), np.float32(436.6203), np.float32(443.69345), np.float32(455.30914), np.float32(484.74435), np.float32(488.7162), np.float32(502.88318), np.float32(514.7194), np.float32(519.9624), np.float32(524.45557), np.float32(528.96277), np.float32(526.3029), np.float32(526.5557), np.float32(524.5503), np.float32(520.9188), np.float32(519.40704), np.float32(518.9465), np.float32(521.8356), np.float32(525.72864), np.float32(529.1996), np.float32(532.8406), np.float32(267.47528), np.float32(265.50986), np.float32(266.987), np.float32(262.4337), np.float32(262.345), np.float32(260.80978), np.float32(256.6088), np.float32(255.21713), np.float32(253.62671), np.float32(256.05472), np.float32(254.65028), np.float32(253.57193), np.float32(255.51236), np.float32(258.8983), np.float32(261.51993), np.float32(270.02106), np.float32(276.84552), np.float32(281.96356), np.float32(282.9063), np.float32(291.5316), np.float32(296.82874), np.float32(292.8561), np.float32(291.0203), np.float32(290.67126), np.float32(276.79584), np.float32(282.46014), np.float32(581.75), np.float32(586.4573), np.float32(587.88367), np.float32(591.3599), np.float32(301.2299), np.float32(307.97787), np.float32(597.87415), np.float32(288.5785), np.float32(309.81082), np.float32(592.2276), np.float32(294.3277), np.float32(312.0152), np.float32(284.73987), np.float32(300.47806), np.float32(291.3854), np.float32(300.93274), np.float32(304.7943), np.float32(294.01376), np.float32(301.5025), np.float32(302.842), np.float32(292.42667), np.float32(301.9049), np.float32(301.51755), np.float32(287.40225), np.float32(300.78268), np.float32(303.23038), np.float32(590.7286), np.float32(305.12094), np.float32(592.1673), np.float32(589.24615), np.float32(587.5278), np.float32(585.9122), np.float32(584.4574), np.float32(584.0651), np.float32(583.4307), np.float32(584.218), np.float32(583.08795), np.float32(583.265), np.float32(584.95544), np.float32(586.34705), np.float32(586.1216), np.float32(585.9645), np.float32(586.5542), np.float32(586.37524), np.float32(587.58575), np.float32(586.79724), np.float32(586.9883), np.float32(585.86774), np.float32(286.10733), np.float32(174.5992), np.float32(168.17741), np.float32(178.0191), np.float32(171.71822), np.float32(305.1268), np.float32(292.83292), np.float32(304.1935), np.float32(299.0052), np.float32(298.45697), np.float32(301.47055), np.float32(304.25064), np.float32(298.1862), np.float32(162.73355), np.float32(288.98553), np.float32(164.68076), np.float32(182.22603), np.float32(167.06978), np.float32(174.68471), np.float32(166.92218), np.float32(297.98834), np.float32(309.73105), np.float32(305.7602), np.float32(308.82382), np.float32(310.2918), np.float32(304.05377), np.float32(306.77728), np.float32(293.0675), np.float32(294.58533), np.float32(288.06177), np.float32(283.98035), np.float32(299.35464), np.float32(299.29385), np.float32(299.4248), np.float32(304.44846), np.float32(303.25757), np.float32(306.54974), np.float32(311.93857), np.float32(307.19724), np.float32(314.72937), np.float32(306.43005), np.float32(299.18527), np.float32(297.54907), np.float32(296.56116), np.float32(287.448), np.float32(309.5001), np.float32(298.22882), np.float32(320.23532), np.float32(298.2584), np.float32(698.6768), np.float32(348.19876), np.float32(328.80673), np.float32(347.61893), np.float32(350.28516), np.float32(348.35596), np.float32(350.62515), np.float32(349.21848), np.float32(351.45627), np.float32(349.21027), np.float32(351.755), np.float32(346.68228), np.float32(351.33786), np.float32(348.34665), np.float32(353.03348), np.float32(346.46112), np.float32(351.23013), np.float32(347.05048), np.float32(350.73898), np.float32(348.45145), np.float32(349.71286), np.float32(349.87064), np.float32(350.8185), np.float32(349.28857), np.float32(349.3565), np.float32(349.77216), np.float32(349.6299), np.float32(350.64627), np.float32(348.82996), np.float32(349.6723), np.float32(170.53868), np.float32(171.60901), np.float32(166.51483), np.float32(170.24176), np.float32(172.05428), np.float32(167.29482), np.float32(175.06377), np.float32(169.66136), np.float32(174.35376), np.float32(166.74504), np.float32(351.3854), np.float32(163.0848), np.float32(350.19568), np.float32(347.30136), np.float32(351.12848), np.float32(349.09445), np.float32(350.91412), np.float32(347.8431), np.float32(348.13498), np.float32(349.959), np.float32(350.33218), np.float32(218.3489), np.float32(202.3088), np.float32(244.17326), np.float32(247.06117), np.float32(214.51027), np.float32(235.48323), np.float32(214.14775), np.float32(228.97682), np.float32(212.67581), np.float32(224.30382), np.float32(214.02443), np.float32(216.66205), np.float32(219.64851), np.float32(209.64104), np.float32(349.87463), np.float32(348.06454), np.float32(350.7022), np.float32(348.8194), np.float32(350.2283), np.float32(348.7469), np.float32(351.85886), np.float32(348.1181), np.float32(351.139), np.float32(348.56375), np.float32(350.24142), np.float32(349.83533), np.float32(349.41263), np.float32(349.93896), np.float32(349.23846), np.float32(349.41528), np.float32(349.5151), np.float32(350.65015), np.float32(348.42154), np.float32(350.3781), np.float32(349.4492), np.float32(350.75998), np.float32(347.20068), np.float32(349.11194), np.float32(349.4616), np.float32(350.19928), np.float32(349.96793), np.float32(350.26242), np.float32(349.45874), np.float32(349.56216), np.float32(349.66357), np.float32(349.2314), np.float32(349.4054), np.float32(348.72324), np.float32(350.73453), np.float32(347.85672), np.float32(442.66278), np.float32(351.99417), np.float32(348.33188), np.float32(349.5152), np.float32(350.57977), np.float32(349.98038), np.float32(349.18973), np.float32(229.20828), np.float32(351.10367), np.float32(350.6022), np.float32(348.05096), np.float32(350.5783), np.float32(349.3591), np.float32(351.73468), np.float32(348.934), np.float32(348.92743), np.float32(349.00363), np.float32(351.55887), np.float32(348.94183), np.float32(349.61493), np.float32(349.57547), np.float32(347.13678), np.float32(359.97314), np.float32(372.70514), np.float32(381.57877), np.float32(374.96774), np.float32(376.62244), np.float32(383.17822), np.float32(373.39792), np.float32(395.53793), np.float32(394.06137), np.float32(376.68735), np.float32(768.60724), np.float32(364.99542), np.float32(771.3972), np.float32(770.9781), np.float32(770.87244), np.float32(770.99896), np.float32(771.33203), np.float32(773.2206), np.float32(776.1894), np.float32(778.80194), np.float32(781.6465), np.float32(784.98846), np.float32(398.40945), np.float32(391.36545), np.float32(399.63324), np.float32(392.42963), np.float32(397.03836), np.float32(392.41437), np.float32(393.6109), np.float32(387.72934), np.float32(376.2411), np.float32(374.9302), np.float32(350.51007), np.float32(348.33514), np.float32(326.10065), np.float32(323.4308), np.float32(327.95117), np.float32(329.18286), np.float32(327.64255), np.float32(329.8668), np.float32(326.08572), np.float32(328.55588), np.float32(329.7337), np.float32(327.7963), np.float32(329.41388), np.float32(329.04935), np.float32(327.60037), np.float32(328.92377), np.float32(329.26447), np.float32(329.39233), np.float32(327.21307), np.float32(320.7589), np.float32(324.50894), np.float32(326.93085), np.float32(328.6457), np.float32(330.01794), np.float32(331.26736), np.float32(334.54742), np.float32(331.3739), np.float32(329.57565), np.float32(328.5879), np.float32(321.98355), np.float32(303.869), np.float32(291.75827), np.float32(325.46112), np.float32(328.5306), np.float32(328.8162), np.float32(325.31378), np.float32(325.78293), np.float32(330.30518), np.float32(324.9731), np.float32(325.96994), np.float32(326.05832), np.float32(195.24748), np.float32(914.08624), np.float32(913.7849), np.float32(259.0835), np.float32(262.9063), np.float32(264.9066), np.float32(262.68036), np.float32(264.99985), np.float32(259.1321), np.float32(260.10156), np.float32(407.71973), np.float32(405.80936), np.float32(406.09058), np.float32(402.80838), np.float32(400.62747), np.float32(397.35385), np.float32(395.86365), np.float32(394.288), np.float32(393.92764), np.float32(394.72205), np.float32(395.0181), np.float32(393.14972), np.float32(393.0877), np.float32(394.1076), np.float32(394.92734), np.float32(393.0833), np.float32(391.11554), np.float32(390.9299), np.float32(390.2925), np.float32(388.76865), np.float32(384.27237), np.float32(380.6543), np.float32(382.96863), np.float32(376.14148), np.float32(377.8788), np.float32(372.37857), np.float32(373.6396), np.float32(352.98013), np.float32(355.50223), np.float32(705.9674), np.float32(697.2892), np.float32(686.5814), np.float32(337.1251), np.float32(678.0715), np.float32(676.11237), np.float32(674.5092), np.float32(677.17834), np.float32(679.0945), np.float32(679.5692), np.float32(677.4202), np.float32(676.12555), np.float32(676.3), np.float32(674.75305), np.float32(671.85944), np.float32(668.2684), np.float32(665.69965), np.float32(666.7032), np.float32(669.82), np.float32(674.0284), np.float32(672.42346), np.float32(669.8008), np.float32(666.2144), np.float32(662.3617), np.float32(660.9973), np.float32(661.91547), np.float32(664.53735), np.float32(666.23773), np.float32(665.61554), np.float32(660.51404), np.float32(655.4259), np.float32(653.50903), np.float32(652.223), np.float32(658.0345), np.float32(329.31042), np.float32(329.7126), np.float32(327.82846), np.float32(328.33582), np.float32(328.8893), np.float32(330.6164), np.float32(328.2023), np.float32(328.56403), np.float32(344.5452), np.float32(311.5746), np.float32(309.44345), np.float32(307.13345), np.float32(295.09708), np.float32(307.69992), np.float32(300.56918), np.float32(265.7964), np.float32(254.3097), np.float32(269.5724), np.float32(192.53008), np.float32(193.86472), np.float32(193.40782), np.float32(261.9828), np.float32(655.86786), np.float32(657.9341), np.float32(658.7031), np.float32(194.86227), np.float32(193.17368), np.float32(190.54587), np.float32(195.5264), np.float32(195.44632), np.float32(195.39526), np.float32(193.82835), np.float32(193.76369), np.float32(191.58296), np.float32(260.05276), np.float32(261.57715), np.float32(264.7213), np.float32(322.40585), np.float32(325.42834), np.float32(325.5337), np.float32(326.16855), np.float32(327.07602), np.float32(328.27463), np.float32(657.5057), np.float32(329.69214), np.float32(330.5049), np.float32(331.35434), np.float32(330.65228), np.float32(328.8256), np.float32(328.15005), np.float32(658.01306), np.float32(656.72644), np.float32(326.31097), np.float32(327.897), np.float32(327.45343), np.float32(327.7396), np.float32(327.1929), np.float32(652.2117), np.float32(654.4334), np.float32(652.40704), np.float32(650.4198), np.float32(645.86554), np.float32(640.55426), np.float32(636.83154), np.float32(632.91425), np.float32(629.4066), np.float32(624.03284), np.float32(612.5708), np.float32(605.7412), np.float32(602.8996), np.float32(602.79004), np.float32(592.0104), np.float32(584.8645), np.float32(576.2978), np.float32(575.4381), np.float32(570.8475), np.float32(568.64276), np.float32(287.11166), np.float32(286.89883), np.float32(285.0294), np.float32(281.87845), np.float32(287.80527), np.float32(290.75995), np.float32(288.89175), np.float32(201.63322), np.float32(231.75821), np.float32(216.37526), np.float32(351.77084), np.float32(441.65402), np.float32(216.66164), np.float32(220.21516), np.float32(297.22366), np.float32(300.65402), np.float32(298.35043), np.float32(298.51746), np.float32(298.21384), np.float32(295.9222), np.float32(301.87442), np.float32(299.58734), np.float32(300.6584), np.float32(288.2103), np.float32(285.91153), np.float32(440.6902), np.float32(441.83438), np.float32(440.7301), np.float32(440.90558), np.float32(440.9862), np.float32(227.93248), np.float32(274.4226), np.float32(253.08958), np.float32(254.4082), np.float32(266.22464), np.float32(250.00195), np.float32(262.83112), np.float32(253.67046), np.float32(236.3497), np.float32(221.63997), np.float32(211.9066), np.float32(221.61066), np.float32(218.53134), np.float32(352.06757), np.float32(349.89694), np.float32(217.95888), np.float32(217.09242), np.float32(214.74821), np.float32(349.7265), np.float32(352.53336), np.float32(353.1017), np.float32(347.55676), np.float32(216.90025), np.float32(219.72221), np.float32(216.66133), np.float32(217.0454), np.float32(222.53181), np.float32(351.3993), np.float32(232.57777), np.float32(241.4526), np.float32(349.6148), np.float32(283.02527), np.float32(283.1405), np.float32(302.302), np.float32(296.9541), np.float32(284.72382), np.float32(352.92752), np.float32(307.62595), np.float32(286.03653), np.float32(286.76904), np.float32(349.53143), np.float32(352.07538), np.float32(346.24045), np.float32(290.24164), np.float32(296.57236), np.float32(295.22565), np.float32(294.925), np.float32(887.4935), np.float32(889.32874), np.float32(889.7088), np.float32(887.38586), np.float32(885.605), np.float32(886.16174), np.float32(888.06824), np.float32(889.89655), np.float32(889.74414), np.float32(350.32315), np.float32(350.0015), np.float32(350.69104), np.float32(348.64215), np.float32(348.03677), np.float32(350.32443), np.float32(350.26004), np.float32(350.4291), np.float32(347.98163), np.float32(224.28076), np.float32(219.61592), np.float32(349.93555), np.float32(350.9992), np.float32(218.2935), np.float32(218.77257), np.float32(216.50764), np.float32(219.67445), np.float32(217.74359), np.float32(218.24701), np.float32(219.87573), np.float32(349.90247), np.float32(348.3586), np.float32(351.0133), np.float32(347.9135), np.float32(346.81226), np.float32(351.67526), np.float32(351.54025), np.float32(344.78806), np.float32(219.90228), np.float32(292.50287), np.float32(352.17786), np.float32(351.39398), np.float32(294.34146), np.float32(295.7665), np.float32(294.09454), np.float32(292.79266), np.float32(349.74194), np.float32(292.93008), np.float32(214.57616), np.float32(215.71681), np.float32(216.51605), np.float32(216.13014), np.float32(218.43408), np.float32(217.20287), np.float32(218.94632), np.float32(217.86006), np.float32(215.36473), np.float32(215.23656), np.float32(351.1601), np.float32(225.74377), np.float32(227.77342), np.float32(228.9685), np.float32(227.75822), np.float32(223.85779), np.float32(220.22652), np.float32(217.07755), np.float32(216.53416), np.float32(214.06587), np.float32(213.7331), np.float32(213.1396), np.float32(215.1701), np.float32(218.40132), np.float32(220.33452), np.float32(225.17912), np.float32(227.9597), np.float32(228.73648), np.float32(230.16722), np.float32(227.99963), np.float32(221.85033), np.float32(217.61913), np.float32(214.53453), np.float32(214.5161), np.float32(213.62894), np.float32(223.87155), np.float32(223.45378), np.float32(352.8872), np.float32(294.76), np.float32(224.80345), np.float32(219.42009), np.float32(218.89607), np.float32(216.09985), np.float32(214.47212), np.float32(356.68954), np.float32(406.3722), np.float32(371.36884), np.float32(361.40726), np.float32(366.835), np.float32(204.32484), np.float32(372.13763), np.float32(400.643), np.float32(388.4855), np.float32(400.22662), np.float32(391.5899), np.float32(397.99835), np.float32(395.9859), np.float32(396.67728), np.float32(386.3711), np.float32(378.3658), np.float32(395.6022), np.float32(395.01788), np.float32(397.03015), np.float32(392.4419), np.float32(400.71442), np.float32(390.4103), np.float32(399.04608), np.float32(388.31033), np.float32(398.87875), np.float32(389.19077), np.float32(401.2407), np.float32(393.88135), np.float32(405.88773), np.float32(404.12537), np.float32(416.53564), np.float32(429.96143), np.float32(445.36588), np.float32(230.31319), np.float32(235.65501), np.float32(253.34608), np.float32(255.21999), np.float32(255.45056), np.float32(267.25867), np.float32(264.21783), np.float32(273.39633), np.float32(262.12906), np.float32(328.29974), np.float32(330.529), np.float32(330.75873), np.float32(330.94006), np.float32(326.85464), np.float32(327.97263), np.float32(330.10526), np.float32(328.83322), np.float32(329.31192), np.float32(328.9713), np.float32(328.51944), np.float32(328.8384), np.float32(217.08081), np.float32(219.77254), np.float32(220.50807), np.float32(218.32948), np.float32(217.67085), np.float32(217.94313), np.float32(216.40912), np.float32(328.6653), np.float32(328.86948), np.float32(215.98952), np.float32(218.92485), np.float32(218.30348), np.float32(219.50305), np.float32(216.0782), np.float32(218.07954), np.float32(214.65642), np.float32(220.68134), np.float32(220.71764), np.float32(530.8065), np.float32(219.33698), np.float32(216.65556), np.float32(216.75043), np.float32(222.44551), np.float32(535.8725), np.float32(529.33), np.float32(525.5407), np.float32(526.56604), np.float32(524.42883), np.float32(523.1526), np.float32(521.7193), np.float32(522.5959), np.float32(522.33014), np.float32(519.2348), np.float32(518.5644), np.float32(519.68097), np.float32(518.0621), np.float32(232.01343), np.float32(314.90146), np.float32(329.60904), np.float32(251.60275), np.float32(255.32602), np.float32(244.66582), np.float32(232.62042), np.float32(220.33653), np.float32(328.85123), np.float32(329.04395), np.float32(328.5148), np.float32(329.8928), np.float32(329.30203), np.float32(327.46536), np.float32(329.93176), np.float32(328.6228), np.float32(329.99625), np.float32(330.3492), np.float32(324.9887), np.float32(331.2645), np.float32(328.76868), np.float32(328.9881), np.float32(329.64978), np.float32(327.7107), np.float32(329.47003), np.float32(327.60532), np.float32(330.15155), np.float32(328.47113), np.float32(328.48184), np.float32(327.79932), np.float32(329.94586), np.float32(192.86269), np.float32(192.7741), np.float32(197.95348), np.float32(192.12259), np.float32(193.87842), np.float32(202.59924), np.float32(195.432), np.float32(188.04617), np.float32(197.62816), np.float32(199.01152), np.float32(192.16023), np.float32(193.41199), np.float32(193.74727), np.float32(193.06926), np.float32(584.8364), np.float32(585.2344), np.float32(587.8922), np.float32(588.6046), np.float32(593.98846), np.float32(593.07697), np.float32(256.42325), np.float32(189.13791), np.float32(589.16113), np.float32(586.211), np.float32(585.54395), np.float32(584.27454), np.float32(581.1262), np.float32(584.64465), np.float32(589.993), np.float32(599.19305), np.float32(613.39246), np.float32(628.86957), np.float32(671.7193), np.float32(689.8781), np.float32(713.7274), np.float32(992.1934), np.float32(1009.8646), np.float32(1027.241), np.float32(1050.3291), np.float32(1055.9695), np.float32(1057.9067), np.float32(1053.8496), np.float32(1049.1436), np.float32(1045.7207), np.float32(1045.6016), np.float32(1045.7537), np.float32(1044.1217), np.float32(1039.403), np.float32(1037.9197), np.float32(1042.4371), np.float32(783.40216), np.float32(784.09485), np.float32(784.9166), np.float32(783.59106), np.float32(784.55206), np.float32(521.1561), np.float32(519.33813), np.float32(520.7647), np.float32(523.33795), np.float32(520.0775), np.float32(257.61377), np.float32(233.10612), np.float32(230.46545), np.float32(227.10129), np.float32(221.01912), np.float32(216.90086), np.float32(215.12979), np.float32(214.88014), np.float32(219.89604), np.float32(232.64693), np.float32(253.60385), np.float32(254.17465), np.float32(278.77545), np.float32(586.4845), np.float32(606.16315), np.float32(609.0834), np.float32(605.5232), np.float32(603.7698), np.float32(596.64105), np.float32(591.43), np.float32(585.8043), np.float32(585.207), np.float32(587.65515), np.float32(309.54803), np.float32(590.7358), np.float32(594.802), np.float32(311.03827), np.float32(596.2166), np.float32(596.27295), np.float32(307.46362), np.float32(590.6906), np.float32(584.2917), np.float32(299.67892), np.float32(570.45105), np.float32(562.3182), np.float32(563.90295), np.float32(564.6122), np.float32(567.29755), np.float32(572.0823), np.float32(581.0592), np.float32(586.78845), np.float32(592.49896), np.float32(595.43695), np.float32(595.62524), np.float32(599.6804), np.float32(599.4881), np.float32(592.2984), np.float32(588.70905), np.float32(586.0632), np.float32(587.224), np.float32(586.77277), np.float32(586.32733), np.float32(586.1564), np.float32(586.094), np.float32(584.92035), np.float32(585.47614), np.float32(586.4516), np.float32(586.9224), np.float32(587.06976), np.float32(586.84375), np.float32(586.5451), np.float32(584.83215), np.float32(174.09271), np.float32(172.93526), np.float32(173.30194), np.float32(169.64137), np.float32(173.55025), np.float32(168.54573), np.float32(191.58879), np.float32(165.37558), np.float32(198.96375), np.float32(161.38014), np.float32(180.26053), np.float32(163.71278), np.float32(174.83278), np.float32(170.60785), np.float32(174.93379), np.float32(171.56883), np.float32(169.81134), np.float32(171.00194), np.float32(167.67712), np.float32(172.83388), np.float32(169.00197), np.float32(172.86696), np.float32(170.80348), np.float32(171.84747), np.float32(170.81451), np.float32(169.22546), np.float32(172.70227), np.float32(168.65564), np.float32(173.82364), np.float32(165.54353), np.float32(174.28864), np.float32(166.02478), np.float32(172.26442), np.float32(168.77731), np.float32(172.23894), np.float32(349.5286), np.float32(350.33722), np.float32(349.61624), np.float32(347.65305), np.float32(349.74933), np.float32(205.8277), np.float32(349.71307), np.float32(349.0376), np.float32(225.43839), np.float32(209.86697), np.float32(219.52052), np.float32(211.15305), np.float32(330.9821), np.float32(342.43005), np.float32(347.21988), np.float32(351.2357), np.float32(348.85184), np.float32(351.32318), np.float32(219.4527), np.float32(216.17082), np.float32(224.44803), np.float32(350.51193), np.float32(347.54868), np.float32(350.7876), np.float32(349.84732), np.float32(350.7642), np.float32(348.9178), np.float32(350.34995), np.float32(346.69705), np.float32(350.6694), np.float32(349.02048), np.float32(349.91776), np.float32(348.7768), np.float32(350.43317), np.float32(349.53424), np.float32(349.5157), np.float32(348.64163), np.float32(350.40967), np.float32(241.75708), np.float32(265.95132), np.float32(270.68265), np.float32(277.37616), np.float32(275.87686), np.float32(275.8085), np.float32(274.73843), np.float32(549.6859), np.float32(349.77393), np.float32(793.23944), np.float32(523.55725), np.float32(525.8542), np.float32(523.0953), np.float32(525.73706), np.float32(529.41034), np.float32(526.9476), np.float32(524.97125), np.float32(526.4529), np.float32(527.5527), np.float32(522.54803), np.float32(517.73505), np.float32(513.96387), np.float32(253.15768), np.float32(241.03421), np.float32(252.53133), np.float32(259.21506), np.float32(240.51553), np.float32(780.814), np.float32(790.51), np.float32(351.37613), np.float32(570.21014), np.float32(588.54254), np.float32(602.52795), np.float32(607.1389), np.float32(606.2155), np.float32(605.7777), np.float32(604.7813), np.float32(603.6612), np.float32(606.4334), np.float32(608.7559), np.float32(612.9246), np.float32(625.0721), np.float32(641.9575), np.float32(648.1362), np.float32(658.6619), np.float32(661.48035), np.float32(654.3769), np.float32(657.45966), np.float32(653.8838), np.float32(657.557), np.float32(656.6657), np.float32(660.83673), np.float32(681.40814), np.float32(345.30804), np.float32(347.6012), np.float32(350.59702), np.float32(351.37567), np.float32(348.4362), np.float32(349.47003), np.float32(349.97134), np.float32(350.33072), np.float32(347.8399), np.float32(349.692), np.float32(349.3284), np.float32(350.4284), np.float32(348.93414), np.float32(347.58173), np.float32(312.10748), np.float32(300.1379), np.float32(307.78265), np.float32(300.9485), np.float32(304.7019), np.float32(296.91977), np.float32(289.81635), np.float32(254.38524), np.float32(252.77016), np.float32(246.24121), np.float32(349.7775), np.float32(349.68802), np.float32(350.46167), np.float32(349.6539), np.float32(348.51892), np.float32(351.73566), np.float32(230.92043), np.float32(349.29913), np.float32(348.58453), np.float32(349.33087), np.float32(350.3102), np.float32(351.0878), np.float32(348.3534), np.float32(349.96878), np.float32(348.80307), np.float32(350.45966), np.float32(349.37964), np.float32(350.72525), np.float32(350.38992), np.float32(349.32053), np.float32(349.41412), np.float32(349.79938), np.float32(349.80893), np.float32(349.95178), np.float32(349.37454), np.float32(350.00717), np.float32(350.18332), np.float32(349.1385), np.float32(349.61856), np.float32(349.3407), np.float32(350.3598), np.float32(349.09525), np.float32(350.67133), np.float32(350.9284), np.float32(351.94046), np.float32(336.1423), np.float32(612.6842), np.float32(615.2449), np.float32(616.5723), np.float32(615.5229), np.float32(611.79736), np.float32(611.7323), np.float32(610.5159), np.float32(611.29645), np.float32(610.52606), np.float32(612.1195), np.float32(614.6932), np.float32(624.9888), np.float32(632.19855), np.float32(633.95764), np.float32(644.6384), np.float32(653.54736), np.float32(658.7659), np.float32(663.1939), np.float32(668.42334), np.float32(673.6839), np.float32(674.8432), np.float32(677.4922), np.float32(678.3831), np.float32(673.6496), np.float32(668.9414), np.float32(664.4685), np.float32(663.0906), np.float32(663.06726), np.float32(665.91266), np.float32(668.47845), np.float32(669.21783), np.float32(669.7398), np.float32(668.1682), np.float32(671.4761), np.float32(672.11664), np.float32(669.88776), np.float32(667.772), np.float32(664.9692), np.float32(662.5046), np.float32(661.3534), np.float32(661.72363), np.float32(661.2227), np.float32(661.7804), np.float32(661.55176), np.float32(660.23956), np.float32(660.2458), np.float32(660.2953), np.float32(661.5529), np.float32(662.00604), np.float32(662.343), np.float32(661.8407), np.float32(663.23987), np.float32(662.56036), np.float32(665.9472), np.float32(667.05914), np.float32(665.45044), np.float32(663.62946), np.float32(662.3548), np.float32(662.9495), np.float32(661.4803), np.float32(662.2867), np.float32(661.38617), np.float32(660.20874), np.float32(659.3939), np.float32(659.1945), np.float32(658.22076), np.float32(657.1161), np.float32(656.3034), np.float32(657.5484), np.float32(658.50214), np.float32(660.2936), np.float32(659.27655), np.float32(659.3442), np.float32(658.54755), np.float32(657.5803), np.float32(658.0823), np.float32(658.5561), np.float32(659.33124), np.float32(658.63525), np.float32(656.4204), np.float32(655.3958), np.float32(655.21173), np.float32(655.0169), np.float32(656.05164), np.float32(657.27216), np.float32(658.0117), np.float32(658.6003), np.float32(657.81793), np.float32(656.7248), np.float32(656.9256), np.float32(657.9828), np.float32(658.27795), np.float32(658.1522), np.float32(656.04926), np.float32(656.0236), np.float32(655.8943), np.float32(656.6002), np.float32(656.2605), np.float32(656.3801), np.float32(658.0303), np.float32(659.641), np.float32(658.9462), np.float32(658.88367), np.float32(658.72205), np.float32(659.1429), np.float32(658.48035), np.float32(658.7085), np.float32(657.1772), np.float32(656.9056), np.float32(656.9685), np.float32(658.0201), np.float32(657.4782), np.float32(656.6876), np.float32(656.60394), np.float32(656.7139), np.float32(656.1342), np.float32(656.28455), np.float32(656.9494), np.float32(656.5481), np.float32(656.4367), np.float32(656.23627), np.float32(656.3994), np.float32(656.5768), np.float32(656.68555), np.float32(656.83124), np.float32(656.82446), np.float32(655.4676), np.float32(654.88153), np.float32(655.33655), np.float32(656.06323), np.float32(657.22156), np.float32(657.8388), np.float32(657.87213), np.float32(656.52374), np.float32(655.52673), np.float32(656.0945), np.float32(656.9458), np.float32(657.09454), np.float32(656.6874), np.float32(657.3509), np.float32(658.1815), np.float32(657.97205), np.float32(657.29254), np.float32(657.04474), np.float32(655.89813), np.float32(654.74023), np.float32(653.18915), np.float32(653.6484), np.float32(653.848), np.float32(655.057), np.float32(656.6795), np.float32(657.5979), np.float32(658.31964), np.float32(657.65454), np.float32(657.2853), np.float32(657.90967), np.float32(658.1792), np.float32(659.031), np.float32(659.6292), np.float32(659.2964), np.float32(658.8884), np.float32(657.28595), np.float32(656.3872), np.float32(653.6348), np.float32(656.6269), np.float32(653.92786), np.float32(655.27106), np.float32(653.69806), np.float32(656.42126), np.float32(658.31335), np.float32(657.74506), np.float32(663.5639), np.float32(655.7789), np.float32(661.35596), np.float32(658.1606), np.float32(658.2428), np.float32(656.87396), np.float32(655.2664), np.float32(657.12805), np.float32(654.4826), np.float32(657.13196), np.float32(653.8733), np.float32(656.0411), np.float32(652.2779), np.float32(655.5645), np.float32(654.41254), np.float32(655.65717), np.float32(655.8377), np.float32(655.99), np.float32(659.1488), np.float32(655.6629), np.float32(655.84015), np.float32(655.6499), np.float32(657.0434), np.float32(655.6954), np.float32(655.94965), np.float32(656.30005), np.float32(655.3692), np.float32(655.7179), np.float32(655.40094), np.float32(657.68304), np.float32(656.80743), np.float32(657.98175), np.float32(658.11255), np.float32(657.0247), np.float32(657.3749), np.float32(654.8176), np.float32(656.0487), np.float32(652.3271), np.float32(652.6363), np.float32(651.12787), np.float32(653.1521), np.float32(652.6352), np.float32(658.6358), np.float32(657.491), np.float32(658.46545), np.float32(658.9189), np.float32(658.95166), np.float32(660.86975), np.float32(659.44867), np.float32(658.5729), np.float32(660.4398), np.float32(221.29637), np.float32(659.58594), np.float32(658.45154), np.float32(656.98303), np.float32(218.67177), np.float32(220.41447), np.float32(216.35703), np.float32(220.90594), np.float32(215.65303), np.float32(219.39262), np.float32(216.41037), np.float32(222.54938), np.float32(215.16286), np.float32(660.7628), np.float32(660.55054), np.float32(659.72375), np.float32(658.81), np.float32(657.9161), np.float32(658.6668), np.float32(657.4972), np.float32(657.20605), np.float32(657.4897), np.float32(658.61884), np.float32(659.53546), np.float32(659.94684), np.float32(658.62726), np.float32(659.1854), np.float32(659.2915), np.float32(661.4824), np.float32(662.0064), np.float32(661.4997), np.float32(659.6188), np.float32(658.47394), np.float32(657.8748), np.float32(656.3038), np.float32(655.4556), np.float32(655.38983), np.float32(655.8308), np.float32(656.45764), np.float32(658.34467), np.float32(661.74603), np.float32(664.61505), np.float32(669.8428), np.float32(674.9687), np.float32(678.3321), np.float32(678.27295), np.float32(669.7365), np.float32(663.33966), np.float32(658.9707), np.float32(655.0442), np.float32(652.5004), np.float32(651.80475), np.float32(653.63354), np.float32(657.0871), np.float32(663.3406), np.float32(666.24915), np.float32(667.79193), np.float32(669.6273), np.float32(669.3053), np.float32(665.6441), np.float32(660.9293), np.float32(658.18335), np.float32(654.93665), np.float32(652.2453), np.float32(652.22906), np.float32(653.02936), np.float32(656.11646), np.float32(660.2051), np.float32(666.63104), np.float32(675.00867), np.float32(680.6203), np.float32(681.8061), np.float32(676.2488), np.float32(670.94867), np.float32(663.3225), np.float32(657.4187), np.float32(653.90247), np.float32(652.39655), np.float32(651.849), np.float32(654.3626), np.float32(659.2408), np.float32(662.79474), np.float32(667.277), np.float32(671.652), np.float32(672.89557), np.float32(675.0073), np.float32(672.55774), np.float32(661.1666), np.float32(656.17804), np.float32(653.0764), np.float32(649.84955), np.float32(651.5973), np.float32(653.316), np.float32(653.99426), np.float32(658.87286), np.float32(670.29846), np.float32(677.2454), np.float32(678.07654), np.float32(678.15796), np.float32(678.3549), np.float32(677.46344), np.float32(673.6891), np.float32(663.08905), np.float32(658.36334), np.float32(656.4333), np.float32(655.8077), np.float32(656.99475), np.float32(658.72266), np.float32(662.234), np.float32(670.9661), np.float32(676.5532), np.float32(677.62146), np.float32(680.3011), np.float32(683.0084), np.float32(674.70044), np.float32(663.66766), np.float32(659.1728), np.float32(657.6799), np.float32(657.73486), np.float32(659.3782), np.float32(660.8591), np.float32(660.53973), np.float32(659.6521), np.float32(659.1007), np.float32(658.9267), np.float32(657.8723), np.float32(656.0849), np.float32(651.0623), np.float32(635.14935), np.float32(618.8431), np.float32(613.0577), np.float32(606.6323), np.float32(607.0697), np.float32(608.16425), np.float32(608.5346), np.float32(608.9106), np.float32(609.2543), np.float32(612.1536), np.float32(612.8484), np.float32(615.9424), np.float32(640.83594), np.float32(302.1511), np.float32(305.07953), np.float32(323.3987), np.float32(324.24918), np.float32(194.01442), np.float32(200.15591), np.float32(326.872), np.float32(325.92587), np.float32(192.31982), np.float32(196.41624), np.float32(327.0161), np.float32(330.74915), np.float32(326.28366), np.float32(324.45032), np.float32(331.44073), np.float32(326.94952), np.float32(328.36566), np.float32(331.26535), np.float32(326.40985), np.float32(330.28427), np.float32(326.46945), np.float32(326.75516), np.float32(330.7058), np.float32(327.59442), np.float32(328.89597), np.float32(330.02213), np.float32(327.83685), np.float32(329.43555), np.float32(324.21082), np.float32(308.40863), np.float32(607.976), np.float32(616.55273), np.float32(612.9909), np.float32(608.8565), np.float32(606.13824), np.float32(602.87524), np.float32(593.2829), np.float32(586.9635), np.float32(587.7212), np.float32(303.6599), np.float32(293.55472), np.float32(299.53946), np.float32(302.24268), np.float32(596.06104), np.float32(299.25177), np.float32(302.03326), np.float32(295.09082), np.float32(304.20905), np.float32(306.71887), np.float32(605.838), np.float32(303.50934), np.float32(311.94333), np.float32(249.34091), np.float32(284.7425), np.float32(313.0009), np.float32(221.09222), np.float32(214.07115), np.float32(323.52048), np.float32(331.7908), np.float32(317.1607), np.float32(216.79897), np.float32(217.27753), np.float32(316.36615), np.float32(316.47437), np.float32(218.70323), np.float32(318.43002), np.float32(313.42258), np.float32(317.80536), np.float32(281.86212), np.float32(307.05206), np.float32(327.9163), np.float32(219.02206), np.float32(215.89696), np.float32(325.17917), np.float32(308.55093), np.float32(284.03738), np.float32(309.63202), np.float32(309.23254), np.float32(303.4087), np.float32(299.75583), np.float32(310.41565), np.float32(309.4109), np.float32(220.3122), np.float32(214.61667), np.float32(303.10666), np.float32(284.03482), np.float32(291.78384), np.float32(285.29178), np.float32(219.32932), np.float32(306.2677), np.float32(293.48553), np.float32(300.03302), np.float32(308.09595), np.float32(304.0041), np.float32(301.6391), np.float32(304.54477), np.float32(306.70245), np.float32(296.53717), np.float32(296.56918), np.float32(303.16052), np.float32(299.28638), np.float32(291.01532), np.float32(296.80844), np.float32(301.68723), np.float32(300.45676), np.float32(301.0269), np.float32(284.068), np.float32(276.77234), np.float32(252.90231), np.float32(327.6504), np.float32(263.0539), np.float32(253.33482), np.float32(260.96304), np.float32(257.70612), np.float32(259.24704), np.float32(264.0476), np.float32(247.98106), np.float32(328.07648), np.float32(329.37372), np.float32(230.66405), np.float32(233.2917), np.float32(327.94916), np.float32(329.2826), np.float32(329.5273), np.float32(326.79852), np.float32(218.38661), np.float32(213.5136), np.float32(328.72455), np.float32(328.7149), np.float32(328.36856), np.float32(329.85135), np.float32(329.08353), np.float32(326.9542), np.float32(217.79048), np.float32(216.5586), np.float32(219.80115), np.float32(217.20871), np.float32(216.81657), np.float32(220.8717), np.float32(217.97008), np.float32(220.25858), np.float32(214.07234), np.float32(219.91472), np.float32(218.01573), np.float32(218.56833), np.float32(218.49495), np.float32(216.26741), np.float32(219.94124), np.float32(215.6795), np.float32(218.30606), np.float32(208.33864), np.float32(211.49762), np.float32(239.60648), np.float32(329.9494), np.float32(329.6054), np.float32(330.06238), np.float32(331.0448), np.float32(328.78894), np.float32(328.09357), np.float32(225.56679), np.float32(213.38028), np.float32(328.02963), np.float32(329.4749), np.float32(328.50842), np.float32(327.58466), np.float32(330.15604), np.float32(328.17303), np.float32(328.83224), np.float32(328.85846), np.float32(328.58942), np.float32(328.82617), np.float32(328.7741), np.float32(329.76364), np.float32(328.3848), np.float32(329.12515), np.float32(328.29858), np.float32(329.2899), np.float32(329.96262), np.float32(329.25607), np.float32(329.7883), np.float32(327.30817), np.float32(329.64056), np.float32(328.9278), np.float32(329.20276), np.float32(329.55704), np.float32(326.90262), np.float32(330.398), np.float32(329.84027), np.float32(327.58157), np.float32(217.48007), np.float32(218.47527), np.float32(218.17215), np.float32(217.83365), np.float32(216.2827), np.float32(220.29395), np.float32(219.71666), np.float32(219.12163), np.float32(216.15384), np.float32(220.07477), np.float32(210.06801), np.float32(524.63245), np.float32(179.65352), np.float32(190.08029), np.float32(197.81685), np.float32(195.45447), np.float32(189.64305), np.float32(195.94939), np.float32(195.26459), np.float32(191.96196), np.float32(190.5978), np.float32(196.24161), np.float32(205.55008), np.float32(190.81668), np.float32(189.76486), np.float32(196.6077), np.float32(201.48193), np.float32(191.18759), np.float32(190.63948), np.float32(194.39636), np.float32(201.09734), np.float32(191.54202), np.float32(192.50076), np.float32(193.43529), np.float32(200.74821), np.float32(327.7651), np.float32(328.14844), np.float32(201.82076), np.float32(200.96979), np.float32(328.06052), np.float32(328.0208), np.float32(202.32082), np.float32(326.51236), np.float32(329.1715), np.float32(327.8712), np.float32(324.76358), np.float32(331.44452), np.float32(327.4486), np.float32(328.84238), np.float32(332.18048), np.float32(325.2835), np.float32(330.16397), np.float32(326.41507), np.float32(214.77039), np.float32(331.18808), np.float32(326.55078), np.float32(330.73517), np.float32(215.45917), np.float32(324.4866), np.float32(248.96004), np.float32(233.11037), np.float32(237.0296), np.float32(265.49936), np.float32(326.51898), np.float32(333.2871), np.float32(327.7326), np.float32(330.98007), np.float32(330.89175), np.float32(329.1284), np.float32(328.1704), np.float32(329.48315), np.float32(328.4013), np.float32(328.2305), np.float32(329.46683), np.float32(328.93796), np.float32(328.88797), np.float32(328.90134), np.float32(329.14624), np.float32(329.1572), np.float32(328.8), np.float32(328.63272), np.float32(329.0811), np.float32(329.00912), np.float32(329.09897), np.float32(328.40955), np.float32(328.20163), np.float32(328.99478), np.float32(329.38437), np.float32(329.71124), np.float32(328.9225), np.float32(328.32822), np.float32(328.47003), np.float32(329.32703), np.float32(329.2961), np.float32(329.64795), np.float32(328.26923), np.float32(327.53497), np.float32(330.02606), np.float32(328.8635), np.float32(219.50372), np.float32(215.5623), np.float32(219.4268), np.float32(216.2281), np.float32(219.99039), np.float32(216.20831), np.float32(219.09775), np.float32(218.7411), np.float32(217.66728), np.float32(218.11903), np.float32(217.1786), np.float32(217.94876), np.float32(220.10956), np.float32(228.78528), np.float32(241.22072), np.float32(775.4938), np.float32(776.987), np.float32(254.2817), np.float32(263.27982), np.float32(249.92903), np.float32(324.92505), np.float32(330.36804), np.float32(777.7278), np.float32(261.80008), np.float32(260.8776), np.float32(264.33502), np.float32(330.2535), np.float32(327.62714), np.float32(330.005), np.float32(330.27118), np.float32(329.1117), np.float32(328.882), np.float32(326.6784), np.float32(329.17645), np.float32(329.65125), np.float32(329.0208), np.float32(329.04004), np.float32(328.5607), np.float32(329.74295), np.float32(328.57935), np.float32(329.00366), np.float32(328.91165), np.float32(328.7682), np.float32(328.61133), np.float32(328.64212), np.float32(329.35593), np.float32(328.956), np.float32(329.86636), np.float32(328.33905), np.float32(328.82028), np.float32(329.04764), np.float32(329.35724), np.float32(329.3662), np.float32(328.95078), np.float32(328.90134), np.float32(329.8673), np.float32(330.08115), np.float32(219.74738), np.float32(328.66052), np.float32(219.42836), np.float32(216.66687), np.float32(216.79361), np.float32(217.55136), np.float32(204.37502), np.float32(334.6296), np.float32(329.54764), np.float32(328.99808), np.float32(331.27713), np.float32(329.55423), np.float32(330.5723), np.float32(331.24393), np.float32(327.71848), np.float32(328.3571), np.float32(329.5394), np.float32(329.21786), np.float32(328.3001), np.float32(329.81326), np.float32(327.8151), np.float32(328.48264), np.float32(329.283), np.float32(329.19897), np.float32(329.3734), np.float32(327.57303), np.float32(329.66992), np.float32(328.75903), np.float32(329.1995), np.float32(329.50064), np.float32(328.66925), np.float32(328.55148), np.float32(328.60672), np.float32(329.2478), np.float32(330.2644), np.float32(328.68707), np.float32(328.8193), np.float32(328.8843), np.float32(329.53192), np.float32(329.77576), np.float32(328.28528), np.float32(329.35342), np.float32(328.12915), np.float32(329.69055), np.float32(329.32272), np.float32(329.23877), np.float32(329.55692), np.float32(327.77136), np.float32(219.58372), np.float32(219.58046), np.float32(221.46301), np.float32(217.76247), np.float32(216.77388), np.float32(220.52354), np.float32(215.54361), np.float32(219.55383), np.float32(217.86185), np.float32(222.26665), np.float32(236.27538), np.float32(262.68875), np.float32(255.98105), np.float32(241.17816), np.float32(331.9369), np.float32(330.29498), np.float32(329.76224), np.float32(328.29672), np.float32(328.9855), np.float32(328.8872), np.float32(329.19138), np.float32(329.07956), np.float32(328.5679), np.float32(329.19696), np.float32(328.97592), np.float32(329.26785), np.float32(329.25287), np.float32(328.48032), np.float32(327.90512), np.float32(329.32935), np.float32(329.84308), np.float32(329.18008), np.float32(328.58926), np.float32(328.64294), np.float32(328.89682), np.float32(328.67477), np.float32(329.74326), np.float32(329.68863), np.float32(328.65353), np.float32(329.1915), np.float32(328.5626), np.float32(329.73352), np.float32(328.4965), np.float32(329.18372), np.float32(329.25204), np.float32(328.0724), np.float32(329.6057), np.float32(222.05875), np.float32(218.21053), np.float32(217.34657), np.float32(220.86122), np.float32(216.41385), np.float32(220.18169), np.float32(216.95076), np.float32(223.06297), np.float32(217.06143), np.float32(221.50876), np.float32(222.78564), np.float32(212.84633), np.float32(195.691), np.float32(171.59323), np.float32(244.21446), np.float32(437.80527), np.float32(163.11758), np.float32(166.08838), np.float32(225.92047), np.float32(205.21323), np.float32(375.08633), np.float32(397.1259), np.float32(399.06345), np.float32(401.505), np.float32(402.058), np.float32(400.76016), np.float32(400.99197), np.float32(398.57974), np.float32(397.7542), np.float32(393.736), np.float32(393.78073), np.float32(390.47354), np.float32(392.59323), np.float32(393.86157), np.float32(397.90088), np.float32(398.27597), np.float32(405.73242), np.float32(422.1118), np.float32(426.3884), np.float32(434.33237), np.float32(441.29117), np.float32(443.08774), np.float32(446.0268), np.float32(444.9017), np.float32(445.52017), np.float32(446.16528), np.float32(445.31076), np.float32(445.6683), np.float32(445.9597), np.float32(444.5126), np.float32(445.43036), np.float32(442.5069), np.float32(443.99335), np.float32(441.3499), np.float32(442.65186), np.float32(442.24725), np.float32(441.7385), np.float32(441.31976), np.float32(441.4158), np.float32(442.0885), np.float32(442.86176), np.float32(440.95258), np.float32(441.72485), np.float32(442.18237), np.float32(441.87286), np.float32(440.00027), np.float32(440.51062), np.float32(441.2996), np.float32(441.3967), np.float32(441.6799), np.float32(442.98834), np.float32(442.76886), np.float32(444.74783), np.float32(444.40424), np.float32(445.31168), np.float32(444.9225), np.float32(444.4477), np.float32(443.90454), np.float32(443.52856), np.float32(443.72577), np.float32(443.03586), np.float32(441.70065), np.float32(442.36), np.float32(441.73648), np.float32(441.92816), np.float32(442.3507), np.float32(441.47565), np.float32(443.14526), np.float32(442.83386), np.float32(442.4807), np.float32(441.72433), np.float32(442.78915), np.float32(442.06717), np.float32(442.93857), np.float32(441.88107), np.float32(442.5315), np.float32(443.06906), np.float32(441.90677), np.float32(442.8197), np.float32(442.50412), np.float32(441.82645), np.float32(442.18658), np.float32(442.0593), np.float32(442.8844), np.float32(441.9224), np.float32(441.9155), np.float32(441.7449), np.float32(441.7086), np.float32(441.14435), np.float32(441.0913), np.float32(440.69775), np.float32(441.07782), np.float32(440.2661), np.float32(440.88132), np.float32(442.55307), np.float32(442.44965), np.float32(442.2128), np.float32(442.61002), np.float32(442.45404), np.float32(443.0129), np.float32(442.82993), np.float32(442.9591), np.float32(443.41193), np.float32(442.99258), np.float32(442.63785), np.float32(442.26004), np.float32(442.84195), np.float32(442.2912), np.float32(441.75995), np.float32(441.24234), np.float32(441.37515), np.float32(439.84024), np.float32(440.94943), np.float32(439.30817), np.float32(439.56198), np.float32(439.3508), np.float32(438.95364), np.float32(438.5324), np.float32(438.36713), np.float32(438.33405), np.float32(439.6418), np.float32(441.38873), np.float32(442.3172), np.float32(443.37152), np.float32(444.2949), np.float32(444.57874), np.float32(445.53012), np.float32(446.12534), np.float32(446.0086), np.float32(445.989), np.float32(446.58447), np.float32(446.081), np.float32(446.28918), np.float32(445.9243), np.float32(445.47183), np.float32(445.66367), np.float32(444.64954), np.float32(443.72223), np.float32(442.56366), np.float32(441.3392), np.float32(440.39737), np.float32(438.11996), np.float32(440.29355), np.float32(440.65753), np.float32(445.33606), np.float32(450.74475), np.float32(461.92624), np.float32(475.06458), np.float32(490.49463), np.float32(498.9914), np.float32(512.986), np.float32(524.40784), np.float32(530.32166), np.float32(536.4793), np.float32(539.40704), np.float32(543.3567), np.float32(551.9764), np.float32(554.1264), np.float32(547.48895), np.float32(535.4133), np.float32(511.6166), np.float32(494.64453), np.float32(484.08453), np.float32(171.30377), np.float32(173.53937), np.float32(171.08858), np.float32(173.06076), np.float32(173.69127), np.float32(175.13748), np.float32(173.27527), np.float32(173.23747), np.float32(175.84181), np.float32(171.73952), np.float32(174.04396), np.float32(442.05984), np.float32(173.85278), np.float32(171.36583), np.float32(176.1222), np.float32(173.92708), np.float32(431.29074), np.float32(430.4475), np.float32(429.9882), np.float32(426.67462), np.float32(424.93726), np.float32(418.65598), np.float32(398.63303), np.float32(389.53043), np.float32(388.71793), np.float32(379.7645), np.float32(379.43286), np.float32(382.0324), np.float32(381.60583), np.float32(384.6245), np.float32(388.13016), np.float32(391.83478), np.float32(391.2368), np.float32(395.1359), np.float32(393.7263), np.float32(399.5338), np.float32(397.76917), np.float32(399.78027), np.float32(397.67218), np.float32(397.74255), np.float32(395.80347), np.float32(394.55267), np.float32(391.0957), np.float32(394.47086), np.float32(389.4441), np.float32(395.12155), np.float32(395.49335), np.float32(400.51605), np.float32(402.2456), np.float32(408.26654), np.float32(417.23633), np.float32(415.66373), np.float32(413.2444), np.float32(411.90198), np.float32(401.73163), np.float32(393.14136), np.float32(382.5987), np.float32(376.8877), np.float32(376.34622), np.float32(376.56192), np.float32(384.38455), np.float32(389.60345), np.float32(396.74677), np.float32(398.5401), np.float32(407.32596), np.float32(413.33728), np.float32(418.01166), np.float32(423.17126), np.float32(422.296), np.float32(421.09766), np.float32(408.4333), np.float32(394.84802), np.float32(391.47043), np.float32(380.29807), np.float32(381.02417), np.float32(384.2394), np.float32(380.50043), np.float32(394.98056), np.float32(398.49432), np.float32(406.6628), np.float32(402.46072), np.float32(413.74365), np.float32(420.50287), np.float32(395.23532), np.float32(408.55518), np.float32(164.33823), np.float32(163.15773), np.float32(164.47739), np.float32(165.83496), np.float32(163.31459), np.float32(164.80968), np.float32(163.20016), np.float32(165.27118), np.float32(162.1069), np.float32(167.02498), np.float32(163.04544), np.float32(229.55269), np.float32(167.02856), np.float32(162.42566), np.float32(228.34149), np.float32(164.3697), np.float32(163.95656), np.float32(166.2555), np.float32(162.34848), np.float32(166.94954), np.float32(163.21509), np.float32(164.692), np.float32(168.78256), np.float32(163.8869), np.float32(168.26813), np.float32(162.81744), np.float32(168.38689), np.float32(321.23904), np.float32(353.33835), np.float32(321.09558), np.float32(267.63528), np.float32(258.3133), np.float32(261.56152), np.float32(260.6268), np.float32(516.9828), np.float32(522.6927), np.float32(529.20636), np.float32(266.20886), np.float32(267.33368), np.float32(267.45636), np.float32(265.69977), np.float32(263.16165), np.float32(259.54514), np.float32(261.61426), np.float32(254.08057), np.float32(257.27988), np.float32(255.3925), np.float32(254.04668), np.float32(257.07727), np.float32(254.50397), np.float32(256.9107), np.float32(260.91467), np.float32(257.4253), np.float32(265.74893), np.float32(265.4764), np.float32(281.25476), np.float32(293.83984), np.float32(299.34155), np.float32(303.55203), np.float32(312.74564), np.float32(324.43213), np.float32(326.8311), np.float32(324.075), np.float32(323.89285), np.float32(321.37473), np.float32(319.8346), np.float32(315.3385), np.float32(305.28772), np.float32(307.85858), np.float32(301.49976), np.float32(298.9545), np.float32(300.11707), np.float32(303.31018), np.float32(301.74884), np.float32(299.87833), np.float32(300.8917), np.float32(297.35843), np.float32(289.6081), np.float32(289.3815), np.float32(289.22092), np.float32(286.47342), np.float32(296.68384), np.float32(329.8322), np.float32(323.35678), np.float32(306.45102), np.float32(287.2817), np.float32(302.24924), np.float32(287.2292), np.float32(300.24188), np.float32(313.5461), np.float32(606.4523), np.float32(606.8356), np.float32(604.21204), np.float32(600.68976), np.float32(297.3889), np.float32(297.29852), np.float32(296.6649), np.float32(290.92194), np.float32(300.5013), np.float32(294.90836), np.float32(288.14075), np.float32(297.58566), np.float32(291.27975), np.float32(298.60403), np.float32(298.57816), np.float32(288.43213), np.float32(882.5155), np.float32(879.97144), np.float32(875.907), np.float32(167.23784), np.float32(158.71335), np.float32(164.86826), np.float32(165.76), np.float32(889.6589), np.float32(890.1752), np.float32(891.8132), np.float32(893.0723), np.float32(887.5077), np.float32(302.15558), np.float32(163.3786), np.float32(583.98206), np.float32(166.25636), np.float32(154.43732), np.float32(165.40308), np.float32(162.76425), np.float32(157.64055), np.float32(165.13106), np.float32(217.69531), np.float32(215.65479), np.float32(218.05347), np.float32(218.39223), np.float32(219.8329), np.float32(216.37502), np.float32(218.53137), np.float32(216.66765), np.float32(596.94025), np.float32(590.2269), np.float32(587.2552), np.float32(585.1887), np.float32(582.611), np.float32(581.2101), np.float32(581.1514), np.float32(578.866), np.float32(579.7164), np.float32(582.0334), np.float32(583.063), np.float32(583.6632), np.float32(218.51369), np.float32(162.66951), np.float32(895.15497), np.float32(606.9318), np.float32(606.219), np.float32(605.63605), np.float32(605.1433), np.float32(610.9407), np.float32(604.86346), np.float32(592.02936), np.float32(292.60327), np.float32(570.6631), np.float32(580.67926), np.float32(573.3374), np.float32(565.09503), np.float32(589.14056), np.float32(596.0202), np.float32(605.48816), np.float32(608.3617), np.float32(608.29974), np.float32(599.62067), np.float32(313.51538), np.float32(307.36224), np.float32(309.31323), np.float32(323.2952), np.float32(881.0543), np.float32(884.9989), np.float32(293.881), np.float32(291.19055), np.float32(294.55945), np.float32(296.5115), np.float32(294.56442), np.float32(293.59836), np.float32(299.75272), np.float32(301.70874), np.float32(304.75867), np.float32(302.59912), np.float32(303.4571), np.float32(302.53723), np.float32(301.24307), np.float32(296.0357), np.float32(288.27597), np.float32(283.1249), np.float32(280.27313), np.float32(281.31525), np.float32(302.49255), np.float32(305.26752), np.float32(308.9525), np.float32(307.02762), np.float32(307.75134), np.float32(308.85718), np.float32(305.2602), np.float32(300.6184), np.float32(302.49072), np.float32(295.10684), np.float32(179.00505), np.float32(296.8965), np.float32(292.50708), np.float32(295.1649), np.float32(294.93896), np.float32(298.4446), np.float32(204.57436), np.float32(165.75551), np.float32(310.79486), np.float32(303.361), np.float32(192.37543), np.float32(167.24202), np.float32(199.8934), np.float32(299.95166), np.float32(300.08862), np.float32(297.34265), np.float32(300.94595), np.float32(298.00906), np.float32(304.0268), np.float32(299.815), np.float32(302.67416), np.float32(293.286), np.float32(261.7418), np.float32(253.61595), np.float32(232.69627), np.float32(225.81659), np.float32(219.12675), np.float32(215.8062), np.float32(281.8612), np.float32(546.66504), np.float32(538.2481), np.float32(522.13446), np.float32(515.95325), np.float32(515.45703), np.float32(510.81393), np.float32(502.3261), np.float32(241.78288), np.float32(240.79454), np.float32(241.25026), np.float32(240.11513), np.float32(241.92911), np.float32(234.5737), np.float32(227.5563), np.float32(216.97537), np.float32(217.95093), np.float32(218.49693), np.float32(220.97417), np.float32(221.25885), np.float32(217.01768), np.float32(219.19366), np.float32(217.81924), np.float32(217.43715), np.float32(221.36981), np.float32(221.33984), np.float32(221.61493), np.float32(220.21454), np.float32(217.08788), np.float32(222.7173), np.float32(221.5541), np.float32(226.36443), np.float32(208.4051), np.float32(209.86996), np.float32(223.89748), np.float32(208.90399), np.float32(223.75047), np.float32(687.32465), np.float32(690.42786), np.float32(459.3462), np.float32(463.33438), np.float32(681.81287), np.float32(163.54222), np.float32(207.76018), np.float32(229.17902), np.float32(220.44852), np.float32(215.46939), np.float32(221.77222), np.float32(216.04443), np.float32(222.53857), np.float32(226.80202), np.float32(228.57788), np.float32(229.28563), np.float32(231.43526), np.float32(232.66074), np.float32(227.94562), np.float32(224.82246), np.float32(223.72177), np.float32(222.54842), np.float32(218.23944), np.float32(222.49716), np.float32(221.46881), np.float32(226.80644), np.float32(237.27382), np.float32(231.3087), np.float32(227.82846), np.float32(233.29059), np.float32(231.52826), np.float32(158.96178), np.float32(446.17975), np.float32(450.4145), np.float32(226.99062), np.float32(215.98643), np.float32(224.53973), np.float32(210.50264), np.float32(219.15598), np.float32(213.0182), np.float32(209.07037), np.float32(219.86758), np.float32(164.3973), np.float32(155.19946), np.float32(186.34991), np.float32(165.7892), np.float32(165.6614), np.float32(180.50261), np.float32(185.1005), np.float32(164.68057), np.float32(206.73659), np.float32(231.35776), np.float32(220.12706), np.float32(218.94371), np.float32(351.88412), np.float32(200.48871), np.float32(159.35707), np.float32(176.08862), np.float32(186.5147), np.float32(161.64162), np.float32(354.13037), np.float32(356.6727), np.float32(153.78534), np.float32(223.3814), np.float32(214.78294), np.float32(222.51546), np.float32(209.2121), np.float32(158.91043), np.float32(223.15181), np.float32(153.4136), np.float32(229.05553), np.float32(216.06795), np.float32(152.81375), np.float32(219.16629), np.float32(214.07469), np.float32(218.71465), np.float32(218.21393), np.float32(213.9129), np.float32(226.71584), np.float32(223.02628), np.float32(183.51965), np.float32(441.75375), np.float32(157.31906), np.float32(157.16634), np.float32(293.55344), np.float32(188.99023), np.float32(161.18254), np.float32(162.40648), np.float32(189.98589), np.float32(163.90851), np.float32(165.01436), np.float32(162.17552), np.float32(190.9601), np.float32(161.72699), np.float32(157.95665), np.float32(195.93634), np.float32(165.27963), np.float32(160.296), np.float32(184.75903), np.float32(444.47498), np.float32(161.09291), np.float32(153.49196), np.float32(189.1076), np.float32(438.1946), np.float32(440.27765), np.float32(441.81976), np.float32(182.91847), np.float32(156.29674), np.float32(159.13637), np.float32(185.2665), np.float32(445.08167), np.float32(335.32098), np.float32(354.2473), np.float32(282.73856), np.float32(305.47794), np.float32(277.89374), np.float32(286.5684), np.float32(357.13855), np.float32(280.00516), np.float32(300.41327), np.float32(291.0142), np.float32(287.30844), np.float32(299.3721), np.float32(155.56921), np.float32(291.82382), np.float32(441.30106), np.float32(283.71243), np.float32(296.77176), np.float32(293.26614), np.float32(293.08817), np.float32(153.34096), np.float32(175.70116), np.float32(196.27411), np.float32(241.51837), np.float32(206.95166), np.float32(159.38658), np.float32(166.24277), np.float32(231.1253), np.float32(164.00504), np.float32(154.92113), np.float32(196.07095), np.float32(441.93143), np.float32(155.52333), np.float32(161.20442), np.float32(191.3869), np.float32(157.55537), np.float32(163.76149), np.float32(181.36095), np.float32(880.3313), np.float32(154.20528), np.float32(352.06387), np.float32(222.80234), np.float32(440.7761), np.float32(159.28938), np.float32(441.4135), np.float32(176.47673), np.float32(158.35817), np.float32(436.94144), np.float32(441.40814), np.float32(212.65125), np.float32(353.43845), np.float32(159.25536), np.float32(188.48622), np.float32(442.4374), np.float32(156.05513), np.float32(355.51324), np.float32(356.1327), np.float32(440.8244), np.float32(438.70663), np.float32(442.5248), np.float32(183.58298), np.float32(158.91223), np.float32(287.47232), np.float32(183.12076), np.float32(153.18681), np.float32(285.72012), np.float32(153.6399), np.float32(281.36633), np.float32(266.9322), np.float32(161.08781), np.float32(299.6529), np.float32(193.37018), np.float32(153.56433), np.float32(160.89944), np.float32(163.27733), np.float32(164.82823), np.float32(161.88464), np.float32(165.90904), np.float32(165.14397), np.float32(160.919), np.float32(167.96722), np.float32(162.47914), np.float32(161.87732), np.float32(164.44644), np.float32(168.34384), np.float32(160.91083), np.float32(164.9195), np.float32(167.69112), np.float32(158.5546), np.float32(167.4849), np.float32(165.70988), np.float32(163.21959), np.float32(163.22916), np.float32(169.28197), np.float32(161.24684), np.float32(164.95203), np.float32(170.91528), np.float32(155.04407), np.float32(168.43698), np.float32(172.9806), np.float32(170.58212), np.float32(157.49472), np.float32(179.42027), np.float32(205.00116), np.float32(159.82962), np.float32(176.48007), np.float32(153.44215), np.float32(165.81058), np.float32(169.18819), np.float32(168.48595), np.float32(159.41084), np.float32(172.92337), np.float32(167.90462), np.float32(155.48972), np.float32(173.3524), np.float32(157.05713), np.float32(163.0703), np.float32(169.90437), np.float32(160.3204), np.float32(166.4187), np.float32(166.78438), np.float32(165.16397), np.float32(157.1704), np.float32(163.57666), np.float32(161.01382), np.float32(160.71268), np.float32(168.45062), np.float32(159.2896), np.float32(166.49852), np.float32(167.49501), np.float32(160.6504), np.float32(165.93463), np.float32(163.43108), np.float32(165.19603), np.float32(161.33224), np.float32(169.9882), np.float32(162.5258), np.float32(164.23193), np.float32(169.01602), np.float32(161.18672), np.float32(165.64975), np.float32(164.44131), np.float32(167.17831), np.float32(159.27077), np.float32(167.70996), np.float32(164.80896), np.float32(160.28304), np.float32(171.30818), np.float32(161.25534), np.float32(165.74635), np.float32(162.93878), np.float32(168.35387), np.float32(158.83075), np.float32(165.6396), np.float32(168.20311), np.float32(155.0117), np.float32(172.28648), np.float32(161.4939), np.float32(164.83762), np.float32(162.85951), np.float32(167.96432), np.float32(161.09314), np.float32(166.11226), np.float32(181.49664), np.float32(220.78705), np.float32(186.04814), np.float32(181.16534), np.float32(247.28131), np.float32(248.07822), np.float32(182.69441), np.float32(415.88528), np.float32(420.44662), np.float32(418.2484), np.float32(426.22702), np.float32(432.68094), np.float32(432.83194), np.float32(429.176), np.float32(422.8551), np.float32(407.37088), np.float32(404.6585), np.float32(405.83603), np.float32(402.26953), np.float32(403.79297), np.float32(399.84067), np.float32(400.70135), np.float32(397.48657), np.float32(399.9809), np.float32(400.57806), np.float32(402.70398), np.float32(412.69934), np.float32(416.1629), np.float32(416.1681), np.float32(420.36954), np.float32(424.99927), np.float32(430.5753), np.float32(433.22226), np.float32(430.26373), np.float32(429.02475), np.float32(429.44803), np.float32(430.09164), np.float32(429.6273), np.float32(432.0009), np.float32(435.2479), np.float32(434.90488), np.float32(436.0301), np.float32(439.66812), np.float32(440.6238), np.float32(440.4749), np.float32(439.96353), np.float32(441.08774), np.float32(442.2168), np.float32(442.03735), np.float32(444.38794), np.float32(444.51114), np.float32(442.40485), np.float32(441.88834), np.float32(439.0468), np.float32(439.20532), np.float32(438.42715), np.float32(438.0055), np.float32(440.63626), np.float32(440.651), np.float32(439.15598), np.float32(441.82812), np.float32(443.3424), np.float32(438.94928), np.float32(439.09537), np.float32(439.34903), np.float32(438.59772), np.float32(438.95352), np.float32(436.79858), np.float32(437.18332), np.float32(438.406), np.float32(438.43588), np.float32(438.4903), np.float32(440.81784), np.float32(439.71585), np.float32(440.0882), np.float32(440.08072), np.float32(438.76422), np.float32(438.43185), np.float32(439.6602), np.float32(439.67416), np.float32(439.45966), np.float32(439.9567), np.float32(438.83804), np.float32(438.31384), np.float32(438.0696), np.float32(437.42648), np.float32(436.56906), np.float32(438.646), np.float32(439.37842), np.float32(440.25635), np.float32(442.66852), np.float32(441.50287), np.float32(441.0752), np.float32(438.8662), np.float32(436.5273), np.float32(437.10287), np.float32(437.4033), np.float32(441.79025), np.float32(443.9945), np.float32(447.80255), np.float32(450.39944), np.float32(450.33017), np.float32(449.82095), np.float32(447.9159), np.float32(446.60245), np.float32(444.59665), np.float32(441.4956), np.float32(439.24353), np.float32(435.5794), np.float32(428.90652), np.float32(428.93674), np.float32(435.6557), np.float32(441.118), np.float32(445.84442), np.float32(454.00354), np.float32(456.22583), np.float32(450.46396), np.float32(449.19904), np.float32(446.50253), np.float32(443.31546), np.float32(439.3613), np.float32(435.25784), np.float32(429.3053), np.float32(426.9007), np.float32(426.2469), np.float32(431.27115), np.float32(438.39175), np.float32(442.15002), np.float32(448.79984), np.float32(450.75897), np.float32(449.07318), np.float32(447.82523), np.float32(447.8174), np.float32(445.99417), np.float32(442.17075), np.float32(438.17575), np.float32(434.48553), np.float32(431.51645), np.float32(434.44672), np.float32(439.58746), np.float32(441.35263), np.float32(443.91083), np.float32(445.53546), np.float32(444.65463), np.float32(443.86276), np.float32(441.247), np.float32(437.01157), np.float32(427.07568), np.float32(424.18768), np.float32(427.20746), np.float32(430.47195), np.float32(437.01456), np.float32(444.10135), np.float32(449.57877), np.float32(457.66437), np.float32(460.9602), np.float32(463.7357), np.float32(467.7003), np.float32(471.71188), np.float32(467.67737), np.float32(469.78677), np.float32(484.94598), np.float32(485.7136), np.float32(493.91754), np.float32(498.29156), np.float32(507.77646), np.float32(514.8006), np.float32(516.52356), np.float32(517.2801), np.float32(519.35535), np.float32(517.6469), np.float32(517.01776), np.float32(518.7945), np.float32(516.1664), np.float32(516.11255), np.float32(517.05347), np.float32(516.40466), np.float32(517.32654), np.float32(517.1834), np.float32(515.3393), np.float32(513.79596), np.float32(513.57733), np.float32(514.50726), np.float32(511.16837), np.float32(511.23563), np.float32(446.34662), np.float32(493.42633), np.float32(471.84827), np.float32(470.7854), np.float32(467.8522), np.float32(454.8083), np.float32(448.56924), np.float32(444.1404), np.float32(438.37387), np.float32(433.2275), np.float32(428.8369), np.float32(421.51093), np.float32(412.41278), np.float32(404.88382), np.float32(403.02014), np.float32(398.75714), np.float32(399.26987), np.float32(394.219), np.float32(394.45154), np.float32(391.144), np.float32(391.2782), np.float32(387.32626), np.float32(380.36816), np.float32(381.391), np.float32(191.08005), np.float32(170.66872), np.float32(169.08517), np.float32(225.10826), np.float32(383.48807), np.float32(385.43704), np.float32(387.45032), np.float32(169.97379), np.float32(164.21434), np.float32(168.53685), np.float32(160.72574), np.float32(390.06104), np.float32(385.47214), np.float32(382.48682), np.float32(387.59085), np.float32(386.9468), np.float32(388.7437), np.float32(389.3713), np.float32(389.7896), np.float32(389.03134), np.float32(386.5907), np.float32(385.73834), np.float32(386.86398), np.float32(389.92624), np.float32(387.07593), np.float32(386.65717), np.float32(388.57498), np.float32(389.83044), np.float32(392.04166), np.float32(389.80484), np.float32(392.4581), np.float32(391.98413), np.float32(399.63235), np.float32(215.62643), np.float32(215.98215), np.float32(218.69756), np.float32(219.68567), np.float32(217.92085), np.float32(212.6345), np.float32(217.9012), np.float32(215.59906), np.float32(216.39621), np.float32(220.39787), np.float32(221.40326), np.float32(215.20732), np.float32(215.15353), np.float32(212.50284), np.float32(217.92638), np.float32(217.35675), np.float32(220.0014), np.float32(230.54068), np.float32(209.6524), np.float32(177.67862), np.float32(169.43811), np.float32(159.1546), np.float32(166.2851), np.float32(161.45598), np.float32(163.42795), np.float32(166.82167), np.float32(161.02136), np.float32(167.77126), np.float32(160.78612), np.float32(163.13092), np.float32(164.3701), np.float32(159.6615), np.float32(167.72122), np.float32(155.61343), np.float32(165.111), np.float32(164.67754), np.float32(162.31448), np.float32(167.43826), np.float32(157.06511), np.float32(164.51796), np.float32(265.8408), np.float32(257.7697), np.float32(162.48982), np.float32(154.11995), np.float32(165.60526), np.float32(165.23027), np.float32(162.70819), np.float32(166.04266), np.float32(256.14026), np.float32(261.0024), np.float32(265.97), np.float32(260.52112), np.float32(261.08954), np.float32(259.70877), np.float32(261.09027), np.float32(254.16533), np.float32(244.28421), np.float32(206.8445), np.float32(222.65689), np.float32(166.70343), np.float32(157.24326), np.float32(773.34045), np.float32(773.4473), np.float32(216.19933), np.float32(229.28603), np.float32(219.73274), np.float32(272.76215), np.float32(258.9403), np.float32(263.4544), np.float32(183.85895), np.float32(179.30617), np.float32(330.8508), np.float32(168.9343), np.float32(162.47876), np.float32(162.44124), np.float32(1017.51373), np.float32(1021.47174), np.float32(1017.38104), np.float32(1010.76776), np.float32(998.5411), np.float32(650.67065), np.float32(639.2563), np.float32(637.05365), np.float32(621.2246), np.float32(624.1368), np.float32(629.84534), np.float32(305.11044), np.float32(298.705), np.float32(301.94214), np.float32(303.9809), np.float32(297.94046), np.float32(296.84128), np.float32(291.51013), np.float32(292.3269), np.float32(296.8067), np.float32(289.88632), np.float32(286.44373), np.float32(294.68625), np.float32(296.81714), np.float32(295.93604), np.float32(299.55945), np.float32(297.39133), np.float32(297.55328), np.float32(300.95746), np.float32(299.0633), np.float32(296.77603), np.float32(298.0268), np.float32(295.2634), np.float32(287.26874), np.float32(280.2885), np.float32(294.4356), np.float32(299.4008), np.float32(296.73254), np.float32(297.34134), np.float32(298.9139), np.float32(296.34973), np.float32(299.023), np.float32(300.8), np.float32(294.4862), np.float32(301.00687), np.float32(305.3831), np.float32(216.13202), np.float32(227.62819), np.float32(224.53719), np.float32(303.89478), np.float32(215.07983), np.float32(243.8238), np.float32(266.22552), np.float32(250.04976), np.float32(265.92014), np.float32(238.38258), np.float32(237.31924), np.float32(253.38754), np.float32(254.2894), np.float32(228.5643), np.float32(222.827), np.float32(206.10059), np.float32(220.9663), np.float32(222.00493), np.float32(322.62485), np.float32(306.2099), np.float32(300.5292), np.float32(303.88245), np.float32(301.4865), np.float32(588.93414), np.float32(590.96313), np.float32(588.05597), np.float32(295.92444), np.float32(298.4695), np.float32(295.6412), np.float32(290.56223), np.float32(232.79622), np.float32(217.71648), np.float32(214.23958), np.float32(219.017), np.float32(217.65054), np.float32(218.09366), np.float32(219.43275), np.float32(218.7145), np.float32(218.70529), np.float32(215.90253), np.float32(215.77444), np.float32(221.6381), np.float32(215.86731), np.float32(217.83302), np.float32(222.3294), np.float32(220.15569), np.float32(211.6758), np.float32(214.09026), np.float32(230.00876), np.float32(436.67294), np.float32(157.2644), np.float32(159.47531), np.float32(210.79549), np.float32(221.71472), np.float32(163.57458), np.float32(586.7696), np.float32(592.101), np.float32(595.32904), np.float32(890.29645), np.float32(889.74774), np.float32(587.87756), np.float32(586.7329), np.float32(584.8464), np.float32(584.1272), np.float32(585.21643), np.float32(586.35785), np.float32(586.72424), np.float32(588.4656), np.float32(593.7163), np.float32(598.97314), np.float32(600.1036), np.float32(600.44934), np.float32(600.3236), np.float32(600.56555), np.float32(890.72656), np.float32(890.42804), np.float32(888.4985), np.float32(579.9419), np.float32(581.3182), np.float32(579.29193), np.float32(566.0317), np.float32(571.3304), np.float32(584.0569), np.float32(586.76886), np.float32(589.94037), np.float32(594.7269), np.float32(602.4024), np.float32(280.4648), np.float32(296.19684), np.float32(301.7222), np.float32(297.7588), np.float32(283.71518), np.float32(300.42245), np.float32(301.59293), np.float32(300.30164), np.float32(302.2166), np.float32(306.031), np.float32(307.5439), np.float32(306.33945), np.float32(301.50598), np.float32(298.4417), np.float32(297.57233), np.float32(297.88867), np.float32(299.326), np.float32(298.4458), np.float32(300.34415), np.float32(302.62265), np.float32(303.9678), np.float32(325.89334), np.float32(304.46768), np.float32(301.63583), np.float32(298.77365), np.float32(295.1706), np.float32(291.95383), np.float32(290.61346), np.float32(293.7119), np.float32(296.41586), np.float32(297.32056), np.float32(291.95956), np.float32(286.6858), np.float32(302.56735), np.float32(298.54456), np.float32(287.5736), np.float32(285.79596), np.float32(201.28517), np.float32(231.29842), np.float32(231.09166), np.float32(229.12955), np.float32(176.33003), np.float32(245.79193), np.float32(249.54494), np.float32(256.93994), np.float32(259.97968), np.float32(256.195), np.float32(536.5705), np.float32(543.27924), np.float32(543.7801), np.float32(527.665), np.float32(513.3932), np.float32(509.90274), np.float32(750.29626), np.float32(738.37415), np.float32(726.4776), np.float32(475.68256), np.float32(698.28314), np.float32(682.86176), np.float32(220.51549), np.float32(222.7123), np.float32(214.70712), np.float32(217.99413), np.float32(208.65471), np.float32(216.78317), np.float32(218.73793), np.float32(217.3771), np.float32(218.57904), np.float32(230.6281), np.float32(208.16843), np.float32(228.53642), np.float32(210.96347), np.float32(216.99821), np.float32(215.688), np.float32(214.53891), np.float32(215.67827), np.float32(219.73897), np.float32(219.35895), np.float32(230.5781), np.float32(164.67584), np.float32(168.4641), np.float32(696.6566), np.float32(703.3435), np.float32(704.1237), np.float32(233.13647), np.float32(229.46086), np.float32(222.68372), np.float32(221.96315), np.float32(215.49243), np.float32(215.58923), np.float32(217.04431), np.float32(216.72792), np.float32(225.50677), np.float32(231.5639), np.float32(255.08405), np.float32(237.20282), np.float32(229.82346), np.float32(231.09903), np.float32(229.1155), np.float32(228.32173), np.float32(219.55814), np.float32(224.13567), np.float32(221.6435), np.float32(219.31317), np.float32(223.57922), np.float32(217.66443), np.float32(224.3246), np.float32(253.75887), np.float32(223.15317), np.float32(227.29695), np.float32(214.96034), np.float32(231.64156), np.float32(232.52988), np.float32(230.89847), np.float32(232.46327), np.float32(232.03851), np.float32(232.49817), np.float32(233.38828), np.float32(260.4896), np.float32(159.28665), np.float32(168.53644), np.float32(202.12587), np.float32(165.23962), np.float32(168.16925), np.float32(178.58249), np.float32(183.97401), np.float32(161.88574), np.float32(157.9859), np.float32(444.02078), np.float32(153.4587), np.float32(161.07574), np.float32(191.75285), np.float32(225.09572), np.float32(167.80132), np.float32(223.05057), np.float32(217.33507), np.float32(216.9143), np.float32(224.02295), np.float32(217.78366), np.float32(440.77838), np.float32(157.69757), np.float32(163.69513), np.float32(189.19438), np.float32(167.94458), np.float32(218.81276), np.float32(213.7861), np.float32(214.7088), np.float32(225.69029), np.float32(214.62244), np.float32(214.91156), np.float32(223.51158), np.float32(208.67406), np.float32(227.96765), np.float32(159.39697), np.float32(211.5863), np.float32(223.91116), np.float32(210.06853), np.float32(225.62756), np.float32(211.82503), np.float32(216.4732), np.float32(223.95882), np.float32(232.90526), np.float32(233.9334), np.float32(220.72925), np.float32(173.91841), np.float32(181.80803), np.float32(170.49568), np.float32(167.52597), np.float32(293.76758), np.float32(293.44897), np.float32(164.04872), np.float32(168.32452), np.float32(179.4203), np.float32(171.64613), np.float32(171.18639), np.float32(180.20872), np.float32(178.33067), np.float32(167.40964), np.float32(171.58128), np.float32(348.78064), np.float32(161.5571), np.float32(163.27791), np.float32(174.94409), np.float32(180.45386), np.float32(168.45251), np.float32(167.99265), np.float32(191.32584), np.float32(162.13916), np.float32(166.39078), np.float32(348.82797), np.float32(349.83133), np.float32(160.36455), np.float32(161.174), np.float32(439.9798), np.float32(177.3417), np.float32(158.90428), np.float32(349.6265), np.float32(354.29306), np.float32(443.12128), np.float32(217.6865), np.float32(438.79593), np.float32(351.8405), np.float32(354.77725), np.float32(439.54947), np.float32(208.23541), np.float32(440.00946), np.float32(352.488), np.float32(352.97064), np.float32(354.6617), np.float32(443.22006), np.float32(328.09265), np.float32(233.11436), np.float32(153.33311), np.float32(292.0021), np.float32(292.9139), np.float32(291.96524), np.float32(295.87006), np.float32(295.56717), np.float32(291.79294), np.float32(295.88843), np.float32(293.6461), np.float32(293.56357), np.float32(293.71027), np.float32(291.03702), np.float32(295.121), np.float32(156.6072), np.float32(293.51712), np.float32(292.79547), np.float32(290.47644), np.float32(291.52142), np.float32(294.24582), np.float32(296.49777), np.float32(153.0601), np.float32(290.44513), np.float32(442.23773), np.float32(153.77525), np.float32(442.3159), np.float32(440.97067), np.float32(439.8894), np.float32(442.33817), np.float32(440.96478), np.float32(442.74176), np.float32(154.00636), np.float32(439.76086), np.float32(443.9073), np.float32(157.77191), np.float32(440.3248), np.float32(443.3102), np.float32(438.03668), np.float32(441.4027), np.float32(441.1038), np.float32(441.1541), np.float32(155.28928), np.float32(161.45432), np.float32(186.29884), np.float32(292.2095), np.float32(158.41872), np.float32(288.6034), np.float32(440.38266), np.float32(300.83694), np.float32(440.21762), np.float32(212.00977), np.float32(185.70358), np.float32(169.10408), np.float32(168.81102), np.float32(181.01694), np.float32(171.13104), np.float32(170.13593), np.float32(171.3872), np.float32(185.93228), np.float32(171.01501), np.float32(169.5794), np.float32(186.98813), np.float32(172.7165), np.float32(172.08578), np.float32(173.27211), np.float32(181.9898), np.float32(167.42607), np.float32(172.29398), np.float32(171.79906), np.float32(174.52832), np.float32(165.49586), np.float32(187.223), np.float32(440.96405), np.float32(204.61713), np.float32(441.166), np.float32(211.7253), np.float32(441.98215), np.float32(440.27893), np.float32(440.5517), np.float32(442.32217), np.float32(440.66656), np.float32(440.7366), np.float32(441.8512), np.float32(440.6384), np.float32(440.92014), np.float32(441.2657), np.float32(218.30685), np.float32(441.31927), np.float32(440.75064), np.float32(441.58936), np.float32(441.3003), np.float32(439.55865), np.float32(442.6849), np.float32(440.80017), np.float32(216.69339), np.float32(218.011), np.float32(218.49321), np.float32(212.20169), np.float32(444.73047), np.float32(180.03365), np.float32(191.95229), np.float32(193.73457), np.float32(173.44888), np.float32(226.95537), np.float32(188.53773), np.float32(190.5631), np.float32(169.37376), np.float32(170.47397), np.float32(174.78888), np.float32(189.50253), np.float32(170.83058), np.float32(164.53886), np.float32(170.63986), np.float32(186.08066), np.float32(177.87532), np.float32(168.9326), np.float32(169.84142), np.float32(191.96133), np.float32(173.53381), np.float32(165.63846), np.float32(217.42363), np.float32(196.28528), np.float32(169.73543), np.float32(212.2586), np.float32(216.99805), np.float32(198.81984), np.float32(168.91248), np.float32(444.32874), np.float32(447.57187), np.float32(444.88773), np.float32(174.45102), np.float32(521.0051), np.float32(447.9478), np.float32(448.57388), np.float32(437.64807), np.float32(438.4228), np.float32(220.87257), np.float32(207.08548), np.float32(443.1319), np.float32(440.59402), np.float32(215.33531), np.float32(201.39543), np.float32(440.23312), np.float32(441.17413), np.float32(213.36269), np.float32(209.30403), np.float32(788.88196), np.float32(790.0673), np.float32(787.71185), np.float32(786.46155), np.float32(437.55292), np.float32(437.35065), np.float32(440.4038), np.float32(218.53587), np.float32(218.23155), np.float32(165.8184), np.float32(163.59567), np.float32(208.14331), np.float32(218.86305), np.float32(208.1303), np.float32(627.12823), np.float32(636.7887), np.float32(432.33826), np.float32(437.2317), np.float32(440.40552), np.float32(659.8463), np.float32(657.7768), np.float32(660.087), np.float32(658.83636), np.float32(660.2971), np.float32(661.55927), np.float32(662.48413), np.float32(438.75095), np.float32(426.63715), np.float32(444.49677), np.float32(224.37372), np.float32(225.92831), np.float32(224.83371), np.float32(226.67786), np.float32(229.81892), np.float32(465.3389), np.float32(475.75964), np.float32(488.99252), np.float32(494.5538), np.float32(489.9945), np.float32(492.5798), np.float32(491.98798), np.float32(232.13696), np.float32(491.08194), np.float32(490.33264), np.float32(232.7066), np.float32(489.31882), np.float32(487.8687), np.float32(487.56488), np.float32(234.81696), np.float32(241.84618), np.float32(484.91876), np.float32(485.62146), np.float32(230.63684), np.float32(472.4649), np.float32(467.90112), np.float32(455.22522), np.float32(440.79315), np.float32(437.58215), np.float32(435.63907), np.float32(654.8681), np.float32(656.9071), np.float32(658.424), np.float32(659.0796), np.float32(660.2352), np.float32(660.96027), np.float32(661.9694), np.float32(662.401), np.float32(661.10565), np.float32(660.40173), np.float32(659.3705), np.float32(660.4046), np.float32(663.39667), np.float32(169.69049), np.float32(198.01884), np.float32(212.8546), np.float32(442.4478), np.float32(436.01074), np.float32(442.1854), np.float32(497.23096), np.float32(497.26022), np.float32(491.8602), np.float32(487.26517), np.float32(476.23108), np.float32(481.47202), np.float32(491.21216), np.float32(221.59741), np.float32(218.41722), np.float32(212.89595), np.float32(215.94073), np.float32(436.75327), np.float32(445.82684), np.float32(204.82227), np.float32(442.54294), np.float32(441.61444), np.float32(442.6732), np.float32(426.96674), np.float32(201.66284), np.float32(415.6088), np.float32(412.9475), np.float32(411.5005), np.float32(423.39835), np.float32(431.8231), np.float32(436.84842), np.float32(437.96536), np.float32(438.90936), np.float32(444.25284), np.float32(662.5336), np.float32(663.6918), np.float32(663.8193), np.float32(659.02094), np.float32(658.969), np.float32(656.37976), np.float32(657.05975), np.float32(656.3058), np.float32(666.6537), np.float32(441.85782), np.float32(437.22742), np.float32(427.6799), np.float32(432.9325), np.float32(216.25941), np.float32(185.90395), np.float32(170.02625), np.float32(182.27023), np.float32(187.10959), np.float32(168.92079), np.float32(232.54517), np.float32(495.31427), np.float32(493.28845), np.float32(483.63403), np.float32(239.44951), np.float32(248.3452), np.float32(252.13464), np.float32(236.9406), np.float32(242.13263), np.float32(236.97926), np.float32(242.29846), np.float32(236.03102), np.float32(235.46729), np.float32(238.30081), np.float32(225.86984), np.float32(222.0667), np.float32(226.67773), np.float32(445.6247), np.float32(442.6048), np.float32(441.83932), np.float32(650.71094), np.float32(649.33746), np.float32(646.90106), np.float32(653.6153), np.float32(653.7896), np.float32(656.48193), np.float32(658.3063), np.float32(659.7146), np.float32(659.7755), np.float32(659.38574), np.float32(655.9873), np.float32(657.9809), np.float32(162.31355), np.float32(652.09796), np.float32(659.4885), np.float32(217.26472), np.float32(438.44202), np.float32(436.08414), np.float32(434.71713), np.float32(225.1338), np.float32(227.70253), np.float32(232.37218), np.float32(237.6904), np.float32(160.08908), np.float32(235.19225), np.float32(232.5537), np.float32(224.43234), np.float32(220.54292), np.float32(209.28516), np.float32(222.64468), np.float32(210.0476), np.float32(221.35503), np.float32(223.58812), np.float32(221.13008), np.float32(221.04176), np.float32(215.03769), np.float32(222.67665), np.float32(702.98553), np.float32(708.6527), np.float32(718.3053), np.float32(724.6016), np.float32(728.9684), np.float32(731.3676), np.float32(732.64355), np.float32(737.4235), np.float32(739.4288), np.float32(738.4156), np.float32(615.0523), np.float32(629.69336), np.float32(513.2806), np.float32(509.64606), np.float32(506.3932), np.float32(755.5601), np.float32(760.5507), np.float32(757.1632), np.float32(749.3233), np.float32(749.2367), np.float32(752.8864), np.float32(764.33295), np.float32(771.66), np.float32(1555.1592), np.float32(1561.9095), np.float32(157.85698), np.float32(166.01048), np.float32(182.23718), np.float32(170.09209), np.float32(170.23044), np.float32(183.98671), np.float32(170.36827), np.float32(162.11195), np.float32(790.0773), np.float32(788.4416), np.float32(789.15424), np.float32(785.80066), np.float32(781.13544), np.float32(779.30774), np.float32(777.0554), np.float32(775.6855), np.float32(781.59094), np.float32(791.70776), np.float32(780.31573), np.float32(788.3763), np.float32(792.4961), np.float32(790.52747), np.float32(168.42833), np.float32(171.53947), np.float32(169.85965), np.float32(168.36794), np.float32(254.00931), np.float32(263.93594), np.float32(257.39532), np.float32(247.92006), np.float32(258.1565), np.float32(260.43484), np.float32(259.17523), np.float32(255.92789), np.float32(263.0746), np.float32(250.0355), np.float32(236.19876), np.float32(215.85872), np.float32(302.636), np.float32(305.07007), np.float32(304.18317), np.float32(303.564), np.float32(298.63147), np.float32(295.5971), np.float32(285.74078), np.float32(281.63803), np.float32(288.08395), np.float32(562.52783), np.float32(556.913), np.float32(545.9448), np.float32(545.66), np.float32(255.77467), np.float32(258.6958), np.float32(788.979), np.float32(783.50037), np.float32(781.38556), np.float32(777.6692), np.float32(775.8626), np.float32(778.14923), np.float32(776.97565), np.float32(781.9603), np.float32(783.4469), np.float32(781.5753), np.float32(778.4224), np.float32(778.0908), np.float32(781.2141), np.float32(1044.8768), np.float32(1042.0419), np.float32(520.9294), np.float32(520.0459), np.float32(516.0525), np.float32(515.22125), np.float32(517.5487), np.float32(517.5712), np.float32(520.8433), np.float32(263.37228), np.float32(266.0546), np.float32(271.0263), np.float32(283.54272), np.float32(493.70972), np.float32(496.1824), np.float32(275.6038), np.float32(500.53033), np.float32(499.64792), np.float32(500.26477), np.float32(290.08585), np.float32(291.0119), np.float32(282.02905), np.float32(289.77557), np.float32(296.60968), np.float32(283.90732), np.float32(300.37262), np.float32(292.4052), np.float32(297.5524), np.float32(286.99164), np.float32(231.8283), np.float32(261.2892), np.float32(562.41003), np.float32(555.47845), np.float32(540.30884), np.float32(521.7681), np.float32(777.2016), np.float32(779.2255), np.float32(778.627), np.float32(781.35535), np.float32(788.4271), np.float32(792.2381), np.float32(794.02075), np.float32(796.1408), np.float32(795.92303), np.float32(530.4435), np.float32(529.009), np.float32(523.11774), np.float32(523.2993), np.float32(519.475), np.float32(512.7706), np.float32(251.48975), np.float32(261.79053), np.float32(250.65271), np.float32(259.6837), np.float32(269.767), np.float32(263.66373), np.float32(267.0275), np.float32(261.78818), np.float32(255.05664), np.float32(254.36087), np.float32(249.80429), np.float32(244.60571), np.float32(256.6004), np.float32(265.6847), np.float32(281.1594), np.float32(295.73642), np.float32(300.119), np.float32(288.02332), np.float32(284.6572), np.float32(295.97086), np.float32(291.9629), np.float32(295.83508), np.float32(288.27786), np.float32(281.207), np.float32(290.51782), np.float32(280.73737), np.float32(287.33978), np.float32(283.6924), np.float32(267.45016), np.float32(239.23785), np.float32(257.53683), np.float32(257.31018), np.float32(256.28033), np.float32(519.1796), np.float32(517.2303), np.float32(252.25612), np.float32(253.34874), np.float32(261.6954), np.float32(261.46588), np.float32(257.37424), np.float32(260.1997), np.float32(261.94), np.float32(255.23848), np.float32(263.7147), np.float32(255.49332), np.float32(264.86716), np.float32(256.56522), np.float32(251.44185), np.float32(170.16695), np.float32(179.49431), np.float32(169.97925), np.float32(176.0363), np.float32(173.51935), np.float32(295.259), np.float32(295.32132), np.float32(298.94556), np.float32(283.1985), np.float32(304.6939), np.float32(274.268), np.float32(275.16858), np.float32(296.97992), np.float32(277.09454), np.float32(173.2958), np.float32(173.81448), np.float32(171.7711), np.float32(174.19792), np.float32(171.60938), np.float32(305.94003), np.float32(298.36145), np.float32(178.76003), np.float32(172.66985), np.float32(181.20178), np.float32(174.06738), np.float32(173.59872), np.float32(171.69403), np.float32(171.44104), np.float32(176.75795), np.float32(173.83078), np.float32(178.46165), np.float32(170.78859), np.float32(182.02252), np.float32(168.9241), np.float32(182.9199), np.float32(175.35745), np.float32(185.77055), np.float32(167.87921), np.float32(171.90327), np.float32(165.08643), np.float32(170.13191), np.float32(167.24585), np.float32(215.78864), np.float32(224.16452), np.float32(216.44377), np.float32(220.28598), np.float32(213.40437), np.float32(219.53683), np.float32(212.9134), np.float32(221.24295), np.float32(217.39485), np.float32(218.42973), np.float32(217.6927), np.float32(210.35973), np.float32(219.43462), np.float32(298.53537), np.float32(303.84814), np.float32(300.60892), np.float32(297.0074), np.float32(586.6564), np.float32(585.1483), np.float32(581.59106), np.float32(575.62744), np.float32(576.5299), np.float32(574.4591), np.float32(574.4009), np.float32(576.4928), np.float32(581.7438), np.float32(587.81085), np.float32(599.0226), np.float32(610.0136), np.float32(622.748), np.float32(640.59436), np.float32(647.6631), np.float32(652.7718), np.float32(656.68256), np.float32(654.4479), np.float32(653.30774), np.float32(653.54877), np.float32(651.42566), np.float32(649.8598), np.float32(652.45844), np.float32(655.998), np.float32(660.6779), np.float32(675.3265), np.float32(682.7336), np.float32(690.67004), np.float32(698.29346), np.float32(698.6333), np.float32(695.9941), np.float32(688.46234), np.float32(672.2954), np.float32(654.0733), np.float32(324.894), np.float32(325.39716), np.float32(326.0256), np.float32(327.03952), np.float32(326.49176), np.float32(329.85574), np.float32(334.46857), np.float32(339.6717), np.float32(351.02368), np.float32(356.58112), np.float32(350.49353), np.float32(346.9676), np.float32(346.97086), np.float32(339.33118), np.float32(329.30215), np.float32(218.99944), np.float32(217.84383), np.float32(325.66278), np.float32(327.48956), np.float32(221.88576), np.float32(216.30673), np.float32(217.57196), np.float32(222.7089), np.float32(339.76086), np.float32(339.03784), np.float32(339.21268), np.float32(336.32538), np.float32(335.01212), np.float32(329.39807), np.float32(327.36664), np.float32(320.99683), np.float32(323.03305), np.float32(307.276), np.float32(215.39499), np.float32(222.00575), np.float32(279.63428), np.float32(274.73557), np.float32(282.21542), np.float32(218.03596), np.float32(223.83366), np.float32(210.44261), np.float32(221.9241), np.float32(222.60057), np.float32(226.36357), np.float32(217.7572), np.float32(210.94069), np.float32(231.5357), np.float32(167.68932), np.float32(164.54594), np.float32(163.38617), np.float32(166.93979), np.float32(162.7189), np.float32(165.2655), np.float32(165.17842), np.float32(164.31296), np.float32(647.30536), np.float32(646.2783), np.float32(648.7059), np.float32(647.04175), np.float32(650.5501), np.float32(653.9955), np.float32(656.21454), np.float32(658.74316), np.float32(664.7495), np.float32(673.1858), np.float32(679.4645), np.float32(683.2687), np.float32(688.3349), np.float32(688.8244), np.float32(689.1557), np.float32(686.12866), np.float32(674.1689), np.float32(658.4964), np.float32(647.38324), np.float32(635.4699), np.float32(637.18536), np.float32(641.68427), np.float32(653.41943), np.float32(661.1257), np.float32(668.4136), np.float32(674.8728), np.float32(682.0402), np.float32(686.999), np.float32(693.9975), np.float32(696.42993), np.float32(342.5352), np.float32(682.319), np.float32(665.1903), np.float32(657.9263), np.float32(653.48645), np.float32(322.33844), np.float32(327.21143), np.float32(323.35553), np.float32(326.55692), np.float32(216.24464), np.float32(658.90533), np.float32(669.37384), np.float32(676.3472), np.float32(679.11456), np.float32(336.1608), np.float32(334.87488), np.float32(335.12537), np.float32(340.02734), np.float32(339.44446), np.float32(341.31915), np.float32(332.39066), np.float32(330.678), np.float32(253.51064), np.float32(324.88745), np.float32(330.24527), np.float32(331.96893), np.float32(329.7014), np.float32(248.22662), np.float32(264.3129), np.float32(253.53638), np.float32(334.6901), np.float32(332.11365), np.float32(332.59283), np.float32(219.22017), np.float32(227.3802), np.float32(329.0761), np.float32(236.79306), np.float32(329.1255), np.float32(230.3729), np.float32(326.8619), np.float32(220.32315), np.float32(221.01826), np.float32(213.16983), np.float32(239.74886), np.float32(214.11426), np.float32(225.69524), np.float32(217.38248), np.float32(216.90535), np.float32(219.47087), np.float32(215.73076), np.float32(222.86894), np.float32(214.75716), np.float32(224.88559), np.float32(217.85391), np.float32(219.6553), np.float32(215.97032), np.float32(217.24428), np.float32(222.12645), np.float32(220.17958), np.float32(173.6089), np.float32(163.80135), np.float32(165.69391), np.float32(159.76984), np.float32(329.89484), np.float32(327.14456), np.float32(329.6365), np.float32(327.5905), np.float32(328.6859), np.float32(329.00745), np.float32(328.1956), np.float32(327.5383), np.float32(327.73035), np.float32(329.63553), np.float32(328.8285), np.float32(329.6921), np.float32(326.90683), np.float32(328.76117), np.float32(330.5307), np.float32(328.97012), np.float32(329.29874), np.float32(328.80054), np.float32(328.3702), np.float32(329.11337), np.float32(328.6685), np.float32(329.49707), np.float32(329.02573), np.float32(329.96085), np.float32(330.29303), np.float32(328.3093), np.float32(329.64047), np.float32(328.925), np.float32(328.87012), np.float32(326.2937), np.float32(329.13672), np.float32(221.78763), np.float32(329.56772), np.float32(329.06216), np.float32(217.42381), np.float32(213.77982), np.float32(221.96236), np.float32(214.87547), np.float32(221.92538), np.float32(215.72375), np.float32(219.69595), np.float32(219.17395), np.float32(203.93066), np.float32(165.13031), np.float32(155.8096), np.float32(227.15346), np.float32(212.87987), np.float32(332.55234), np.float32(328.85144), np.float32(329.4551), np.float32(332.26523), np.float32(329.47516), np.float32(328.0091), np.float32(328.6186), np.float32(329.65506), np.float32(328.76163), np.float32(329.43222), np.float32(328.38455), np.float32(328.95422), np.float32(329.9483), np.float32(329.45032), np.float32(328.5888), np.float32(329.03183), np.float32(328.21878), np.float32(330.05966), np.float32(328.12622), np.float32(328.11182), np.float32(330.26694), np.float32(328.60397), np.float32(329.83658), np.float32(328.20114), np.float32(328.82138), np.float32(329.52817), np.float32(328.25717), np.float32(330.1447), np.float32(327.54602), np.float32(329.8622), np.float32(328.88626), np.float32(329.0037), np.float32(329.40182), np.float32(327.27225), np.float32(330.40048), np.float32(164.96077), np.float32(162.07332), np.float32(166.90851), np.float32(162.7817), np.float32(167.18948), np.float32(164.80966), np.float32(162.34642), np.float32(165.62032), np.float32(164.44836), np.float32(165.61476), np.float32(163.81001), np.float32(164.56294), np.float32(165.15569), np.float32(164.5353), np.float32(244.52092), np.float32(318.64108), np.float32(260.02155), np.float32(330.28433), np.float32(330.29688), np.float32(258.16275), np.float32(329.19318), np.float32(327.01797), np.float32(329.72833), np.float32(329.25443), np.float32(328.02704), np.float32(330.16202), np.float32(327.11502), np.float32(329.53162), np.float32(329.08295), np.float32(328.08957), np.float32(329.60883), np.float32(327.37012), np.float32(328.64545), np.float32(328.91437), np.float32(329.8905), np.float32(328.1605), np.float32(328.84), np.float32(328.84274), np.float32(328.01645), np.float32(330.62738), np.float32(328.4843), np.float32(330.96335), np.float32(328.36877), np.float32(327.5198), np.float32(329.9857), np.float32(326.9336), np.float32(331.45697), np.float32(328.1627), np.float32(328.8487), np.float32(329.39496), np.float32(328.18652), np.float32(330.27545), np.float32(232.07675), np.float32(212.82582), np.float32(221.6658), np.float32(216.4846), np.float32(214.17348), np.float32(220.56357), np.float32(212.82983), np.float32(231.58307), np.float32(213.94127), np.float32(221.11603), np.float32(217.51482), np.float32(223.07988), np.float32(239.87657), np.float32(267.7942), np.float32(259.80743), np.float32(330.0895), np.float32(328.98465), np.float32(331.8183), np.float32(228.67725), np.float32(217.50513), np.float32(218.41669), np.float32(326.45184), np.float32(329.88797), np.float32(234.39061), np.float32(324.67557), np.float32(224.99294), np.float32(214.11082), np.float32(221.27083), np.float32(216.52701), np.float32(219.4722), np.float32(327.47815), np.float32(330.02295), np.float32(328.59818), np.float32(328.2206), np.float32(226.74387), np.float32(326.791), np.float32(218.99957), np.float32(326.91272), np.float32(328.0257), np.float32(221.75905), np.float32(210.53206), np.float32(221.36584), np.float32(517.5381), np.float32(337.0702), np.float32(332.3151), np.float32(326.97598), np.float32(223.94), np.float32(220.63774), np.float32(232.85204), np.float32(212.73788), np.float32(332.92508), np.float32(168.68283), np.float32(208.91956), np.float32(226.4837), np.float32(217.24222), np.float32(226.22754), np.float32(219.14757), np.float32(214.47287), np.float32(225.34322), np.float32(216.03494), np.float32(229.62222), np.float32(272.44595), np.float32(205.8745), np.float32(215.96106), np.float32(168.21361), np.float32(225.75967), np.float32(203.48845), np.float32(164.5996), np.float32(204.67816), np.float32(185.41293), np.float32(176.31885), np.float32(209.97292), np.float32(419.26654), np.float32(208.17262), np.float32(157.16733), np.float32(217.28275), np.float32(218.34106), np.float32(221.45604), np.float32(221.492), np.float32(217.95132), np.float32(225.46396), np.float32(219.5855), np.float32(218.09515), np.float32(222.06064), np.float32(218.26122), np.float32(216.54445), np.float32(214.74129), np.float32(214.97334), np.float32(215.73093), np.float32(208.97624), np.float32(219.37724), np.float32(209.1563), np.float32(214.25328), np.float32(216.18703), np.float32(217.04239), np.float32(226.13448), np.float32(227.42107), np.float32(229.54239), np.float32(226.12444), np.float32(488.7669), np.float32(491.56842), np.float32(491.04562), np.float32(491.65045), np.float32(491.59375), np.float32(489.4424), np.float32(245.90984), np.float32(248.19438), np.float32(255.18845), np.float32(245.8466), np.float32(244.33974), np.float32(252.10443), np.float32(241.19354), np.float32(237.32826), np.float32(247.61006), np.float32(237.54619), np.float32(238.69685), np.float32(229.34488), np.float32(678.94525), np.float32(668.79126), np.float32(662.095), np.float32(662.2862), np.float32(662.36127), np.float32(660.27954), np.float32(658.91345), np.float32(658.65063), np.float32(659.3038), np.float32(658.6602), np.float32(658.1832), np.float32(657.3764), np.float32(655.4312), np.float32(653.6312), np.float32(655.8785), np.float32(208.07974), np.float32(159.19879), np.float32(661.5377), np.float32(224.65141), np.float32(238.90994), np.float32(345.42706), np.float32(208.59105), np.float32(227.04012), np.float32(236.7545), np.float32(490.37708), np.float32(489.77133), np.float32(488.7592), np.float32(490.1172), np.float32(492.99084), np.float32(489.60312), np.float32(233.61404), np.float32(229.80504), np.float32(484.0844), np.float32(489.14386), np.float32(490.3744), np.float32(482.809), np.float32(493.47836), np.float32(161.06306), np.float32(351.2653), np.float32(348.92053), np.float32(153.05069), np.float32(881.8516), np.float32(234.71533), np.float32(490.6301), np.float32(348.79095), np.float32(200.83852), np.float32(213.8919), np.float32(159.29547), np.float32(231.41922), np.float32(220.66191), np.float32(215.11092), np.float32(216.84137), np.float32(220.11154), np.float32(213.41956), np.float32(220.99307), np.float32(214.07674), np.float32(222.21419), np.float32(444.14368), np.float32(443.3984), np.float32(443.51044), np.float32(350.9685), np.float32(352.24487), np.float32(160.9111), np.float32(185.72267), np.float32(184.26973), np.float32(514.68805), np.float32(505.63715), np.float32(494.9739), np.float32(480.6315), np.float32(484.23257), np.float32(494.22122), np.float32(493.65475), np.float32(490.7987), np.float32(486.36636), np.float32(478.82437), np.float32(468.02762), np.float32(451.47205), np.float32(440.85364), np.float32(446.3066), np.float32(435.22543), np.float32(443.6737), np.float32(435.22104), np.float32(660.9019), np.float32(660.2701), np.float32(654.9111), np.float32(657.2395), np.float32(656.3928), np.float32(662.16345), np.float32(882.89545), np.float32(874.55664), np.float32(875.251), np.float32(878.54016), np.float32(880.1702), np.float32(878.36206), np.float32(706.7283), np.float32(699.711), np.float32(862.3899), np.float32(189.11938), np.float32(163.8606), np.float32(155.27235), np.float32(672.9269), np.float32(671.54694), np.float32(686.62775), np.float32(686.507), np.float32(686.52783), np.float32(682.02673), np.float32(673.0042), np.float32(655.3841), np.float32(637.91534), np.float32(621.2193), np.float32(610.43475), np.float32(606.08453), np.float32(608.12714), np.float32(616.0281), np.float32(437.77438), np.float32(445.34796), np.float32(447.84277), np.float32(449.1375), np.float32(451.0869), np.float32(445.335), np.float32(436.86536), np.float32(422.94736), np.float32(412.42123), np.float32(423.8436), np.float32(422.785), np.float32(440.54105), np.float32(447.5396), np.float32(431.23392), np.float32(416.11673), np.float32(214.40942), np.float32(155.25175), np.float32(454.61823), np.float32(465.35144), np.float32(475.5371), np.float32(484.23398), np.float32(490.05853), np.float32(492.9213), np.float32(497.36508), np.float32(500.76648), np.float32(239.31656), np.float32(155.89076), np.float32(215.72638), np.float32(209.43289), np.float32(360.9663), np.float32(367.26605), np.float32(159.29436), np.float32(192.98923), np.float32(208.61867), np.float32(161.92386), np.float32(160.63976), np.float32(347.1628), np.float32(361.18976), np.float32(169.66484), np.float32(178.91908), np.float32(182.53593), np.float32(171.30005), np.float32(610.98834), np.float32(636.91907), np.float32(652.05597), np.float32(157.41568), np.float32(685.37683), np.float32(701.75397), np.float32(707.4551), np.float32(718.2917), np.float32(748.4877), np.float32(747.44476), np.float32(755.78687), np.float32(752.55707), np.float32(747.79675), np.float32(753.297), np.float32(757.91235), np.float32(763.0551), np.float32(769.9343), np.float32(775.1861), np.float32(777.31964), np.float32(780.6368), np.float32(782.9627), np.float32(517.53107), np.float32(510.25073), np.float32(255.39792), np.float32(235.41829), np.float32(219.6737), np.float32(226.27925), np.float32(348.93085), np.float32(348.23474), np.float32(349.39462), np.float32(253.84042), np.float32(257.9073), np.float32(264.94604), np.float32(271.68457), np.float32(565.1073), np.float32(288.44296), np.float32(585.47876), np.float32(514.2666), np.float32(511.06775), np.float32(286.26382), np.float32(278.05975), np.float32(286.68793), np.float32(272.72583), np.float32(278.13858), np.float32(288.2298), np.float32(278.47046), np.float32(284.88422), np.float32(273.70923), np.float32(262.75076), np.float32(241.89198), np.float32(532.5964), np.float32(522.851), np.float32(519.91455), np.float32(771.8634), np.float32(772.99023), np.float32(776.45026), np.float32(777.65314), np.float32(781.1527), np.float32(782.40515), np.float32(780.1018), np.float32(521.56665), np.float32(520.6871), np.float32(520.17413), np.float32(515.4194), np.float32(511.92627), np.float32(447.86725), np.float32(443.21814), np.float32(256.18463), np.float32(261.02533), np.float32(252.55849), np.float32(251.81886), np.float32(257.5745), np.float32(251.345), np.float32(285.90717), np.float32(289.6208), np.float32(175.53636), np.float32(175.18828), np.float32(173.28606), np.float32(190.08324), np.float32(173.03755), np.float32(182.61603), np.float32(170.29124), np.float32(179.71567), np.float32(171.5454), np.float32(176.60335), np.float32(171.72859), np.float32(174.31749), np.float32(174.21672), np.float32(173.96065), np.float32(173.62021), np.float32(173.47829), np.float32(178.69254), np.float32(248.3192), np.float32(253.10222), np.float32(530.6821), np.float32(533.63153), np.float32(1063.8064), np.float32(794.60474), np.float32(794.55804), np.float32(793.1467), np.float32(791.8392), np.float32(790.9494), np.float32(788.91034), np.float32(780.81824), np.float32(774.5077), np.float32(773.42535), np.float32(772.8357), np.float32(511.03186), np.float32(167.22804), np.float32(261.3416), np.float32(261.05783), np.float32(271.4971), np.float32(267.13138), np.float32(563.0067), np.float32(569.7178), np.float32(578.7091), np.float32(584.50037), np.float32(586.14264), np.float32(586.1769), np.float32(584.29083), np.float32(579.76855), np.float32(567.1901), np.float32(260.39548), np.float32(166.5015), np.float32(188.34596), np.float32(156.77377), np.float32(233.48026), np.float32(230.94234), np.float32(189.50551), np.float32(176.95912), np.float32(513.69934), np.float32(523.8758), np.float32(525.3461), np.float32(784.9661), np.float32(784.99976), np.float32(788.2929), np.float32(788.53204), np.float32(789.6849), np.float32(791.0162), np.float32(790.1191), np.float32(785.0062), np.float32(780.7282), np.float32(521.1098), np.float32(522.5781), np.float32(521.0718), np.float32(519.6771), np.float32(516.9749), np.float32(521.6022), np.float32(262.125), np.float32(254.6894), np.float32(438.38498), np.float32(441.30255), np.float32(519.26685), np.float32(263.4399), np.float32(261.81485), np.float32(441.00217), np.float32(442.54987), np.float32(523.3549), np.float32(521.18445), np.float32(523.8385), np.float32(523.73737), np.float32(352.27002), np.float32(281.2244), np.float32(286.35788), np.float32(297.59357), np.float32(297.71323), np.float32(292.52158), np.float32(293.76578), np.float32(290.0271), np.float32(286.9833), np.float32(288.17484), np.float32(583.6882), np.float32(283.16568), np.float32(587.2336), np.float32(290.43408), np.float32(285.75735), np.float32(302.10687), np.float32(289.7261), np.float32(301.5653), np.float32(284.8365), np.float32(248.86185), np.float32(157.12517), np.float32(245.92567), np.float32(161.82957), np.float32(179.83478), np.float32(169.75275), np.float32(170.22311), np.float32(178.26952), np.float32(168.82745), np.float32(175.59543), np.float32(169.64836), np.float32(190.72418), np.float32(168.8833), np.float32(182.38863), np.float32(178.45834), np.float32(248.21562), np.float32(219.04825), np.float32(185.26686), np.float32(182.71971), np.float32(190.23804), np.float32(256.2961), np.float32(236.27354), np.float32(242.72525), np.float32(246.50075), np.float32(248.521), np.float32(241.45012), np.float32(251.65779), np.float32(185.83492), np.float32(238.90106), np.float32(246.35738), np.float32(244.9745), np.float32(323.73218), np.float32(327.5124), np.float32(329.38437), np.float32(663.0517), np.float32(665.30066), np.float32(664.51056), np.float32(661.1455), np.float32(660.20984), np.float32(656.9965), np.float32(654.22955), np.float32(656.8216), np.float32(661.00714), np.float32(663.887), np.float32(664.58453), np.float32(660.6156), np.float32(654.764), np.float32(649.7955), np.float32(652.8919), np.float32(654.0934), np.float32(654.6846), np.float32(656.5461), np.float32(659.7646), np.float32(663.0357), np.float32(670.27277), np.float32(677.562), np.float32(690.66254), np.float32(697.8056), np.float32(696.39746), np.float32(700.71564), np.float32(697.64355), np.float32(691.9559), np.float32(684.113), np.float32(668.98944), np.float32(654.33856), np.float32(320.0605), np.float32(324.01718), np.float32(249.56285), np.float32(329.24756), np.float32(251.9439), np.float32(344.78195), np.float32(349.37338), np.float32(351.97018), np.float32(353.42154), np.float32(349.9108), np.float32(344.6786), np.float32(343.2894), np.float32(330.64926), np.float32(246.96169), np.float32(251.42548), np.float32(247.28764), np.float32(245.18263), np.float32(244.26657), np.float32(249.06512), np.float32(249.18892), np.float32(257.8043), np.float32(258.51102), np.float32(264.3372), np.float32(262.3626), np.float32(255.60182), np.float32(253.35922), np.float32(254.01273), np.float32(242.68057), np.float32(248.77887), np.float32(243.82054), np.float32(249.35947), np.float32(244.8643), np.float32(256.43726), np.float32(257.16263), np.float32(262.2497), np.float32(261.8456), np.float32(256.2988), np.float32(257.17755), np.float32(255.32382), np.float32(246.18478), np.float32(235.69218), np.float32(228.79132), np.float32(236.8343), np.float32(216.70612), np.float32(189.50713), np.float32(191.69174), np.float32(192.5975), np.float32(188.02896), np.float32(213.45688), np.float32(191.20743), np.float32(223.47202), np.float32(227.13454), np.float32(493.27356), np.float32(496.29224), np.float32(248.42403), np.float32(243.18301), np.float32(235.08766), np.float32(245.80302), np.float32(242.696), np.float32(324.2079), np.float32(236.68953), np.float32(248.05368), np.float32(651.3624), np.float32(650.14624), np.float32(650.58685), np.float32(653.9283), np.float32(656.5672), np.float32(659.5467), np.float32(666.20355), np.float32(670.864), np.float32(675.82635), np.float32(682.2051), np.float32(343.47775), np.float32(682.93567), np.float32(677.892), np.float32(335.35333), np.float32(332.8774), np.float32(328.92346), np.float32(328.28464), np.float32(327.37573), np.float32(325.72565), np.float32(329.8131), np.float32(331.22937), np.float32(333.87628), np.float32(337.00983), np.float32(341.78632), np.float32(345.60486), np.float32(346.97958), np.float32(348.8215), np.float32(348.8526), np.float32(687.9241), np.float32(343.30438), np.float32(325.28064), np.float32(324.5249), np.float32(327.8457), np.float32(321.69302), np.float32(325.6755), np.float32(333.7125), np.float32(324.9077), np.float32(303.96622), np.float32(291.2889), np.float32(295.72845), np.float32(294.80792), np.float32(298.38577), np.float32(292.73322), np.float32(339.93756), np.float32(351.89417), np.float32(343.79163), np.float32(492.69104), np.float32(297.40167), np.float32(493.2691), np.float32(304.40555), np.float32(493.0583), np.float32(492.68393), np.float32(493.12112), np.float32(493.8321), np.float32(491.88992), np.float32(495.19965), np.float32(494.02264), np.float32(491.51096), np.float32(319.8308), np.float32(331.0948), np.float32(328.52774), np.float32(326.5268), np.float32(494.1589), np.float32(315.82584), np.float32(491.81564), np.float32(494.26794), np.float32(327.65134), np.float32(342.48254), np.float32(334.4995), np.float32(350.68753), np.float32(195.25732), np.float32(197.30144), np.float32(188.63329), np.float32(258.7201), np.float32(348.12466), np.float32(200.42435), np.float32(189.86703), np.float32(193.48347), np.float32(195.02977), np.float32(196.28668), np.float32(194.03967), np.float32(189.92676), np.float32(194.96953), np.float32(198.65137), np.float32(197.22252), np.float32(201.90532), np.float32(202.35179), np.float32(189.4606), np.float32(193.15866), np.float32(193.9458), np.float32(194.94414), np.float32(194.3042), np.float32(195.25362), np.float32(191.99713), np.float32(195.93694), np.float32(191.5627), np.float32(198.28967), np.float32(192.25389), np.float32(196.41614), np.float32(194.38681), np.float32(198.01903), np.float32(192.86784), np.float32(192.869), np.float32(193.50964), np.float32(194.54129), np.float32(196.56052), np.float32(190.74562), np.float32(196.79587), np.float32(193.93068), np.float32(198.03033), np.float32(189.18658), np.float32(197.6325), np.float32(192.47507), np.float32(197.64452), np.float32(189.90715), np.float32(195.69557), np.float32(195.51665), np.float32(195.43942), np.float32(190.64339), np.float32(194.04745), np.float32(200.92194), np.float32(192.30035), np.float32(191.40543), np.float32(191.21086), np.float32(196.09656), np.float32(193.60643), np.float32(192.84143), np.float32(190.83485), np.float32(193.62105), np.float32(196.84245), np.float32(195.30388), np.float32(191.39825), np.float32(196.03264), np.float32(199.76141), np.float32(195.04668), np.float32(169.13574), np.float32(169.63414), np.float32(188.58249), np.float32(188.53386), np.float32(491.8296), np.float32(492.68176), np.float32(492.8512), np.float32(194.19261), np.float32(193.04893), np.float32(192.84067), np.float32(194.83952), np.float32(493.40823), np.float32(196.45299), np.float32(190.61792), np.float32(197.97223), np.float32(190.2093), np.float32(195.97565), np.float32(189.58722), np.float32(197.8687), np.float32(189.34888), np.float32(197.4142), np.float32(192.84422), np.float32(195.01425), np.float32(193.09148), np.float32(190.96327), np.float32(194.23068), np.float32(193.15074), np.float32(196.23674), np.float32(187.73744), np.float32(196.31697), np.float32(192.22922), np.float32(197.5019), np.float32(191.64957), np.float32(194.70325), np.float32(183.72662), np.float32(186.67854), np.float32(208.42613), np.float32(192.89793), np.float32(189.0655), np.float32(195.13226), np.float32(193.21422), np.float32(193.17055), np.float32(186.71591), np.float32(196.72253), np.float32(194.30542), np.float32(247.39304), np.float32(187.9635), np.float32(199.23842), np.float32(491.61356), np.float32(191.27853), np.float32(181.87407), np.float32(492.9581), np.float32(277.65097), np.float32(172.22838), np.float32(186.97025), np.float32(194.92287), np.float32(195.34473), np.float32(193.17773), np.float32(194.39056), np.float32(185.43114), np.float32(265.73685), np.float32(264.40112), np.float32(203.5954), np.float32(282.35892), np.float32(193.81941), np.float32(258.67316), np.float32(193.885), np.float32(169.05058), np.float32(192.01224), np.float32(277.23572), np.float32(510.09512), np.float32(261.6254), np.float32(205.69221), np.float32(501.24136), np.float32(291.1236), np.float32(259.47333), np.float32(249.30176), np.float32(259.9705), np.float32(221.21901), np.float32(506.42218), np.float32(237.97661), np.float32(255.14427), np.float32(246.96068), np.float32(255.84492), np.float32(297.70483), np.float32(214.52313), np.float32(256.70715), np.float32(249.63292), np.float32(251.94247), np.float32(229.22868), np.float32(258.24564), np.float32(298.3607), np.float32(259.2977), np.float32(239.81468), np.float32(256.3667), np.float32(233.0867), np.float32(247.49808), np.float32(230.17073), np.float32(256.51022), np.float32(236.0015), np.float32(237.41791), np.float32(156.09058), np.float32(264.14642), np.float32(255.71132), np.float32(255.14912), np.float32(276.11227), np.float32(299.83072), np.float32(299.10324), np.float32(280.67664), np.float32(252.81595), np.float32(263.19196), np.float32(282.74927), np.float32(302.32895), np.float32(292.70544), np.float32(153.08344), np.float32(207.70055), np.float32(182.94019), np.float32(289.7969), np.float32(185.97282), np.float32(195.43967), np.float32(185.018), np.float32(205.88011), np.float32(189.96527), np.float32(191.62868), np.float32(185.43996), np.float32(181.53441), np.float32(179.65817), np.float32(177.85301), np.float32(521.3524), np.float32(295.5505), np.float32(203.62732), np.float32(254.77496), np.float32(200.61555), np.float32(252.36897), np.float32(211.42659), np.float32(162.58603), np.float32(210.27177), np.float32(183.98543), np.float32(193.17769), np.float32(166.6156), np.float32(206.82718), np.float32(183.08987), np.float32(198.82004), np.float32(181.2383), np.float32(207.26514), np.float32(190.59471), np.float32(178.74873), np.float32(189.68726), np.float32(197.65811), np.float32(191.35823), np.float32(185.66698), np.float32(186.28133), np.float32(320.08743), np.float32(332.43948), np.float32(186.18488), np.float32(191.24382), np.float32(330.1026), np.float32(328.84564), np.float32(329.6127), np.float32(326.81613), np.float32(330.32816), np.float32(328.46118), np.float32(327.38834), np.float32(329.53876), np.float32(326.48294), np.float32(328.47263), np.float32(329.33313), np.float32(325.9677), np.float32(330.13892), np.float32(327.90744), np.float32(326.79282), np.float32(330.74255), np.float32(326.58688), np.float32(329.80753), np.float32(193.86725), np.float32(193.96848), np.float32(193.80563), np.float32(192.09868), np.float32(192.70963), np.float32(193.13269), np.float32(609.706), np.float32(617.8491), np.float32(631.10535), np.float32(638.58856), np.float32(635.5471), np.float32(639.46375), np.float32(645.16223), np.float32(651.4596), np.float32(654.7151), np.float32(657.6002), np.float32(661.2), np.float32(663.2469), np.float32(665.7881), np.float32(667.44995), np.float32(670.48773), np.float32(669.4343), np.float32(664.81287), np.float32(662.7047), np.float32(662.5903), np.float32(662.67926), np.float32(1325.6676), np.float32(195.22578), np.float32(194.10764), np.float32(1668.3496), np.float32(1673.5613), np.float32(1682.0221), np.float32(1681.4664), np.float32(1682.5863), np.float32(332.7876), np.float32(336.7365), np.float32(710.8531), np.float32(725.53406), np.float32(1861.4531), np.float32(1906.1823), np.float32(783.3991), np.float32(793.91766), np.float32(796.78204), np.float32(796.0152), np.float32(1575.3346), np.float32(1570.0824), np.float32(1568.2039), np.float32(1566.1708), np.float32(1562.5966), np.float32(1558.4614), np.float32(1553.5587), np.float32(1554.504), np.float32(1559.8492), np.float32(1561.9089), np.float32(392.7904), np.float32(1968.1201), np.float32(1974.7882), np.float32(1982.3887), np.float32(1984.2148), np.float32(1983.9232), np.float32(395.69586), np.float32(404.58978), np.float32(476.34113), np.float32(481.99158), np.float32(466.85553), np.float32(328.16998), np.float32(332.21295), np.float32(263.38687), np.float32(258.61606), np.float32(258.49277), np.float32(260.45047), np.float32(260.24042), np.float32(262.13858), np.float32(262.48932), np.float32(259.79895), np.float32(259.10043), np.float32(261.2668), np.float32(381.73065), np.float32(334.6973), np.float32(332.65637), np.float32(331.53677), np.float32(327.39886), np.float32(347.48785), np.float32(374.3637), np.float32(386.0485), np.float32(395.2595), np.float32(1574.32), np.float32(1577.1672), np.float32(793.00385), np.float32(794.1908), np.float32(795.1343), np.float32(1189.8407), np.float32(1179.7792), np.float32(1175.5455), np.float32(1175.1895), np.float32(1175.5782), np.float32(1178.1422), np.float32(1188.7432), np.float32(1197.2852), np.float32(1207.444), np.float32(1213.1107), np.float32(1218.666), np.float32(1227.8469), np.float32(1217.7059), np.float32(1196.1279), np.float32(771.1285), np.float32(760.3687), np.float32(757.7872), np.float32(765.2028), np.float32(774.69666), np.float32(789.2955), np.float32(796.9809), np.float32(799.3566), np.float32(798.10077), np.float32(794.4157), np.float32(1580.4656), np.float32(1563.6372), np.float32(1546.3007), np.float32(1530.7751), np.float32(1533.6449), np.float32(1546.8676), np.float32(1556.0895), np.float32(1567.1263), np.float32(772.10864), np.float32(967.6552), np.float32(982.13055), np.float32(980.72424), np.float32(966.92957), np.float32(920.6987), np.float32(859.5365), np.float32(821.9229), np.float32(1048.0918), np.float32(1036.824), np.float32(1032.676), np.float32(1019.32935), np.float32(1007.7838), np.float32(1003.6202), np.float32(998.9977), np.float32(994.22144), np.float32(989.33936), np.float32(985.7685), np.float32(984.77203), np.float32(984.98096), np.float32(985.1836), np.float32(983.9851), np.float32(982.12714), np.float32(981.14276), np.float32(1645.0807), np.float32(1649.1243), np.float32(1647.9332), np.float32(631.468), np.float32(629.74304), np.float32(257.574), np.float32(262.49463), np.float32(256.72748), np.float32(262.83035), np.float32(635.4188), np.float32(622.54065), np.float32(607.9885), np.float32(272.392), np.float32(259.26974), np.float32(255.54762), np.float32(260.58856), np.float32(264.45056), np.float32(263.81558), np.float32(258.84778), np.float32(260.49286), np.float32(260.02243), np.float32(259.60443), np.float32(261.38278), np.float32(261.33572), np.float32(259.10294), np.float32(261.22107), np.float32(259.66086), np.float32(259.8493), np.float32(260.5406), np.float32(259.94202), np.float32(252.40405), np.float32(329.8362), np.float32(349.9737), np.float32(583.1985), np.float32(302.6327), np.float32(600.7211), np.float32(294.33923), np.float32(302.5717), np.float32(293.49103), np.float32(294.2442), np.float32(296.69452), np.float32(584.87195), np.float32(587.0705), np.float32(589.9001), np.float32(296.96088), np.float32(299.15063), np.float32(297.67615), np.float32(297.19562), np.float32(295.93076), np.float32(296.93762), np.float32(292.86755), np.float32(291.28894), np.float32(287.6302), np.float32(279.47073), np.float32(345.1836), np.float32(272.09747), np.float32(269.20526), np.float32(521.27527), np.float32(523.1899), np.float32(524.3968), np.float32(523.2746), np.float32(515.87946), np.float32(228.03905), np.float32(224.69235), np.float32(298.33572), np.float32(292.87637), np.float32(292.59274), np.float32(294.74805), np.float32(296.9287), np.float32(294.23422), np.float32(294.58163), np.float32(299.3291), np.float32(294.86118), np.float32(297.5112), np.float32(296.57007), np.float32(296.808), np.float32(295.20297), np.float32(293.63376), np.float32(297.50943), np.float32(297.27066), np.float32(297.32315), np.float32(298.36398), np.float32(742.9287), np.float32(768.61255), np.float32(778.15826), np.float32(774.55396), np.float32(771.95593), np.float32(765.9985), np.float32(762.48267), np.float32(770.0166), np.float32(781.42267), np.float32(795.5499), np.float32(812.8947), np.float32(833.1532), np.float32(864.25275), np.float32(886.91815), np.float32(901.2024), np.float32(908.73773), np.float32(909.96436), np.float32(905.1849), np.float32(895.77203), np.float32(888.28204), np.float32(875.9365), np.float32(866.3999), np.float32(859.42456), np.float32(852.45166), np.float32(840.9498), np.float32(842.1232), np.float32(815.3004), np.float32(792.09033), np.float32(506.54932), np.float32(737.12836), np.float32(229.96889), np.float32(222.56131), np.float32(216.31906), np.float32(215.8362), np.float32(217.86998), np.float32(219.70288), np.float32(219.41988), np.float32(217.40991), np.float32(218.07819), np.float32(218.1562), np.float32(217.2384), np.float32(218.87732), np.float32(219.58182), np.float32(218.60902), np.float32(218.19977), np.float32(219.2611), np.float32(218.39937), np.float32(214.75816), np.float32(211.57597), np.float32(215.76465), np.float32(430.71875), np.float32(431.69717), np.float32(438.67175), np.float32(441.98465), np.float32(444.18903), np.float32(443.01456), np.float32(443.451), np.float32(443.82565), np.float32(441.2064), np.float32(440.22327), np.float32(217.77177), np.float32(218.0957), np.float32(218.47884), np.float32(218.43756), np.float32(220.83644), np.float32(221.46535), np.float32(222.5757), np.float32(224.22313), np.float32(223.62158), np.float32(221.42725), np.float32(220.81569), np.float32(217.65425), np.float32(215.74083), np.float32(215.85165), np.float32(353.7706), np.float32(352.7747), np.float32(352.19), np.float32(343.7376), np.float32(347.2858), np.float32(353.29953), np.float32(350.14865), np.float32(352.65417), np.float32(292.81863), np.float32(350.40643), np.float32(354.26318), np.float32(351.62384), np.float32(352.75833), np.float32(295.249), np.float32(288.74228), np.float32(353.54868), np.float32(351.7544), np.float32(353.2786), np.float32(292.45636), np.float32(288.59854), np.float32(285.84833), np.float32(350.21), np.float32(352.98596), np.float32(353.11832), np.float32(347.12885), np.float32(288.97092), np.float32(336.73346), np.float32(344.8255), np.float32(347.3605), np.float32(349.61813), np.float32(352.28333), np.float32(348.75174), np.float32(350.8395), np.float32(350.19058), np.float32(348.3591), np.float32(351.11478), np.float32(344.38434), np.float32(351.65308), np.float32(350.44073), np.float32(351.64972), np.float32(349.3485), np.float32(343.63727), np.float32(351.40955), np.float32(351.41544), np.float32(352.20895), np.float32(344.16226), np.float32(298.3672), np.float32(348.81302), np.float32(350.7754), np.float32(352.03992), np.float32(346.52768), np.float32(351.03815), np.float32(346.91583), np.float32(348.16995), np.float32(350.41327), np.float32(346.2766), np.float32(350.64148), np.float32(348.3397), np.float32(467.48206), np.float32(479.4874), np.float32(503.99915), np.float32(521.30994), np.float32(532.283), np.float32(537.74915), np.float32(804.3624), np.float32(795.5118), np.float32(783.21906), np.float32(776.6207), np.float32(1289.7484), np.float32(1292.7972), np.float32(788.2719), np.float32(797.8239), np.float32(809.39325), np.float32(819.91), np.float32(563.00195), np.float32(574.0924), np.float32(582.69696), np.float32(585.8853), np.float32(298.94366), np.float32(325.01752), np.float32(550.36554), np.float32(785.9174), np.float32(767.5764), np.float32(325.8042), np.float32(323.21075), np.float32(239.12637), np.float32(320.99976), np.float32(262.24326), np.float32(325.60934), np.float32(329.66803), np.float32(327.17776), np.float32(330.05518), np.float32(326.86157), np.float32(329.65814), np.float32(326.8829), np.float32(330.2616), np.float32(328.86023), np.float32(328.40778), np.float32(328.6581), np.float32(245.89958), np.float32(328.7198), np.float32(329.7518), np.float32(329.64886), np.float32(327.31573), np.float32(328.6563), np.float32(329.08768), np.float32(329.0928), np.float32(329.4567), np.float32(329.66245), np.float32(328.0213), np.float32(225.94257), np.float32(263.26767), np.float32(255.01657), np.float32(535.31744), np.float32(532.4235), np.float32(522.8839), np.float32(515.9845), np.float32(514.299), np.float32(514.39844), np.float32(516.9294), np.float32(517.0891), np.float32(516.74), np.float32(256.15912), np.float32(266.30746), np.float32(259.64722), np.float32(263.51785), np.float32(255.57912), np.float32(260.59628), np.float32(494.77524), np.float32(232.13376), np.float32(235.37541), np.float32(231.1722), np.float32(442.64487), np.float32(225.10643), np.float32(216.39633), np.float32(222.60321), np.float32(215.7707), np.float32(221.8215), np.float32(442.1985), np.float32(445.32535), np.float32(443.36212), np.float32(443.3191), np.float32(437.9046), np.float32(426.93817), np.float32(225.48425), np.float32(223.14735), np.float32(216.00392), np.float32(213.92477), np.float32(208.54971), np.float32(218.83742), np.float32(217.53731), np.float32(224.82771), np.float32(217.39177), np.float32(222.2293), np.float32(396.18494), np.float32(394.45505), np.float32(391.7578), np.float32(393.47592), np.float32(395.21365), np.float32(399.70233), np.float32(400.36914), np.float32(402.2138), np.float32(401.44934), np.float32(399.80215), np.float32(401.29614), np.float32(397.63483), np.float32(394.31158), np.float32(389.25494), np.float32(385.15503), np.float32(381.91724), np.float32(377.4877), np.float32(380.86417), np.float32(372.75677), np.float32(216.35109), np.float32(219.14246), np.float32(216.77577), np.float32(226.10675), np.float32(222.57397), np.float32(327.52155), np.float32(327.88773), np.float32(331.7962), np.float32(330.99966), np.float32(609.4684), np.float32(621.5903), np.float32(619.72974), np.float32(329.4024), np.float32(330.15704), np.float32(327.1608), np.float32(501.22934), np.float32(513.16565), np.float32(520.3673), np.float32(521.9304), np.float32(522.1452), np.float32(523.9011), np.float32(521.7075), np.float32(520.72424), np.float32(519.6382), np.float32(518.56946), np.float32(517.8653), np.float32(518.37915), np.float32(520.34955), np.float32(520.576), np.float32(520.8719), np.float32(522.96765), np.float32(522.7461), np.float32(522.3415), np.float32(521.6959), np.float32(520.62317), np.float32(518.09784), np.float32(516.8361), np.float32(517.71594), np.float32(517.8647), np.float32(258.50018), np.float32(257.5696), np.float32(250.7805), np.float32(257.89352), np.float32(514.57654), np.float32(516.1482), np.float32(517.49524), np.float32(522.0801), np.float32(531.21265), np.float32(539.057), np.float32(561.85175), np.float32(566.72894), np.float32(583.75446), np.float32(590.8234), np.float32(293.75372), np.float32(234.16502), np.float32(278.29227), np.float32(306.4519), np.float32(569.50757), np.float32(571.82477), np.float32(276.31326), np.float32(301.12704), np.float32(328.90558), np.float32(280.90598), np.float32(273.23895), np.float32(270.48425), np.float32(260.24194), np.float32(261.69965), np.float32(259.03406), np.float32(260.7525), np.float32(257.1809), np.float32(254.23808), np.float32(259.36786), np.float32(255.72261), np.float32(261.11203), np.float32(259.6581), np.float32(260.97858), np.float32(261.1027), np.float32(259.96512), np.float32(266.18945), np.float32(260.51248), np.float32(265.74985), np.float32(261.5818), np.float32(266.8566), np.float32(259.05475), np.float32(264.86935), np.float32(255.16904), np.float32(273.42032), np.float32(546.11743), np.float32(561.7497), np.float32(565.4817), np.float32(573.505), np.float32(583.613), np.float32(589.2655), np.float32(595.15643), np.float32(605.8187), np.float32(608.2763), np.float32(612.40094), np.float32(625.20764), np.float32(641.752), np.float32(646.28174), np.float32(652.8769), np.float32(639.81665), np.float32(618.1166), np.float32(608.1431), np.float32(593.3783), np.float32(585.4051), np.float32(578.83563), np.float32(580.96826), np.float32(584.82837), np.float32(587.55896), np.float32(589.1324), np.float32(590.46185), np.float32(591.563), np.float32(595.67914), np.float32(606.69135), np.float32(1201.1305), np.float32(599.4844), np.float32(601.16266), np.float32(1205.4591), np.float32(167.36082), np.float32(182.20064), np.float32(167.58504), np.float32(177.54814), np.float32(164.12456), np.float32(978.182), np.float32(973.1896), np.float32(966.65295), np.float32(174.49753), np.float32(169.75085), np.float32(173.09695), np.float32(167.13708), np.float32(297.20096), np.float32(166.08308), np.float32(176.72244), np.float32(165.89348), np.float32(306.38846), np.float32(333.7517), np.float32(340.84857), np.float32(1001.4532), np.float32(997.8752), np.float32(333.70743), np.float32(333.74255), np.float32(303.30313), np.float32(308.27875), np.float32(345.92084), np.float32(269.36594), np.float32(265.8956), np.float32(347.76465), np.float32(349.31824), np.float32(344.67804), np.float32(351.80237), np.float32(344.92026), np.float32(351.22522), np.float32(354.62033), np.float32(348.47855), np.float32(347.03467), np.float32(262.9744), np.float32(258.83948), np.float32(344.2537), np.float32(352.57196), np.float32(344.42725), np.float32(350.6488), np.float32(350.8374), np.float32(348.73535), np.float32(350.56674), np.float32(348.03702), np.float32(349.70386), np.float32(350.95612), np.float32(352.00027), np.float32(348.394), np.float32(347.26138), np.float32(348.75308), np.float32(350.58777), np.float32(348.12643), np.float32(347.88126), np.float32(349.28177), np.float32(350.74405), np.float32(351.8606), np.float32(166.70285), np.float32(349.83072), np.float32(348.49152), np.float32(351.3057), np.float32(347.5359), np.float32(168.013), np.float32(178.80368), np.float32(167.27644), np.float32(179.94171), np.float32(167.1915), np.float32(183.2174), np.float32(351.5419), np.float32(349.30984), np.float32(262.6678), np.float32(170.2805), np.float32(349.43408), np.float32(349.55573), np.float32(347.4691), np.float32(351.70325), np.float32(347.57004), np.float32(350.6747), np.float32(349.09988), np.float32(350.98657), np.float32(257.0181), np.float32(260.96362), np.float32(258.0652), np.float32(356.63022), np.float32(354.74814), np.float32(350.5665), np.float32(348.30786), np.float32(349.10507), np.float32(354.4267), np.float32(208.10957), np.float32(232.84428), np.float32(203.6414), np.float32(349.1119), np.float32(348.32184), np.float32(349.74338), np.float32(348.51382), np.float32(351.439), np.float32(348.9551), np.float32(348.435), np.float32(350.56796), np.float32(349.3788), np.float32(350.37198), np.float32(348.71652), np.float32(349.28796), np.float32(350.3992), np.float32(350.8119), np.float32(349.17755), np.float32(349.51114), np.float32(349.21997), np.float32(351.10132), np.float32(347.87723), np.float32(348.79068), np.float32(350.08926), np.float32(349.94202), np.float32(349.3616), np.float32(349.0592), np.float32(349.97675), np.float32(349.4999), np.float32(350.3234), np.float32(349.34433), np.float32(349.7311), np.float32(347.07306), np.float32(351.3289), np.float32(350.99176), np.float32(349.22812), np.float32(348.1085), np.float32(350.6033), np.float32(348.3466), np.float32(347.57922), np.float32(347.888), np.float32(350.38333), np.float32(349.32578), np.float32(348.29428), np.float32(348.7294), np.float32(342.8662), np.float32(349.6964), np.float32(349.11957), np.float32(349.98767), np.float32(349.87103), np.float32(348.9648), np.float32(255.29437), np.float32(350.96463), np.float32(351.1855), np.float32(348.9278), np.float32(349.48907), np.float32(347.57452), np.float32(350.57184), np.float32(349.36975), np.float32(350.63055), np.float32(348.86887), np.float32(349.44025), np.float32(348.14017), np.float32(348.8418), np.float32(350.67032), np.float32(368.6748), np.float32(393.92987), np.float32(375.4643), np.float32(389.2054), np.float32(395.2642), np.float32(394.47806), np.float32(397.41888), np.float32(390.32578), np.float32(406.73282), np.float32(265.29037), np.float32(267.43582), np.float32(266.11774), np.float32(267.68442), np.float32(1966.6116), np.float32(1965.3164), np.float32(544.3811), np.float32(539.94147), np.float32(533.64655), np.float32(527.12506), np.float32(528.52905), np.float32(526.50073), np.float32(526.0952), np.float32(528.1503), np.float32(523.88525), np.float32(520.95215), np.float32(520.6869), np.float32(522.1124), np.float32(523.36975), np.float32(773.2437), np.float32(255.68706), np.float32(241.02655), np.float32(723.8826), np.float32(704.2688), np.float32(678.67896), np.float32(659.9354), np.float32(655.5116), np.float32(653.16626), np.float32(648.3674), np.float32(328.3236), np.float32(325.15045), np.float32(327.8629), np.float32(327.70627), np.float32(327.70273), np.float32(328.89966), np.float32(327.55573), np.float32(330.1491), np.float32(329.36478), np.float32(327.67145), np.float32(187.53423), np.float32(190.07535), np.float32(196.5643), np.float32(193.4523), np.float32(196.49307), np.float32(203.08676), np.float32(206.22643), np.float32(212.02994), np.float32(440.80527), np.float32(439.6007), np.float32(439.6731), np.float32(430.9638), np.float32(190.25478), np.float32(673.54425), np.float32(674.2269), np.float32(678.3051), np.float32(685.13916), np.float32(318.41904), np.float32(192.8876), np.float32(191.97688), np.float32(196.10521), np.float32(196.53128), np.float32(196.93428), np.float32(192.36148), np.float32(191.07455), np.float32(194.13332), np.float32(194.88892), np.float32(189.5483), np.float32(195.06248), np.float32(199.31857), np.float32(193.80927), np.float32(196.31647), np.float32(194.23593), np.float32(184.73083), np.float32(258.23853), np.float32(673.1857), np.float32(677.8614), np.float32(2081.7878), np.float32(2096.1318), np.float32(334.23666), np.float32(261.65674), np.float32(261.1941), np.float32(2147.432), np.float32(264.22485), np.float32(268.65933), np.float32(273.20435), np.float32(280.09558), np.float32(279.5265), np.float32(288.58685), np.float32(279.05075), np.float32(274.2696), np.float32(261.41998), np.float32(255.99524), np.float32(256.5524), np.float32(257.61185), np.float32(262.2016), np.float32(270.581), np.float32(275.44464), np.float32(1982.5277), np.float32(564.6144), np.float32(561.834), np.float32(558.3582), np.float32(800.85364), np.float32(795.3123), np.float32(781.7168), np.float32(759.0129), np.float32(757.518), np.float32(769.0097), np.float32(774.4477), np.float32(534.4522), np.float32(394.89352), np.float32(393.27444), np.float32(798.0603), np.float32(797.4755), np.float32(394.82266), np.float32(526.20325), np.float32(518.0812), np.float32(511.53043), np.float32(497.97958), np.float32(484.98193), np.float32(482.09222), np.float32(774.94104), np.float32(778.7156), np.float32(777.5996), np.float32(774.1529), np.float32(1567.6626), np.float32(1590.7808), np.float32(1614.9412), np.float32(854.76086), np.float32(888.995), np.float32(900.6283), np.float32(914.42816), np.float32(916.0257), np.float32(918.3416), np.float32(918.15454), np.float32(904.9616), np.float32(896.4726), np.float32(896.01654), np.float32(898.20056), np.float32(585.73413), np.float32(577.35046), np.float32(575.48096), np.float32(577.3918), np.float32(323.6103), np.float32(328.05804), np.float32(329.0272), np.float32(327.87997), np.float32(328.37006), np.float32(328.01205), np.float32(336.09674), np.float32(352.2163), np.float32(520.1673), np.float32(659.5401), np.float32(659.4674), np.float32(663.31555), np.float32(210.92734), np.float32(439.18015), np.float32(435.04138), np.float32(207.67375), np.float32(196.40143), np.float32(193.92183), np.float32(195.20909), np.float32(191.42609), np.float32(192.98125), np.float32(197.20811), np.float32(195.46658), np.float32(192.42824), np.float32(193.31313), np.float32(193.11589), np.float32(194.3709), np.float32(194.99069), np.float32(261.53568), np.float32(263.06863), np.float32(403.91177), np.float32(430.6839), np.float32(440.28937), np.float32(432.98825), np.float32(417.44406), np.float32(396.408), np.float32(706.7203), np.float32(689.1353), np.float32(681.5394), np.float32(662.0119), np.float32(657.16956), np.float32(656.3141), np.float32(327.12015), np.float32(655.6947), np.float32(658.2997), np.float32(658.5444), np.float32(656.9694), np.float32(652.9616), np.float32(195.29855), np.float32(328.8118), np.float32(326.36142), np.float32(653.7558), np.float32(652.33356), np.float32(651.0192), np.float32(644.2849), np.float32(197.00954), np.float32(608.4918), np.float32(601.2048), np.float32(593.0273), np.float32(587.99347), np.float32(583.435), np.float32(581.9974), np.float32(583.66986), np.float32(581.9345), np.float32(190.58482), np.float32(191.82382), np.float32(328.1728), np.float32(327.2046), np.float32(332.8134), np.float32(190.54134), np.float32(189.3067), np.float32(194.0774), np.float32(197.86746), np.float32(191.82494), np.float32(194.13615), np.float32(195.80351), np.float32(194.66498), np.float32(193.60323), np.float32(195.28435), np.float32(190.18256), np.float32(190.42847), np.float32(442.63354), np.float32(439.85513), np.float32(282.5475), np.float32(300.3286), np.float32(299.55902), np.float32(287.57422), np.float32(304.81494), np.float32(294.06573), np.float32(288.24115), np.float32(296.26987), np.float32(294.2026), np.float32(288.66803), np.float32(305.03156), np.float32(592.92694), np.float32(594.1014), np.float32(593.2477), np.float32(593.5305), np.float32(594.6732), np.float32(282.12796), np.float32(289.0514), np.float32(300.31122), np.float32(288.53003), np.float32(301.86865), np.float32(297.2135), np.float32(289.59296), np.float32(295.5129), np.float32(302.3925), np.float32(519.22235), np.float32(515.28595), np.float32(505.83167), np.float32(496.81555), np.float32(493.6737), np.float32(232.13158), np.float32(226.56207), np.float32(349.08817), np.float32(349.7102), np.float32(349.70486), np.float32(291.2471), np.float32(289.20282), np.float32(289.99112), np.float32(290.5066), np.float32(353.4473), np.float32(296.3098), np.float32(295.05164), np.float32(295.237), np.float32(291.92365), np.float32(295.1385), np.float32(296.00043), np.float32(291.30463), np.float32(289.48077), np.float32(296.54758), np.float32(287.48148), np.float32(293.25037), np.float32(295.55554), np.float32(794.63245), np.float32(796.65814), np.float32(795.80237), np.float32(792.70636), np.float32(786.9499), np.float32(785.73364), np.float32(790.7772), np.float32(797.43524), np.float32(803.2279), np.float32(810.6411), np.float32(821.96814), np.float32(846.1372), np.float32(864.0532), np.float32(872.0095), np.float32(887.4468), np.float32(884.93774), np.float32(880.3988), np.float32(885.43384), np.float32(885.5957), np.float32(885.783), np.float32(882.8256), np.float32(883.4592), np.float32(154.92564), np.float32(351.6042), np.float32(561.95514), np.float32(555.12054), np.float32(540.2338), np.float32(519.964), np.float32(343.74576), np.float32(352.50613), np.float32(351.44168), np.float32(346.32913), np.float32(344.26718), np.float32(354.97253), np.float32(350.73605), np.float32(298.62106), np.float32(300.15668), np.float32(295.63907), np.float32(292.46753), np.float32(294.06442), np.float32(294.15176), np.float32(298.51242), np.float32(295.1741), np.float32(291.72162), np.float32(286.26822), np.float32(296.40613), np.float32(292.908), np.float32(290.37314), np.float32(291.1157), np.float32(293.7272), np.float32(295.93506), np.float32(293.80786), np.float32(294.32523), np.float32(218.00986), np.float32(438.69025), np.float32(443.7765), np.float32(444.83093), np.float32(441.76694), np.float32(438.8672), np.float32(437.84995), np.float32(436.7521), np.float32(437.80286), np.float32(441.88858), np.float32(446.71793), np.float32(227.99472), np.float32(231.43146), np.float32(471.56485), np.float32(473.10632), np.float32(237.43216), np.float32(234.48953), np.float32(446.97977), np.float32(442.37833), np.float32(438.4611), np.float32(435.64957), np.float32(441.22446), np.float32(441.90027), np.float32(225.7406), np.float32(226.99144), np.float32(226.12207), np.float32(222.1419), np.float32(227.1646), np.float32(223.90157), np.float32(353.78162), np.float32(449.4409), np.float32(292.71344), np.float32(291.69055), np.float32(351.73645), np.float32(284.5441), np.float32(285.74918), np.float32(472.46243), np.float32(468.16577), np.float32(286.49826), np.float32(294.36838), np.float32(419.00156), np.float32(410.22778), np.float32(392.26944), np.float32(289.2332), np.float32(297.92468), np.float32(396.76913), np.float32(378.71838), np.float32(376.41956), np.float32(291.71243), np.float32(380.70288), np.float32(389.8222), np.float32(388.05197), np.float32(383.26605), np.float32(390.5327), np.float32(384.30716), np.float32(386.69562), np.float32(389.0378), np.float32(400.39456), np.float32(400.97998), np.float32(402.06186), np.float32(403.63507), np.float32(402.1988), np.float32(401.3601), np.float32(402.1304), np.float32(399.8404), np.float32(397.9005), np.float32(385.73346), np.float32(397.42102), np.float32(289.22), np.float32(298.56537), np.float32(374.2096), np.float32(287.864), np.float32(296.32153), np.float32(294.91147), np.float32(288.57965), np.float32(391.17938), np.float32(290.99985), np.float32(295.07544), np.float32(291.71967), np.float32(287.97818), np.float32(289.92618), np.float32(293.32132), np.float32(299.14957), np.float32(492.43823), np.float32(498.5951), np.float32(507.2355), np.float32(502.0924), np.float32(295.96512), np.float32(514.19855), np.float32(513.68225), np.float32(518.7149), np.float32(525.9985), np.float32(526.04767), np.float32(524.6932), np.float32(525.5158), np.float32(531.1778), np.float32(527.8523), np.float32(521.9687), np.float32(516.30664), np.float32(519.1777), np.float32(217.6763), np.float32(219.25864), np.float32(213.82631), np.float32(221.81735), np.float32(217.42497), np.float32(218.84123), np.float32(221.70975), np.float32(219.3796), np.float32(219.31546), np.float32(217.14522), np.float32(217.14426), np.float32(217.17793), np.float32(219.6894), np.float32(217.01219), np.float32(221.32706), np.float32(217.1566), np.float32(218.3413), np.float32(216.78246), np.float32(217.41745), np.float32(219.96565), np.float32(215.89911), np.float32(216.93246), np.float32(215.00404), np.float32(216.40341), np.float32(217.71753), np.float32(491.14264), np.float32(519.9664), np.float32(541.88855), np.float32(552.5772), np.float32(554.3276), np.float32(566.3456), np.float32(220.41576), np.float32(215.407), np.float32(219.76958), np.float32(890.0506), np.float32(890.0821), np.float32(889.4012), np.float32(891.06836), np.float32(891.83795), np.float32(890.8541), np.float32(890.10693), np.float32(888.60834), np.float32(585.9129), np.float32(588.5774), np.float32(587.5334), np.float32(585.63696), np.float32(585.5223), np.float32(586.1336), np.float32(580.30695), np.float32(575.9493), np.float32(215.88892), np.float32(225.09659), np.float32(219.62389), np.float32(217.55092), np.float32(221.62799), np.float32(220.08586), np.float32(221.56909), np.float32(217.9528), np.float32(221.56894), np.float32(216.3701), np.float32(220.15828), np.float32(219.04956), np.float32(217.84752), np.float32(218.89973), np.float32(222.42564), np.float32(218.17805), np.float32(214.16931), np.float32(225.13434), np.float32(218.45712), np.float32(216.05309), np.float32(217.91246), np.float32(304.56497), np.float32(300.17648), np.float32(308.72028), np.float32(314.11847), np.float32(324.41718), np.float32(326.3715), np.float32(647.8626), np.float32(650.96826), np.float32(652.3987), np.float32(648.3966), np.float32(638.46027), np.float32(650.15686), np.float32(653.68353), np.float32(658.02045), np.float32(658.60345), np.float32(658.15546), np.float32(657.7458), np.float32(656.31836), np.float32(655.57495), np.float32(653.2111), np.float32(648.7848), np.float32(649.227), np.float32(652.9418), np.float32(656.7986), np.float32(656.68665), np.float32(657.31476), np.float32(651.8247), np.float32(647.9507), np.float32(225.36537), np.float32(924.65125), np.float32(913.11816), np.float32(904.2366), np.float32(899.34235), np.float32(895.0443), np.float32(896.13916), np.float32(894.26337), np.float32(891.91223), np.float32(894.308), np.float32(895.015), np.float32(895.5059), np.float32(899.8463), np.float32(910.68677), np.float32(942.53516), np.float32(955.0643), np.float32(974.50854), np.float32(981.7138), np.float32(984.08185), np.float32(989.7258), np.float32(992.20557), np.float32(993.9965), np.float32(997.05225), np.float32(992.82697), np.float32(986.8684), np.float32(983.3734), np.float32(979.37427), np.float32(975.45856), np.float32(975.6976), np.float32(980.4224), np.float32(978.8823), np.float32(977.0081), np.float32(982.40924), np.float32(988.79736), np.float32(991.07983), np.float32(983.9502), np.float32(959.8827), np.float32(932.8551), np.float32(913.864), np.float32(897.363), np.float32(892.2181), np.float32(895.49896), np.float32(902.56793), np.float32(905.9607), np.float32(1199.2733), np.float32(231.8781), np.float32(223.52328), np.float32(221.22195), np.float32(218.8971), np.float32(219.61078), np.float32(225.66289), np.float32(216.34569), np.float32(223.07239), np.float32(216.88783), np.float32(218.82162), np.float32(346.0694), np.float32(218.9736), np.float32(241.13747), np.float32(264.7537), np.float32(331.8792), np.float32(330.33984), np.float32(511.509), np.float32(510.5975), np.float32(516.6009), np.float32(525.8992), np.float32(529.9108), np.float32(352.26758), np.float32(367.73416), np.float32(368.04984), np.float32(354.35294), np.float32(517.85297), np.float32(511.86356), np.float32(510.69244), np.float32(526.7685), np.float32(511.31113), np.float32(511.0425), np.float32(257.00073), np.float32(267.03836), np.float32(254.56387), np.float32(543.0612), np.float32(540.9781), np.float32(537.92017), np.float32(547.017), np.float32(557.90576), np.float32(524.3762), np.float32(521.6594), np.float32(519.1457), np.float32(755.8786), np.float32(753.40045), np.float32(757.0693), np.float32(768.31415), np.float32(521.9604), np.float32(519.9599), np.float32(523.1015), np.float32(709.8304), np.float32(689.4799), np.float32(662.95264), np.float32(658.7254), np.float32(665.5257), np.float32(672.1345), np.float32(675.2627), np.float32(668.57324), np.float32(657.9843), np.float32(660.91583), np.float32(219.76285), np.float32(217.68091), np.float32(217.49289), np.float32(216.74342), np.float32(214.87265), np.float32(194.32645), np.float32(167.85437), np.float32(178.6791), np.float32(171.74286), np.float32(170.12152), np.float32(169.05707), np.float32(170.79774), np.float32(174.00026), np.float32(167.88432), np.float32(176.67863), np.float32(170.10196), np.float32(169.81052), np.float32(172.53421), np.float32(173.16357), np.float32(172.03513), np.float32(172.45871), np.float32(169.40887), np.float32(174.03271), np.float32(175.68376), np.float32(164.4701), np.float32(177.71616), np.float32(169.38803), np.float32(174.16464), np.float32(170.34573), np.float32(352.1608), np.float32(347.59726), np.float32(350.24023), np.float32(347.24637), np.float32(349.926), np.float32(349.1634), np.float32(348.2564), np.float32(349.59967), np.float32(349.43613), np.float32(349.49033), np.float32(347.29163), np.float32(339.50397), np.float32(334.58435), np.float32(347.31967), np.float32(350.11496), np.float32(350.65918), np.float32(350.22916), np.float32(350.17776), np.float32(349.71692), np.float32(351.02597), np.float32(349.00394), np.float32(349.09534), np.float32(350.2479), np.float32(351.48203), np.float32(348.36392), np.float32(350.4773), np.float32(350.34598), np.float32(348.95258), np.float32(348.56366), np.float32(349.37366), np.float32(349.13864), np.float32(350.18738), np.float32(349.02762), np.float32(350.26407), np.float32(350.87064), np.float32(347.38547), np.float32(351.80026), np.float32(349.17236), np.float32(350.1992), np.float32(348.26404), np.float32(193.87097), np.float32(164.00133), np.float32(193.22452), np.float32(164.0949), np.float32(188.18199), np.float32(164.89261), np.float32(188.94704), np.float32(166.24887), np.float32(183.73991), np.float32(169.12755), np.float32(180.8226), np.float32(173.29092), np.float32(171.80644), np.float32(181.99573), np.float32(752.38727), np.float32(753.1746), np.float32(755.12634), np.float32(504.55643), np.float32(509.626), np.float32(510.7661), np.float32(508.55936), np.float32(508.64178), np.float32(504.26996), np.float32(500.1515), np.float32(498.54422), np.float32(506.82297), np.float32(507.7693), np.float32(498.72775), np.float32(492.41696), np.float32(494.3297), np.float32(492.13547), np.float32(498.48044), np.float32(513.48566), np.float32(518.63043), np.float32(513.0967), np.float32(984.4031), np.float32(999.54126), np.float32(1095.4806), np.float32(1126.2483), np.float32(1163.6028), np.float32(1182.4781), np.float32(1191.9343), np.float32(1192.939), np.float32(1188.296), np.float32(1177.3163), np.float32(1171.8424), np.float32(1173.2266), np.float32(1175.3763), np.float32(1181.8799), np.float32(1198.5043), np.float32(1223.346), np.float32(1247.3947), np.float32(1292.3313), np.float32(1317.843), np.float32(1335.1354), np.float32(1341.9479), np.float32(1343.2587), np.float32(1336.7096), np.float32(1330.8928), np.float32(988.2994), np.float32(986.604), np.float32(984.87933), np.float32(1647.2811), np.float32(342.58875), np.float32(349.53973), np.float32(171.62039), np.float32(174.16342), np.float32(178.8335), np.float32(170.44049), np.float32(182.84734), np.float32(168.46904), np.float32(189.88501), np.float32(213.08812), np.float32(200.84686), np.float32(349.49945), np.float32(347.7509), np.float32(345.19278), np.float32(353.97766), np.float32(260.66733), np.float32(257.0643), np.float32(353.97043), np.float32(345.21765), np.float32(349.1041), np.float32(258.14822), np.float32(263.24808), np.float32(259.11646), np.float32(262.26053), np.float32(349.41333), np.float32(349.76413), np.float32(351.1836), np.float32(348.13574), np.float32(349.61725), np.float32(349.90353), np.float32(350.32703), np.float32(348.07162), np.float32(349.57208), np.float32(349.81854), np.float32(347.7813), np.float32(350.24106), np.float32(348.4511), np.float32(349.85666), np.float32(349.55356), np.float32(349.37506), np.float32(347.94916), np.float32(349.63504), np.float32(349.58817), np.float32(349.71994), np.float32(350.36417), np.float32(348.4621), np.float32(348.62256), np.float32(348.02222), np.float32(349.8402), np.float32(349.68018), np.float32(350.1363), np.float32(349.03326), np.float32(349.5581), np.float32(347.57785), np.float32(351.0639), np.float32(608.51636), np.float32(608.9434), np.float32(608.28326), np.float32(606.0969), np.float32(603.555), np.float32(599.201), np.float32(591.2152), np.float32(585.81946), np.float32(582.24146), np.float32(585.1181), np.float32(589.6844), np.float32(186.61072), np.float32(603.41174), np.float32(611.23114), np.float32(632.5045), np.float32(648.8274), np.float32(655.4574), np.float32(666.2886), np.float32(670.09515), np.float32(672.4269), np.float32(673.8921), np.float32(669.1353), np.float32(662.56177), np.float32(658.6322), np.float32(655.5133), np.float32(652.91956), np.float32(652.88666), np.float32(653.1736), np.float32(648.86847), np.float32(648.3854), np.float32(650.52905), np.float32(653.7536), np.float32(653.90704), np.float32(655.5794), np.float32(657.30237), np.float32(656.0622), np.float32(655.44116), np.float32(654.7977), np.float32(656.76807), np.float32(657.5186), np.float32(658.5441), np.float32(660.85425), np.float32(662.3754), np.float32(664.3093), np.float32(665.0729), np.float32(664.42926), np.float32(664.4044), np.float32(663.2201), np.float32(661.1431), np.float32(658.6335), np.float32(658.0499), np.float32(656.4387), np.float32(656.0283), np.float32(656.3224), np.float32(658.26117), np.float32(656.7299), np.float32(657.0123), np.float32(656.17035), np.float32(658.1516), np.float32(659.126), np.float32(659.023), np.float32(658.4068), np.float32(658.82495), np.float32(658.0484), np.float32(657.6651), np.float32(657.1186), np.float32(657.85785), np.float32(657.73267), np.float32(658.20087), np.float32(658.9624), np.float32(658.7101), np.float32(658.8796), np.float32(660.9449), np.float32(660.673), np.float32(659.9329), np.float32(660.6244), np.float32(659.72565), np.float32(658.8111), np.float32(658.37714), np.float32(657.82306), np.float32(657.12256), np.float32(656.9225), np.float32(657.1684), np.float32(658.05994), np.float32(657.3679), np.float32(656.47), np.float32(656.3418), np.float32(656.05035), np.float32(657.6569), np.float32(658.1943), np.float32(657.6075), np.float32(657.9776), np.float32(658.20636), np.float32(658.432), np.float32(658.3685), np.float32(658.4821), np.float32(659.2342), np.float32(659.6913), np.float32(658.8326), np.float32(658.28986), np.float32(658.8478), np.float32(658.87067), np.float32(659.30945), np.float32(659.15955), np.float32(659.0387), np.float32(658.28284), np.float32(657.88824), np.float32(658.4136), np.float32(657.5921), np.float32(657.3844), np.float32(657.8517), np.float32(657.4437), np.float32(658.43787), np.float32(657.9185), np.float32(658.13477), np.float32(658.33685), np.float32(658.17834), np.float32(657.9736), np.float32(658.20166), np.float32(658.2248), np.float32(657.6732), np.float32(657.9172), np.float32(656.9324), np.float32(657.5778), np.float32(657.54315), np.float32(657.3038), np.float32(657.3533), np.float32(657.2671), np.float32(657.0228), np.float32(656.54364), np.float32(656.8154), np.float32(658.2861), np.float32(658.35156), np.float32(658.1878), np.float32(659.15283), np.float32(660.0695), np.float32(660.0734), np.float32(660.3542), np.float32(659.7804), np.float32(659.34534), np.float32(659.67883), np.float32(659.7689), np.float32(659.5935), np.float32(659.3606), np.float32(658.72345), np.float32(658.2257), np.float32(658.28705), np.float32(658.31555), np.float32(657.7474), np.float32(657.41797), np.float32(656.8334), np.float32(656.63727), np.float32(657.0947), np.float32(656.8194), np.float32(656.58813), np.float32(657.6254), np.float32(658.46985), np.float32(656.87164), np.float32(657.9457), np.float32(657.57495), np.float32(657.59863), np.float32(658.00006), np.float32(658.0361), np.float32(657.7476), np.float32(658.7708), np.float32(658.6029), np.float32(659.6525), np.float32(659.9489), np.float32(659.6252), np.float32(659.6116), np.float32(659.76215), np.float32(660.20123), np.float32(660.07886), np.float32(660.74664), np.float32(660.5198), np.float32(660.9664), np.float32(662.59296), np.float32(662.3234), np.float32(661.0592), np.float32(659.67615), np.float32(658.774), np.float32(657.7081), np.float32(657.7147), np.float32(657.9127), np.float32(657.2417), np.float32(656.5467), np.float32(656.7448), np.float32(654.92944), np.float32(656.00116), np.float32(656.38696), np.float32(657.0195), np.float32(656.9899), np.float32(656.8631), np.float32(656.63635), np.float32(656.0021), np.float32(656.94684), np.float32(656.6764), np.float32(657.73724), np.float32(657.8506), np.float32(657.80945), np.float32(657.8795), np.float32(659.847), np.float32(659.7171), np.float32(659.274), np.float32(659.2733), np.float32(659.8887), np.float32(659.0624), np.float32(659.2477), np.float32(655.8024), np.float32(660.0515), np.float32(656.11505), np.float32(657.80493), np.float32(656.9261), np.float32(657.0485), np.float32(659.5952), np.float32(655.6381), np.float32(659.75684), np.float32(656.2558), np.float32(658.6276), np.float32(656.45215), np.float32(657.0886), np.float32(658.49414), np.float32(656.45233), np.float32(662.6867), np.float32(656.85376), np.float32(661.1223), np.float32(658.45636), np.float32(659.5742), np.float32(661.2957), np.float32(658.581), np.float32(661.0933), np.float32(660.0406), np.float32(660.7476), np.float32(662.3542), np.float32(659.44995), np.float32(660.8016), np.float32(661.40546), np.float32(659.1249), np.float32(659.5492), np.float32(660.1392), np.float32(658.26697), np.float32(658.9351), np.float32(657.2625), np.float32(658.1894), np.float32(658.25543), np.float32(658.06305), np.float32(658.76843), np.float32(656.34515), np.float32(658.6152), np.float32(657.908), np.float32(659.034), np.float32(658.1475), np.float32(657.39386), np.float32(658.67975), np.float32(656.93475), np.float32(658.6258), np.float32(654.57733), np.float32(654.87195), np.float32(656.9328), np.float32(657.0928), np.float32(659.75745), np.float32(656.1895), np.float32(659.38525), np.float32(656.7594), np.float32(658.6153), np.float32(660.68695), np.float32(658.2354), np.float32(663.0013), np.float32(659.0037), np.float32(660.40796), np.float32(661.51746), np.float32(657.3607), np.float32(660.8308), np.float32(655.85443), np.float32(657.17847), np.float32(653.5896), np.float32(652.8501), np.float32(652.0032), np.float32(651.20386), np.float32(649.62524), np.float32(652.58325), np.float32(653.51196), np.float32(657.2926), np.float32(659.0258), np.float32(661.3997), np.float32(671.3732), np.float32(671.05035), np.float32(673.41364), np.float32(673.6175), np.float32(666.8454), np.float32(660.46423), np.float32(657.2754), np.float32(653.41125), np.float32(650.5281), np.float32(650.8156), np.float32(651.60144), np.float32(355.425), np.float32(349.6111), np.float32(656.9924), np.float32(660.99677), np.float32(666.29443), np.float32(672.1746), np.float32(675.9613), np.float32(674.4437), np.float32(669.40186), np.float32(659.0636), np.float32(656.4), np.float32(658.1704), np.float32(650.37415), np.float32(655.4477), np.float32(651.74585), np.float32(652.27216), np.float32(1960.385), np.float32(663.3118), np.float32(658.1827), np.float32(662.6866), np.float32(667.4193), np.float32(661.0943), np.float32(666.20526), np.float32(664.2728), np.float32(657.4664), np.float32(660.50824), np.float32(655.1141), np.float32(657.95074), np.float32(656.87024), np.float32(1964.7683), np.float32(1965.3302), np.float32(1966.8274), np.float32(1965.5725), np.float32(654.3767), np.float32(659.1664), np.float32(655.6483), np.float32(657.395), np.float32(656.63544), np.float32(658.1231), np.float32(660.5663), np.float32(660.14435), np.float32(666.71924), np.float32(671.0799), np.float32(659.60486), np.float32(658.07684), np.float32(656.8275), np.float32(657.7472), np.float32(660.0403), np.float32(657.4363), np.float32(659.3216), np.float32(291.71796), np.float32(354.74002), np.float32(1988.2092), np.float32(288.83414), np.float32(292.3955), np.float32(655.11584), np.float32(652.99274), np.float32(347.30267), np.float32(1974.3358), np.float32(1977.5377), np.float32(658.003), np.float32(658.7676), np.float32(674.7885), np.float32(683.7696), np.float32(1996.0833), np.float32(1986.4094), np.float32(1972.2544), np.float32(1961.4543), np.float32(1950.7504), np.float32(297.29187), np.float32(656.0222), np.float32(660.5555), np.float32(674.1926), np.float32(677.2545), np.float32(687.8443), np.float32(700.23694), np.float32(714.0589), np.float32(726.601), np.float32(746.76984), np.float32(772.51654), np.float32(788.197), np.float32(797.0131), np.float32(799.68024), np.float32(794.5521), np.float32(785.4261), np.float32(773.04376), np.float32(773.8797), np.float32(771.485), np.float32(781.5475), np.float32(825.05707), np.float32(846.2957), np.float32(1006.2643), np.float32(1023.17926), np.float32(1041.0642), np.float32(1050.6334), np.float32(1050.3043), np.float32(1048.26), np.float32(292.624), np.float32(293.31772), np.float32(843.9953), np.float32(828.39124), np.float32(817.4022), np.float32(808.7062), np.float32(803.66266), np.float32(800.5868), np.float32(799.54364), np.float32(802.37335), np.float32(814.0121), np.float32(829.0497), np.float32(844.89294), np.float32(859.82404), np.float32(869.1118), np.float32(882.0448), np.float32(887.95233), np.float32(888.09064), np.float32(888.97314), np.float32(888.4824), np.float32(885.9466), np.float32(880.003), np.float32(870.9656), np.float32(870.50757), np.float32(872.2417), np.float32(872.3528), np.float32(873.49835), np.float32(874.7168), np.float32(877.68085), np.float32(879.4848), np.float32(882.7895), np.float32(884.8249), np.float32(885.74536), np.float32(884.51263), np.float32(885.2616), np.float32(886.91064), np.float32(885.3388), np.float32(885.285), np.float32(886.96686), np.float32(882.54144), np.float32(878.78516), np.float32(873.68), np.float32(871.6159), np.float32(869.1855), np.float32(872.5008), np.float32(873.95703), np.float32(873.8044), np.float32(873.06665), np.float32(872.53455), np.float32(872.78674), np.float32(873.69403), np.float32(875.95935), np.float32(879.5741), np.float32(882.0958), np.float32(883.9282), np.float32(884.7002), np.float32(884.73065), np.float32(886.2488), np.float32(886.2998), np.float32(883.6959), np.float32(879.37994), np.float32(879.572), np.float32(879.2428), np.float32(879.0234), np.float32(879.20557), np.float32(876.6289), np.float32(874.9967), np.float32(874.74915), np.float32(875.05707), np.float32(875.08307), np.float32(874.62354), np.float32(873.4467), np.float32(873.1), np.float32(874.66815), np.float32(875.40204), np.float32(874.96954), np.float32(875.51154), np.float32(875.34424), np.float32(875.0841), np.float32(876.52124), np.float32(876.401), np.float32(876.138), np.float32(878.03076), np.float32(880.8861), np.float32(881.2647), np.float32(882.28973), np.float32(882.73535), np.float32(883.57104), np.float32(883.753), np.float32(883.33954), np.float32(882.276), np.float32(880.9421), np.float32(880.53314), np.float32(879.8345), np.float32(880.4537), np.float32(878.9747), np.float32(877.6533), np.float32(878.77466), np.float32(878.7502), np.float32(877.66516), np.float32(878.2828), np.float32(878.96893), np.float32(880.67816), np.float32(883.1673), np.float32(883.1357), np.float32(881.7648), np.float32(882.6641), np.float32(881.0397), np.float32(877.68744), np.float32(875.97833), np.float32(875.90674), np.float32(877.5499), np.float32(877.8823), np.float32(877.29913), np.float32(878.0372), np.float32(877.3576), np.float32(875.6188), np.float32(875.5176), np.float32(876.07935), np.float32(877.24255), np.float32(880.746), np.float32(883.43774), np.float32(884.3817), np.float32(883.78754), np.float32(882.5757), np.float32(879.8282), np.float32(879.2507), np.float32(879.1981), np.float32(877.6581), np.float32(878.90515), np.float32(879.7501), np.float32(881.0014), np.float32(882.2104), np.float32(881.8789), np.float32(882.4917), np.float32(884.5047), np.float32(884.33887), np.float32(885.2946), np.float32(887.69116), np.float32(888.64954), np.float32(888.2444), np.float32(887.02313), np.float32(886.3225), np.float32(886.821), np.float32(886.9327), np.float32(886.4974), np.float32(885.01404), np.float32(885.2499), np.float32(884.3124), np.float32(883.1629), np.float32(882.44086), np.float32(881.74207), np.float32(881.15814), np.float32(882.1268), np.float32(882.7411), np.float32(877.22485), np.float32(871.98706), np.float32(871.3472), np.float32(873.7843), np.float32(872.9651), np.float32(872.5234), np.float32(873.48486), np.float32(875.1715), np.float32(876.3535), np.float32(877.0241), np.float32(875.0951), np.float32(874.641), np.float32(876.08417), np.float32(877.4851), np.float32(879.45557), np.float32(882.57715), np.float32(883.683), np.float32(884.1726), np.float32(883.3948), np.float32(884.40576), np.float32(885.54205), np.float32(887.36884), np.float32(888.6472), np.float32(889.50446), np.float32(890.75964), np.float32(894.1104), np.float32(897.48315), np.float32(906.86896), np.float32(917.92346), np.float32(927.7503), np.float32(946.51416), np.float32(967.93463), np.float32(985.6877), np.float32(998.15985), np.float32(1007.8169), np.float32(1023.8418), np.float32(1053.8412), np.float32(1064.4697), np.float32(1073.6753), np.float32(1074.6342), np.float32(1068.5051), np.float32(1052.1334), np.float32(1039.959), np.float32(1052.032), np.float32(1065.1782), np.float32(1080.9907), np.float32(214.4417), np.float32(224.02649), np.float32(214.48323), np.float32(1126.7), np.float32(1113.1486), np.float32(998.0589), np.float32(998.0767), np.float32(896.0972), np.float32(881.1828), np.float32(829.44214), np.float32(810.23676), np.float32(795.65424), np.float32(782.2064), np.float32(204.6459), np.float32(249.15028), np.float32(772.24097), np.float32(771.25964), np.float32(770.2069), np.float32(769.5064), np.float32(768.4598), np.float32(769.84375), np.float32(771.3241), np.float32(772.7877), np.float32(775.1322), np.float32(779.4269), np.float32(786.23926), np.float32(794.03876), np.float32(804.2127), np.float32(816.05035), np.float32(820.8597), np.float32(821.47534), np.float32(820.8066), np.float32(818.2051), np.float32(811.9252), np.float32(796.4921), np.float32(777.297), np.float32(756.7648), np.float32(747.62494), np.float32(745.0142), np.float32(743.3773), np.float32(749.0961), np.float32(756.7423), np.float32(770.12024), np.float32(785.96796), np.float32(800.0129), np.float32(817.7642), np.float32(349.386), np.float32(349.56473), np.float32(348.36765), np.float32(349.5758), np.float32(817.1448), np.float32(349.0013), np.float32(349.86133), np.float32(350.87595), np.float32(347.36127), np.float32(351.66943), np.float32(351.01413), np.float32(348.3974), np.float32(352.56787), np.float32(347.10898), np.float32(351.2511), np.float32(347.47424), np.float32(349.96265), np.float32(230.96892), np.float32(354.57306), np.float32(344.7836), np.float32(351.45804), np.float32(163.04868), np.float32(187.27354), np.float32(163.29982), np.float32(184.93106), np.float32(166.1826), np.float32(358.60654), np.float32(438.06992), np.float32(171.5155), np.float32(424.29672), np.float32(353.1444), np.float32(217.43802), np.float32(214.25826), np.float32(217.04219), np.float32(350.70706), np.float32(347.8612), np.float32(351.6353), np.float32(347.80573), np.float32(353.69794), np.float32(349.90982), np.float32(349.71854), np.float32(351.6468), np.float32(348.16052), np.float32(350.40225), np.float32(348.93173), np.float32(348.9513), np.float32(350.02774), np.float32(349.51965), np.float32(348.55057), np.float32(350.9747), np.float32(348.36783), np.float32(350.45517), np.float32(347.90848), np.float32(349.63147), np.float32(349.4504), np.float32(349.61996), np.float32(349.07236), np.float32(349.75098), np.float32(348.52255), np.float32(350.24506), np.float32(349.0208), np.float32(350.20966), np.float32(349.6602), np.float32(348.2176), np.float32(172.06491), np.float32(173.82423), np.float32(173.48428), np.float32(172.1149), np.float32(178.8101), np.float32(181.34389), np.float32(164.88913), np.float32(171.94298), np.float32(169.70976), np.float32(171.99771), np.float32(185.7897), np.float32(168.29889), np.float32(187.61322), np.float32(167.52827), np.float32(182.38506), np.float32(168.42416), np.float32(183.21988), np.float32(172.68523), np.float32(179.97804), np.float32(166.3797), np.float32(348.41138), np.float32(350.23218), np.float32(348.9727), np.float32(350.9297), np.float32(348.09933), np.float32(348.5939), np.float32(349.7052), np.float32(349.9137), np.float32(349.80438), np.float32(349.05603), np.float32(349.72845), np.float32(349.44385), np.float32(349.05954), np.float32(349.94424), np.float32(349.25415), np.float32(349.81223), np.float32(348.7836), np.float32(349.82358), np.float32(349.3286), np.float32(349.4266), np.float32(348.0662), np.float32(350.09195), np.float32(348.47287), np.float32(350.704), np.float32(349.10666), np.float32(350.3474), np.float32(348.47388), np.float32(350.01752), np.float32(349.34836), np.float32(349.77878), np.float32(349.10602), np.float32(173.50993), np.float32(172.72246), np.float32(181.17998), np.float32(167.45561), np.float32(253.89598), np.float32(438.20013), np.float32(182.47333), np.float32(167.94286), np.float32(187.96552), np.float32(168.631), np.float32(188.4464), np.float32(168.52077), np.float32(187.45859), np.float32(172.02072), np.float32(172.49113), np.float32(622.82574), np.float32(635.41394), np.float32(657.09186), np.float32(680.6159), np.float32(693.8334), np.float32(707.421), np.float32(722.2674), np.float32(741.49963), np.float32(757.4493), np.float32(777.2837), np.float32(791.9193), np.float32(799.18335), np.float32(809.4357), np.float32(818.3481), np.float32(813.5844), np.float32(1021.11035), np.float32(1044.1786), np.float32(1048.7446), np.float32(1040.2997), np.float32(1024.0812), np.float32(1002.86017), np.float32(982.11285), np.float32(348.61813), np.float32(864.1313), np.float32(804.4456), np.float32(690.48413), np.float32(636.5615), np.float32(610.79224), np.float32(600.2127), np.float32(591.7637), np.float32(588.5496), np.float32(584.9834), np.float32(587.0925), np.float32(594.2557), np.float32(604.6523), np.float32(610.7819), np.float32(623.9758), np.float32(641.40814), np.float32(653.2487), np.float32(656.64856), np.float32(661.4452), np.float32(659.776), np.float32(659.02423), np.float32(660.7052), np.float32(656.8176), np.float32(655.6133), np.float32(656.46747), np.float32(656.6406), np.float32(658.7165), np.float32(659.6504), np.float32(662.64746), np.float32(662.9226), np.float32(661.25226), np.float32(661.22186), np.float32(659.0484), np.float32(658.58905), np.float32(658.6136), np.float32(657.87524), np.float32(657.8865), np.float32(656.5127), np.float32(657.54724), np.float32(655.39264), np.float32(655.61176), np.float32(656.0762), np.float32(656.2714), np.float32(657.4712), np.float32(656.1006), np.float32(656.2591), np.float32(657.8186), np.float32(658.45795), np.float32(658.5409), np.float32(658.4439), np.float32(658.9683), np.float32(658.9544), np.float32(658.37787), np.float32(657.70526), np.float32(657.21783), np.float32(659.1962), np.float32(659.2926), np.float32(658.328), np.float32(657.31647), np.float32(659.57446), np.float32(659.08014), np.float32(658.3692), np.float32(658.4408), np.float32(659.0418), np.float32(659.17334), np.float32(659.5828), np.float32(658.5157), np.float32(658.1277), np.float32(657.8359), np.float32(657.6216), np.float32(657.7599), np.float32(658.4302), np.float32(657.95593), np.float32(657.41614), np.float32(656.8005), np.float32(657.3502), np.float32(658.3479), np.float32(658.08923), np.float32(656.16327), np.float32(656.1015), np.float32(657.4282), np.float32(657.3049), np.float32(657.31366), np.float32(657.3738), np.float32(659.1693), np.float32(659.9477), np.float32(659.7091), np.float32(659.30365), np.float32(659.6732), np.float32(660.863), np.float32(659.89545), np.float32(659.71454), np.float32(658.5515), np.float32(658.89124), np.float32(659.25397), np.float32(658.7869), np.float32(658.77045), np.float32(659.54517), np.float32(659.75476), np.float32(659.3827), np.float32(659.2719), np.float32(659.69147), np.float32(660.3214), np.float32(659.71), np.float32(659.6812), np.float32(659.769), np.float32(659.3434), np.float32(658.4667), np.float32(658.3654), np.float32(657.65436), np.float32(657.46423), np.float32(657.4443), np.float32(657.683), np.float32(658.0757), np.float32(658.1119), np.float32(658.2681), np.float32(659.22266), np.float32(659.84686), np.float32(659.8984), np.float32(659.60297), np.float32(658.42444), np.float32(658.79175), np.float32(658.86804), np.float32(658.8599), np.float32(659.3231), np.float32(658.33685), np.float32(656.76355), np.float32(656.92834), np.float32(656.1764), np.float32(655.06146), np.float32(654.3125), np.float32(655.77875), np.float32(657.54047), np.float32(657.69794), np.float32(656.5706), np.float32(656.2128), np.float32(656.33026), np.float32(657.50226), np.float32(657.62964), np.float32(658.35657), np.float32(659.1331), np.float32(659.8156), np.float32(660.6632), np.float32(660.55084), np.float32(659.95294), np.float32(660.0346), np.float32(659.6557), np.float32(658.71405), np.float32(659.3035), np.float32(659.34143), np.float32(659.5734), np.float32(659.5576), np.float32(658.6878), np.float32(658.8196), np.float32(658.95404), np.float32(659.81683), np.float32(659.5652), np.float32(657.44763), np.float32(657.1043), np.float32(657.3905), np.float32(657.8801), np.float32(657.7431), np.float32(657.6574), np.float32(657.56244), np.float32(657.32), np.float32(657.951), np.float32(658.7358), np.float32(658.98706), np.float32(658.4598), np.float32(658.7871), np.float32(658.4439), np.float32(657.7499), np.float32(657.3978), np.float32(658.5884), np.float32(657.91113), np.float32(657.4447), np.float32(657.7655), np.float32(657.47534), np.float32(657.24036), np.float32(657.7595), np.float32(657.9977), np.float32(657.99146), np.float32(657.85693), np.float32(657.71814), np.float32(657.1555), np.float32(657.17816), np.float32(656.97955), np.float32(657.51404), np.float32(657.7796), np.float32(657.67645), np.float32(656.928), np.float32(656.4641), np.float32(656.401), np.float32(656.4546), np.float32(656.88794), np.float32(656.1028), np.float32(1969.9832), np.float32(1972.5862), np.float32(1973.1763), np.float32(1972.0443), np.float32(1973.3635), np.float32(1979.7415), np.float32(662.0058), np.float32(663.8612), np.float32(662.62823), np.float32(661.5007), np.float32(660.2635), np.float32(659.972), np.float32(659.80524), np.float32(659.039), np.float32(659.36804), np.float32(660.4883), np.float32(660.5513), np.float32(658.6341), np.float32(657.4369), np.float32(656.77026), np.float32(656.04565), np.float32(657.2578), np.float32(663.71124), np.float32(655.69934), np.float32(662.0212), np.float32(657.7739), np.float32(658.0642), np.float32(660.30396), np.float32(657.6794), np.float32(664.3028), np.float32(660.0706), np.float32(660.946), np.float32(663.8684), np.float32(657.4935), np.float32(662.98425), np.float32(658.37134), np.float32(660.14307), np.float32(1976.7184), np.float32(1974.1947), np.float32(1972.0614), np.float32(1970.9135), np.float32(1971.2937), np.float32(1971.3577), np.float32(1972.5413), np.float32(1973.759), np.float32(1976.1713), np.float32(1978.0262), np.float32(658.0566), np.float32(657.7295), np.float32(657.8678), np.float32(655.32495), np.float32(655.2531), np.float32(1966.013), np.float32(1966.1044), np.float32(1966.1204), np.float32(656.2429), np.float32(656.30273), np.float32(1969.5941), np.float32(1970.8643), np.float32(1971.2307), np.float32(1972.2026), np.float32(1974.2266), np.float32(1973.4772), np.float32(1971.9556), np.float32(1973.8932), np.float32(1974.7764), np.float32(1974.4688), np.float32(1975.2598), np.float32(1977.1727), np.float32(660.0347), np.float32(658.88617), np.float32(658.8218), np.float32(665.41064), np.float32(658.29456), np.float32(657.5583), np.float32(660.8275), np.float32(656.9935), np.float32(661.2561), np.float32(657.9435), np.float32(660.3179), np.float32(662.4337), np.float32(657.83246), np.float32(662.51825), np.float32(1985.1521), np.float32(1985.1171), np.float32(1986.8344), np.float32(658.8358), np.float32(663.12695), np.float32(661.1829), np.float32(1987.1388), np.float32(1983.5549), np.float32(1982.3098), np.float32(1979.891), np.float32(1976.6808), np.float32(1974.9277), np.float32(1973.9502), np.float32(1971.3427), np.float32(1968.5072), np.float32(1968.7913), np.float32(1969.1854), np.float32(1971.0056), np.float32(1971.3312), np.float32(1971.3036), np.float32(1969.7333), np.float32(1968.0184), np.float32(1966.2407), np.float32(1965.6096), np.float32(1967.4502), np.float32(1969.2909), np.float32(1969.8142), np.float32(1969.5786), np.float32(1969.9174), np.float32(1971.2532), np.float32(1972.3707), np.float32(1972.8182), np.float32(1971.3331), np.float32(1969.5747), np.float32(1967.7097), np.float32(1964.9656), np.float32(653.0386), np.float32(651.9196), np.float32(647.30945), np.float32(645.58307), np.float32(637.3126), np.float32(632.4718), np.float32(610.7526), np.float32(295.47723), np.float32(216.36273), np.float32(220.05272), np.float32(217.48514), np.float32(217.66554), np.float32(293.43503), np.float32(295.35782), np.float32(293.2884), np.float32(220.18312), np.float32(219.12292), np.float32(603.22125), np.float32(594.9789), np.float32(220.35428), np.float32(863.5835), np.float32(864.9377), np.float32(878.074), np.float32(888.57776), np.float32(351.52548), np.float32(350.81107), np.float32(353.87488), np.float32(798.6134), np.float32(775.5663), np.float32(772.1436), np.float32(771.72577), np.float32(773.41077), np.float32(774.54944), np.float32(772.6562), np.float32(771.90857), np.float32(774.53046), np.float32(774.715), np.float32(775.0749), np.float32(779.66547), np.float32(785.3426), np.float32(288.73535), np.float32(353.68045), np.float32(301.6537), np.float32(286.9938), np.float32(289.32327), np.float32(797.6891), np.float32(353.26434), np.float32(285.8538), np.float32(801.09174), np.float32(801.198), np.float32(802.56793), np.float32(351.32617), np.float32(356.58884), np.float32(357.98383), np.float32(347.69666), np.float32(296.6924), np.float32(293.70895), np.float32(294.3195), np.float32(295.95114), np.float32(294.1088), np.float32(293.61392), np.float32(295.69452), np.float32(293.29303), np.float32(296.6926), np.float32(294.1059), np.float32(294.9253), np.float32(298.11642), np.float32(295.95255), np.float32(297.02014), np.float32(295.5126), np.float32(296.26907), np.float32(295.11908), np.float32(297.27203), np.float32(296.0846), np.float32(292.9173), np.float32(297.72186), np.float32(299.05792), np.float32(291.32632), np.float32(297.05206), np.float32(299.29214), np.float32(289.077), np.float32(293.1907), np.float32(346.14954), np.float32(290.13797), np.float32(287.95374), np.float32(291.59988), np.float32(351.44125), np.float32(350.31464), np.float32(349.06192), np.float32(290.33667), np.float32(290.79553), np.float32(352.03244), np.float32(352.14713), np.float32(351.7206), np.float32(289.82144), np.float32(290.97137), np.float32(289.81696), np.float32(353.07108), np.float32(352.08377), np.float32(353.86633), np.float32(300.2174), np.float32(294.14932), np.float32(606.1038), np.float32(206.64108), np.float32(233.04956), np.float32(236.41231), np.float32(219.09558), np.float32(220.58328), np.float32(219.74416), np.float32(223.91264), np.float32(216.06836), np.float32(219.47513), np.float32(212.76137), np.float32(224.54541), np.float32(216.9471), np.float32(217.54439), np.float32(219.91275), np.float32(216.54059), np.float32(220.96516), np.float32(215.67845), np.float32(217.94946), np.float32(216.236), np.float32(218.80635), np.float32(216.76765), np.float32(220.8257), np.float32(216.47778), np.float32(218.85344), np.float32(219.6916), np.float32(215.78444), np.float32(219.10178), np.float32(216.136), np.float32(220.85065), np.float32(216.50412), np.float32(220.03574), np.float32(216.85875), np.float32(216.33228), np.float32(219.21121), np.float32(216.49135), np.float32(220.98242), np.float32(215.31502), np.float32(219.46056), np.float32(217.79599), np.float32(217.49393), np.float32(218.34326), np.float32(215.36407), np.float32(221.02408), np.float32(216.85916), np.float32(220.01225), np.float32(216.3236), np.float32(218.93037), np.float32(217.71158), np.float32(215.29776), np.float32(210.50879), np.float32(201.99443), np.float32(290.16565), np.float32(257.894), np.float32(244.2883), np.float32(212.73712), np.float32(226.56093), np.float32(213.95854), np.float32(231.02579), np.float32(212.8226), np.float32(220.93788), np.float32(218.11882), np.float32(217.22012), np.float32(233.95047), np.float32(209.84834), np.float32(226.17932), np.float32(214.14676), np.float32(222.4029), np.float32(215.13733), np.float32(221.22058), np.float32(220.7791), np.float32(215.90106), np.float32(221.6036), np.float32(214.11493), np.float32(220.14095), np.float32(216.40724), np.float32(223.02032), np.float32(219.34135), np.float32(218.00476), np.float32(219.72095), np.float32(217.7507), np.float32(220.12788), np.float32(215.85593), np.float32(220.76527), np.float32(217.18895), np.float32(219.56046), np.float32(217.55936), np.float32(219.26228), np.float32(220.29242), np.float32(215.36658), np.float32(222.39095), np.float32(214.4011), np.float32(221.36534), np.float32(217.84004), np.float32(219.34106), np.float32(220.08893), np.float32(215.55684), np.float32(225.10748), np.float32(211.2269), np.float32(228.19615), np.float32(230.43785), np.float32(214.7169), np.float32(220.99423), np.float32(329.87912), np.float32(330.33798), np.float32(265.40967), np.float32(260.81415), np.float32(329.339), np.float32(327.25378), np.float32(329.59702), np.float32(326.73312), np.float32(330.37814), np.float32(330.77795), np.float32(326.1635), np.float32(330.34424), np.float32(328.8311), np.float32(328.62314), np.float32(328.80228), np.float32(329.31985), np.float32(328.49698), np.float32(328.93958), np.float32(329.52704), np.float32(328.6573), np.float32(329.4219), np.float32(326.9097), np.float32(330.8163), np.float32(329.8454), np.float32(327.3383), np.float32(329.3301), np.float32(327.683), np.float32(329.739), np.float32(330.0319), np.float32(328.5838), np.float32(330.0841), np.float32(328.19434), np.float32(328.0677), np.float32(329.86124), np.float32(329.34384), np.float32(328.96146), np.float32(327.93643), np.float32(327.79462), np.float32(328.18295), np.float32(659.02124), np.float32(222.93881), np.float32(214.5855), np.float32(229.42314), np.float32(220.86586), np.float32(214.61243), np.float32(219.59764), np.float32(215.69025), np.float32(209.60121), np.float32(326.96817), np.float32(330.8286), np.float32(330.18512), np.float32(330.39117), np.float32(331.0306), np.float32(330.08658), np.float32(329.5113), np.float32(327.95435), np.float32(329.23776), np.float32(328.36243), np.float32(328.89548), np.float32(330.26874), np.float32(327.00494), np.float32(330.05002), np.float32(328.5948), np.float32(328.8779), np.float32(329.7317), np.float32(327.0694), np.float32(329.30792), np.float32(328.0375), np.float32(330.37805), np.float32(328.69617), np.float32(328.5181), np.float32(328.43228), np.float32(328.5266), np.float32(330.05307), np.float32(330.04346), np.float32(328.69073), np.float32(327.24356), np.float32(328.91904), np.float32(222.45924), np.float32(329.6053), np.float32(330.00598), np.float32(327.40735), np.float32(328.5872), np.float32(222.84386), np.float32(214.75229), np.float32(224.26923), np.float32(217.32332), np.float32(215.99925), np.float32(218.20198), np.float32(216.78656), np.float32(220.18486), np.float32(213.71425), np.float32(225.22246), np.float32(217.21654), np.float32(217.96057), np.float32(218.59946), np.float32(213.07889), np.float32(514.0355), np.float32(173.28516), np.float32(347.87845), np.float32(350.87), np.float32(161.14325), np.float32(172.27545), np.float32(173.16504), np.float32(213.96198), np.float32(212.47495), np.float32(215.81175), np.float32(212.12454), np.float32(220.6125), np.float32(211.45125), np.float32(167.05), np.float32(174.02089), np.float32(171.39124), np.float32(177.9058), np.float32(173.23737), np.float32(171.25772), np.float32(168.50208), np.float32(169.35493), np.float32(172.35484), np.float32(168.50691), np.float32(176.06367), np.float32(167.38655), np.float32(178.80342), np.float32(165.1031), np.float32(174.24129), np.float32(165.84732), np.float32(177.3795), np.float32(166.95903), np.float32(173.63397), np.float32(166.22554), np.float32(173.11842), np.float32(168.5355), np.float32(169.23482), np.float32(172.52171), np.float32(168.90027), np.float32(175.32574), np.float32(164.90565), np.float32(348.41098), np.float32(165.29759), np.float32(348.0392), np.float32(168.65295), np.float32(166.72581), np.float32(351.24536), np.float32(347.2817), np.float32(349.54956), np.float32(348.7924), np.float32(349.84308), np.float32(345.65985), np.float32(344.07953), np.float32(346.42444), np.float32(348.20837), np.float32(350.20312), np.float32(350.54764), np.float32(349.1079), np.float32(349.5286), np.float32(350.89343), np.float32(349.988), np.float32(348.6096), np.float32(349.04428), np.float32(349.9353), np.float32(350.0237), np.float32(349.76202), np.float32(349.0259), np.float32(349.25278), np.float32(349.23093), np.float32(349.61658), np.float32(348.51083), np.float32(350.09927), np.float32(167.57164), np.float32(171.87633), np.float32(349.03784), np.float32(172.54028), np.float32(175.73724), np.float32(166.05952), np.float32(175.10074), np.float32(167.26031), np.float32(175.70787), np.float32(169.21944), np.float32(175.40398), np.float32(170.27007), np.float32(168.90263), np.float32(175.89297), np.float32(167.7322), np.float32(528.69946), np.float32(166.3671), np.float32(181.25107), np.float32(164.84737), np.float32(184.41116), np.float32(261.97455), np.float32(261.80997), np.float32(264.37863), np.float32(259.6032), np.float32(271.151), np.float32(259.02283), np.float32(272.55264), np.float32(287.7905), np.float32(282.8589), np.float32(266.3948), np.float32(257.80023), np.float32(217.03), np.float32(210.7556), np.float32(246.36868), np.float32(255.8918), np.float32(248.06154), np.float32(255.63705), np.float32(258.74823), np.float32(275.94437), np.float32(285.84042), np.float32(289.27155), np.float32(345.9048), np.float32(605.22144), np.float32(605.21246), np.float32(898.6642), np.float32(902.15106), np.float32(1201.2335), np.float32(1197.1412), np.float32(1194.1405), np.float32(1190.3138), np.float32(1189.3706), np.float32(1196.3563), np.float32(1195.398), np.float32(1200.9622), np.float32(1226.0398), np.float32(1274.343), np.float32(984.62585), np.float32(990.17035), np.float32(999.0994), np.float32(1000.00916), np.float32(1330.9421), np.float32(1318.3423), np.float32(1313.4878), np.float32(978.1388), np.float32(345.5773), np.float32(252.38112), np.float32(633.8918), np.float32(338.551), np.float32(224.31288), np.float32(352.13736), np.float32(350.04065), np.float32(347.49106), np.float32(349.49112), np.float32(348.85336), np.float32(350.2354), np.float32(349.37476), np.float32(348.29105), np.float32(347.9725), np.float32(348.92297), np.float32(349.662), np.float32(352.0229), np.float32(325.6406), np.float32(316.01572), np.float32(260.84802), np.float32(253.78197), np.float32(314.02316), np.float32(444.39325), np.float32(442.61234), np.float32(442.4883), np.float32(440.1169), np.float32(437.51273), np.float32(261.60162), np.float32(258.63724), np.float32(248.8515), np.float32(351.21613), np.float32(528.7014), np.float32(427.98624), np.float32(523.1209), np.float32(183.30609), np.float32(177.84204), np.float32(179.1185), np.float32(175.48354), np.float32(348.99698), np.float32(350.6209), np.float32(170.53322), np.float32(348.64682), np.float32(175.33075), np.float32(177.02812), np.float32(177.24892), np.float32(173.01682), np.float32(348.1489), np.float32(349.47214), np.float32(349.60922), np.float32(350.93085), np.float32(348.96646), np.float32(172.1491), np.float32(174.99231), np.float32(174.5987), np.float32(175.76158), np.float32(174.1823), np.float32(174.06342), np.float32(262.77667), np.float32(262.17758), np.float32(261.54672), np.float32(543.68036), np.float32(540.0758), np.float32(538.3459), np.float32(513.3396), np.float32(183.22098), np.float32(185.16695), np.float32(508.88437), np.float32(515.4741), np.float32(522.5516), np.float32(190.8295), np.float32(184.94977), np.float32(518.5986), np.float32(519.20917), np.float32(256.63983), np.float32(188.05165), np.float32(264.43326), np.float32(262.72363), np.float32(552.6048), np.float32(581.98346), np.float32(538.6145), np.float32(263.98923), np.float32(262.3673), np.float32(260.68204), np.float32(259.2353), np.float32(258.60193), np.float32(260.75262), np.float32(258.71262), np.float32(259.97067), np.float32(258.60437), np.float32(258.16425), np.float32(261.13974), np.float32(530.3669), np.float32(539.40094), np.float32(190.88475), np.float32(196.45601), np.float32(193.80045), np.float32(191.7195), np.float32(514.42346), np.float32(513.1782), np.float32(511.9608), np.float32(250.76547), np.float32(202.27682), np.float32(204.76724), np.float32(202.81943), np.float32(195.67111), np.float32(189.81314), np.float32(188.95242), np.float32(194.00385), np.float32(199.54045), np.float32(193.36711), np.float32(191.52379), np.float32(198.73245), np.float32(204.56833), np.float32(203.82285), np.float32(517.17377), np.float32(518.25555), np.float32(209.1069), np.float32(204.21213), np.float32(195.15144), np.float32(196.67043), np.float32(197.15671), np.float32(193.02472), np.float32(189.43208), np.float32(191.18413), np.float32(194.68439), np.float32(261.10257), np.float32(261.1661), np.float32(260.7806), np.float32(264.9647), np.float32(263.0657), np.float32(268.36783), np.float32(398.28168), np.float32(397.68588), np.float32(394.0917), np.float32(202.51416), np.float32(200.62737), np.float32(191.22153), np.float32(262.80322), np.float32(257.168), np.float32(202.59369), np.float32(191.32043), np.float32(186.14252), np.float32(198.6779), np.float32(199.85909), np.float32(187.16943), np.float32(397.8929), np.float32(276.90588), np.float32(196.39514), np.float32(203.5745), np.float32(194.2351), np.float32(195.68898), np.float32(202.38466), np.float32(186.99069), np.float32(188.0623), np.float32(196.42361), np.float32(193.10675), np.float32(191.301), np.float32(260.73874), np.float32(253.77863), np.float32(190.86696), np.float32(782.90674), np.float32(781.9383), np.float32(190.99377), np.float32(197.12177), np.float32(189.98209), np.float32(191.73131), np.float32(199.14891), np.float32(176.80186), np.float32(339.89258), np.float32(331.4671), np.float32(185.12872), np.float32(329.67993), np.float32(264.2357), np.float32(327.69858), np.float32(329.37317), np.float32(330.27026), np.float32(327.94278), np.float32(329.44107), np.float32(328.94885), np.float32(329.3672), np.float32(328.85956), np.float32(327.8639), np.float32(328.46893), np.float32(329.53244), np.float32(328.2198), np.float32(328.92847), np.float32(329.46298), np.float32(327.6299), np.float32(329.14197), np.float32(329.761), np.float32(329.0159), np.float32(328.4013), np.float32(327.77313), np.float32(330.0812), np.float32(329.21722), np.float32(328.79327), np.float32(330.39792), np.float32(327.26736), np.float32(328.43744), np.float32(330.67813), np.float32(328.942), np.float32(329.01328), np.float32(329.7504), np.float32(326.08624), np.float32(331.58414), np.float32(330.54086), np.float32(331.5531), np.float32(259.31702), np.float32(262.6079), np.float32(258.3469), np.float32(257.89468), np.float32(260.2086), np.float32(261.2083), np.float32(257.33557), np.float32(260.8957), np.float32(180.2102), np.float32(257.5309), np.float32(265.61392), np.float32(259.00305), np.float32(257.73877), np.float32(261.36588), np.float32(255.03929), np.float32(259.1001), np.float32(261.97797), np.float32(259.9966), np.float32(261.04865), np.float32(260.98257), np.float32(253.59453), np.float32(259.13693), np.float32(259.7663), np.float32(258.48254), np.float32(259.3546), np.float32(260.08334), np.float32(262.25836), np.float32(261.2443), np.float32(261.85126), np.float32(257.36374), np.float32(262.79), np.float32(186.03122), np.float32(257.85477), np.float32(261.5946), np.float32(265.6928), np.float32(257.4628), np.float32(268.11722), np.float32(268.4365), np.float32(326.20163), np.float32(266.48383), np.float32(180.46765), np.float32(256.98312), np.float32(263.46936), np.float32(331.92603), np.float32(194.85931), np.float32(513.62054), np.float32(253.8353), np.float32(263.6714), np.float32(346.8125), np.float32(367.56775), np.float32(271.54578), np.float32(657.1662), np.float32(248.56664), np.float32(271.07242), np.float32(257.47006), np.float32(259.56863), np.float32(261.6446), np.float32(512.1723), np.float32(508.3116), np.float32(400.39572), np.float32(379.7808), np.float32(154.0868), np.float32(434.91177), np.float32(443.1725), np.float32(346.86523), np.float32(347.37085), np.float32(442.1561), np.float32(440.4056), np.float32(349.63852), np.float32(351.775), np.float32(347.56387), np.float32(352.51724), np.float32(347.88223), np.float32(350.01013), np.float32(350.59555), np.float32(350.68933), np.float32(351.422), np.float32(346.07755), np.float32(349.16934), np.float32(350.09747), np.float32(348.1327), np.float32(350.75885), np.float32(350.5466), np.float32(346.24863), np.float32(350.10577), np.float32(345.8741), np.float32(351.74017), np.float32(348.3309), np.float32(346.81683), np.float32(352.82724), np.float32(347.47415), np.float32(290.1895), np.float32(292.81427), np.float32(295.3019), np.float32(290.32013), np.float32(304.1297), np.float32(291.28198), np.float32(292.16995), np.float32(296.5622), np.float32(291.2662), np.float32(291.66708), np.float32(294.42145), np.float32(292.66052), np.float32(291.72183), np.float32(290.96597), np.float32(291.6159), np.float32(294.6409), np.float32(296.27368), np.float32(292.71582), np.float32(291.13864), np.float32(294.36392), np.float32(291.51935), np.float32(292.60785), np.float32(295.49106), np.float32(293.80124), np.float32(289.85806), np.float32(293.645), np.float32(295.36578), np.float32(292.05948), np.float32(296.21405), np.float32(289.84036), np.float32(288.351), np.float32(291.59235), np.float32(291.28467), np.float32(298.12543), np.float32(154.81227), np.float32(289.33914), np.float32(288.94028), np.float32(290.54456), np.float32(296.99152), np.float32(289.9245), np.float32(292.8956), np.float32(288.20978), np.float32(153.43573), np.float32(294.43356), np.float32(293.0136), np.float32(294.1723), np.float32(293.39502), np.float32(287.62482), np.float32(293.81693), np.float32(296.19934), np.float32(290.96536), np.float32(295.25967), np.float32(292.4482), np.float32(288.38412), np.float32(154.85632), np.float32(162.6643), np.float32(292.78308), np.float32(160.4312), np.float32(181.77596), np.float32(878.80817), np.float32(164.65952), np.float32(285.39774), np.float32(881.15625), np.float32(287.49985), np.float32(294.98624), np.float32(163.46683), np.float32(287.7137), np.float32(301.94086), np.float32(199.61926), np.float32(297.88583), np.float32(161.27415), np.float32(204.29303), np.float32(347.7005), np.float32(350.297), np.float32(352.82794), np.float32(349.85583), np.float32(350.30402), np.float32(349.56448), np.float32(349.43997), np.float32(349.9003), np.float32(348.35458), np.float32(350.55658), np.float32(346.1393), np.float32(347.6107), np.float32(349.54816), np.float32(351.0239), np.float32(152.49643), np.float32(346.12592), np.float32(347.5709), np.float32(349.22305), np.float32(353.15826), np.float32(349.4332), np.float32(344.04398), np.float32(153.67563), np.float32(349.15057), np.float32(441.5266), np.float32(441.3238), np.float32(440.99637), np.float32(153.1307), np.float32(440.05167), np.float32(439.7171), np.float32(441.24936), np.float32(441.7702), np.float32(283.92163), np.float32(441.9388), np.float32(442.72205), np.float32(159.22069), np.float32(440.70593), np.float32(440.43198), np.float32(618.0655), np.float32(607.0891), np.float32(597.3247), np.float32(590.88947), np.float32(585.7917), np.float32(585.3225), np.float32(589.8414), np.float32(592.08545), np.float32(592.2833), np.float32(590.4931), np.float32(590.95734), np.float32(593.824), np.float32(597.5892), np.float32(600.69135), np.float32(605.1056), np.float32(613.8752), np.float32(628.6413), np.float32(637.5022), np.float32(634.8377), np.float32(634.54175), np.float32(638.9418), np.float32(637.9204), np.float32(632.7087), np.float32(621.59467), np.float32(607.55566), np.float32(594.4767), np.float32(593.5149), np.float32(589.2811), np.float32(585.75287), np.float32(586.49243), np.float32(586.22906), np.float32(586.9396), np.float32(585.3491), np.float32(584.485), np.float32(584.2689), np.float32(585.30664), np.float32(585.8797), np.float32(588.86755), np.float32(589.8124), np.float32(591.71783), np.float32(590.5464), np.float32(588.6423), np.float32(587.45276), np.float32(584.4557), np.float32(584.9555), np.float32(584.98193), np.float32(585.37213), np.float32(587.721), np.float32(586.32684), np.float32(585.30414), np.float32(585.9469), np.float32(585.9892), np.float32(586.67896), np.float32(586.06604), np.float32(585.367), np.float32(584.86633), np.float32(584.6428), np.float32(584.131), np.float32(585.21027), np.float32(584.76416), np.float32(583.934), np.float32(583.1514), np.float32(583.90515), np.float32(584.80084), np.float32(583.39264), np.float32(582.49963), np.float32(583.3738), np.float32(581.41254), np.float32(583.97406), np.float32(585.6819), np.float32(587.2267), np.float32(587.6063), np.float32(587.2829), np.float32(589.1673), np.float32(587.1093), np.float32(586.54987), np.float32(587.04474), np.float32(586.67725), np.float32(587.5046), np.float32(585.62146), np.float32(584.06396), np.float32(584.5019), np.float32(583.78174), np.float32(585.9593), np.float32(586.0992), np.float32(587.6124), np.float32(587.5567), np.float32(586.17896), np.float32(587.40796), np.float32(586.9237), np.float32(586.63763), np.float32(587.79095), np.float32(587.01263), np.float32(586.9312), np.float32(586.7126), np.float32(587.6656), np.float32(587.78235), np.float32(586.4411), np.float32(587.3109), np.float32(585.3427), np.float32(584.55316), np.float32(584.4409), np.float32(584.15344), np.float32(585.02234), np.float32(585.9791), np.float32(585.3194), np.float32(587.1028), np.float32(587.9577), np.float32(592.2657), np.float32(598.0597), np.float32(1193.4481), np.float32(605.85803), np.float32(601.276), np.float32(600.2069), np.float32(600.31866), np.float32(600.4088), np.float32(598.85754), np.float32(589.85956), np.float32(579.8374), np.float32(571.9962), np.float32(572.9402), np.float32(572.8648), np.float32(575.0642), np.float32(580.3867), np.float32(587.4841), np.float32(594.5879), np.float32(605.5954), np.float32(609.3667), np.float32(612.8238), np.float32(628.7895), np.float32(634.01154), np.float32(617.0758), np.float32(604.2656), np.float32(597.59503), np.float32(591.64374), np.float32(581.0205), np.float32(566.51526), np.float32(577.2354), np.float32(575.57635), np.float32(572.47015), np.float32(581.26666), np.float32(587.8246), np.float32(601.0273), np.float32(612.7393), np.float32(621.66235), np.float32(624.0677), np.float32(615.8113), np.float32(604.37604), np.float32(600.62994), np.float32(596.3473), np.float32(575.5158), np.float32(579.8125), np.float32(580.8206), np.float32(567.7566), np.float32(570.4031), np.float32(581.32587), np.float32(586.0053), np.float32(587.506), np.float32(593.09753), np.float32(614.03046), np.float32(609.71075), np.float32(608.53015), np.float32(610.0346), np.float32(609.9136), np.float32(606.6392), np.float32(603.5273), np.float32(595.1165), np.float32(588.11633), np.float32(578.61664), np.float32(580.8612), np.float32(581.3692), np.float32(330.008), np.float32(328.178), np.float32(328.915), np.float32(329.8663), np.float32(326.67517), np.float32(591.295), np.float32(587.62585), np.float32(328.6153), np.float32(329.23404), np.float32(578.02423), np.float32(569.4527), np.float32(328.24243), np.float32(542.0403), np.float32(544.27936), np.float32(328.50385), np.float32(328.18253), np.float32(328.98566), np.float32(330.16513), np.float32(327.84888), np.float32(329.80228), np.float32(327.84488), np.float32(328.9352), np.float32(220.59328), np.float32(216.73834), np.float32(224.57123), np.float32(218.046), np.float32(220.01538), np.float32(219.50237), np.float32(216.73892), np.float32(219.9899), np.float32(218.46909), np.float32(223.92302), np.float32(217.16971), np.float32(217.97063), np.float32(217.69926), np.float32(219.72572), np.float32(218.91022), np.float32(218.14459), np.float32(220.3659), np.float32(214.99208), np.float32(218.43266), np.float32(216.19301), np.float32(220.73663), np.float32(214.51134), np.float32(218.54503), np.float32(224.42809), np.float32(217.36223), np.float32(224.90881), np.float32(219.28209), np.float32(218.02505), np.float32(220.63268), np.float32(215.07422), np.float32(222.05884), np.float32(214.45267), np.float32(219.42747), np.float32(222.22679), np.float32(223.55646), np.float32(215.19705), np.float32(217.16522), np.float32(220.45572), np.float32(213.02235), np.float32(221.52737), np.float32(218.31253), np.float32(218.2665), np.float32(218.02022), np.float32(222.39189), np.float32(216.46497), np.float32(220.35863), np.float32(215.19482), np.float32(218.7092), np.float32(228.85907), np.float32(218.13301), np.float32(218.80733), np.float32(211.91896), np.float32(273.35706), np.float32(220.94624), np.float32(225.28246), np.float32(221.55522), np.float32(217.5726), np.float32(214.36778), np.float32(225.63808), np.float32(219.33395), np.float32(207.6135), np.float32(222.94528), np.float32(222.07439), np.float32(224.9086), np.float32(225.52501), np.float32(215.08559), np.float32(219.95242), np.float32(213.87547), np.float32(214.32196), np.float32(214.611), np.float32(256.25476), np.float32(172.09518), np.float32(170.13693), np.float32(180.39417), np.float32(169.7807), np.float32(173.50868), np.float32(170.66974), np.float32(173.5462), np.float32(348.54666), np.float32(249.54834), np.float32(350.37177), np.float32(257.1449), np.float32(257.8573), np.float32(350.0616), np.float32(167.12706), np.float32(174.77402), np.float32(175.68929), np.float32(172.65132), np.float32(170.30946), np.float32(170.11072), np.float32(166.26546), np.float32(177.7713), np.float32(177.30116), np.float32(174.02596), np.float32(171.75734), np.float32(170.80305), np.float32(170.7971), np.float32(170.34436), np.float32(171.71494), np.float32(173.37119), np.float32(172.28778), np.float32(170.89804), np.float32(170.76778), np.float32(175.02956), np.float32(167.23227), np.float32(171.0819), np.float32(174.80565), np.float32(169.0545), np.float32(172.6041), np.float32(175.32774), np.float32(169.28589), np.float32(170.27348), np.float32(174.65842), np.float32(170.15889), np.float32(169.43987), np.float32(172.22615), np.float32(171.72151), np.float32(173.88283), np.float32(172.73975), np.float32(170.4912), np.float32(171.34056), np.float32(169.2063), np.float32(169.6067), np.float32(175.14932), np.float32(171.18997), np.float32(173.48526), np.float32(169.81456), np.float32(182.36165), np.float32(171.60555), np.float32(168.35075), np.float32(177.24416), np.float32(171.70229), np.float32(176.46082), np.float32(171.59659), np.float32(253.94502), np.float32(173.23639), np.float32(174.66263), np.float32(168.19711), np.float32(173.43893), np.float32(174.43759), np.float32(176.29477), np.float32(171.81621), np.float32(172.343), np.float32(169.57976), np.float32(171.21136), np.float32(176.63167), np.float32(172.234), np.float32(172.99608), np.float32(167.5823), np.float32(177.56383), np.float32(170.72379), np.float32(172.53448), np.float32(168.4228), np.float32(167.64665), np.float32(177.84781), np.float32(175.64618), np.float32(173.73512), np.float32(172.73505), np.float32(170.60164), np.float32(164.59363), np.float32(166.9616), np.float32(161.45436), np.float32(164.89232), np.float32(180.52032), np.float32(165.44333), np.float32(172.64671), np.float32(167.35889), np.float32(184.10376), np.float32(355.11856), np.float32(169.83737), np.float32(168.74973), np.float32(182.90945), np.float32(164.40126), np.float32(161.26912), np.float32(177.19113), np.float32(166.0195), np.float32(170.79904), np.float32(170.33295), np.float32(174.40192), np.float32(167.79726), np.float32(170.78082), np.float32(169.78146), np.float32(167.63881), np.float32(175.61488), np.float32(173.02263), np.float32(172.16075), np.float32(169.51709), np.float32(176.6353), np.float32(169.378), np.float32(169.61145), np.float32(170.27274), np.float32(169.76756), np.float32(182.0042), np.float32(168.69012), np.float32(178.77913), np.float32(169.71877), np.float32(174.74371), np.float32(169.8246), np.float32(170.95807), np.float32(172.772), np.float32(174.82867), np.float32(179.04456), np.float32(170.09618), np.float32(172.40887), np.float32(168.73868), np.float32(183.4663), np.float32(168.10823), np.float32(181.65143), np.float32(166.0357), np.float32(183.27869), np.float32(165.94261), np.float32(188.60327), np.float32(165.8426), np.float32(179.80225), np.float32(175.27525), np.float32(185.48083), np.float32(185.24712), np.float32(175.27077), np.float32(190.53766), np.float32(167.70782), np.float32(189.76195), np.float32(166.27725), np.float32(188.69849), np.float32(167.94205), np.float32(177.88365), np.float32(169.87743), np.float32(175.68015), np.float32(173.80937), np.float32(174.01974), np.float32(171.08345), np.float32(172.32115), np.float32(175.3869), np.float32(171.9426), np.float32(174.70282), np.float32(170.21349), np.float32(174.7123), np.float32(168.83325), np.float32(176.90968), np.float32(170.97026), np.float32(175.1709), np.float32(172.6928), np.float32(174.43738), np.float32(172.46498), np.float32(173.39162), np.float32(172.9279), np.float32(172.5624), np.float32(176.19905), np.float32(171.57732), np.float32(174.85243), np.float32(171.51408), np.float32(175.73445), np.float32(170.95367), np.float32(174.89798), np.float32(171.00452), np.float32(174.9418), np.float32(173.00981), np.float32(175.55295), np.float32(173.88185), np.float32(176.0869), np.float32(173.55376), np.float32(172.11781), np.float32(174.5222), np.float32(170.92365), np.float32(175.57748), np.float32(171.965), np.float32(179.51654), np.float32(172.24022), np.float32(178.70155), np.float32(171.05257), np.float32(175.64989), np.float32(170.78226), np.float32(177.35213), np.float32(171.84027), np.float32(175.63565), np.float32(177.83531), np.float32(172.93256), np.float32(176.16725), np.float32(171.58199), np.float32(177.14072), np.float32(170.98756), np.float32(179.9058), np.float32(169.76537), np.float32(178.58047), np.float32(168.23358), np.float32(178.3855), np.float32(170.74713), np.float32(174.64189), np.float32(171.38667), np.float32(174.60689), np.float32(174.62834), np.float32(173.60655), np.float32(175.39705), np.float32(170.42596), np.float32(176.79074), np.float32(171.60583), np.float32(176.85735), np.float32(169.03322), np.float32(178.8228), np.float32(169.8547), np.float32(179.48885), np.float32(168.41237), np.float32(177.31705), np.float32(169.7252), np.float32(173.5948), np.float32(173.81596), np.float32(157.50755), np.float32(182.08595), np.float32(350.9599), np.float32(189.43571), np.float32(351.3066), np.float32(187.5702), np.float32(157.6645), np.float32(185.49431), np.float32(786.6412), np.float32(185.40317), np.float32(784.5956), np.float32(183.41632), np.float32(162.16623), np.float32(170.99243), np.float32(176.07027), np.float32(175.4349), np.float32(170.12955), np.float32(169.7097), np.float32(177.19223), np.float32(166.7199), np.float32(179.73615), np.float32(167.85143), np.float32(176.16621), np.float32(166.54254), np.float32(179.06586), np.float32(167.52174), np.float32(175.88043), np.float32(167.7255), np.float32(174.10435), np.float32(172.59677), np.float32(171.30226), np.float32(173.48549), np.float32(168.6018), np.float32(178.11324), np.float32(165.81294), np.float32(176.81705), np.float32(164.70969), np.float32(178.27028), np.float32(168.91885), np.float32(177.48792), np.float32(172.74521), np.float32(175.29921), np.float32(172.69887), np.float32(172.4072), np.float32(175.34557), np.float32(170.88647), np.float32(178.0213), np.float32(168.75456), np.float32(177.61319), np.float32(167.91666), np.float32(179.86372), np.float32(170.55968), np.float32(178.30013), np.float32(165.54869), np.float32(174.92354), np.float32(170.61424), np.float32(176.18326), np.float32(175.13583), np.float32(166.75307), np.float32(176.86879), np.float32(165.04558), np.float32(179.84631), np.float32(165.8953), np.float32(179.36249), np.float32(162.49413), np.float32(179.7421), np.float32(161.29782), np.float32(175.59824), np.float32(161.34972), np.float32(176.68108), np.float32(159.5591), np.float32(171.02235), np.float32(171.54224), np.float32(163.58852), np.float32(178.61755), np.float32(158.7216), np.float32(181.83511), np.float32(161.5568), np.float32(181.97081), np.float32(162.30112), np.float32(180.20216), np.float32(156.57434), np.float32(180.59267), np.float32(784.94116), np.float32(782.86786), np.float32(251.12181), np.float32(782.9579), np.float32(182.50357), np.float32(786.0942), np.float32(184.28387), np.float32(785.7903), np.float32(188.31807), np.float32(785.09467), np.float32(189.59671), np.float32(263.66895), np.float32(235.27495), np.float32(215.41415), np.float32(520.7484), np.float32(438.74936), np.float32(252.05394), np.float32(265.67395), np.float32(254.4568), np.float32(520.0987), np.float32(247.83878), np.float32(443.85764), np.float32(439.31366), np.float32(520.9974), np.float32(522.9627), np.float32(229.40999), np.float32(205.63596), np.float32(234.56364), np.float32(208.94243), np.float32(220.85342), np.float32(208.80687), np.float32(785.8939), np.float32(210.43823), np.float32(211.7073), np.float32(220.8454), np.float32(786.3168), np.float32(784.8713), np.float32(785.6093), np.float32(784.2198), np.float32(211.27032), np.float32(784.89575), np.float32(211.76549), np.float32(218.49207), np.float32(214.2185), np.float32(214.88153), np.float32(214.7175), np.float32(213.38463), np.float32(223.42963), np.float32(217.64894), np.float32(212.80945), np.float32(213.64401), np.float32(216.65385), np.float32(211.26587), np.float32(216.92574), np.float32(784.80304), np.float32(210.00473), np.float32(204.89311), np.float32(215.69539), np.float32(200.48125), np.float32(227.42271), np.float32(201.51176), np.float32(225.91277), np.float32(200.83148), np.float32(225.55507), np.float32(202.31274), np.float32(187.97408), np.float32(205.24986), np.float32(214.25085), np.float32(210.15218), np.float32(210.32593), np.float32(216.75723), np.float32(207.04266), np.float32(220.57169), np.float32(206.50554), np.float32(219.74928), np.float32(205.11417), np.float32(214.17947), np.float32(205.26283), np.float32(219.02872), np.float32(209.10384), np.float32(209.02502), np.float32(217.2583), np.float32(205.82309), np.float32(220.86227), np.float32(204.97798), np.float32(223.90863), np.float32(206.94388), np.float32(220.84958), np.float32(206.56136), np.float32(217.8275), np.float32(211.21461), np.float32(214.43571), np.float32(215.18657), np.float32(211.58112), np.float32(222.95807), np.float32(213.63664), np.float32(223.02872), np.float32(213.5005), np.float32(216.97113), np.float32(216.42398), np.float32(212.65903), np.float32(220.09177), np.float32(208.90898), np.float32(222.09798), np.float32(205.77321), np.float32(221.0635), np.float32(202.45511), np.float32(228.75374), np.float32(506.2971), np.float32(329.79932), np.float32(355.98547), np.float32(348.69302), np.float32(168.14853), np.float32(163.57071), np.float32(176.00809), np.float32(168.77168), np.float32(173.78445), np.float32(170.51256), np.float32(169.01567), np.float32(170.67207), np.float32(166.95457), np.float32(177.25662), np.float32(168.0873), np.float32(179.22664), np.float32(167.61923), np.float32(177.27812), np.float32(167.28342), np.float32(175.33694), np.float32(168.838), np.float32(172.80345), np.float32(173.66176), np.float32(172.11641), np.float32(174.02425), np.float32(170.84541), np.float32(174.64046), np.float32(167.93369), np.float32(175.49147), np.float32(166.0517), np.float32(178.46027), np.float32(168.00154), np.float32(178.94106), np.float32(169.69307), np.float32(175.24805), np.float32(167.99783), np.float32(173.79181), np.float32(172.79396), np.float32(172.14479), np.float32(172.4311), np.float32(170.2684), np.float32(175.90752), np.float32(168.5008), np.float32(177.54436), np.float32(167.00587), np.float32(178.72464), np.float32(166.17589), np.float32(178.58688), np.float32(166.08469), np.float32(178.85866), np.float32(164.86893), np.float32(173.26967), np.float32(171.09514), np.float32(173.85948), np.float32(170.78853), np.float32(167.63652), np.float32(177.35158), np.float32(165.77657), np.float32(179.39082), np.float32(162.27274), np.float32(182.84569), np.float32(166.12189), np.float32(179.77434), np.float32(165.40445), np.float32(179.44647), np.float32(163.90044), np.float32(178.88719), np.float32(165.94559), np.float32(176.23424), np.float32(155.63406), np.float32(181.25145), np.float32(518.3201), np.float32(176.00273), np.float32(517.6647), np.float32(182.38878), np.float32(521.67285), np.float32(182.46843), np.float32(521.81616), np.float32(185.20576), np.float32(229.83028), np.float32(172.76352), np.float32(170.21121), np.float32(171.75992), np.float32(173.65549), np.float32(170.49059), np.float32(178.57303), np.float32(171.40599), np.float32(179.38812), np.float32(169.31601), np.float32(177.3719), np.float32(169.6162), np.float32(173.35199), np.float32(172.11948), np.float32(175.46762), np.float32(172.25397), np.float32(171.52438), np.float32(173.24841), np.float32(176.76799), np.float32(173.09306), np.float32(172.10825), np.float32(172.26591), np.float32(174.36862), np.float32(174.75844), np.float32(171.81937), np.float32(176.69958), np.float32(173.73729), np.float32(170.48152), np.float32(171.2615), np.float32(173.76984), np.float32(175.42758), np.float32(171.81241), np.float32(171.38052), np.float32(175.84874), np.float32(173.10889), np.float32(174.55292), np.float32(174.01707), np.float32(173.54941), np.float32(177.16412), np.float32(174.28021), np.float32(173.53474), np.float32(169.86426), np.float32(173.72583), np.float32(168.11118), np.float32(180.92015), np.float32(170.86699), np.float32(175.53055), np.float32(170.99945), np.float32(174.55516), np.float32(170.2087), np.float32(177.80576), np.float32(169.23734), np.float32(178.56216), np.float32(178.64093), np.float32(174.53015), np.float32(177.581), np.float32(174.29358), np.float32(174.62952), np.float32(170.45288), np.float32(176.34453), np.float32(173.09329), np.float32(175.796), np.float32(176.9741), np.float32(172.82782), np.float32(172.08514), np.float32(172.26468), np.float32(173.32463), np.float32(178.35385), np.float32(175.58043), np.float32(172.01408), np.float32(176.6373), np.float32(174.4086), np.float32(173.33423), np.float32(171.33134), np.float32(173.6568), np.float32(169.85886), np.float32(173.05122), np.float32(171.97462), np.float32(171.54112), np.float32(177.4563), np.float32(171.61287), np.float32(173.86775), np.float32(170.81201), np.float32(176.84305), np.float32(169.85023), np.float32(176.44287), np.float32(171.7309), np.float32(175.25163), np.float32(171.91936), np.float32(172.46803), np.float32(172.5667), np.float32(172.25948), np.float32(173.66447), np.float32(169.86714), np.float32(176.95287), np.float32(168.8659), np.float32(178.7748), np.float32(168.30812), np.float32(178.38434), np.float32(167.49547), np.float32(178.62624), np.float32(167.87596), np.float32(175.60658), np.float32(171.30035), np.float32(174.40154), np.float32(172.31578), np.float32(172.38795), np.float32(174.94247), np.float32(168.64496), np.float32(176.71896), np.float32(167.35005), np.float32(179.26988), np.float32(164.05179), np.float32(179.68086), np.float32(165.21953), np.float32(178.28712), np.float32(166.68538), np.float32(173.82347), np.float32(169.50227), np.float32(168.35971), np.float32(177.7044), np.float32(160.16508), np.float32(182.77078), np.float32(155.86043), np.float32(181.67436), np.float32(156.42108), np.float32(185.84685), np.float32(235.01736), np.float32(174.90779), np.float32(159.40536), np.float32(179.36937), np.float32(158.4783), np.float32(253.53473), np.float32(186.12723), np.float32(232.56801), np.float32(177.15742), np.float32(247.10014), np.float32(186.35075), np.float32(247.99144), np.float32(260.8123), np.float32(251.77478), np.float32(257.44098), np.float32(256.9221), np.float32(154.50743), np.float32(260.86118), np.float32(254.9372), np.float32(261.5473), np.float32(257.02274), np.float32(166.53871), np.float32(172.79466), np.float32(168.95107), np.float32(176.28406), np.float32(165.50735), np.float32(176.36179), np.float32(169.63147), np.float32(173.58864), np.float32(166.93326), np.float32(172.25558), np.float32(173.7595), np.float32(173.2188), np.float32(173.2597), np.float32(170.71686), np.float32(174.46065), np.float32(171.4744), np.float32(174.46065), np.float32(170.12059), np.float32(174.31715), np.float32(170.82826), np.float32(171.3104), np.float32(171.19124), np.float32(173.32022), np.float32(173.32602), np.float32(172.2676), np.float32(173.03331), np.float32(173.67334), np.float32(172.5558), np.float32(171.46846), np.float32(170.72485), np.float32(172.99503), np.float32(169.73445), np.float32(174.61354), np.float32(170.3399), np.float32(175.61324), np.float32(169.73189), np.float32(174.34964), np.float32(172.11047), np.float32(173.9167), np.float32(171.08702), np.float32(171.79099), np.float32(172.5109), np.float32(172.18715), np.float32(173.01645), np.float32(171.3232), np.float32(175.09103), np.float32(173.8244), np.float32(173.87746), np.float32(170.90698), np.float32(172.98882), np.float32(172.37805), np.float32(172.80101), np.float32(172.94753), np.float32(174.52692), np.float32(172.75061), np.float32(173.84068), np.float32(172.321), np.float32(172.88272), np.float32(172.71935), np.float32(171.88246), np.float32(172.37236), np.float32(174.0023), np.float32(173.76001), np.float32(172.65103), np.float32(172.7283), np.float32(173.29854), np.float32(173.45355), np.float32(172.82364), np.float32(171.7165), np.float32(173.85301), np.float32(173.18065), np.float32(173.22403), np.float32(171.16731), np.float32(174.54324), np.float32(171.68628), np.float32(174.40831), np.float32(170.66736), np.float32(174.41132), np.float32(170.33586), np.float32(173.29514), np.float32(171.45866), np.float32(174.59732), np.float32(172.55714), np.float32(174.54268), np.float32(171.91243), np.float32(172.18541), np.float32(171.2147), np.float32(173.17145), np.float32(170.35017), np.float32(170.5406), np.float32(174.45262), np.float32(160.23164), np.float32(557.11237)]
2025-05-13 00:37:32,088 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:37:32,089 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:37:32,214 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:37:32,216 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:37:32,216 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:37:32,217 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:37:32,218 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:37:35,912 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.7s)
2025-05-13 00:37:39,559 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:37:39,628 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:37:39,672 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:37:39,672 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:37:39,673 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:37:41,500 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747089440.mp4
2025-05-13 00:37:41,500 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:37:41,504 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747089440.wav
2025-05-13 00:37:41,506 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747089440_enhanced.mp4
2025-05-13 00:37:41,507 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747089440_enhanced.mp4
2025-05-13 00:37:54,035 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:37:54,037 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:37:54,037 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:37:54,038 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:37:54,038 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:37:54,039 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:37:54,040 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:37:54,040 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:37:54,041 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:37:54,041 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:37:54,041 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:37:54,043 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:37:55,131 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:37:55,178 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:38:01,632 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:38:01,633 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:38:04,688 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:38:04,703 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:38:04,703 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:38:04,820 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:38:04,821 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:38:04,821 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:38:04,822 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:38:04,822 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:38:08,304 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.5s)
2025-05-13 00:38:11,715 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:38:11,776 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:38:11,809 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:38:11,809 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:38:11,810 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:38:13,660 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747089474.mp4
2025-05-13 00:38:13,660 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:38:13,664 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747089474.wav
2025-05-13 00:38:13,667 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747089474_enhanced.mp4
2025-05-13 00:38:13,667 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747089474_enhanced.mp4
2025-05-13 00:39:49,004 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:39:49,005 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:39:49,005 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:39:49,006 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:39:49,006 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:39:49,006 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:39:49,007 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:39:49,007 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:39:49,007 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:39:49,008 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:39:49,008 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:39:49,010 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:39:50,056 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:39:50,107 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:39:56,796 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:39:56,797 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:40:01,288 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:40:01,305 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:40:01,306 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:40:01,500 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:40:01,504 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:40:01,504 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:40:01,506 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:40:01,507 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:40:05,626 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 4.1s)
2025-05-13 00:40:09,842 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:40:09,923 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:40:09,967 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:40:09,967 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:40:09,968 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:40:12,150 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747089589.mp4
2025-05-13 00:40:12,151 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:40:12,158 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747089589.wav
2025-05-13 00:40:12,480 - TikSimPro - ERROR - Erreur lors de l'ajout de la musique: 'CompositeAudioClip' object has no attribute 'subclip'
2025-05-13 00:40:12,486 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747089589_enhanced.mp4
2025-05-13 00:40:12,486 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747089589_enhanced.mp4
2025-05-13 00:42:27,239 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:42:27,240 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:42:27,241 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:42:27,241 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:42:27,241 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:42:27,241 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:42:27,241 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:42:27,242 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:42:27,242 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:42:27,242 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:42:27,243 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:42:27,244 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:42:28,461 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:42:28,522 - TikTokAudioManager - INFO - Vidéo trouvée : The Kid LAROI, Justin Bieber - STAY (Official Video) (https://www.youtube.com/watch?v=kTJczUoc26U)
2025-05-13 00:42:34,619 - TikTokAudioManager - INFO - Musique téléchargée : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:42:34,621 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:42:37,219 - TikTokAudioManager - INFO - Nombre de notes extraites : 14443
2025-05-13 00:42:37,229 - TikSimPro - INFO - Mélodie définie: 14443 notes
2025-05-13 00:42:37,229 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:42:37,340 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:42:37,341 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:42:37,341 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:42:37,343 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:42:37,343 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:42:40,978 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.6s)
2025-05-13 00:42:44,606 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:42:44,670 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:42:44,710 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:42:44,711 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:42:44,712 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:42:46,633 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747089747.mp4
2025-05-13 00:42:46,634 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:42:46,634 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_9_oct1.wav
2025-05-13 00:42:46,637 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747089747.wav
2025-05-13 00:42:46,949 - TikSimPro - ERROR - Erreur lors de l'ajout de la musique: 'AudioFileClip' object has no attribute 'subclip'
2025-05-13 00:42:46,951 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747089747_enhanced.mp4
2025-05-13 00:42:46,951 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747089747_enhanced.mp4
2025-05-13 00:44:07,665 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:44:07,666 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:44:07,667 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:44:07,667 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:44:07,668 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:44:07,668 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:44:07,669 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:44:07,669 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:44:07,670 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:44:07,670 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:44:07,671 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:44:07,673 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:44:08,828 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:44:08,881 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:44:15,683 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:44:15,684 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:44:18,945 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:44:18,961 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:44:18,961 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:44:19,101 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:44:19,103 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:44:19,103 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:44:19,104 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:44:19,104 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:44:22,363 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.3s)
2025-05-13 00:44:25,576 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:44:25,637 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:44:25,670 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:44:25,671 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:44:25,671 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:44:27,263 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747089847.mp4
2025-05-13 00:44:27,263 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:44:27,264 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_9_oct1.wav
2025-05-13 00:44:27,267 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747089847.wav
2025-05-13 00:44:27,577 - TikSimPro - ERROR - Erreur lors de l'ajout de la musique: 'AudioFileClip' object has no attribute 'volumex'
2025-05-13 00:44:27,579 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747089847_enhanced.mp4
2025-05-13 00:44:27,579 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747089847_enhanced.mp4
2025-05-13 00:44:42,476 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:44:42,477 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:44:42,478 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:44:42,478 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:44:42,478 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:44:42,479 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:44:42,479 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:44:42,480 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:44:42,480 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:44:42,480 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:44:42,480 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:44:42,482 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:44:43,483 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:44:43,535 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:44:51,349 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:44:51,351 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:44:55,429 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:44:55,445 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:44:55,446 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:44:55,619 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:44:55,621 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:44:55,623 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:44:55,624 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:44:55,624 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:44:59,334 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.7s)
2025-05-13 00:45:03,094 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:45:03,161 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:45:03,193 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:45:03,193 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:45:03,194 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:45:05,391 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747089882.mp4
2025-05-13 00:45:05,392 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:45:05,400 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747089882.wav
2025-05-13 00:45:05,908 - TikSimPro - ERROR - Erreur lors de l'ajout de la musique: 'AudioFileClip' object has no attribute 'volumax'
2025-05-13 00:45:05,911 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747089882_enhanced.mp4
2025-05-13 00:45:05,911 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747089882_enhanced.mp4
2025-05-13 00:46:45,030 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:46:45,031 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:46:45,031 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:46:45,031 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:46:45,032 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:46:45,032 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:46:45,032 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:46:45,032 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:46:45,033 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:46:45,033 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:46:45,033 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:46:45,034 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:46:46,088 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:46:46,157 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:46:52,960 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:46:52,964 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:46:56,680 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:46:56,695 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:46:56,695 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:46:56,801 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:46:56,802 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:46:56,803 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:46:56,803 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:46:56,803 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:47:00,187 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.4s)
2025-05-13 00:47:03,631 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:47:03,694 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:47:03,731 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:47:03,732 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:47:03,733 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:47:05,419 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747090005.mp4
2025-05-13 00:47:05,419 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:47:05,423 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747090005.wav
2025-05-13 00:47:05,715 - TikSimPro - ERROR - Erreur lors de l'ajout de la musique: 'VideoFileClip' object has no attribute 'set_audio'
2025-05-13 00:47:05,720 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747090005_enhanced.mp4
2025-05-13 00:47:05,720 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747090005_enhanced.mp4
2025-05-13 00:48:35,998 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:48:36,000 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:48:36,001 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:48:36,001 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:48:36,001 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:48:36,001 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:48:36,002 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:48:36,002 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:48:36,003 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:48:36,003 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:48:36,003 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:48:36,006 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:48:37,160 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:48:37,218 - TikTokAudioManager - INFO - Vidéo trouvée : The Kid LAROI, Justin Bieber - STAY (Official Video) (https://www.youtube.com/watch?v=kTJczUoc26U)
2025-05-13 00:48:43,876 - TikTokAudioManager - INFO - Musique téléchargée : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:48:43,887 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\The_Kid_LAROI,_Justin_Bieber_-_STAY_(Official_Video).mp3
2025-05-13 00:48:47,309 - TikTokAudioManager - INFO - Nombre de notes extraites : 14443
2025-05-13 00:48:47,325 - TikSimPro - INFO - Mélodie définie: 14443 notes
2025-05-13 00:48:47,325 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:48:47,497 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:48:47,499 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:48:47,500 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:48:47,501 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:48:47,501 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:48:50,789 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.3s)
2025-05-13 00:48:54,148 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:48:54,209 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:48:54,241 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:48:54,241 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:48:54,241 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:48:57,031 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747090116.mp4
2025-05-13 00:48:57,031 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:48:57,034 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_8_oct1.wav
2025-05-13 00:48:57,039 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747090116.wav
2025-05-13 00:48:57,376 - TikSimPro - ERROR - Erreur lors de l'ajout de la musique: 'VideoFileClip' object has no attribute 'set_audio'
2025-05-13 00:48:57,378 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747090116_enhanced.mp4
2025-05-13 00:48:57,379 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747090116_enhanced.mp4
2025-05-13 00:50:39,217 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:50:39,218 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:50:39,218 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:50:39,218 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:50:39,218 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:50:39,218 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:50:39,219 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:50:39,219 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:50:39,220 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:50:39,220 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:50:39,220 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:50:39,222 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:50:40,292 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:50:40,370 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:50:49,466 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:50:49,466 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:50:58,286 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:50:58,334 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:50:58,335 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:50:58,629 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:50:58,631 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:50:58,631 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:50:58,633 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:50:58,633 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:51:02,061 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.4s)
2025-05-13 00:51:05,597 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:51:05,648 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:51:05,682 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:51:05,683 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:51:05,685 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:51:09,151 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747090239.mp4
2025-05-13 00:51:09,151 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:51:09,157 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747090239.wav
2025-05-13 00:51:11,333 - TikSimPro - INFO - Musique ajoutée: videos\tiktok_viral_1747090239_enhanced.mp4
2025-05-13 00:51:11,334 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747090239_enhanced.mp4
2025-05-13 00:51:11,336 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747090239_enhanced.mp4
2025-05-13 00:52:05,110 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:52:05,111 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:52:05,111 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:52:05,111 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:52:05,111 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:52:05,113 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:52:05,113 - TikSimPro - INFO - Frames total a generer: 600
2025-05-13 00:52:05,113 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:52:05,113 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 10s
2025-05-13 00:52:05,114 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:52:05,114 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:52:05,115 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:52:06,120 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:52:06,179 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:52:16,616 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:52:16,619 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:52:26,022 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:52:26,063 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:52:26,065 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:52:26,392 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:52:26,394 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:52:26,394 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:52:26,396 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:52:26,397 - TikSimPro - INFO - Génération de 600 frames...
2025-05-13 00:52:29,902 - TikSimPro - INFO - Progression: 60/600 frames (10.0%, ETA: 31.5s)
2025-05-13 00:52:33,194 - TikSimPro - INFO - Progression: 120/600 frames (20.0%, ETA: 27.2s)
2025-05-13 00:52:36,560 - TikSimPro - INFO - Progression: 180/600 frames (30.0%, ETA: 23.7s)
2025-05-13 00:52:39,642 - TikSimPro - INFO - Progression: 240/600 frames (40.0%, ETA: 19.9s)
2025-05-13 00:52:42,747 - TikSimPro - INFO - Progression: 300/600 frames (50.0%, ETA: 16.4s)
2025-05-13 00:52:45,961 - TikSimPro - INFO - Progression: 360/600 frames (60.0%, ETA: 13.0s)
2025-05-13 00:52:49,097 - TikSimPro - INFO - Progression: 420/600 frames (70.0%, ETA: 9.7s)
2025-05-13 00:52:52,233 - TikSimPro - INFO - Progression: 480/600 frames (80.0%, ETA: 6.5s)
2025-05-13 00:52:55,663 - TikSimPro - INFO - Progression: 540/600 frames (90.0%, ETA: 3.3s)
2025-05-13 00:52:59,660 - TikSimPro - INFO - Progression: 599/600 frames (99.8%, ETA: 0.1s)
2025-05-13 00:52:59,719 - TikSimPro - INFO - Progression: 600/600 frames (100.0%, ETA: 0.0s)
2025-05-13 00:52:59,757 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:52:59,757 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:52:59,758 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:53:10,430 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747090325.mp4
2025-05-13 00:53:10,430 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:53:10,440 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 00:53:10,441 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 00:53:10,451 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 00:53:10,452 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 00:53:10,454 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 00:53:10,474 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747090325.wav
2025-05-13 00:53:18,735 - TikSimPro - INFO - Musique ajoutée: videos\tiktok_viral_1747090325_enhanced.mp4
2025-05-13 00:53:18,735 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747090325_enhanced.mp4
2025-05-13 00:53:18,736 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747090325_enhanced.mp4
2025-05-13 00:54:26,178 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:54:26,180 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:54:26,180 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:54:26,181 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:54:26,181 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:54:26,181 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:54:26,182 - TikSimPro - INFO - Frames total a generer: 600
2025-05-13 00:54:26,183 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:54:26,183 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 10s
2025-05-13 00:54:26,183 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:54:26,184 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:54:26,185 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:54:27,417 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:54:27,461 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:54:35,777 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:54:35,781 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:54:44,759 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:54:44,802 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:54:44,811 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:54:45,106 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:54:45,110 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:54:45,111 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:54:45,112 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:54:45,112 - TikSimPro - INFO - Génération de 600 frames...
2025-05-13 00:54:48,434 - TikSimPro - INFO - Progression: 60/600 frames (10.0%, ETA: 29.9s)
2025-05-13 00:54:52,150 - TikSimPro - INFO - Progression: 120/600 frames (20.0%, ETA: 28.1s)
2025-05-13 00:54:56,013 - TikSimPro - INFO - Progression: 180/600 frames (30.0%, ETA: 25.4s)
2025-05-13 00:54:59,338 - TikSimPro - INFO - Progression: 240/600 frames (40.0%, ETA: 21.3s)
2025-05-13 00:55:02,824 - TikSimPro - INFO - Progression: 300/600 frames (50.0%, ETA: 17.7s)
2025-05-13 00:55:06,148 - TikSimPro - INFO - Progression: 360/600 frames (60.0%, ETA: 14.0s)
2025-05-13 00:55:09,383 - TikSimPro - INFO - Progression: 420/600 frames (70.0%, ETA: 10.4s)
2025-05-13 00:55:12,692 - TikSimPro - INFO - Progression: 480/600 frames (80.0%, ETA: 6.9s)
2025-05-13 00:55:15,861 - TikSimPro - INFO - Progression: 540/600 frames (90.0%, ETA: 3.4s)
2025-05-13 00:55:19,438 - TikSimPro - INFO - Progression: 599/600 frames (99.8%, ETA: 0.1s)
2025-05-13 00:55:19,490 - TikSimPro - INFO - Progression: 600/600 frames (100.0%, ETA: 0.0s)
2025-05-13 00:55:19,691 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:55:19,692 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:55:19,694 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:55:30,418 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747090466.mp4
2025-05-13 00:55:30,419 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:55:30,428 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 00:55:30,429 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 00:55:30,431 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 00:55:30,431 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 00:55:30,452 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747090466.wav
2025-05-13 00:55:39,491 - TikSimPro - INFO - Musique ajoutée: videos\tiktok_viral_1747090466_enhanced.mp4
2025-05-13 00:55:39,492 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747090466_enhanced.mp4
2025-05-13 00:55:39,492 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747090466_enhanced.mp4
2025-05-13 00:56:19,968 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:56:19,969 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:56:19,969 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:56:19,969 - TikSimPro - INFO - Module de publication TikTok initialisé
2025-05-13 00:56:19,969 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:56:19,971 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:56:22,876 - TikSimPro - INFO - Frames total a generer: 120
2025-05-13 00:56:22,877 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:56:22,877 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 2s
2025-05-13 00:56:22,878 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:56:22,878 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:56:22,882 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:56:24,056 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:56:24,104 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:56:30,272 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:56:30,275 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:56:33,831 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:56:33,847 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:56:33,847 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:56:33,999 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:56:34,001 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:56:34,001 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:56:34,002 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:56:34,002 - TikSimPro - INFO - Génération de 120 frames...
2025-05-13 00:56:37,452 - TikSimPro - INFO - Progression: 60/120 frames (50.0%, ETA: 3.5s)
2025-05-13 00:56:41,062 - TikSimPro - INFO - Progression: 119/120 frames (99.2%, ETA: 0.1s)
2025-05-13 00:56:41,124 - TikSimPro - INFO - Progression: 120/120 frames (100.0%, ETA: 0.0s)
2025-05-13 00:56:41,166 - TikSimPro - INFO - Simulation terminée
2025-05-13 00:56:41,166 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 00:56:41,167 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 00:56:47,211 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747090582.mp4
2025-05-13 00:56:47,211 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 00:56:47,217 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747090582.wav
2025-05-13 00:56:57,285 - TikSimPro - INFO - Musique ajoutée: videos\tiktok_viral_1747090582_enhanced.mp4
2025-05-13 00:56:57,286 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747090582_enhanced.mp4
2025-05-13 00:56:57,286 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747090582_enhanced.mp4
2025-05-13 00:56:57,286 - TikSimPro - INFO - Récupération des hashtags tendance TikTok...
2025-05-13 00:56:57,287 - TikSimPro - ERROR - Erreur hashtags: 'TikTokApi' object has no attribute 'discover'
2025-05-13 00:56:57,299 - TikSimPro - INFO - Chargement des cookies...
2025-05-13 00:57:03,412 - TikSimPro - INFO - Session restaurée avec succès
2025-05-13 00:57:03,412 - TikSimPro - INFO - Publication de la vidéo sur TikTok...
2025-05-13 00:57:09,174 - TikSimPro - ERROR - Erreur lors de la publication: 'WebDriver' object has no attribute 'find_element_by_xpath'
2025-05-13 00:57:47,137 - TikSimPro - INFO - TikTok Scraper initialisé (v5.x TikTokApi)
2025-05-13 00:57:47,138 - TikSimPro - INFO - Polices trouvées: ['C:\\Windows\\Fonts\\arial.ttf', 'C:\\Windows\\Fonts\\Arial.ttf', 'C:\\Windows\\Fonts\\impact.ttf', 'C:\\Windows\\Fonts\\verdana.ttf', 'C:\\Windows\\Fonts\\comic.ttf']
2025-05-13 00:57:47,138 - TikSimPro - INFO - Module d'amélioration vidéo initialisé
2025-05-13 00:57:47,138 - WDM - INFO - ====== WebDriver manager ======
2025-05-13 00:57:48,372 - WDM - INFO - Get LATEST chromedriver version for google-chrome
2025-05-13 00:57:48,481 - WDM - INFO - Get LATEST chromedriver version for google-chrome
2025-05-13 00:57:48,571 - WDM - INFO - Get LATEST chromedriver version for google-chrome
2025-05-13 00:57:48,766 - WDM - INFO - WebDriver version 136.0.7103.92 selected
2025-05-13 00:57:48,781 - WDM - INFO - Modern chrome version https://storage.googleapis.com/chrome-for-testing-public/136.0.7103.92/win32/chromedriver-win32.zip
2025-05-13 00:57:48,781 - WDM - INFO - About to download new driver from https://storage.googleapis.com/chrome-for-testing-public/136.0.7103.92/win32/chromedriver-win32.zip
2025-05-13 00:57:48,881 - WDM - INFO - Driver downloading response is 200
2025-05-13 00:57:50,175 - WDM - INFO - Get LATEST chromedriver version for google-chrome
2025-05-13 00:57:50,376 - WDM - INFO - Driver has been saved in cache [C:\Users\nolan\.wdm\drivers\chromedriver\win64\136.0.7103.92]
2025-05-13 00:57:51,825 - TikSimPro - INFO - TikTok Automator initialisé
2025-05-13 00:57:51,826 - TikSimPro - INFO - Configuration mise à jour
2025-05-13 00:57:56,741 - TikSimPro - INFO - Frames total a generer: 3660
2025-05-13 00:57:56,742 - TikSimPro - INFO - Les frames seront enregistrées dans: C:\Users\nolan\Desktop\tiktok_test\temp\frames
2025-05-13 00:57:56,742 - TikSimPro - INFO - Simulation initialisée: 1080x1920, 60 FPS, 61s
2025-05-13 00:57:56,744 - TikSimPro - INFO - Palette de couleurs définie: ['#FF0050', '#00F2EA', '#FFFFFF', '#FE2C55']
2025-05-13 00:57:56,744 - TikSimPro - INFO - Fréquence des beats définie: 1.0s
2025-05-13 00:57:56,747 - TikTokAudioManager - INFO - Recherche sur YouTube : STAY
2025-05-13 00:57:57,669 - httpx - INFO - HTTP Request: POST https://www.youtube.com/youtubei/v1/search?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8 "HTTP/1.1 200 OK"
2025-05-13 00:57:57,712 - TikTokAudioManager - INFO - Vidéo trouvée : Rihanna - Stay (Lyrics) ft. Mikky Ekko (https://www.youtube.com/watch?v=_bXqoIzH0N8)
2025-05-13 00:58:03,685 - TikTokAudioManager - INFO - Musique téléchargée : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:58:03,686 - TikTokAudioManager - INFO - Extraction de la mélodie : downloads\Rihanna_-_Stay_(Lyrics)_ft._Mikky_Ekko.mp3
2025-05-13 00:58:06,698 - TikTokAudioManager - INFO - Nombre de notes extraites : 22251
2025-05-13 00:58:06,713 - TikSimPro - INFO - Mélodie définie: 22251 notes
2025-05-13 00:58:06,721 - TikSimPro - INFO - Démarrage de la simulation...
2025-05-13 00:58:06,925 - TikSimPro - INFO - Initialisation de la physique...
2025-05-13 00:58:06,927 - TikSimPro - INFO - Physique initialisée
2025-05-13 00:58:06,927 - TikSimPro - INFO - Génération des sons...
2025-05-13 00:58:06,927 - TikSimPro - INFO - Sons générés: 21 notes
2025-05-13 00:58:06,928 - TikSimPro - INFO - Génération de 3660 frames...
2025-05-13 00:58:10,030 - TikSimPro - INFO - Progression: 60/3660 frames (1.6%, ETA: 186.1s)
2025-05-13 00:58:13,115 - TikSimPro - INFO - Progression: 120/3660 frames (3.3%, ETA: 182.5s)
2025-05-13 00:58:16,526 - TikSimPro - INFO - Progression: 180/3660 frames (4.9%, ETA: 185.6s)
2025-05-13 00:58:19,889 - TikSimPro - INFO - Progression: 240/3660 frames (6.6%, ETA: 184.7s)
2025-05-13 00:58:23,525 - TikSimPro - INFO - Progression: 300/3660 frames (8.2%, ETA: 185.9s)
2025-05-13 00:58:26,942 - TikSimPro - INFO - Progression: 360/3660 frames (9.8%, ETA: 183.5s)
2025-05-13 00:58:29,793 - TikSimPro - INFO - Progression: 420/3660 frames (11.5%, ETA: 176.4s)
2025-05-13 00:58:32,764 - TikSimPro - INFO - Progression: 480/3660 frames (13.1%, ETA: 171.2s)
2025-05-13 00:58:35,705 - TikSimPro - INFO - Progression: 540/3660 frames (14.8%, ETA: 166.3s)
2025-05-13 00:58:38,795 - TikSimPro - INFO - Progression: 600/3660 frames (16.4%, ETA: 162.5s)
2025-05-13 00:58:42,074 - TikSimPro - INFO - Progression: 660/3660 frames (18.0%, ETA: 159.8s)
2025-05-13 00:58:45,182 - TikSimPro - INFO - Progression: 720/3660 frames (19.7%, ETA: 156.2s)
2025-05-13 00:58:48,312 - TikSimPro - INFO - Progression: 780/3660 frames (21.3%, ETA: 152.8s)
2025-05-13 00:58:51,685 - TikSimPro - INFO - Progression: 840/3660 frames (23.0%, ETA: 150.3s)
2025-05-13 00:58:54,847 - TikSimPro - INFO - Progression: 900/3660 frames (24.6%, ETA: 147.0s)
2025-05-13 00:58:58,006 - TikSimPro - INFO - Progression: 960/3660 frames (26.2%, ETA: 143.7s)
2025-05-13 00:59:01,155 - TikSimPro - INFO - Progression: 1020/3660 frames (27.9%, ETA: 140.4s)
2025-05-13 00:59:04,361 - TikSimPro - INFO - Progression: 1080/3660 frames (29.5%, ETA: 137.2s)
2025-05-13 00:59:07,516 - TikSimPro - INFO - Progression: 1140/3660 frames (31.1%, ETA: 133.9s)
2025-05-13 00:59:10,731 - TikSimPro - INFO - Progression: 1200/3660 frames (32.8%, ETA: 130.8s)
2025-05-13 00:59:14,074 - TikSimPro - INFO - Progression: 1260/3660 frames (34.4%, ETA: 127.9s)
2025-05-13 00:59:17,365 - TikSimPro - INFO - Progression: 1320/3660 frames (36.1%, ETA: 124.9s)
2025-05-13 00:59:20,592 - TikSimPro - INFO - Progression: 1380/3660 frames (37.7%, ETA: 121.7s)
2025-05-13 00:59:23,812 - TikSimPro - INFO - Progression: 1440/3660 frames (39.3%, ETA: 118.5s)
2025-05-13 00:59:27,067 - TikSimPro - INFO - Progression: 1500/3660 frames (41.0%, ETA: 115.4s)
2025-05-13 00:59:30,342 - TikSimPro - INFO - Progression: 1560/3660 frames (42.6%, ETA: 112.3s)
2025-05-13 00:59:33,739 - TikSimPro - INFO - Progression: 1620/3660 frames (44.3%, ETA: 109.3s)
2025-05-13 00:59:36,997 - TikSimPro - INFO - Progression: 1680/3660 frames (45.9%, ETA: 106.2s)
2025-05-13 00:59:40,194 - TikSimPro - INFO - Progression: 1740/3660 frames (47.5%, ETA: 102.9s)
2025-05-13 00:59:43,376 - TikSimPro - INFO - Progression: 1800/3660 frames (49.2%, ETA: 99.7s)
2025-05-13 00:59:46,556 - TikSimPro - INFO - Progression: 1860/3660 frames (50.8%, ETA: 96.4s)
2025-05-13 00:59:49,787 - TikSimPro - INFO - Progression: 1920/3660 frames (52.5%, ETA: 93.2s)
2025-05-13 00:59:53,117 - TikSimPro - INFO - Progression: 1980/3660 frames (54.1%, ETA: 90.1s)
2025-05-13 00:59:56,524 - TikSimPro - INFO - Progression: 2040/3660 frames (55.7%, ETA: 87.0s)
2025-05-13 00:59:59,733 - TikSimPro - INFO - Progression: 2100/3660 frames (57.4%, ETA: 83.8s)
2025-05-13 01:00:03,021 - TikSimPro - INFO - Progression: 2160/3660 frames (59.0%, ETA: 80.6s)
2025-05-13 01:00:06,264 - TikSimPro - INFO - Progression: 2220/3660 frames (60.7%, ETA: 77.4s)
2025-05-13 01:00:09,561 - TikSimPro - INFO - Progression: 2280/3660 frames (62.3%, ETA: 74.2s)
2025-05-13 01:00:12,840 - TikSimPro - INFO - Progression: 2340/3660 frames (63.9%, ETA: 71.0s)
2025-05-13 01:00:16,115 - TikSimPro - INFO - Progression: 2400/3660 frames (65.6%, ETA: 67.8s)
2025-05-13 01:00:19,487 - TikSimPro - INFO - Progression: 2460/3660 frames (67.2%, ETA: 64.7s)
2025-05-13 01:00:22,899 - TikSimPro - INFO - Progression: 2520/3660 frames (68.9%, ETA: 61.5s)
2025-05-13 01:00:26,204 - TikSimPro - INFO - Progression: 2580/3660 frames (70.5%, ETA: 58.3s)
2025-05-13 01:00:29,524 - TikSimPro - INFO - Progression: 2640/3660 frames (72.1%, ETA: 55.1s)
2025-05-13 01:00:32,840 - TikSimPro - INFO - Progression: 2700/3660 frames (73.8%, ETA: 51.9s)
2025-05-13 01:00:36,142 - TikSimPro - INFO - Progression: 2760/3660 frames (75.4%, ETA: 48.7s)
2025-05-13 01:00:39,522 - TikSimPro - INFO - Progression: 2820/3660 frames (77.0%, ETA: 45.5s)
2025-05-13 01:00:42,951 - TikSimPro - INFO - Progression: 2880/3660 frames (78.7%, ETA: 42.3s)
2025-05-13 01:00:46,376 - TikSimPro - INFO - Progression: 2940/3660 frames (80.3%, ETA: 39.0s)
2025-05-13 01:00:49,850 - TikSimPro - INFO - Progression: 3000/3660 frames (82.0%, ETA: 35.8s)
2025-05-13 01:00:53,279 - TikSimPro - INFO - Progression: 3060/3660 frames (83.6%, ETA: 32.6s)
2025-05-13 01:00:56,777 - TikSimPro - INFO - Progression: 3120/3660 frames (85.2%, ETA: 29.4s)
2025-05-13 01:01:00,266 - TikSimPro - INFO - Progression: 3180/3660 frames (86.9%, ETA: 26.2s)
2025-05-13 01:01:03,868 - TikSimPro - INFO - Progression: 3240/3660 frames (88.5%, ETA: 22.9s)
2025-05-13 01:01:07,224 - TikSimPro - INFO - Progression: 3300/3660 frames (90.2%, ETA: 19.7s)
2025-05-13 01:01:10,798 - TikSimPro - INFO - Progression: 3360/3660 frames (91.8%, ETA: 16.4s)
2025-05-13 01:01:14,214 - TikSimPro - INFO - Progression: 3420/3660 frames (93.4%, ETA: 13.1s)
2025-05-13 01:01:17,633 - TikSimPro - INFO - Progression: 3480/3660 frames (95.1%, ETA: 9.9s)
2025-05-13 01:01:21,019 - TikSimPro - INFO - Progression: 3540/3660 frames (96.7%, ETA: 6.6s)
2025-05-13 01:01:24,691 - TikSimPro - INFO - Progression: 3600/3660 frames (98.4%, ETA: 3.3s)
2025-05-13 01:01:28,325 - TikSimPro - INFO - Progression: 3659/3660 frames (100.0%, ETA: 0.1s)
2025-05-13 01:01:28,385 - TikSimPro - INFO - Progression: 3660/3660 frames (100.0%, ETA: 0.0s)
2025-05-13 01:01:28,424 - TikSimPro - INFO - Simulation terminée
2025-05-13 01:01:28,425 - TikSimPro - INFO - Génération de la vidéo finale...
2025-05-13 01:01:28,426 - TikSimPro - ERROR - Erreur lors de la génération de la vidéo: [WinError 3] Le chemin daccès spécifié est introuvable: 'C:\\Users\\nolan\\Desktop\\tiktok_test\\temp\\frames/frame_%06d.png'
2025-05-13 01:02:19,190 - TikSimPro - INFO - Vidéo créée avec succès (méthode alternative): videos\tiktok_viral_1747090676.mp4
2025-05-13 01:02:19,191 - TikSimPro - INFO - Génération de la piste audio à partir des événements...
2025-05-13 01:02:19,194 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 01:02:19,194 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_8_oct1.wav
2025-05-13 01:02:19,194 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 01:02:19,196 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 01:02:19,221 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 01:02:19,221 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_8_oct1.wav
2025-05-13 01:02:19,232 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 01:02:19,251 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_9_oct1.wav
2025-05-13 01:02:19,252 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 01:02:19,252 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_8_oct1.wav
2025-05-13 01:02:19,252 - TikSimPro - WARNING - Fichier sonore introuvable: C:\Users\nolan\Desktop\tiktok_test\temp\sounds\note_7_oct1.wav
2025-05-13 01:02:19,378 - TikSimPro - INFO - Piste audio générée avec succès: videos/tiktok_audio_1747090676.wav
2025-05-13 01:03:03,287 - TikSimPro - INFO - Musique ajoutée: videos\tiktok_viral_1747090676_enhanced.mp4
2025-05-13 01:03:03,287 - TikSimPro - INFO - Vidéo améliorée: videos\tiktok_viral_1747090676_enhanced.mp4
2025-05-13 01:03:03,287 - TikSimPro - INFO - Vidéo générée avec succès: videos\tiktok_viral_1747090676_enhanced.mp4
2025-05-13 01:03:03,288 - TikSimPro - INFO - Récupération des hashtags tendance TikTok...
2025-05-13 01:03:03,288 - TikSimPro - ERROR - Erreur hashtags: 'TikTokApi' object has no attribute 'discover'
